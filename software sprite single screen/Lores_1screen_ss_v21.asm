*= $1000 

  
; get sprite no from table
; get sprite table lohi from table
; get x
; get

; ldx andhi
; ldy andlo

; get xpos (0-127)
; get xpos char (0-31)
; subtract xpos-char from andlo
; if carry dec andhi

; background screen 192*320 - done
; buffer screen 192*320 - needed

; get sprite
; get size
; get position
; copy background to buffer - new
; draw sprites into buffer if overlap - new
; copy buffer to screen - new


; to draw moving sprite
; - 1 copy background to temp background (33*40 - straight copy)
; - 2 draw sprite and/or to temp bckground (32*40)
; - 3 draw temp background to (straight copy)

; next 
; - setup background (32*192) temp buffer - done
; - build background table
; - test - create background
; - copy background to screen - using 1 + 3

; copy background to temp buffer 
;- pass in x and y
; - dec x
; - calc x background address
; - calc y byte
; - copy 5 bytes from x+0 to x+33 to temp inner buffer

; copy temp buffer to screen
; - pass in x and y
; - dec x
; - calc x screen address
; - calc y byte
; - copy 5 bytes from from temp inner buffer to x+0 to x+33

; lda (
; sta (4) or sta (4) / sta (4)


; sprite
; - get temp buffer ,x
; - and $abcd      ,y (4) / and (scn1),y (5)
; - or $abcd      ,y  (4) / or (scn2),y (5)
; - put temp buffer,x
; iny

; across
;  7 across
;  1 across visible to clear previous frame
;  7 across visible
;  15 total across
; down
;  7 chars down *8 = 56 = same line =1
;  1 line down to clear previous frame
;  7 chars down *8 = 56
;  1 line spare at end
;  59 total down
; total bytes = 15 * 59 = 798

SCR = 2
REGA = SCR +2
REGX = REGA +1
REGY = REGX +1

TV = REGY +1
TH = TV +1

SPR_AND = TH +1
SPR_ORA = SPR_AND +2

AND_LO_LO = SPR_ORA +2
AND_LO_HI = AND_LO_LO +1
AND_HI_LO = AND_LO_HI +1
AND_HI_HI = AND_HI_LO +1
ORA_LO_LO = AND_HI_HI +1
ORA_LO_HI = ORA_LO_LO +1
ORA_HI_LO = ORA_LO_HI +1
ORA_HI_HI = ORA_HI_LO +1

SPR_CNT = SCR

 SEI        ; disable maskable IRQs

 LDA #$7F
 STA $DC0D  ; disable timer interrupts which can be generated by the two CIA chips
 STA $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

 LDA $DC0D  ; by reading this two registers we negate any pending CIA irqs.
 LDA $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

 LDA #$01   ; this is how to tell the VICII to generate a raster interrupt
 STA $D01A
 LDA #$FB   ; this is how to tell at which rasterline we want the irq to be triggered
 STA $D012

 LDA #%00110000 ; 00111011 ; 76543210 - 7=MSBRST 6=ECM 5=BM 4=VIS 3=25/24 0-2=SCRL
 STA $D011    ;VIC Control Register 1

 LDA #%00011000 ; 0-2=SCRL 3=40/38 4=MCM 5-7=UNUSED
 STA $D016    ;VIC Control Register 2

 LDA #$35   ; we turn off the BASIC and KERNAL rom here
 STA $01    ; the cpu now sees RAM everywhere except at $d000-$e000, where still the registers of SID/VICII/etc are visible

 ldA #<BM_IRQ  ; this is how we set up
 STA $FFFE     ; the address of our interrupt code
 LDA #>BM_IRQ
 STA $FFFF
  
 LDA #<NMI_NOP ; lsb
 STA $FFFA ; Create a nop, irq handler for NMI that gets called whenever RESTORE is pressed or similar.
 LDA #>NMI_NOP ; msb
 STA $FFFB ; We're putting our irq handler directly in the vector that usually points to the kernal's NMI handler since we have kernal banked out.

 LDA #$00  ; Force an NMI by setting up a timer. This will cause an NMI, that won't be acked. Any subsequent NMI's from RESTORE will be essentially disabled.
 STA $DD0E       ; Stop timer A
 STA $DD04       ; Set timer A to 0, NMI will occure immediately after start
 STA $DD0E

 LDA #$81
 STA $DD0D       ; Set timer A as source for NMI

 LDA #$01
 STA $DD0E       ; Start timer A -> NMI

 LDA #$02
 STA $DD00 ; bank
    
 LDA #$80
 STA $D018    ;VIC Memory Control Register - screen at bank 0 - colour at bank 8

 LDA #$00
 STA $D021

 LDA #$01 ; colour 01 (0000????) and colour 10 (????0000) - bank 1
 LDX #<$4000
 LDY #>$4000 
 STX SCR+0
 STY SCR+1
 LDX #>8000 
 LDY #<8000
 JSR MEMSET

 LDA #$01 ; $01 ; colour 11 
 LDX #<$D800
 LDY #>$D800
 STX SCR+0
 STY SCR+1
 LDX #>1000 
 LDY #<1000
 JSR MEMSET

 LDA #$BC ; colour 01 (0000????) and colour 10 (????0000) - bank 1
 LDX #<($4000+$2000)
 LDY #>($4000+$2000) 
 STX SCR+0
 STY SCR+1
 LDX #>1000 
 LDY #<1000
 JSR MEMSET
 
 JSR SB_FILL
 
;CLI ; enable maskable interrupts again

 LDA #32
 STA TH
 STA TV

MLOOP:
 JSR V_WAIT
 JSR JOYSTICK

 LDX TH
 LDA TV
 LDY #3
 JSR BAKB_TMPB
 
 LDX #40
 LDa #40
 LDy #0
 JSR SPRN_TMPB

 LDX TH
 LDa TV
 LDy #3
 JSR SPRN_TMPB

 LDX TH
 LDA TV
 LDY #3
 JSR TMPB_SCNB

JMP MLOOP ; we better don't RTS, the ROMS are now switched off, there's no way back to the system

FIRE !BYTE 0

!ZONE JOYSTICK
JOYSTICK: LDA $DC00
          LSR
          BCS   .UP
            DEC   TV
.UP       LSR
          BCS   .DOWN
            INC   TV
.DOWN     LSR
          BCS   .LEFT
            DEC   TH
.LEFT     LSR
          BCS   .RIGHT
            INC   TH
.RIGHT    AND   #1
          STA   FIRE
          RTS

!ZONE V_WAIT
V_WAIT  LDA   #248
.LOOP     CMP   $D012
          BNE   .LOOP
        INC   $D020
        DEC   $D020
        RTS

BM_IRQ:   INC   $D019    ;VIC Interrupt Request Register (IRR)
          PHA
          TXA 
          PHA
          TYA 
          PHA 

          PLA 
          TAY
          PLA 
          TAX
          PLA
NMI_NOP:  RTI ; This is the irq handler for the NMI. Just returns without acknowledge. This prevents subsequent NMI's from interfering.

!ZONE SB_FILL
SB_FILL:  LDX   #31
.LOOP_H   LDY   #24
.LOOP_V       JSR   CHAR_SB_2
              DEY
              BPL   .LOOP_V
            DEX
            BPL   .LOOP_H
          RTS 
  
CHAR_SB_2 STY   REGY
          TYA
          ASL ; *2
          ASL ; *4
          ASL ; *8
          TAY
          LDA   SC_LO,Y
          STA   SCR 
          LDA   SB_HI,Y 
          STA   SCR+1 
          STX   REGX
          TXA
          ASL ; *2
          ASL ; *4
          ASL ; *8
          TAY
          LDA   REGY
          CLC
          ADC   REGX
          AND   #15
          TAX
          LDA   PATTERN,X
          LDX   #8
.LOOP:      STA   (SCR),Y
            INY
            DEX
            BNE   .LOOP
          LDX   REGX
          LDY   REGY
          RTS 

!ZONE MEMSET        
MEMSET       STY    .LSB_ONLY+1 ; store LSB count
             CPX    #0          ; MSB?     
             BEQ    .LSB_ONLY   ; no

             LDY    #0          ; yes so reset LSB
.MSB_LOOP  
.LSB_LOOP      STA    (SCR),Y   ; clear whole MSB
               DEY 
               BNE    .LSB_LOOP

              INC    SCR+1      ; inc MSB
              DEX               ; dec MSB count
              BNE    .MSB_LOOP

.LSB_ONLY    LDY    #0          ; LSB count 
             BEQ    .MS_END     ; not needed

.LAST_LSB_LOOP STA   (SCR),Y
               DEY 
               BNE   .LAST_LSB_LOOP
                
              STA   (SCR),Y     ; clear last Y (0)
 
.MS_END      RTS

!MACRO BUF_TMP SRC, DST, VAL { ; buffer to temp
 LDA  SC_LO+VAL,Y
 STA  SRC+1
 STA  DST+1
 LDA  SB_HI+VAL,Y 
 STA  SRC+2
 LDA  TB_HI+VAL,Y 
 STA  DST+2
}

!MACRO TMP_SCR SRC, DST, VAL { ; temp to screen
 LDA  SC_LO+VAL,Y
 STA  SRC+1
 STA  DST+1
 LDA  TB_HI+VAL,Y 
 STA  SRC+2
 LDA  SC_HI+VAL,Y 
 STA  DST+2
}

!MACRO SPR_TMP SRC, DST, VAL {  ; sprite to temp
 LDA  SC_LO+VAL,Y
 STA  SRC+1
 STA  DST+1
 LDA  TB_HI+VAL,Y 
 STA  SRC+2
 STA  DST+2
}
!MACRO INCXY {
 INX
 BNE .CONT
  INY
.CONT
}

!ZONE SPRN_TMPB ; copy sprite to temp buffer
SPRN_TMPB
  STX REGX ; H
  STA REGY ; V

  LDA   SPRITE_AND_LO_LO,Y
  STA   .AND_LO+1
  LDA   SPRITE_AND_LO_HI,Y
  STA   .AND_LO+2
  LDA   SPRITE_AND_HI_LO,Y
  STA   .AND_HI+1
  LDA   SPRITE_AND_HI_HI,Y
  STA   .AND_HI+2
  
  LDA   SPRITE_ORA_LO_LO,Y
  STA   .ORA_LO+1
  LDA   SPRITE_ORA_LO_HI,Y
  STA   .ORA_LO+2
  LDA   SPRITE_ORA_HI_LO,Y
  STA   .ORA_HI+1
  LDA   SPRITE_ORA_HI_HI,Y
  STA   .ORA_HI+2

  TXA
  AND     #3
  TAX

.AND_LO         LDa    $ABCD,X
                STa    SPR_AND
.AND_HI         LDa    $ABCD,X
                STa    SPR_AND +1
.ORA_LO         LDa    $ABCD,X
                STa    SPR_ORA
.ORA_HI         LDa    $ABCD,X
                STa    SPR_ORA +1
  
  LDx   SPRITE_TYPE,Y
 
  lda   SPRITE_SPR_TMP_LO,x
  sta   .SPRN_TMPB+1
  lda   SPRITE_SPR_TMP_HI,x
  sta   .SPRN_TMPB+2
  LDA   SPRITE_SPR_TMP_SIZE,x
 
  LDX REGX
  LDY REGY

.SPRN_TMPB  JMP $ABCD


!ZONE SPRN_TMPB_08 ; copy sprite to temp buffer
SPRN_TMPB_08
 DEC $D020
 
 STA SPR_CNT

 STX REGX
 STY REGY

 LDX SPR_AND
 LDY SPR_AND +1
 STX .SPA01 +1
 STY .SPA01 +2
 +INCXY 
 STX .SPA02 +1
 STY .SPA02 +2
 +INCXY 
 STX .SPA03 +1
 STY .SPA03 +2
 +INCXY 
 STX .SPA04 +1
 STY .SPA04 +2
 +INCXY 
 STX .SPA05 +1
 STY .SPA05 +2
 +INCXY 
 STX .SPA06 +1
 STY .SPA06 +2
 +INCXY 
 STX .SPA07 +1
 STY .SPA07 +2
 +INCXY 
 STX .SPA08 +1
 STY .SPA08 +2

 LDX SPR_ORA
 LDY SPR_ORA +1
 STX .SPO01 +1
 STY .SPO01 +2
 +INCXY 
 STX .SPO02 +1
 STY .SPO02 +2
 +INCXY 
 STX .SPO03 +1
 STY .SPO03 +2
 +INCXY 
 STX .SPO04 +1
 STY .SPO04 +2
 +INCXY 
 STX .SPO05 +1
 STY .SPO05 +2
 +INCXY 
 STX .SPO06 +1
 STY .SPO06 +2
 +INCXY 
 STX .SPO07 +1
 STY .SPO07 +2
 +INCXY 
 STX .SPO08 +1
 STY .SPO08 +2
 
 LDX REGX
 LDY REGY

  +SPR_TMP .SRC08, .DST08, 7
  +SPR_TMP .SRC07, .DST07, 6
  +SPR_TMP .SRC06, .DST06, 5
  +SPR_TMP .SRC05, .DST05, 4
  +SPR_TMP .SRC04, .DST04, 3
  +SPR_TMP .SRC03, .DST03, 2
  +SPR_TMP .SRC02, .DST02, 1
  +SPR_TMP .SRC01, .DST01, 0
  
 LDY SCR_TAB3,X
 LDX SPR_CNT ; 24 16 8 0 (needs to be colums*rows)
 SEC

.LOOP
.SRC01 LDA $ABCD,Y
.SPA01 AND $ABCD,X
.SPO01 ORA $ABCD,X
.DST01 STA $ABCD,Y

.SRC02 LDA $ABCD,Y
.SPA02 AND $ABCD,X
.SPO02 ORA $ABCD,X
.DST02 STA $ABCD,Y
     
.SRC03 LDA $ABCD,Y
.SPA03 AND $ABCD,X
.SPO03 ORA $ABCD,X
.DST03 STA $ABCD,Y

.SRC04 LDA $ABCD,Y
.SPA04 AND $ABCD,X
.SPO04 ORA $ABCD,X
.DST04 STA $ABCD,Y

.SRC05 LDA $ABCD,Y
.SPA05 AND $ABCD,X
.SPO05 ORA $ABCD,X
.DST05 STA $ABCD,Y

.SRC06 LDA $ABCD,Y
.SPA06 AND $ABCD,X
.SPO06 ORA $ABCD,X
.DST06 STA $ABCD,Y

.SRC07 LDA $ABCD,Y
.SPA07 AND $ABCD,X
.SPO07 ORA $ABCD,X
.DST07 STA $ABCD,Y

.SRC08 LDA $ABCD,Y
.SPA08 AND $ABCD,X
.SPO08 ORA $ABCD,X
.DST08 STA $ABCD,Y

  TYA
  ADC #8-1 ; carry set
  TAY

  TXA
  SBC #8-1 ; carry clear
  TAX

  BNE .LOOP

 INC $D020

RTS

!ZONE SPRN_TMPB_16 ; copy sprite to temp buffer
SPRN_TMPB_16
 DEC $D020
 
 STA SPR_CNT

 STX REGX
 STY REGY

 LDX SPR_AND
 LDY SPR_AND +1
 STX .SPA01 +1
 STY .SPA01 +2
 +INCXY 
 STX .SPA02 +1
 STY .SPA02 +2
 +INCXY 
 STX .SPA03 +1
 STY .SPA03 +2
 +INCXY 
 STX .SPA04 +1
 STY .SPA04 +2
 +INCXY 
 STX .SPA05 +1
 STY .SPA05 +2
 +INCXY 
 STX .SPA06 +1
 STY .SPA06 +2
 +INCXY 
 STX .SPA07 +1
 STY .SPA07 +2
 +INCXY 
 STX .SPA08 +1
 STY .SPA08 +2
 +INCXY 
 STX .SPA09 +1
 STY .SPA09 +2
  +INCXY 
 STX .SPA10 +1
 STY .SPA10 +2
  +INCXY 
 STX .SPA11 +1
 STY .SPA11 +2
  +INCXY 
 STX .SPA12 +1
 STY .SPA12 +2
  +INCXY 
 STX .SPA13 +1
 STY .SPA13 +2
  +INCXY 
 STX .SPA14 +1
 STY .SPA14 +2
  +INCXY 
 STX .SPA15 +1
 STY .SPA15 +2
  +INCXY 
 STX .SPA16 +1
 STY .SPA16 +2

 LDX SPR_ORA
 LDY SPR_ORA +1
 STX .SPO01 +1
 STY .SPO01 +2
 +INCXY 
 STX .SPO02 +1
 STY .SPO02 +2
 +INCXY 
 STX .SPO03 +1
 STY .SPO03 +2
 +INCXY 
 STX .SPO04 +1
 STY .SPO04 +2
 +INCXY 
 STX .SPO05 +1
 STY .SPO05 +2
 +INCXY 
 STX .SPO06 +1
 STY .SPO06 +2
 +INCXY 
 STX .SPO07 +1
 STY .SPO07 +2
 +INCXY 
 STX .SPO08 +1
 STY .SPO08 +2
 +INCXY 
 STX .SPO09 +1
 STY .SPO09 +2
 +INCXY
 STX .SPO10 +1
 STY .SPO10 +2
 +INCXY 
 STX .SPO11 +1
 STY .SPO11 +2
 +INCXY 
 STX .SPO12 +1
 STY .SPO12 +2
 +INCXY 
 STX .SPO13 +1
 STY .SPO13 +2
 +INCXY 
 STX .SPO14 +1
 STY .SPO14 +2
 +INCXY 
 STX .SPO15 +1
 STY .SPO15 +2
 +INCXY 
 STX .SPO16 +1
 STY .SPO16 +2

 LDX REGX
 LDY REGY

  +SPR_TMP .SRC16, .DST16, 15
  +SPR_TMP .SRC15, .DST15, 14
  +SPR_TMP .SRC14, .DST14, 13
  +SPR_TMP .SRC13, .DST13, 12
  +SPR_TMP .SRC12, .DST12, 11
  +SPR_TMP .SRC11, .DST11, 10
  +SPR_TMP .SRC10, .DST10, 9
  +SPR_TMP .SRC09, .DST09, 8

  +SPR_TMP .SRC08, .DST08, 7
  +SPR_TMP .SRC07, .DST07, 6
  +SPR_TMP .SRC06, .DST06, 5
  +SPR_TMP .SRC05, .DST05, 4
  +SPR_TMP .SRC04, .DST04, 3
  +SPR_TMP .SRC03, .DST03, 2
  +SPR_TMP .SRC02, .DST02, 1
  +SPR_TMP .SRC01, .DST01, 0
  
 LDY SCR_TAB3,X
 LDX SPR_CNT ; 24 16 8 0 (needs to be colums*rows)
 SEC

.LOOP
.SRC01 LDA $ABCD,Y
.SPA01 AND $ABCD,X
.SPO01 ORA $ABCD,X
.DST01 STA $ABCD,Y

.SRC02 LDA $ABCD,Y
.SPA02 AND $ABCD,X
.SPO02 ORA $ABCD,X
.DST02 STA $ABCD,Y
     
.SRC03 LDA $ABCD,Y
.SPA03 AND $ABCD,X
.SPO03 ORA $ABCD,X
.DST03 STA $ABCD,Y

.SRC04 LDA $ABCD,Y
.SPA04 AND $ABCD,X
.SPO04 ORA $ABCD,X
.DST04 STA $ABCD,Y

.SRC05 LDA $ABCD,Y
.SPA05 AND $ABCD,X
.SPO05 ORA $ABCD,X
.DST05 STA $ABCD,Y

.SRC06 LDA $ABCD,Y
.SPA06 AND $ABCD,X
.SPO06 ORA $ABCD,X
.DST06 STA $ABCD,Y

.SRC07 LDA $ABCD,Y
.SPA07 AND $ABCD,X
.SPO07 ORA $ABCD,X
.DST07 STA $ABCD,Y

.SRC08 LDA $ABCD,Y
.SPA08 AND $ABCD,X
.SPO08 ORA $ABCD,X
.DST08 STA $ABCD,Y

.SRC09 LDA $ABCD,Y
.SPA09 AND $ABCD,X
.SPO09 ORA $ABCD,X
.DST09 STA $ABCD,Y

.SRC10 LDA $ABCD,Y
.SPA10 AND $ABCD,X
.SPO10 ORA $ABCD,X
.DST10 STA $ABCD,Y

.SRC11 LDA $ABCD,Y
.SPA11 AND $ABCD,X
.SPO11 ORA $ABCD,X
.DST11 STA $ABCD,Y

.SRC12 LDA $ABCD,Y
.SPA12 AND $ABCD,X
.SPO12 ORA $ABCD,X
.DST12 STA $ABCD,Y

.SRC13 LDA $ABCD,Y
.SPA13 AND $ABCD,X
.SPO13 ORA $ABCD,X
.DST13 STA $ABCD,Y

.SRC14 LDA $ABCD,Y
.SPA14 AND $ABCD,X
.SPO14 ORA $ABCD,X
.DST14 STA $ABCD,Y

.SRC15 LDA $ABCD,Y
.SPA15 AND $ABCD,X
.SPO15 ORA $ABCD,X
.DST15 STA $ABCD,Y

.SRC16 LDA $ABCD,Y
.SPA16 AND $ABCD,X
.SPO16 ORA $ABCD,X
.DST16 STA $ABCD,Y

  TYA
  ADC #8-1 ; carry set
  TAY

  TXA
  SBC #16-1 ; carry clear
  TAX

  BEQ .EXIT
  JMP .LOOP

.EXIT  
 INC $D020

RTS

!ZONE SPRN_TMPB_24 ; copy sprite to temp buffer
SPRN_TMPB_24
 DEC $D020
 
 STA SPR_CNT

 STX REGX
 STY REGY

 LDX SPR_AND
 LDY SPR_AND +1
 STX .SPA01 +1
 STY .SPA01 +2
 +INCXY 
 STX .SPA02 +1
 STY .SPA02 +2
 +INCXY 
 STX .SPA03 +1
 STY .SPA03 +2
 +INCXY 
 STX .SPA04 +1
 STY .SPA04 +2
 +INCXY 
 STX .SPA05 +1
 STY .SPA05 +2
 +INCXY 
 STX .SPA06 +1
 STY .SPA06 +2
 +INCXY 
 STX .SPA07 +1
 STY .SPA07 +2
 +INCXY 
 STX .SPA08 +1
 STY .SPA08 +2
 +INCXY 
 STX .SPA09 +1
 STY .SPA09 +2
  +INCXY 
 STX .SPA10 +1
 STY .SPA10 +2
  +INCXY 
 STX .SPA11 +1
 STY .SPA11 +2
  +INCXY 
 STX .SPA12 +1
 STY .SPA12 +2
  +INCXY 
 STX .SPA13 +1
 STY .SPA13 +2
  +INCXY 
 STX .SPA14 +1
 STY .SPA14 +2
  +INCXY 
 STX .SPA15 +1
 STY .SPA15 +2
  +INCXY 
 STX .SPA16 +1
 STY .SPA16 +2
  +INCXY 
 STX .SPA17 +1
 STY .SPA17 +2
  +INCXY 
 STX .SPA18 +1
 STY .SPA18 +2
  +INCXY 
 STX .SPA19 +1
 STY .SPA19 +2
  +INCXY 
 STX .SPA20 +1
 STY .SPA20 +2
  +INCXY 
 STX .SPA21 +1
 STY .SPA21 +2
  +INCXY 
 STX .SPA22 +1
 STY .SPA22 +2
  +INCXY 
 STX .SPA23 +1
 STY .SPA23 +2
  +INCXY 
 STX .SPA24 +1
 STY .SPA24 +2
 
 LDX SPR_ORA
 LDY SPR_ORA +1
 STX .SPO01 +1
 STY .SPO01 +2
 +INCXY 
 STX .SPO02 +1
 STY .SPO02 +2
 +INCXY 
 STX .SPO03 +1
 STY .SPO03 +2
 +INCXY 
 STX .SPO04 +1
 STY .SPO04 +2
 +INCXY 
 STX .SPO05 +1
 STY .SPO05 +2
 +INCXY 
 STX .SPO06 +1
 STY .SPO06 +2
 +INCXY 
 STX .SPO07 +1
 STY .SPO07 +2
 +INCXY 
 STX .SPO08 +1
 STY .SPO08 +2
 +INCXY 
 STX .SPO09 +1
 STY .SPO09 +2
 +INCXY
 STX .SPO10 +1
 STY .SPO10 +2
 +INCXY 
 STX .SPO11 +1
 STY .SPO11 +2
 +INCXY 
 STX .SPO12 +1
 STY .SPO12 +2
 +INCXY 
 STX .SPO13 +1
 STY .SPO13 +2
 +INCXY 
 STX .SPO14 +1
 STY .SPO14 +2
 +INCXY 
 STX .SPO15 +1
 STY .SPO15 +2
 +INCXY 
 STX .SPO16 +1
 STY .SPO16 +2
 +INCXY 
 STX .SPO17 +1
 STY .SPO17 +2
 +INCXY 
 STX .SPO18 +1
 STY .SPO18 +2
 +INCXY 
 STX .SPO19 +1
 STY .SPO19 +2
 +INCXY 
 STX .SPO20 +1
 STY .SPO20 +2
 +INCXY 
 STX .SPO21 +1
 STY .SPO21 +2
 +INCXY 
 STX .SPO22 +1
 STY .SPO22 +2
 +INCXY 
 STX .SPO23 +1
 STY .SPO23 +2
 +INCXY 
 STX .SPO24 +1
 STY .SPO24 +2

 LDX REGX
 LDY REGY

  +SPR_TMP .SRC24, .DST24, 23
  +SPR_TMP .SRC23, .DST23, 22
  +SPR_TMP .SRC22, .DST22, 21
  +SPR_TMP .SRC21, .DST21, 20
  +SPR_TMP .SRC20, .DST20, 19
  +SPR_TMP .SRC19, .DST19, 18
  +SPR_TMP .SRC18, .DST18, 17
  +SPR_TMP .SRC17, .DST17, 16

  +SPR_TMP .SRC16, .DST16, 15
  +SPR_TMP .SRC15, .DST15, 14
  +SPR_TMP .SRC14, .DST14, 13
  +SPR_TMP .SRC13, .DST13, 12
  +SPR_TMP .SRC12, .DST12, 11
  +SPR_TMP .SRC11, .DST11, 10
  +SPR_TMP .SRC10, .DST10, 9
  +SPR_TMP .SRC09, .DST09, 8

  +SPR_TMP .SRC08, .DST08, 7
  +SPR_TMP .SRC07, .DST07, 6
  +SPR_TMP .SRC06, .DST06, 5
  +SPR_TMP .SRC05, .DST05, 4
  +SPR_TMP .SRC04, .DST04, 3
  +SPR_TMP .SRC03, .DST03, 2
  +SPR_TMP .SRC02, .DST02, 1
  +SPR_TMP .SRC01, .DST01, 0
  
 LDY SCR_TAB3,X
 LDX SPR_CNT ; 24 16 8 0 (needs to be colums*rows)
 SEC

.LOOP
.SRC01 LDA $ABCD,Y
.SPA01 AND $ABCD,X
.SPO01 ORA $ABCD,X
.DST01 STA $ABCD,Y

.SRC02 LDA $ABCD,Y
.SPA02 AND $ABCD,X
.SPO02 ORA $ABCD,X
.DST02 STA $ABCD,Y
     
.SRC03 LDA $ABCD,Y
.SPA03 AND $ABCD,X
.SPO03 ORA $ABCD,X
.DST03 STA $ABCD,Y

.SRC04 LDA $ABCD,Y
.SPA04 AND $ABCD,X
.SPO04 ORA $ABCD,X
.DST04 STA $ABCD,Y

.SRC05 LDA $ABCD,Y
.SPA05 AND $ABCD,X
.SPO05 ORA $ABCD,X
.DST05 STA $ABCD,Y

.SRC06 LDA $ABCD,Y
.SPA06 AND $ABCD,X
.SPO06 ORA $ABCD,X
.DST06 STA $ABCD,Y

.SRC07 LDA $ABCD,Y
.SPA07 AND $ABCD,X
.SPO07 ORA $ABCD,X
.DST07 STA $ABCD,Y

.SRC08 LDA $ABCD,Y
.SPA08 AND $ABCD,X
.SPO08 ORA $ABCD,X
.DST08 STA $ABCD,Y

.SRC09 LDA $ABCD,Y
.SPA09 AND $ABCD,X
.SPO09 ORA $ABCD,X
.DST09 STA $ABCD,Y

.SRC10 LDA $ABCD,Y
.SPA10 AND $ABCD,X
.SPO10 ORA $ABCD,X
.DST10 STA $ABCD,Y

.SRC11 LDA $ABCD,Y
.SPA11 AND $ABCD,X
.SPO11 ORA $ABCD,X
.DST11 STA $ABCD,Y

.SRC12 LDA $ABCD,Y
.SPA12 AND $ABCD,X
.SPO12 ORA $ABCD,X
.DST12 STA $ABCD,Y

.SRC13 LDA $ABCD,Y
.SPA13 AND $ABCD,X
.SPO13 ORA $ABCD,X
.DST13 STA $ABCD,Y

.SRC14 LDA $ABCD,Y
.SPA14 AND $ABCD,X
.SPO14 ORA $ABCD,X
.DST14 STA $ABCD,Y

.SRC15 LDA $ABCD,Y
.SPA15 AND $ABCD,X
.SPO15 ORA $ABCD,X
.DST15 STA $ABCD,Y

.SRC16 LDA $ABCD,Y
.SPA16 AND $ABCD,X
.SPO16 ORA $ABCD,X
.DST16 STA $ABCD,Y

.SRC17 LDA $ABCD,Y
.SPA17 AND $ABCD,X
.SPO17 ORA $ABCD,X
.DST17 STA $ABCD,Y

.SRC18 LDA $ABCD,Y
.SPA18 AND $ABCD,X
.SPO18 ORA $ABCD,X
.DST18 STA $ABCD,Y

.SRC19 LDA $ABCD,Y
.SPA19 AND $ABCD,X
.SPO19 ORA $ABCD,X
.DST19 STA $ABCD,Y

.SRC20 LDA $ABCD,Y
.SPA20 AND $ABCD,X
.SPO20 ORA $ABCD,X
.DST20 STA $ABCD,Y

.SRC21 LDA $ABCD,Y
.SPA21 AND $ABCD,X
.SPO21 ORA $ABCD,X
.DST21 STA $ABCD,Y

.SRC22 LDA $ABCD,Y
.SPA22 AND $ABCD,X
.SPO22 ORA $ABCD,X
.DST22 STA $ABCD,Y

.SRC23 LDA $ABCD,Y
.SPA23 AND $ABCD,X
.SPO23 ORA $ABCD,X
.DST23 STA $ABCD,Y

.SRC24 LDA $ABCD,Y
.SPA24 AND $ABCD,X
.SPO24 ORA $ABCD,X
.DST24 STA $ABCD,Y

  TYA
  ADC #8-1 ; carry set
  TAY

  TXA
  SBC #24-1 ; carry clear
  TAX

  BEQ .EXIT
  JMP .LOOP

.EXIT  
 INC $D020

RTS

!ZONE SPRN_TMPB_32 ; copy sprite to temp buffer
SPRN_TMPB_32
 DEC $D020
 
 STA SPR_CNT

 STX REGX
 STY REGY

 LDX SPR_AND
 LDY SPR_AND +1
 STX .SPA01 +1
 STY .SPA01 +2
 +INCXY 
 STX .SPA02 +1
 STY .SPA02 +2
 +INCXY 
 STX .SPA03 +1
 STY .SPA03 +2
 +INCXY 
 STX .SPA04 +1
 STY .SPA04 +2
 +INCXY 
 STX .SPA05 +1
 STY .SPA05 +2
 +INCXY 
 STX .SPA06 +1
 STY .SPA06 +2
 +INCXY 
 STX .SPA07 +1
 STY .SPA07 +2
 +INCXY 
 STX .SPA08 +1
 STY .SPA08 +2
 +INCXY 
 STX .SPA09 +1
 STY .SPA09 +2
  +INCXY 
 STX .SPA10 +1
 STY .SPA10 +2
  +INCXY 
 STX .SPA11 +1
 STY .SPA11 +2
  +INCXY 
 STX .SPA12 +1
 STY .SPA12 +2
  +INCXY 
 STX .SPA13 +1
 STY .SPA13 +2
  +INCXY 
 STX .SPA14 +1
 STY .SPA14 +2
  +INCXY 
 STX .SPA15 +1
 STY .SPA15 +2
  +INCXY 
 STX .SPA16 +1
 STY .SPA16 +2
  +INCXY 
 STX .SPA17 +1
 STY .SPA17 +2
  +INCXY 
 STX .SPA18 +1
 STY .SPA18 +2
  +INCXY 
 STX .SPA19 +1
 STY .SPA19 +2
  +INCXY 
 STX .SPA20 +1
 STY .SPA20 +2
  +INCXY 
 STX .SPA21 +1
 STY .SPA21 +2
  +INCXY 
 STX .SPA22 +1
 STY .SPA22 +2
  +INCXY 
 STX .SPA23 +1
 STY .SPA23 +2
  +INCXY 
 STX .SPA24 +1
 STY .SPA24 +2
  +INCXY 
 STX .SPA25 +1
 STY .SPA25 +2
  +INCXY 
 STX .SPA26 +1
 STY .SPA26 +2
  +INCXY 
 STX .SPA27 +1
 STY .SPA27 +2
  +INCXY 
 STX .SPA28 +1
 STY .SPA28 +2
  +INCXY 
 STX .SPA29 +1
 STY .SPA29 +2
  +INCXY 
 STX .SPA30 +1
 STY .SPA30 +2
  +INCXY 
 STX .SPA31 +1
 STY .SPA31 +2
  +INCXY 
 STX .SPA32 +1
 STY .SPA32 +2
  
 LDX SPR_ORA
 LDY SPR_ORA +1
 STX .SPO01 +1
 STY .SPO01 +2
 +INCXY 
 STX .SPO02 +1
 STY .SPO02 +2
 +INCXY 
 STX .SPO03 +1
 STY .SPO03 +2
 +INCXY 
 STX .SPO04 +1
 STY .SPO04 +2
 +INCXY 
 STX .SPO05 +1
 STY .SPO05 +2
 +INCXY 
 STX .SPO06 +1
 STY .SPO06 +2
 +INCXY 
 STX .SPO07 +1
 STY .SPO07 +2
 +INCXY 
 STX .SPO08 +1
 STY .SPO08 +2
 +INCXY 
 STX .SPO09 +1
 STY .SPO09 +2
 +INCXY
 STX .SPO10 +1
 STY .SPO10 +2
 +INCXY 
 STX .SPO11 +1
 STY .SPO11 +2
 +INCXY 
 STX .SPO12 +1
 STY .SPO12 +2
 +INCXY 
 STX .SPO13 +1
 STY .SPO13 +2
 +INCXY 
 STX .SPO14 +1
 STY .SPO14 +2
 +INCXY 
 STX .SPO15 +1
 STY .SPO15 +2
 +INCXY 
 STX .SPO16 +1
 STY .SPO16 +2
 +INCXY 
 STX .SPO17 +1
 STY .SPO17 +2
 +INCXY 
 STX .SPO18 +1
 STY .SPO18 +2
 +INCXY 
 STX .SPO19 +1
 STY .SPO19 +2
 +INCXY 
 STX .SPO20 +1
 STY .SPO20 +2
 +INCXY 
 STX .SPO21 +1
 STY .SPO21 +2
 +INCXY 
 STX .SPO22 +1
 STY .SPO22 +2
 +INCXY 
 STX .SPO23 +1
 STY .SPO23 +2
 +INCXY 
 STX .SPO24 +1
 STY .SPO24 +2
 +INCXY 
 STX .SPO24 +1
 STY .SPO24 +2

 +INCXY 
 STX .SPO25 +1
 STY .SPO25 +2
 +INCXY 
 STX .SPO26 +1
 STY .SPO26 +2
 +INCXY 
 STX .SPO27 +1
 STY .SPO27 +2
 +INCXY 
 STX .SPO28 +1
 STY .SPO28 +2
 +INCXY 
 STX .SPO29 +1
 STY .SPO29 +2
 +INCXY 
 STX .SPO30 +1
 STY .SPO30 +2
 +INCXY 
 STX .SPO31 +1
 STY .SPO31 +2
 +INCXY 
 STX .SPO32 +1
 STY .SPO32 +2

 LDX REGX
 LDY REGY

  +SPR_TMP .SRC32, .DST32, 31
  +SPR_TMP .SRC31, .DST31, 30
  +SPR_TMP .SRC30, .DST30, 29
  +SPR_TMP .SRC29, .DST29, 28
  +SPR_TMP .SRC28, .DST28, 27
  +SPR_TMP .SRC27, .DST27, 26
  +SPR_TMP .SRC26, .DST26, 25
  +SPR_TMP .SRC25, .DST25, 24

  +SPR_TMP .SRC24, .DST24, 23
  +SPR_TMP .SRC23, .DST23, 22
  +SPR_TMP .SRC22, .DST22, 21
  +SPR_TMP .SRC21, .DST21, 20
  +SPR_TMP .SRC20, .DST20, 19
  +SPR_TMP .SRC19, .DST19, 18
  +SPR_TMP .SRC18, .DST18, 17
  +SPR_TMP .SRC17, .DST17, 16

  +SPR_TMP .SRC16, .DST16, 15
  +SPR_TMP .SRC15, .DST15, 14
  +SPR_TMP .SRC14, .DST14, 13
  +SPR_TMP .SRC13, .DST13, 12
  +SPR_TMP .SRC12, .DST12, 11
  +SPR_TMP .SRC11, .DST11, 10
  +SPR_TMP .SRC10, .DST10, 9
  +SPR_TMP .SRC09, .DST09, 8

  +SPR_TMP .SRC08, .DST08, 7
  +SPR_TMP .SRC07, .DST07, 6
  +SPR_TMP .SRC06, .DST06, 5
  +SPR_TMP .SRC05, .DST05, 4
  +SPR_TMP .SRC04, .DST04, 3
  +SPR_TMP .SRC03, .DST03, 2
  +SPR_TMP .SRC02, .DST02, 1
  +SPR_TMP .SRC01, .DST01, 0
  
 LDY SCR_TAB3,X
 LDX SPR_CNT ; 24 16 8 0 (needs to be colums*rows)
 SEC

.LOOP
.SRC01 LDA $ABCD,Y
.SPA01 AND $ABCD,X
.SPO01 ORA $ABCD,X
.DST01 STA $ABCD,Y

.SRC02 LDA $ABCD,Y
.SPA02 AND $ABCD,X
.SPO02 ORA $ABCD,X
.DST02 STA $ABCD,Y
     
.SRC03 LDA $ABCD,Y
.SPA03 AND $ABCD,X
.SPO03 ORA $ABCD,X
.DST03 STA $ABCD,Y

.SRC04 LDA $ABCD,Y
.SPA04 AND $ABCD,X
.SPO04 ORA $ABCD,X
.DST04 STA $ABCD,Y

.SRC05 LDA $ABCD,Y
.SPA05 AND $ABCD,X
.SPO05 ORA $ABCD,X
.DST05 STA $ABCD,Y

.SRC06 LDA $ABCD,Y
.SPA06 AND $ABCD,X
.SPO06 ORA $ABCD,X
.DST06 STA $ABCD,Y

.SRC07 LDA $ABCD,Y
.SPA07 AND $ABCD,X
.SPO07 ORA $ABCD,X
.DST07 STA $ABCD,Y

.SRC08 LDA $ABCD,Y
.SPA08 AND $ABCD,X
.SPO08 ORA $ABCD,X
.DST08 STA $ABCD,Y

.SRC09 LDA $ABCD,Y
.SPA09 AND $ABCD,X
.SPO09 ORA $ABCD,X
.DST09 STA $ABCD,Y

.SRC10 LDA $ABCD,Y
.SPA10 AND $ABCD,X
.SPO10 ORA $ABCD,X
.DST10 STA $ABCD,Y

.SRC11 LDA $ABCD,Y
.SPA11 AND $ABCD,X
.SPO11 ORA $ABCD,X
.DST11 STA $ABCD,Y

.SRC12 LDA $ABCD,Y
.SPA12 AND $ABCD,X
.SPO12 ORA $ABCD,X
.DST12 STA $ABCD,Y

.SRC13 LDA $ABCD,Y
.SPA13 AND $ABCD,X
.SPO13 ORA $ABCD,X
.DST13 STA $ABCD,Y

.SRC14 LDA $ABCD,Y
.SPA14 AND $ABCD,X
.SPO14 ORA $ABCD,X
.DST14 STA $ABCD,Y

.SRC15 LDA $ABCD,Y
.SPA15 AND $ABCD,X
.SPO15 ORA $ABCD,X
.DST15 STA $ABCD,Y

.SRC16 LDA $ABCD,Y
.SPA16 AND $ABCD,X
.SPO16 ORA $ABCD,X
.DST16 STA $ABCD,Y

.SRC17 LDA $ABCD,Y
.SPA17 AND $ABCD,X
.SPO17 ORA $ABCD,X
.DST17 STA $ABCD,Y

.SRC18 LDA $ABCD,Y
.SPA18 AND $ABCD,X
.SPO18 ORA $ABCD,X
.DST18 STA $ABCD,Y

.SRC19 LDA $ABCD,Y
.SPA19 AND $ABCD,X
.SPO19 ORA $ABCD,X
.DST19 STA $ABCD,Y

.SRC20 LDA $ABCD,Y
.SPA20 AND $ABCD,X
.SPO20 ORA $ABCD,X
.DST20 STA $ABCD,Y

.SRC21 LDA $ABCD,Y
.SPA21 AND $ABCD,X
.SPO21 ORA $ABCD,X
.DST21 STA $ABCD,Y

.SRC22 LDA $ABCD,Y
.SPA22 AND $ABCD,X
.SPO22 ORA $ABCD,X
.DST22 STA $ABCD,Y

.SRC23 LDA $ABCD,Y
.SPA23 AND $ABCD,X
.SPO23 ORA $ABCD,X
.DST23 STA $ABCD,Y

.SRC24 LDA $ABCD,Y
.SPA24 AND $ABCD,X
.SPO24 ORA $ABCD,X
.DST24 STA $ABCD,Y

.SRC25 LDA $ABCD,Y
.SPA25 AND $ABCD,X
.SPO25 ORA $ABCD,X
.DST25 STA $ABCD,Y

.SRC26 LDA $ABCD,Y
.SPA26 AND $ABCD,X
.SPO26 ORA $ABCD,X
.DST26 STA $ABCD,Y

.SRC27 LDA $ABCD,Y
.SPA27 AND $ABCD,X
.SPO27 ORA $ABCD,X
.DST27 STA $ABCD,Y

.SRC28 LDA $ABCD,Y
.SPA28 AND $ABCD,X
.SPO28 ORA $ABCD,X
.DST28 STA $ABCD,Y

.SRC29 LDA $ABCD,Y
.SPA29 AND $ABCD,X
.SPO29 ORA $ABCD,X
.DST29 STA $ABCD,Y

.SRC30 LDA $ABCD,Y
.SPA30 AND $ABCD,X
.SPO30 ORA $ABCD,X
.DST30 STA $ABCD,Y

.SRC31 LDA $ABCD,Y
.SPA31 AND $ABCD,X
.SPO31 ORA $ABCD,X
.DST31 STA $ABCD,Y

.SRC32 LDA $ABCD,Y
.SPA32 AND $ABCD,X
.SPO32 ORA $ABCD,X
.DST32 STA $ABCD,Y

  TYA
  ADC #8-1 ; carry set
  TAY

  TXA
  SBC #32-1 ; carry clear
  TAX

  BEQ .EXIT
  JMP .LOOP

.EXIT  
 INC $D020

RTS

!ZONE BAKB_TMPB
BAKB_TMPB
    STA REGY
    LDA SPRITE_BAK_TMP_LO,Y
    STA .BAKB_TMPB_JMP+1
    LDA SPRITE_BAK_TMP_HI,Y
    STA .BAKB_TMPB_JMP+2
    LDA SPRITE_BAK_TMP_SIZE,Y
    LDY REGY
.BAKB_TMPB_JMP JMP $ABCD

!ZONE BAKB_TMPB_08
BAKB_TMPB_08 ; copy from screen buffer to temp buffer - size 1
 INC $D020

 STA SPR_CNT

 +BUF_TMP .SRC09, .DST09, 8
 
 +BUF_TMP .SRC08, .DST08, 7
 +BUF_TMP .SRC07, .DST07, 6
 +BUF_TMP .SRC06, .DST06, 5
 +BUF_TMP .SRC05, .DST05, 4
 +BUF_TMP .SRC04, .DST04, 3
 +BUF_TMP .SRC03, .DST03, 2
 +BUF_TMP .SRC02, .DST02, 1
 +BUF_TMP .SRC01, .DST01, 0

 +BUF_TMP .SRC00, .DST00, -1

 LDY SCR_TAB3-4,X
 LDX SPR_CNT
 INX
 CLC 
 
.LOOP

.SRC09  LDA $ABCD,Y
.DST09  STA $ABCD,Y

.SRC08  LDA $ABCD,Y
.DST08  STA $ABCD,Y
.SRC07  LDA $ABCD,Y
.DST07  STA $ABCD,Y
.SRC06  LDA $ABCD,Y
.DST06  STA $ABCD,Y
.SRC05  LDA $ABCD,Y
.DST05  STA $ABCD,Y
.SRC04  LDA $ABCD,Y
.DST04  STA $ABCD,Y
.SRC03  LDA $ABCD,Y
.DST03  STA $ABCD,Y
.SRC02  LDA $ABCD,Y
.DST02  STA $ABCD,Y
.SRC01  LDA $ABCD,Y
.DST01  STA $ABCD,Y

.SRC00  LDA $ABCD,Y
.DST00  STA $ABCD,Y

  TYA
  ADC #8
  TAY

  DEX
  BPL .LOOP

 DEC $D020
RTS

!ZONE BAKB_TMPB_16
BAKB_TMPB_16 ; copy from screen buffer to temp buffer - size 2
 INC $D020

 STA SPR_CNT

 +BUF_TMP .SRC17, .DST17, 16
 
 +BUF_TMP .SRC16, .DST16, 15
 +BUF_TMP .SRC15, .DST15, 14
 +BUF_TMP .SRC14, .DST14, 13
 +BUF_TMP .SRC13, .DST13, 12
 +BUF_TMP .SRC12, .DST12, 11
 +BUF_TMP .SRC11, .DST11, 10
 +BUF_TMP .SRC10, .DST10, 9
 +BUF_TMP .SRC09, .DST09, 8
 
 +BUF_TMP .SRC08, .DST08, 7
 +BUF_TMP .SRC07, .DST07, 6
 +BUF_TMP .SRC06, .DST06, 5
 +BUF_TMP .SRC05, .DST05, 4
 +BUF_TMP .SRC04, .DST04, 3
 +BUF_TMP .SRC03, .DST03, 2
 +BUF_TMP .SRC02, .DST02, 1
 +BUF_TMP .SRC01, .DST01, 0

 +BUF_TMP .SRC00, .DST00, -1

 LDY SCR_TAB3-4,X
 LDX SPR_CNT
 INX
 CLC 
 
.LOOP

.SRC17  LDA $ABCD,Y
.DST17  STA $ABCD,Y

.SRC16  LDA $ABCD,Y
.DST16  STA $ABCD,Y
.SRC15  LDA $ABCD,Y
.DST15  STA $ABCD,Y
.SRC14  LDA $ABCD,Y
.DST14  STA $ABCD,Y
.SRC13  LDA $ABCD,Y
.DST13  STA $ABCD,Y
.SRC12  LDA $ABCD,Y
.DST12  STA $ABCD,Y
.SRC11  LDA $ABCD,Y
.DST11  STA $ABCD,Y
.SRC10  LDA $ABCD,Y
.DST10  STA $ABCD,Y
.SRC09  LDA $ABCD,Y
.DST09  STA $ABCD,Y

.SRC08  LDA $ABCD,Y
.DST08  STA $ABCD,Y
.SRC07  LDA $ABCD,Y
.DST07  STA $ABCD,Y
.SRC06  LDA $ABCD,Y
.DST06  STA $ABCD,Y
.SRC05  LDA $ABCD,Y
.DST05  STA $ABCD,Y
.SRC04  LDA $ABCD,Y
.DST04  STA $ABCD,Y
.SRC03  LDA $ABCD,Y
.DST03  STA $ABCD,Y
.SRC02  LDA $ABCD,Y
.DST02  STA $ABCD,Y
.SRC01  LDA $ABCD,Y
.DST01  STA $ABCD,Y
.SRC00  LDA $ABCD,Y
.DST00  STA $ABCD,Y

  TYA
  ADC #8
  TAY

  DEX
  BPL .LOOP

 DEC $D020
RTS

!ZONE BAKB_TMPB_24
BAKB_TMPB_24 ; copy from screen buffer to temp buffer - size 3
 INC $D020

 STA SPR_CNT

 +BUF_TMP .SRC25, .DST25, 24

 +BUF_TMP .SRC24, .DST24, 23
 +BUF_TMP .SRC23, .DST23, 22
 +BUF_TMP .SRC22, .DST22, 21
 +BUF_TMP .SRC21, .DST21, 20
 +BUF_TMP .SRC20, .DST20, 19
 +BUF_TMP .SRC19, .DST19, 18
 +BUF_TMP .SRC18, .DST18, 17
 +BUF_TMP .SRC17, .DST17, 16
 
 +BUF_TMP .SRC16, .DST16, 15
 +BUF_TMP .SRC15, .DST15, 14
 +BUF_TMP .SRC14, .DST14, 13
 +BUF_TMP .SRC13, .DST13, 12
 +BUF_TMP .SRC12, .DST12, 11
 +BUF_TMP .SRC11, .DST11, 10
 +BUF_TMP .SRC10, .DST10, 9
 +BUF_TMP .SRC09, .DST09, 8
 
 +BUF_TMP .SRC08, .DST08, 7
 +BUF_TMP .SRC07, .DST07, 6
 +BUF_TMP .SRC06, .DST06, 5
 +BUF_TMP .SRC05, .DST05, 4
 +BUF_TMP .SRC04, .DST04, 3
 +BUF_TMP .SRC03, .DST03, 2
 +BUF_TMP .SRC02, .DST02, 1
 +BUF_TMP .SRC01, .DST01, 0

 +BUF_TMP .SRC00, .DST00, -1

 LDY SCR_TAB3-4,X
 LDX SPR_CNT
 INX
 CLC 
 
.LOOP

.SRC25  LDA $ABCD,Y
.DST25  STA $ABCD,Y

.SRC24  LDA $ABCD,Y
.DST24  STA $ABCD,Y
.SRC23  LDA $ABCD,Y
.DST23  STA $ABCD,Y
.SRC22  LDA $ABCD,Y
.DST22  STA $ABCD,Y
.SRC21  LDA $ABCD,Y
.DST21  STA $ABCD,Y
.SRC20  LDA $ABCD,Y
.DST20  STA $ABCD,Y
.SRC19  LDA $ABCD,Y
.DST19  STA $ABCD,Y
.SRC18  LDA $ABCD,Y
.DST18  STA $ABCD,Y

.SRC17  LDA $ABCD,Y
.DST17  STA $ABCD,Y

.SRC16  LDA $ABCD,Y
.DST16  STA $ABCD,Y
.SRC15  LDA $ABCD,Y
.DST15  STA $ABCD,Y
.SRC14  LDA $ABCD,Y
.DST14  STA $ABCD,Y
.SRC13  LDA $ABCD,Y
.DST13  STA $ABCD,Y
.SRC12  LDA $ABCD,Y
.DST12  STA $ABCD,Y
.SRC11  LDA $ABCD,Y
.DST11  STA $ABCD,Y
.SRC10  LDA $ABCD,Y
.DST10  STA $ABCD,Y
.SRC09  LDA $ABCD,Y
.DST09  STA $ABCD,Y

.SRC08  LDA $ABCD,Y
.DST08  STA $ABCD,Y
.SRC07  LDA $ABCD,Y
.DST07  STA $ABCD,Y
.SRC06  LDA $ABCD,Y
.DST06  STA $ABCD,Y
.SRC05  LDA $ABCD,Y
.DST05  STA $ABCD,Y
.SRC04  LDA $ABCD,Y
.DST04  STA $ABCD,Y
.SRC03  LDA $ABCD,Y
.DST03  STA $ABCD,Y
.SRC02  LDA $ABCD,Y
.DST02  STA $ABCD,Y
.SRC01  LDA $ABCD,Y
.DST01  STA $ABCD,Y
.SRC00  LDA $ABCD,Y
.DST00  STA $ABCD,Y

  TYA
  ADC #8
  TAY

  DEX
  BMI .EXIT
  JMP .LOOP
  
.EXIT
 DEC $D020
RTS

!ZONE BAKB_TMPB_32
BAKB_TMPB_32 ; copy from screen buffer to temp buffer - size 3
 INC $D020

 STA SPR_CNT

 +BUF_TMP .SRC33, .DST33, 32

 +BUF_TMP .SRC32, .DST32, 31
 +BUF_TMP .SRC31, .DST31, 30
 +BUF_TMP .SRC30, .DST30, 29
 +BUF_TMP .SRC29, .DST29, 28
 +BUF_TMP .SRC28, .DST28, 27
 +BUF_TMP .SRC27, .DST27, 26
 +BUF_TMP .SRC26, .DST26, 25
 +BUF_TMP .SRC25, .DST25, 24

 +BUF_TMP .SRC24, .DST24, 23
 +BUF_TMP .SRC23, .DST23, 22
 +BUF_TMP .SRC22, .DST22, 21
 +BUF_TMP .SRC21, .DST21, 20
 +BUF_TMP .SRC20, .DST20, 19
 +BUF_TMP .SRC19, .DST19, 18
 +BUF_TMP .SRC18, .DST18, 17
 +BUF_TMP .SRC17, .DST17, 16
 
 +BUF_TMP .SRC16, .DST16, 15
 +BUF_TMP .SRC15, .DST15, 14
 +BUF_TMP .SRC14, .DST14, 13
 +BUF_TMP .SRC13, .DST13, 12
 +BUF_TMP .SRC12, .DST12, 11
 +BUF_TMP .SRC11, .DST11, 10
 +BUF_TMP .SRC10, .DST10, 9
 +BUF_TMP .SRC09, .DST09, 8
 
 +BUF_TMP .SRC08, .DST08, 7
 +BUF_TMP .SRC07, .DST07, 6
 +BUF_TMP .SRC06, .DST06, 5
 +BUF_TMP .SRC05, .DST05, 4
 +BUF_TMP .SRC04, .DST04, 3
 +BUF_TMP .SRC03, .DST03, 2
 +BUF_TMP .SRC02, .DST02, 1
 +BUF_TMP .SRC01, .DST01, 0

 +BUF_TMP .SRC00, .DST00, -1

 LDY SCR_TAB3-4,X
 LDX SPR_CNT
 INX
 CLC 
 
.LOOP

.SRC33  LDA $ABCD,Y
.DST33  STA $ABCD,Y

.SRC32  LDA $ABCD,Y
.DST32  STA $ABCD,Y
.SRC31  LDA $ABCD,Y
.DST31  STA $ABCD,Y
.SRC30  LDA $ABCD,Y
.DST30  STA $ABCD,Y
.SRC29  LDA $ABCD,Y
.DST29  STA $ABCD,Y
.SRC28  LDA $ABCD,Y
.DST28  STA $ABCD,Y
.SRC27  LDA $ABCD,Y
.DST27  STA $ABCD,Y
.SRC26  LDA $ABCD,Y
.DST26  STA $ABCD,Y
.SRC25  LDA $ABCD,Y
.DST25  STA $ABCD,Y

.SRC24  LDA $ABCD,Y
.DST24  STA $ABCD,Y
.SRC23  LDA $ABCD,Y
.DST23  STA $ABCD,Y
.SRC22  LDA $ABCD,Y
.DST22  STA $ABCD,Y
.SRC21  LDA $ABCD,Y
.DST21  STA $ABCD,Y
.SRC20  LDA $ABCD,Y
.DST20  STA $ABCD,Y
.SRC19  LDA $ABCD,Y
.DST19  STA $ABCD,Y
.SRC18  LDA $ABCD,Y
.DST18  STA $ABCD,Y

.SRC17  LDA $ABCD,Y
.DST17  STA $ABCD,Y

.SRC16  LDA $ABCD,Y
.DST16  STA $ABCD,Y
.SRC15  LDA $ABCD,Y
.DST15  STA $ABCD,Y
.SRC14  LDA $ABCD,Y
.DST14  STA $ABCD,Y
.SRC13  LDA $ABCD,Y
.DST13  STA $ABCD,Y
.SRC12  LDA $ABCD,Y
.DST12  STA $ABCD,Y
.SRC11  LDA $ABCD,Y
.DST11  STA $ABCD,Y
.SRC10  LDA $ABCD,Y
.DST10  STA $ABCD,Y
.SRC09  LDA $ABCD,Y
.DST09  STA $ABCD,Y

.SRC08  LDA $ABCD,Y
.DST08  STA $ABCD,Y
.SRC07  LDA $ABCD,Y
.DST07  STA $ABCD,Y
.SRC06  LDA $ABCD,Y
.DST06  STA $ABCD,Y
.SRC05  LDA $ABCD,Y
.DST05  STA $ABCD,Y
.SRC04  LDA $ABCD,Y
.DST04  STA $ABCD,Y
.SRC03  LDA $ABCD,Y
.DST03  STA $ABCD,Y
.SRC02  LDA $ABCD,Y
.DST02  STA $ABCD,Y
.SRC01  LDA $ABCD,Y
.DST01  STA $ABCD,Y
.SRC00  LDA $ABCD,Y
.DST00  STA $ABCD,Y

  TYA
  ADC #8
  TAY

  DEX
  BMI .EXIT
  JMP .LOOP
  
.EXIT
 DEC $D020
RTS

!ZONE TMPB_SCNB
TMPB_SCNB
    STA REGY
    LDA SPRITE_TMP_SCN_LO,Y
    STA .TMPB_SCNB_JMP+1
    LDA SPRITE_TMP_SCN_HI,Y
    STA .TMPB_SCNB_JMP+2
    LDA SPRITE_BAK_TMP_SIZE,Y
    LDY REGY
.TMPB_SCNB_JMP JMP $ABCD

!ZONE TMPB_SCNB_08
TMPB_SCNB_08 ; copy from screen buffer to temp buffer - size 1
 INC $D020

 STA SPR_CNT

 +TMP_SCR .SRC09, .DST09, 8
 
 +TMP_SCR .SRC08, .DST08, 7
 +TMP_SCR .SRC07, .DST07, 6
 +TMP_SCR .SRC06, .DST06, 5
 +TMP_SCR .SRC05, .DST05, 4
 +TMP_SCR .SRC04, .DST04, 3
 +TMP_SCR .SRC03, .DST03, 2
 +TMP_SCR .SRC02, .DST02, 1
 +TMP_SCR .SRC01, .DST01, 0

 +TMP_SCR .SRC00, .DST00, -1

 LDY SCR_TAB3-4,X
 LDX SPR_CNT
 INX
 CLC 
 
.LOOP

.SRC09  LDA $ABCD,Y
.DST09  STA $ABCD,Y

.SRC08  LDA $ABCD,Y
.DST08  STA $ABCD,Y
.SRC07  LDA $ABCD,Y
.DST07  STA $ABCD,Y
.SRC06  LDA $ABCD,Y
.DST06  STA $ABCD,Y
.SRC05  LDA $ABCD,Y
.DST05  STA $ABCD,Y
.SRC04  LDA $ABCD,Y
.DST04  STA $ABCD,Y
.SRC03  LDA $ABCD,Y
.DST03  STA $ABCD,Y
.SRC02  LDA $ABCD,Y
.DST02  STA $ABCD,Y
.SRC01  LDA $ABCD,Y
.DST01  STA $ABCD,Y
.SRC00  LDA $ABCD,Y
.DST00  STA $ABCD,Y

  TYA
  ADC #8
  TAY

  DEX
  BPL .LOOP

 DEC $D020
RTS

!ZONE TMPB_SCNB_16
TMPB_SCNB_16 ; copy from screen buffer to temp buffer - size 2
 INC $D020

 STA SPR_CNT

 +TMP_SCR .SRC17, .DST17, 16

 +TMP_SCR .SRC16, .DST16, 15
 +TMP_SCR .SRC15, .DST15, 14
 +TMP_SCR .SRC14, .DST14, 13
 +TMP_SCR .SRC13, .DST13, 12
 +TMP_SCR .SRC12, .DST12, 11
 +TMP_SCR .SRC11, .DST11, 10
 +TMP_SCR .SRC10, .DST10, 9
 +TMP_SCR .SRC09, .DST09, 8
 
 +TMP_SCR .SRC08, .DST08, 7
 +TMP_SCR .SRC07, .DST07, 6
 +TMP_SCR .SRC06, .DST06, 5
 +TMP_SCR .SRC05, .DST05, 4
 +TMP_SCR .SRC04, .DST04, 3
 +TMP_SCR .SRC03, .DST03, 2
 +TMP_SCR .SRC02, .DST02, 1
 +TMP_SCR .SRC01, .DST01, 0

 +TMP_SCR .SRC00, .DST00, -1

 LDY SCR_TAB3-4,X
 LDX SPR_CNT
 INX
 CLC 
 
.LOOP

.SRC17  LDA $ABCD,Y
.DST17  STA $ABCD,Y

.SRC16  LDA $ABCD,Y
.DST16  STA $ABCD,Y
.SRC15  LDA $ABCD,Y
.DST15  STA $ABCD,Y
.SRC14  LDA $ABCD,Y
.DST14  STA $ABCD,Y
.SRC13  LDA $ABCD,Y
.DST13  STA $ABCD,Y
.SRC12  LDA $ABCD,Y
.DST12  STA $ABCD,Y
.SRC11  LDA $ABCD,Y
.DST11  STA $ABCD,Y
.SRC10  LDA $ABCD,Y
.DST10  STA $ABCD,Y
.SRC09  LDA $ABCD,Y
.DST09  STA $ABCD,Y

.SRC08  LDA $ABCD,Y
.DST08  STA $ABCD,Y
.SRC07  LDA $ABCD,Y
.DST07  STA $ABCD,Y
.SRC06  LDA $ABCD,Y
.DST06  STA $ABCD,Y
.SRC05  LDA $ABCD,Y
.DST05  STA $ABCD,Y
.SRC04  LDA $ABCD,Y
.DST04  STA $ABCD,Y
.SRC03  LDA $ABCD,Y
.DST03  STA $ABCD,Y
.SRC02  LDA $ABCD,Y
.DST02  STA $ABCD,Y
.SRC01  LDA $ABCD,Y
.DST01  STA $ABCD,Y
.SRC00  LDA $ABCD,Y
.DST00  STA $ABCD,Y

  TYA
  ADC #8
  TAY

  DEX
  BPL .LOOP

 DEC $D020
RTS

!ZONE TMPB_SCNB_24
TMPB_SCNB_24 ; copy from screen buffer to temp buffer - size 3
 INC $D020

 STA SPR_CNT

 +TMP_SCR .SRC25, .DST25, 24

 +TMP_SCR .SRC24, .DST24, 23
 +TMP_SCR .SRC23, .DST23, 22
 +TMP_SCR .SRC22, .DST22, 21
 +TMP_SCR .SRC21, .DST21, 20
 +TMP_SCR .SRC20, .DST20, 19
 +TMP_SCR .SRC19, .DST19, 18
 +TMP_SCR .SRC18, .DST18, 17
 +TMP_SCR .SRC17, .DST17, 16

 +TMP_SCR .SRC16, .DST16, 15
 +TMP_SCR .SRC15, .DST15, 14
 +TMP_SCR .SRC14, .DST14, 13
 +TMP_SCR .SRC13, .DST13, 12
 +TMP_SCR .SRC12, .DST12, 11
 +TMP_SCR .SRC11, .DST11, 10
 +TMP_SCR .SRC10, .DST10, 9
 +TMP_SCR .SRC09, .DST09, 8
 
 +TMP_SCR .SRC08, .DST08, 7
 +TMP_SCR .SRC07, .DST07, 6
 +TMP_SCR .SRC06, .DST06, 5
 +TMP_SCR .SRC05, .DST05, 4
 +TMP_SCR .SRC04, .DST04, 3
 +TMP_SCR .SRC03, .DST03, 2
 +TMP_SCR .SRC02, .DST02, 1
 +TMP_SCR .SRC01, .DST01, 0

 +TMP_SCR .SRC00, .DST00, -1

 LDY SCR_TAB3-4,X
 LDX SPR_CNT
 INX
 CLC 
 
.LOOP

.SRC25  LDA $ABCD,Y
.DST25  STA $ABCD,Y

.SRC24  LDA $ABCD,Y
.DST24  STA $ABCD,Y
.SRC23  LDA $ABCD,Y
.DST23  STA $ABCD,Y
.SRC22  LDA $ABCD,Y
.DST22  STA $ABCD,Y
.SRC21  LDA $ABCD,Y
.DST21  STA $ABCD,Y
.SRC20  LDA $ABCD,Y
.DST20  STA $ABCD,Y
.SRC19  LDA $ABCD,Y
.DST19  STA $ABCD,Y
.SRC18  LDA $ABCD,Y
.DST18  STA $ABCD,Y

.SRC17  LDA $ABCD,Y
.DST17  STA $ABCD,Y

.SRC16  LDA $ABCD,Y
.DST16  STA $ABCD,Y
.SRC15  LDA $ABCD,Y
.DST15  STA $ABCD,Y
.SRC14  LDA $ABCD,Y
.DST14  STA $ABCD,Y
.SRC13  LDA $ABCD,Y
.DST13  STA $ABCD,Y
.SRC12  LDA $ABCD,Y
.DST12  STA $ABCD,Y
.SRC11  LDA $ABCD,Y
.DST11  STA $ABCD,Y
.SRC10  LDA $ABCD,Y
.DST10  STA $ABCD,Y
.SRC09  LDA $ABCD,Y
.DST09  STA $ABCD,Y

.SRC08  LDA $ABCD,Y
.DST08  STA $ABCD,Y
.SRC07  LDA $ABCD,Y
.DST07  STA $ABCD,Y
.SRC06  LDA $ABCD,Y
.DST06  STA $ABCD,Y
.SRC05  LDA $ABCD,Y
.DST05  STA $ABCD,Y
.SRC04  LDA $ABCD,Y
.DST04  STA $ABCD,Y
.SRC03  LDA $ABCD,Y
.DST03  STA $ABCD,Y
.SRC02  LDA $ABCD,Y
.DST02  STA $ABCD,Y
.SRC01  LDA $ABCD,Y
.DST01  STA $ABCD,Y
.SRC00  LDA $ABCD,Y
.DST00  STA $ABCD,Y

  TYA
  ADC #8
  TAY

  DEX
  BMI .EXIT
  JMP .LOOP
  
.EXIT
 DEC $D020
RTS

!ZONE TMPB_SCNB_32
TMPB_SCNB_32 ; copy from screen buffer to temp buffer - size 3
 INC $D020

 STA SPR_CNT

 +TMP_SCR .SRC33, .DST33, 32

 +TMP_SCR .SRC32, .DST32, 31
 +TMP_SCR .SRC31, .DST31, 30
 +TMP_SCR .SRC30, .DST30, 29
 +TMP_SCR .SRC29, .DST29, 28
 +TMP_SCR .SRC28, .DST28, 27
 +TMP_SCR .SRC27, .DST27, 26
 +TMP_SCR .SRC26, .DST26, 25
 +TMP_SCR .SRC25, .DST25, 24

 +TMP_SCR .SRC24, .DST24, 23
 +TMP_SCR .SRC23, .DST23, 22
 +TMP_SCR .SRC22, .DST22, 21
 +TMP_SCR .SRC21, .DST21, 20
 +TMP_SCR .SRC20, .DST20, 19
 +TMP_SCR .SRC19, .DST19, 18
 +TMP_SCR .SRC18, .DST18, 17
 +TMP_SCR .SRC17, .DST17, 16

 +TMP_SCR .SRC16, .DST16, 15
 +TMP_SCR .SRC15, .DST15, 14
 +TMP_SCR .SRC14, .DST14, 13
 +TMP_SCR .SRC13, .DST13, 12
 +TMP_SCR .SRC12, .DST12, 11
 +TMP_SCR .SRC11, .DST11, 10
 +TMP_SCR .SRC10, .DST10, 9
 +TMP_SCR .SRC09, .DST09, 8
 
 +TMP_SCR .SRC08, .DST08, 7
 +TMP_SCR .SRC07, .DST07, 6
 +TMP_SCR .SRC06, .DST06, 5
 +TMP_SCR .SRC05, .DST05, 4
 +TMP_SCR .SRC04, .DST04, 3
 +TMP_SCR .SRC03, .DST03, 2
 +TMP_SCR .SRC02, .DST02, 1
 +TMP_SCR .SRC01, .DST01, 0

 +TMP_SCR .SRC00, .DST00, -1

 LDY SCR_TAB3-4,X
 LDX SPR_CNT
 INX
 CLC 
 
.LOOP

.SRC33  LDA $ABCD,Y
.DST33  STA $ABCD,Y

.SRC32  LDA $ABCD,Y
.DST32  STA $ABCD,Y
.SRC31  LDA $ABCD,Y
.DST31  STA $ABCD,Y
.SRC30  LDA $ABCD,Y
.DST30  STA $ABCD,Y
.SRC29  LDA $ABCD,Y
.DST29  STA $ABCD,Y
.SRC28  LDA $ABCD,Y
.DST28  STA $ABCD,Y
.SRC27  LDA $ABCD,Y
.DST27  STA $ABCD,Y
.SRC26  LDA $ABCD,Y
.DST26  STA $ABCD,Y
.SRC25  LDA $ABCD,Y
.DST25  STA $ABCD,Y

.SRC24  LDA $ABCD,Y
.DST24  STA $ABCD,Y
.SRC23  LDA $ABCD,Y
.DST23  STA $ABCD,Y
.SRC22  LDA $ABCD,Y
.DST22  STA $ABCD,Y
.SRC21  LDA $ABCD,Y
.DST21  STA $ABCD,Y
.SRC20  LDA $ABCD,Y
.DST20  STA $ABCD,Y
.SRC19  LDA $ABCD,Y
.DST19  STA $ABCD,Y
.SRC18  LDA $ABCD,Y
.DST18  STA $ABCD,Y

.SRC17  LDA $ABCD,Y
.DST17  STA $ABCD,Y

.SRC16  LDA $ABCD,Y
.DST16  STA $ABCD,Y
.SRC15  LDA $ABCD,Y
.DST15  STA $ABCD,Y
.SRC14  LDA $ABCD,Y
.DST14  STA $ABCD,Y
.SRC13  LDA $ABCD,Y
.DST13  STA $ABCD,Y
.SRC12  LDA $ABCD,Y
.DST12  STA $ABCD,Y
.SRC11  LDA $ABCD,Y
.DST11  STA $ABCD,Y
.SRC10  LDA $ABCD,Y
.DST10  STA $ABCD,Y
.SRC09  LDA $ABCD,Y
.DST09  STA $ABCD,Y

.SRC08  LDA $ABCD,Y
.DST08  STA $ABCD,Y
.SRC07  LDA $ABCD,Y
.DST07  STA $ABCD,Y
.SRC06  LDA $ABCD,Y
.DST06  STA $ABCD,Y
.SRC05  LDA $ABCD,Y
.DST05  STA $ABCD,Y
.SRC04  LDA $ABCD,Y
.DST04  STA $ABCD,Y
.SRC03  LDA $ABCD,Y
.DST03  STA $ABCD,Y
.SRC02  LDA $ABCD,Y
.DST02  STA $ABCD,Y
.SRC01  LDA $ABCD,Y
.DST01  STA $ABCD,Y
.SRC00  LDA $ABCD,Y
.DST00  STA $ABCD,Y

  TYA
  ADC #8
  TAY

  DEX
  BMI .EXIT
  JMP .LOOP
  
.EXIT
 DEC $D020
RTS

PATTERN
; !BYTE %00000000,%00010001,%00100010,%00110011,%01000100,%01010101,%01100110,%01110111,%10001000,%10011001,%10101010,%10111011,%11001100,%11011101,%11101110,%11111111
 
 !BYTE %00000000,%01010101,%10101010,%11111111
 !BYTE %00000000,%01010101,%10101010,%11111111
 !BYTE %00000000,%01010101,%10101010,%11111111
 !BYTE %00000000,%01010101,%10101010,%11111111


SCR_TAB3:
!BYTE $00,$00,$00,$00,$08,$08,$08,$08,$10,$10,$10,$10,$18,$18,$18,$18
!BYTE $20,$20,$20,$20,$28,$28,$28,$28,$30,$30,$30,$30,$38,$38,$38,$38
!BYTE $40,$40,$40,$40,$48,$48,$48,$48,$50,$50,$50,$50,$58,$58,$58,$58
!BYTE $60,$60,$60,$60,$68,$68,$68,$68,$70,$70,$70,$70,$78,$78,$78,$78
!BYTE $80,$80,$80,$80,$88,$88,$88,$88,$90,$90,$90,$90,$98,$98,$98,$98
!BYTE $A0,$A0,$A0,$A0,$A8,$A8,$A8,$A8,$B0,$B0,$B0,$B0,$B8,$B8,$B8,$B8
!BYTE $C0,$C0,$C0,$C0,$C8,$C8,$C8,$C8,$D0,$D0,$D0,$D0,$D8,$D8,$D8,$D8
!BYTE $E0,$E0,$E0,$E0,$E8,$E8,$E8,$E8,$F0,$F0,$F0,$F0,$F8,$F8,$F8,$F8

SC_HI:
!BYTE >($4000+(00*320)+0),>($4000+(00*320)+1),>($4000+(00*320)+2),>($4000+(00*320)+3),>($4000+(00*320)+4),>($4000+(00*320)+5),>($4000+(00*320)+6),>($4000+(00*320)+7)
!BYTE >($4000+(01*320)+0),>($4000+(01*320)+1),>($4000+(01*320)+2),>($4000+(01*320)+3),>($4000+(01*320)+4),>($4000+(01*320)+5),>($4000+(01*320)+6),>($4000+(01*320)+7)
!BYTE >($4000+(02*320)+0),>($4000+(02*320)+1),>($4000+(02*320)+2),>($4000+(02*320)+3),>($4000+(02*320)+4),>($4000+(02*320)+5),>($4000+(02*320)+6),>($4000+(02*320)+7)
!BYTE >($4000+(03*320)+0),>($4000+(03*320)+1),>($4000+(03*320)+2),>($4000+(03*320)+3),>($4000+(03*320)+4),>($4000+(03*320)+5),>($4000+(03*320)+6),>($4000+(03*320)+7)
!BYTE >($4000+(04*320)+0),>($4000+(04*320)+1),>($4000+(04*320)+2),>($4000+(04*320)+3),>($4000+(04*320)+4),>($4000+(04*320)+5),>($4000+(04*320)+6),>($4000+(04*320)+7)
!BYTE >($4000+(05*320)+0),>($4000+(05*320)+1),>($4000+(05*320)+2),>($4000+(05*320)+3),>($4000+(05*320)+4),>($4000+(05*320)+5),>($4000+(05*320)+6),>($4000+(05*320)+7)
!BYTE >($4000+(06*320)+0),>($4000+(06*320)+1),>($4000+(06*320)+2),>($4000+(06*320)+3),>($4000+(06*320)+4),>($4000+(06*320)+5),>($4000+(06*320)+6),>($4000+(06*320)+7)
!BYTE >($4000+(07*320)+0),>($4000+(07*320)+1),>($4000+(07*320)+2),>($4000+(07*320)+3),>($4000+(07*320)+4),>($4000+(07*320)+5),>($4000+(07*320)+6),>($4000+(07*320)+7)
!BYTE >($4000+(08*320)+0),>($4000+(08*320)+1),>($4000+(08*320)+2),>($4000+(08*320)+3),>($4000+(08*320)+4),>($4000+(08*320)+5),>($4000+(08*320)+6),>($4000+(08*320)+7)
!BYTE >($4000+(09*320)+0),>($4000+(09*320)+1),>($4000+(09*320)+2),>($4000+(09*320)+3),>($4000+(09*320)+4),>($4000+(09*320)+5),>($4000+(09*320)+6),>($4000+(09*320)+7)
!BYTE >($4000+(10*320)+0),>($4000+(10*320)+1),>($4000+(10*320)+2),>($4000+(10*320)+3),>($4000+(10*320)+4),>($4000+(10*320)+5),>($4000+(10*320)+6),>($4000+(10*320)+7)
!BYTE >($4000+(11*320)+0),>($4000+(11*320)+1),>($4000+(11*320)+2),>($4000+(11*320)+3),>($4000+(11*320)+4),>($4000+(11*320)+5),>($4000+(11*320)+6),>($4000+(11*320)+7)
!BYTE >($4000+(12*320)+0),>($4000+(12*320)+1),>($4000+(12*320)+2),>($4000+(12*320)+3),>($4000+(12*320)+4),>($4000+(12*320)+5),>($4000+(12*320)+6),>($4000+(12*320)+7)
!BYTE >($4000+(13*320)+0),>($4000+(13*320)+1),>($4000+(13*320)+2),>($4000+(13*320)+3),>($4000+(13*320)+4),>($4000+(13*320)+5),>($4000+(13*320)+6),>($4000+(13*320)+7)
!BYTE >($4000+(14*320)+0),>($4000+(14*320)+1),>($4000+(14*320)+2),>($4000+(14*320)+3),>($4000+(14*320)+4),>($4000+(14*320)+5),>($4000+(14*320)+6),>($4000+(14*320)+7)
!BYTE >($4000+(15*320)+0),>($4000+(15*320)+1),>($4000+(15*320)+2),>($4000+(15*320)+3),>($4000+(15*320)+4),>($4000+(15*320)+5),>($4000+(15*320)+6),>($4000+(15*320)+7)
!BYTE >($4000+(16*320)+0),>($4000+(16*320)+1),>($4000+(16*320)+2),>($4000+(16*320)+3),>($4000+(16*320)+4),>($4000+(16*320)+5),>($4000+(16*320)+6),>($4000+(16*320)+7)
!BYTE >($4000+(17*320)+0),>($4000+(17*320)+1),>($4000+(17*320)+2),>($4000+(17*320)+3),>($4000+(17*320)+4),>($4000+(17*320)+5),>($4000+(17*320)+6),>($4000+(17*320)+7)
!BYTE >($4000+(18*320)+0),>($4000+(18*320)+1),>($4000+(18*320)+2),>($4000+(18*320)+3),>($4000+(18*320)+4),>($4000+(18*320)+5),>($4000+(18*320)+6),>($4000+(18*320)+7)
!BYTE >($4000+(19*320)+0),>($4000+(19*320)+1),>($4000+(19*320)+2),>($4000+(19*320)+3),>($4000+(19*320)+4),>($4000+(19*320)+5),>($4000+(19*320)+6),>($4000+(19*320)+7)
!BYTE >($4000+(20*320)+0),>($4000+(20*320)+1),>($4000+(20*320)+2),>($4000+(20*320)+3),>($4000+(20*320)+4),>($4000+(20*320)+5),>($4000+(20*320)+6),>($4000+(20*320)+7)
!BYTE >($4000+(21*320)+0),>($4000+(21*320)+1),>($4000+(21*320)+2),>($4000+(21*320)+3),>($4000+(21*320)+4),>($4000+(21*320)+5),>($4000+(21*320)+6),>($4000+(21*320)+7)
!BYTE >($4000+(22*320)+0),>($4000+(22*320)+1),>($4000+(22*320)+2),>($4000+(22*320)+3),>($4000+(22*320)+4),>($4000+(22*320)+5),>($4000+(22*320)+6),>($4000+(22*320)+7)
!BYTE >($4000+(23*320)+0),>($4000+(23*320)+1),>($4000+(23*320)+2),>($4000+(23*320)+3),>($4000+(23*320)+4),>($4000+(23*320)+5),>($4000+(23*320)+6),>($4000+(23*320)+7)
!BYTE >($4000+(24*320)+0),>($4000+(24*320)+1),>($4000+(24*320)+2),>($4000+(24*320)+3),>($4000+(24*320)+4),>($4000+(24*320)+5),>($4000+(24*320)+6),>($4000+(24*320)+7)

SC_LO:
!BYTE <($4000+(00*320)+0),<($4000+(00*320)+1),<($4000+(00*320)+2),<($4000+(00*320)+3),<($4000+(00*320)+4),<($4000+(00*320)+5),<($4000+(00*320)+6),<($4000+(00*320)+7)
!BYTE <($4000+(01*320)+0),<($4000+(01*320)+1),<($4000+(01*320)+2),<($4000+(01*320)+3),<($4000+(01*320)+4),<($4000+(01*320)+5),<($4000+(01*320)+6),<($4000+(01*320)+7)
!BYTE <($4000+(02*320)+0),<($4000+(02*320)+1),<($4000+(02*320)+2),<($4000+(02*320)+3),<($4000+(02*320)+4),<($4000+(02*320)+5),<($4000+(02*320)+6),<($4000+(02*320)+7)
!BYTE <($4000+(03*320)+0),<($4000+(03*320)+1),<($4000+(03*320)+2),<($4000+(03*320)+3),<($4000+(03*320)+4),<($4000+(03*320)+5),<($4000+(03*320)+6),<($4000+(03*320)+7)
!BYTE <($4000+(04*320)+0),<($4000+(04*320)+1),<($4000+(04*320)+2),<($4000+(04*320)+3),<($4000+(04*320)+4),<($4000+(04*320)+5),<($4000+(04*320)+6),<($4000+(04*320)+7)
!BYTE <($4000+(05*320)+0),<($4000+(05*320)+1),<($4000+(05*320)+2),<($4000+(05*320)+3),<($4000+(05*320)+4),<($4000+(05*320)+5),<($4000+(05*320)+6),<($4000+(05*320)+7)
!BYTE <($4000+(06*320)+0),<($4000+(06*320)+1),<($4000+(06*320)+2),<($4000+(06*320)+3),<($4000+(06*320)+4),<($4000+(06*320)+5),<($4000+(06*320)+6),<($4000+(06*320)+7)
!BYTE <($4000+(07*320)+0),<($4000+(07*320)+1),<($4000+(07*320)+2),<($4000+(07*320)+3),<($4000+(07*320)+4),<($4000+(07*320)+5),<($4000+(07*320)+6),<($4000+(07*320)+7)
!BYTE <($4000+(08*320)+0),<($4000+(08*320)+1),<($4000+(08*320)+2),<($4000+(08*320)+3),<($4000+(08*320)+4),<($4000+(08*320)+5),<($4000+(08*320)+6),<($4000+(08*320)+7)
!BYTE <($4000+(09*320)+0),<($4000+(09*320)+1),<($4000+(09*320)+2),<($4000+(09*320)+3),<($4000+(09*320)+4),<($4000+(09*320)+5),<($4000+(09*320)+6),<($4000+(09*320)+7)
!BYTE <($4000+(10*320)+0),<($4000+(10*320)+1),<($4000+(10*320)+2),<($4000+(10*320)+3),<($4000+(10*320)+4),<($4000+(10*320)+5),<($4000+(10*320)+6),<($4000+(10*320)+7)
!BYTE <($4000+(11*320)+0),<($4000+(11*320)+1),<($4000+(11*320)+2),<($4000+(11*320)+3),<($4000+(11*320)+4),<($4000+(11*320)+5),<($4000+(11*320)+6),<($4000+(11*320)+7)
!BYTE <($4000+(12*320)+0),<($4000+(12*320)+1),<($4000+(12*320)+2),<($4000+(12*320)+3),<($4000+(12*320)+4),<($4000+(12*320)+5),<($4000+(12*320)+6),<($4000+(12*320)+7)
!BYTE <($4000+(13*320)+0),<($4000+(13*320)+1),<($4000+(13*320)+2),<($4000+(13*320)+3),<($4000+(13*320)+4),<($4000+(13*320)+5),<($4000+(13*320)+6),<($4000+(13*320)+7)
!BYTE <($4000+(14*320)+0),<($4000+(14*320)+1),<($4000+(14*320)+2),<($4000+(14*320)+3),<($4000+(14*320)+4),<($4000+(14*320)+5),<($4000+(14*320)+6),<($4000+(14*320)+7)
!BYTE <($4000+(15*320)+0),<($4000+(15*320)+1),<($4000+(15*320)+2),<($4000+(15*320)+3),<($4000+(15*320)+4),<($4000+(15*320)+5),<($4000+(15*320)+6),<($4000+(15*320)+7)
!BYTE <($4000+(16*320)+0),<($4000+(16*320)+1),<($4000+(16*320)+2),<($4000+(16*320)+3),<($4000+(16*320)+4),<($4000+(16*320)+5),<($4000+(16*320)+6),<($4000+(16*320)+7)
!BYTE <($4000+(17*320)+0),<($4000+(17*320)+1),<($4000+(17*320)+2),<($4000+(17*320)+3),<($4000+(17*320)+4),<($4000+(17*320)+5),<($4000+(17*320)+6),<($4000+(17*320)+7)
!BYTE <($4000+(18*320)+0),<($4000+(18*320)+1),<($4000+(18*320)+2),<($4000+(18*320)+3),<($4000+(18*320)+4),<($4000+(18*320)+5),<($4000+(18*320)+6),<($4000+(18*320)+7)
!BYTE <($4000+(19*320)+0),<($4000+(19*320)+1),<($4000+(19*320)+2),<($4000+(19*320)+3),<($4000+(19*320)+4),<($4000+(19*320)+5),<($4000+(19*320)+6),<($4000+(19*320)+7)
!BYTE <($4000+(20*320)+0),<($4000+(20*320)+1),<($4000+(20*320)+2),<($4000+(20*320)+3),<($4000+(20*320)+4),<($4000+(20*320)+5),<($4000+(20*320)+6),<($4000+(20*320)+7)
!BYTE <($4000+(21*320)+0),<($4000+(21*320)+1),<($4000+(21*320)+2),<($4000+(21*320)+3),<($4000+(21*320)+4),<($4000+(21*320)+5),<($4000+(21*320)+6),<($4000+(21*320)+7)
!BYTE <($4000+(22*320)+0),<($4000+(22*320)+1),<($4000+(22*320)+2),<($4000+(22*320)+3),<($4000+(22*320)+4),<($4000+(22*320)+5),<($4000+(22*320)+6),<($4000+(22*320)+7)
!BYTE <($4000+(23*320)+0),<($4000+(23*320)+1),<($4000+(23*320)+2),<($4000+(23*320)+3),<($4000+(23*320)+4),<($4000+(23*320)+5),<($4000+(23*320)+6),<($4000+(23*320)+7)
!BYTE <($4000+(24*320)+0),<($4000+(24*320)+1),<($4000+(24*320)+2),<($4000+(24*320)+3),<($4000+(24*320)+4),<($4000+(24*320)+5),<($4000+(24*320)+6),<($4000+(24*320)+7)

SB_HI:
!BYTE >(SCN_BUF+(00*320)+0),>(SCN_BUF+(00*320)+1),>(SCN_BUF+(00*320)+2),>(SCN_BUF+(00*320)+3),>(SCN_BUF+(00*320)+4),>(SCN_BUF+(00*320)+5),>(SCN_BUF+(00*320)+6),>(SCN_BUF+(00*320)+7)
!BYTE >(SCN_BUF+(01*320)+0),>(SCN_BUF+(01*320)+1),>(SCN_BUF+(01*320)+2),>(SCN_BUF+(01*320)+3),>(SCN_BUF+(01*320)+4),>(SCN_BUF+(01*320)+5),>(SCN_BUF+(01*320)+6),>(SCN_BUF+(01*320)+7)
!BYTE >(SCN_BUF+(02*320)+0),>(SCN_BUF+(02*320)+1),>(SCN_BUF+(02*320)+2),>(SCN_BUF+(02*320)+3),>(SCN_BUF+(02*320)+4),>(SCN_BUF+(02*320)+5),>(SCN_BUF+(02*320)+6),>(SCN_BUF+(02*320)+7)
!BYTE >(SCN_BUF+(03*320)+0),>(SCN_BUF+(03*320)+1),>(SCN_BUF+(03*320)+2),>(SCN_BUF+(03*320)+3),>(SCN_BUF+(03*320)+4),>(SCN_BUF+(03*320)+5),>(SCN_BUF+(03*320)+6),>(SCN_BUF+(03*320)+7)
!BYTE >(SCN_BUF+(04*320)+0),>(SCN_BUF+(04*320)+1),>(SCN_BUF+(04*320)+2),>(SCN_BUF+(04*320)+3),>(SCN_BUF+(04*320)+4),>(SCN_BUF+(04*320)+5),>(SCN_BUF+(04*320)+6),>(SCN_BUF+(04*320)+7)
!BYTE >(SCN_BUF+(05*320)+0),>(SCN_BUF+(05*320)+1),>(SCN_BUF+(05*320)+2),>(SCN_BUF+(05*320)+3),>(SCN_BUF+(05*320)+4),>(SCN_BUF+(05*320)+5),>(SCN_BUF+(05*320)+6),>(SCN_BUF+(05*320)+7)
!BYTE >(SCN_BUF+(06*320)+0),>(SCN_BUF+(06*320)+1),>(SCN_BUF+(06*320)+2),>(SCN_BUF+(06*320)+3),>(SCN_BUF+(06*320)+4),>(SCN_BUF+(06*320)+5),>(SCN_BUF+(06*320)+6),>(SCN_BUF+(06*320)+7)
!BYTE >(SCN_BUF+(07*320)+0),>(SCN_BUF+(07*320)+1),>(SCN_BUF+(07*320)+2),>(SCN_BUF+(07*320)+3),>(SCN_BUF+(07*320)+4),>(SCN_BUF+(07*320)+5),>(SCN_BUF+(07*320)+6),>(SCN_BUF+(07*320)+7)
!BYTE >(SCN_BUF+(08*320)+0),>(SCN_BUF+(08*320)+1),>(SCN_BUF+(08*320)+2),>(SCN_BUF+(08*320)+3),>(SCN_BUF+(08*320)+4),>(SCN_BUF+(08*320)+5),>(SCN_BUF+(08*320)+6),>(SCN_BUF+(08*320)+7)
!BYTE >(SCN_BUF+(09*320)+0),>(SCN_BUF+(09*320)+1),>(SCN_BUF+(09*320)+2),>(SCN_BUF+(09*320)+3),>(SCN_BUF+(09*320)+4),>(SCN_BUF+(09*320)+5),>(SCN_BUF+(09*320)+6),>(SCN_BUF+(09*320)+7)
!BYTE >(SCN_BUF+(10*320)+0),>(SCN_BUF+(10*320)+1),>(SCN_BUF+(10*320)+2),>(SCN_BUF+(10*320)+3),>(SCN_BUF+(10*320)+4),>(SCN_BUF+(10*320)+5),>(SCN_BUF+(10*320)+6),>(SCN_BUF+(10*320)+7)
!BYTE >(SCN_BUF+(11*320)+0),>(SCN_BUF+(11*320)+1),>(SCN_BUF+(11*320)+2),>(SCN_BUF+(11*320)+3),>(SCN_BUF+(11*320)+4),>(SCN_BUF+(11*320)+5),>(SCN_BUF+(11*320)+6),>(SCN_BUF+(11*320)+7)
!BYTE >(SCN_BUF+(12*320)+0),>(SCN_BUF+(12*320)+1),>(SCN_BUF+(12*320)+2),>(SCN_BUF+(12*320)+3),>(SCN_BUF+(12*320)+4),>(SCN_BUF+(12*320)+5),>(SCN_BUF+(12*320)+6),>(SCN_BUF+(12*320)+7)
!BYTE >(SCN_BUF+(13*320)+0),>(SCN_BUF+(13*320)+1),>(SCN_BUF+(13*320)+2),>(SCN_BUF+(13*320)+3),>(SCN_BUF+(13*320)+4),>(SCN_BUF+(13*320)+5),>(SCN_BUF+(13*320)+6),>(SCN_BUF+(13*320)+7)
!BYTE >(SCN_BUF+(14*320)+0),>(SCN_BUF+(14*320)+1),>(SCN_BUF+(14*320)+2),>(SCN_BUF+(14*320)+3),>(SCN_BUF+(14*320)+4),>(SCN_BUF+(14*320)+5),>(SCN_BUF+(14*320)+6),>(SCN_BUF+(14*320)+7)
!BYTE >(SCN_BUF+(15*320)+0),>(SCN_BUF+(15*320)+1),>(SCN_BUF+(15*320)+2),>(SCN_BUF+(15*320)+3),>(SCN_BUF+(15*320)+4),>(SCN_BUF+(15*320)+5),>(SCN_BUF+(15*320)+6),>(SCN_BUF+(15*320)+7)
!BYTE >(SCN_BUF+(16*320)+0),>(SCN_BUF+(16*320)+1),>(SCN_BUF+(16*320)+2),>(SCN_BUF+(16*320)+3),>(SCN_BUF+(16*320)+4),>(SCN_BUF+(16*320)+5),>(SCN_BUF+(16*320)+6),>(SCN_BUF+(16*320)+7)
!BYTE >(SCN_BUF+(17*320)+0),>(SCN_BUF+(17*320)+1),>(SCN_BUF+(17*320)+2),>(SCN_BUF+(17*320)+3),>(SCN_BUF+(17*320)+4),>(SCN_BUF+(17*320)+5),>(SCN_BUF+(17*320)+6),>(SCN_BUF+(17*320)+7)
!BYTE >(SCN_BUF+(18*320)+0),>(SCN_BUF+(18*320)+1),>(SCN_BUF+(18*320)+2),>(SCN_BUF+(18*320)+3),>(SCN_BUF+(18*320)+4),>(SCN_BUF+(18*320)+5),>(SCN_BUF+(18*320)+6),>(SCN_BUF+(18*320)+7)
!BYTE >(SCN_BUF+(19*320)+0),>(SCN_BUF+(19*320)+1),>(SCN_BUF+(19*320)+2),>(SCN_BUF+(19*320)+3),>(SCN_BUF+(19*320)+4),>(SCN_BUF+(19*320)+5),>(SCN_BUF+(19*320)+6),>(SCN_BUF+(19*320)+7)
!BYTE >(SCN_BUF+(20*320)+0),>(SCN_BUF+(20*320)+1),>(SCN_BUF+(20*320)+2),>(SCN_BUF+(20*320)+3),>(SCN_BUF+(20*320)+4),>(SCN_BUF+(20*320)+5),>(SCN_BUF+(20*320)+6),>(SCN_BUF+(20*320)+7)
!BYTE >(SCN_BUF+(21*320)+0),>(SCN_BUF+(21*320)+1),>(SCN_BUF+(21*320)+2),>(SCN_BUF+(21*320)+3),>(SCN_BUF+(21*320)+4),>(SCN_BUF+(21*320)+5),>(SCN_BUF+(21*320)+6),>(SCN_BUF+(21*320)+7)
!BYTE >(SCN_BUF+(22*320)+0),>(SCN_BUF+(22*320)+1),>(SCN_BUF+(22*320)+2),>(SCN_BUF+(22*320)+3),>(SCN_BUF+(22*320)+4),>(SCN_BUF+(22*320)+5),>(SCN_BUF+(22*320)+6),>(SCN_BUF+(22*320)+7)
!BYTE >(SCN_BUF+(23*320)+0),>(SCN_BUF+(23*320)+1),>(SCN_BUF+(23*320)+2),>(SCN_BUF+(23*320)+3),>(SCN_BUF+(23*320)+4),>(SCN_BUF+(23*320)+5),>(SCN_BUF+(23*320)+6),>(SCN_BUF+(23*320)+7)
!BYTE >(SCN_BUF+(24*320)+0),>(SCN_BUF+(24*320)+1),>(SCN_BUF+(24*320)+2),>(SCN_BUF+(24*320)+3),>(SCN_BUF+(24*320)+4),>(SCN_BUF+(24*320)+5),>(SCN_BUF+(24*320)+6),>(SCN_BUF+(24*320)+7)

TB_HI:
!BYTE >(TMP_BUF+(00*320)+0),>(TMP_BUF+(00*320)+1),>(TMP_BUF+(00*320)+2),>(TMP_BUF+(00*320)+3),>(TMP_BUF+(00*320)+4),>(TMP_BUF+(00*320)+5),>(TMP_BUF+(00*320)+6),>(TMP_BUF+(00*320)+7)
!BYTE >(TMP_BUF+(01*320)+0),>(TMP_BUF+(01*320)+1),>(TMP_BUF+(01*320)+2),>(TMP_BUF+(01*320)+3),>(TMP_BUF+(01*320)+4),>(TMP_BUF+(01*320)+5),>(TMP_BUF+(01*320)+6),>(TMP_BUF+(01*320)+7)
!BYTE >(TMP_BUF+(02*320)+0),>(TMP_BUF+(02*320)+1),>(TMP_BUF+(02*320)+2),>(TMP_BUF+(02*320)+3),>(TMP_BUF+(02*320)+4),>(TMP_BUF+(02*320)+5),>(TMP_BUF+(02*320)+6),>(TMP_BUF+(02*320)+7)
!BYTE >(TMP_BUF+(03*320)+0),>(TMP_BUF+(03*320)+1),>(TMP_BUF+(03*320)+2),>(TMP_BUF+(03*320)+3),>(TMP_BUF+(03*320)+4),>(TMP_BUF+(03*320)+5),>(TMP_BUF+(03*320)+6),>(TMP_BUF+(03*320)+7)
!BYTE >(TMP_BUF+(04*320)+0),>(TMP_BUF+(04*320)+1),>(TMP_BUF+(04*320)+2),>(TMP_BUF+(04*320)+3),>(TMP_BUF+(04*320)+4),>(TMP_BUF+(04*320)+5),>(TMP_BUF+(04*320)+6),>(TMP_BUF+(04*320)+7)
!BYTE >(TMP_BUF+(05*320)+0),>(TMP_BUF+(05*320)+1),>(TMP_BUF+(05*320)+2),>(TMP_BUF+(05*320)+3),>(TMP_BUF+(05*320)+4),>(TMP_BUF+(05*320)+5),>(TMP_BUF+(05*320)+6),>(TMP_BUF+(05*320)+7)
!BYTE >(TMP_BUF+(06*320)+0),>(TMP_BUF+(06*320)+1),>(TMP_BUF+(06*320)+2),>(TMP_BUF+(06*320)+3),>(TMP_BUF+(06*320)+4),>(TMP_BUF+(06*320)+5),>(TMP_BUF+(06*320)+6),>(TMP_BUF+(06*320)+7)
!BYTE >(TMP_BUF+(07*320)+0),>(TMP_BUF+(07*320)+1),>(TMP_BUF+(07*320)+2),>(TMP_BUF+(07*320)+3),>(TMP_BUF+(07*320)+4),>(TMP_BUF+(07*320)+5),>(TMP_BUF+(07*320)+6),>(TMP_BUF+(07*320)+7)
!BYTE >(TMP_BUF+(08*320)+0),>(TMP_BUF+(08*320)+1),>(TMP_BUF+(08*320)+2),>(TMP_BUF+(08*320)+3),>(TMP_BUF+(08*320)+4),>(TMP_BUF+(08*320)+5),>(TMP_BUF+(08*320)+6),>(TMP_BUF+(08*320)+7)
!BYTE >(TMP_BUF+(09*320)+0),>(TMP_BUF+(09*320)+1),>(TMP_BUF+(09*320)+2),>(TMP_BUF+(09*320)+3),>(TMP_BUF+(09*320)+4),>(TMP_BUF+(09*320)+5),>(TMP_BUF+(09*320)+6),>(TMP_BUF+(09*320)+7)
!BYTE >(TMP_BUF+(10*320)+0),>(TMP_BUF+(10*320)+1),>(TMP_BUF+(10*320)+2),>(TMP_BUF+(10*320)+3),>(TMP_BUF+(10*320)+4),>(TMP_BUF+(10*320)+5),>(TMP_BUF+(10*320)+6),>(TMP_BUF+(10*320)+7)
!BYTE >(TMP_BUF+(11*320)+0),>(TMP_BUF+(11*320)+1),>(TMP_BUF+(11*320)+2),>(TMP_BUF+(11*320)+3),>(TMP_BUF+(11*320)+4),>(TMP_BUF+(11*320)+5),>(TMP_BUF+(11*320)+6),>(TMP_BUF+(11*320)+7)
!BYTE >(TMP_BUF+(12*320)+0),>(TMP_BUF+(12*320)+1),>(TMP_BUF+(12*320)+2),>(TMP_BUF+(12*320)+3),>(TMP_BUF+(12*320)+4),>(TMP_BUF+(12*320)+5),>(TMP_BUF+(12*320)+6),>(TMP_BUF+(12*320)+7)
!BYTE >(TMP_BUF+(13*320)+0),>(TMP_BUF+(13*320)+1),>(TMP_BUF+(13*320)+2),>(TMP_BUF+(13*320)+3),>(TMP_BUF+(13*320)+4),>(TMP_BUF+(13*320)+5),>(TMP_BUF+(13*320)+6),>(TMP_BUF+(13*320)+7)
!BYTE >(TMP_BUF+(14*320)+0),>(TMP_BUF+(14*320)+1),>(TMP_BUF+(14*320)+2),>(TMP_BUF+(14*320)+3),>(TMP_BUF+(14*320)+4),>(TMP_BUF+(14*320)+5),>(TMP_BUF+(14*320)+6),>(TMP_BUF+(14*320)+7)
!BYTE >(TMP_BUF+(15*320)+0),>(TMP_BUF+(15*320)+1),>(TMP_BUF+(15*320)+2),>(TMP_BUF+(15*320)+3),>(TMP_BUF+(15*320)+4),>(TMP_BUF+(15*320)+5),>(TMP_BUF+(15*320)+6),>(TMP_BUF+(15*320)+7)
!BYTE >(TMP_BUF+(16*320)+0),>(TMP_BUF+(16*320)+1),>(TMP_BUF+(16*320)+2),>(TMP_BUF+(16*320)+3),>(TMP_BUF+(16*320)+4),>(TMP_BUF+(16*320)+5),>(TMP_BUF+(16*320)+6),>(TMP_BUF+(16*320)+7)
!BYTE >(TMP_BUF+(17*320)+0),>(TMP_BUF+(17*320)+1),>(TMP_BUF+(17*320)+2),>(TMP_BUF+(17*320)+3),>(TMP_BUF+(17*320)+4),>(TMP_BUF+(17*320)+5),>(TMP_BUF+(17*320)+6),>(TMP_BUF+(17*320)+7)
!BYTE >(TMP_BUF+(18*320)+0),>(TMP_BUF+(18*320)+1),>(TMP_BUF+(18*320)+2),>(TMP_BUF+(18*320)+3),>(TMP_BUF+(18*320)+4),>(TMP_BUF+(18*320)+5),>(TMP_BUF+(18*320)+6),>(TMP_BUF+(18*320)+7)
!BYTE >(TMP_BUF+(19*320)+0),>(TMP_BUF+(19*320)+1),>(TMP_BUF+(19*320)+2),>(TMP_BUF+(19*320)+3),>(TMP_BUF+(19*320)+4),>(TMP_BUF+(19*320)+5),>(TMP_BUF+(19*320)+6),>(TMP_BUF+(19*320)+7)
!BYTE >(TMP_BUF+(20*320)+0),>(TMP_BUF+(20*320)+1),>(TMP_BUF+(20*320)+2),>(TMP_BUF+(20*320)+3),>(TMP_BUF+(20*320)+4),>(TMP_BUF+(20*320)+5),>(TMP_BUF+(20*320)+6),>(TMP_BUF+(20*320)+7)
!BYTE >(TMP_BUF+(21*320)+0),>(TMP_BUF+(21*320)+1),>(TMP_BUF+(21*320)+2),>(TMP_BUF+(21*320)+3),>(TMP_BUF+(21*320)+4),>(TMP_BUF+(21*320)+5),>(TMP_BUF+(21*320)+6),>(TMP_BUF+(21*320)+7)
!BYTE >(TMP_BUF+(22*320)+0),>(TMP_BUF+(22*320)+1),>(TMP_BUF+(22*320)+2),>(TMP_BUF+(22*320)+3),>(TMP_BUF+(22*320)+4),>(TMP_BUF+(22*320)+5),>(TMP_BUF+(22*320)+6),>(TMP_BUF+(22*320)+7)
!BYTE >(TMP_BUF+(23*320)+0),>(TMP_BUF+(23*320)+1),>(TMP_BUF+(23*320)+2),>(TMP_BUF+(23*320)+3),>(TMP_BUF+(23*320)+4),>(TMP_BUF+(23*320)+5),>(TMP_BUF+(23*320)+6),>(TMP_BUF+(23*320)+7)
!BYTE >(TMP_BUF+(24*320)+0),>(TMP_BUF+(24*320)+1),>(TMP_BUF+(24*320)+2),>(TMP_BUF+(24*320)+3),>(TMP_BUF+(24*320)+4),>(TMP_BUF+(24*320)+5),>(TMP_BUF+(24*320)+6),>(TMP_BUF+(24*320)+7)

!ALIGN 255,0

SPR00_AND_LO !BYTE <(SPR00_AND_0-8),<(SPR00_AND_1-8),<(SPR00_AND_2-8),<(SPR00_AND_3-8)
SPR00_AND_HI !BYTE >(SPR00_AND_0-8),>(SPR00_AND_1-8),>(SPR00_AND_2-8),>(SPR00_AND_3-8)
SPR00_ORA_LO !BYTE <(SPR00_ORA_0-8),<(SPR00_ORA_1-8),<(SPR00_ORA_2-8),<(SPR00_ORA_3-8)
SPR00_ORA_HI !BYTE >(SPR00_ORA_0-8),>(SPR00_ORA_1-8),>(SPR00_ORA_2-8),>(SPR00_ORA_3-8)

SPR01_AND_LO !BYTE <(SPR01_AND_0-16),<(SPR01_AND_1-16),<(SPR01_AND_2-16),<(SPR01_AND_3-16)
SPR01_AND_HI !BYTE >(SPR01_AND_0-16),>(SPR01_AND_1-16),>(SPR01_AND_2-16),>(SPR01_AND_3-16)
SPR01_ORA_LO !BYTE <(SPR01_ORA_0-16),<(SPR01_ORA_1-16),<(SPR01_ORA_2-16),<(SPR01_ORA_3-16)
SPR01_ORA_HI !BYTE >(SPR01_ORA_0-16),>(SPR01_ORA_1-16),>(SPR01_ORA_2-16),>(SPR01_ORA_3-16)

SPR02_AND_LO !BYTE <(SPR02_AND_0-24),<(SPR02_AND_1-24),<(SPR02_AND_2-24),<(SPR02_AND_3-24)
SPR02_AND_HI !BYTE >(SPR02_AND_0-24),>(SPR02_AND_1-24),>(SPR02_AND_2-24),>(SPR02_AND_3-24)
SPR02_ORA_LO !BYTE <(SPR02_ORA_0-24),<(SPR02_ORA_1-24),<(SPR02_ORA_2-24),<(SPR02_ORA_3-24)
SPR02_ORA_HI !BYTE >(SPR02_ORA_0-24),>(SPR02_ORA_1-24),>(SPR02_ORA_2-24),>(SPR02_ORA_3-24)

SPR03_AND_LO !BYTE <(SPR03_AND_0-32),<(SPR03_AND_1-32),<(SPR03_AND_2-32),<(SPR03_AND_3-32)
SPR03_AND_HI !BYTE >(SPR03_AND_0-32),>(SPR03_AND_1-32),>(SPR03_AND_2-32),>(SPR03_AND_3-32)
SPR03_ORA_LO !BYTE <(SPR03_ORA_0-32),<(SPR03_ORA_1-32),<(SPR03_ORA_2-32),<(SPR03_ORA_3-32)
SPR03_ORA_HI !BYTE >(SPR03_ORA_0-32),>(SPR03_ORA_1-32),>(SPR03_ORA_2-32),>(SPR03_ORA_3-32)

SPRITE_AND_LO_LO !BYTE <SPR00_AND_LO,<SPR01_AND_LO,<SPR02_AND_LO,<SPR03_AND_LO
SPRITE_AND_LO_HI !BYTE >SPR00_AND_LO,>SPR01_AND_LO,>SPR02_AND_LO,>SPR03_AND_LO
SPRITE_AND_HI_LO !BYTE <SPR00_AND_HI,<SPR01_AND_HI,<SPR02_AND_HI,<SPR03_AND_HI
SPRITE_AND_HI_HI !BYTE >SPR00_AND_HI,>SPR01_AND_HI,>SPR02_AND_HI,>SPR03_AND_HI
SPRITE_ORA_LO_LO !BYTE <SPR00_ORA_LO,<SPR01_ORA_LO,<SPR02_ORA_LO,<SPR03_ORA_LO
SPRITE_ORA_LO_HI !BYTE >SPR00_ORA_LO,>SPR01_ORA_LO,>SPR02_ORA_LO,>SPR03_ORA_LO
SPRITE_ORA_HI_LO !BYTE <SPR00_ORA_HI,<SPR01_ORA_HI,<SPR02_ORA_HI,<SPR03_ORA_HI
SPRITE_ORA_HI_HI !BYTE >SPR00_ORA_HI,>SPR01_ORA_HI,>SPR02_ORA_HI,>SPR03_ORA_HI
SPRITE_TYPE      !BYTE 0,1,2,3

;SPR00_AND_0
; !BYTE %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
; !BYTE %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
;SPR00_AND_1
; !BYTE %00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111
; !BYTE %11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000
;SPR00_AND_2
; !BYTE %00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111,%00001111
; !BYTE %11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000,%11110000
;SPR00_AND_3
; !BYTE %00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011
; !BYTE %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100
; 
;SPR00_ORA_0
; !BYTE %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
; !BYTE %11111111,%11011011,%11100111,%11011011,%11100111,%11011011,%11100111,%11111111
;SPR00_ORA_1
; !BYTE %11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000,%11000000
; !BYTE %00111111,%00110110,%00111001,%00110110,%00111001,%00110110,%00111001,%00111111
;SPR00_ORA_2
; !BYTE %11110000,%10110000,%01110000,%10110000,%01110000,%10110000,%01110000,%11110000
; !BYTE %00001111,%00001101,%00001110,%00001101,%00001110,%00001101,%00001110,%00001111
;SPR00_ORA_3
; !BYTE %11111100,%01101100,%10011100,%01101100,%10011100,%01101100,%10011100,%11111100
; !BYTE %00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011,%00000011

SPR00_ORA_0
!BYTE %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
!BYTE %00010100,%01111101,%01101001,%01000001,%01000001,%01101001,%01111101,%00010100

SPR00_ORA_1
!BYTE %00000000,%01000000,%01000000,%01000000,%01000000,%01000000,%01000000,%00000000
!BYTE %00000101,%00011111,%00011010,%00010000,%00010000,%00011010,%00011111,%00000101

SPR00_ORA_2
!BYTE %01000000,%11010000,%10010000,%00010000,%00010000,%10010000,%11010000,%01000000
!BYTE %00000001,%00000111,%00000110,%00000100,%00000100,%00000110,%00000111,%00000001

SPR00_ORA_3
!BYTE %01010000,%11110100,%10100100,%00000100,%00000100,%10100100,%11110100,%01010000
!BYTE %00000000,%00000001,%00000001,%00000001,%00000001,%00000001,%00000001,%00000000

SPR00_AND_0
!BYTE %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
!BYTE %11000011,%00000000,%00000000,%00111100,%00111100,%00000000,%00000000,%11000011

SPR00_AND_1
!BYTE %11111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%11111111
!BYTE %11110000,%11000000,%11000000,%11001111,%11001111,%11000000,%11000000,%11110000

SPR00_AND_2
!BYTE %00111111,%00001111,%00001111,%11001111,%11001111,%00001111,%00001111,%00111111
!BYTE %11111100,%11110000,%11110000,%11110011,%11110011,%11110000,%11110000,%11111100

SPR00_AND_3
!BYTE %00001111,%00000011,%00000011,%11110011,%11110011,%00000011,%00000011,%00001111
!BYTE %11111111,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111111


SPR01_ORA_0
!BYTE %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
!BYTE %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
!BYTE %00101000,%10111110,%10000010,%10000010,%10010110,%10111110,%10010110,%10000010
!BYTE %10000010,%10010110,%10111110,%10010110,%10000010,%10000010,%10111110,%00101000

SPR01_AND_0
!BYTE %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
!BYTE %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
!BYTE %11000011,%00000000,%00111100,%00111100,%00000000,%00000000,%00000000,%00111100
!BYTE %00111100,%00000000,%00000000,%00000000,%00111100,%00111100,%00000000,%11000011

SPR01_ORA_1
!BYTE %00000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000
!BYTE %10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%00000000
!BYTE %00001010,%00101111,%00100000,%00100000,%00100101,%00101111,%00100101,%00100000
!BYTE %00100000,%00100101,%00101111,%00100101,%00100000,%00100000,%00101111,%00001010

SPR01_AND_1
!BYTE %11111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111
!BYTE %00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%11111111
!BYTE %11110000,%11000000,%11001111,%11001111,%11000000,%11000000,%11000000,%11001111
!BYTE %11001111,%11000000,%11000000,%11000000,%11001111,%11001111,%11000000,%11110000

SPR01_ORA_2
!BYTE %10000000,%11100000,%00100000,%00100000,%01100000,%11100000,%01100000,%00100000
!BYTE %00100000,%01100000,%11100000,%01100000,%00100000,%00100000,%11100000,%10000000
!BYTE %00000010,%00001011,%00001000,%00001000,%00001001,%00001011,%00001001,%00001000
!BYTE %00001000,%00001001,%00001011,%00001001,%00001000,%00001000,%00001011,%00000010

SPR01_AND_2
!BYTE %00111111,%00001111,%11001111,%11001111,%00001111,%00001111,%00001111,%11001111
!BYTE %11001111,%00001111,%00001111,%00001111,%11001111,%11001111,%00001111,%00111111
!BYTE %11111100,%11110000,%11110011,%11110011,%11110000,%11110000,%11110000,%11110011
!BYTE %11110011,%11110000,%11110000,%11110000,%11110011,%11110011,%11110000,%11111100

SPR01_ORA_3
!BYTE %10100000,%11111000,%00001000,%00001000,%01011000,%11111000,%01011000,%00001000
!BYTE %00001000,%01011000,%11111000,%01011000,%00001000,%00001000,%11111000,%10100000
!BYTE %00000000,%00000010,%00000010,%00000010,%00000010,%00000010,%00000010,%00000010
!BYTE %00000010,%00000010,%00000010,%00000010,%00000010,%00000010,%00000010,%00000000

SPR01_AND_3
!BYTE %00001111,%00000011,%11110011,%11110011,%00000011,%00000011,%00000011,%11110011
!BYTE %11110011,%00000011,%00000011,%00000011,%11110011,%11110011,%00000011,%00001111
!BYTE %11111111,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100
!BYTE %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111111

SPR02_ORA_0
!BYTE %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
!BYTE %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
!BYTE %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
!BYTE %00101000,%10111110,%10000010,%10000010,%10010110,%10111110,%10010110,%10000010
!BYTE %10000010,%10010110,%10010110,%10000010,%10000010,%10111110,%10111110,%10000010
!BYTE %10000010,%10010110,%10111110,%10010110,%10000010,%10000010,%10111110,%00101000

SPR02_ORA_1
!BYTE %00000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000
!BYTE %10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000
!BYTE %10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%00000000
!BYTE %00001010,%00101111,%00100000,%00100000,%00100101,%00101111,%00100101,%00100000
!BYTE %00100000,%00100101,%00100101,%00100000,%00100000,%00101111,%00101111,%00100000
!BYTE %00100000,%00100101,%00101111,%00100101,%00100000,%00100000,%00101111,%00001010

SPR02_ORA_2
!BYTE %10000000,%11100000,%00100000,%00100000,%01100000,%11100000,%01100000,%00100000
!BYTE %00100000,%01100000,%01100000,%00100000,%00100000,%11100000,%11100000,%00100000
!BYTE %00100000,%01100000,%11100000,%01100000,%00100000,%00100000,%11100000,%10000000
!BYTE %00000010,%00001011,%00001000,%00001000,%00001001,%00001011,%00001001,%00001000
!BYTE %00001000,%00001001,%00001001,%00001000,%00001000,%00001011,%00001011,%00001000
!BYTE %00001000,%00001001,%00001011,%00001001,%00001000,%00001000,%00001011,%00000010

SPR02_ORA_3
!BYTE %10100000,%11111000,%00001000,%00001000,%01011000,%11111000,%01011000,%00001000
!BYTE %00001000,%01011000,%01011000,%00001000,%00001000,%11111000,%11111000,%00001000
!BYTE %00001000,%01011000,%11111000,%01011000,%00001000,%00001000,%11111000,%10100000
!BYTE %00000000,%00000010,%00000010,%00000010,%00000010,%00000010,%00000010,%00000010
!BYTE %00000010,%00000010,%00000010,%00000010,%00000010,%00000010,%00000010,%00000010
!BYTE %00000010,%00000010,%00000010,%00000010,%00000010,%00000010,%00000010,%00000000

SPR02_AND_0
!BYTE %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
!BYTE %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
!BYTE %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
!BYTE %11000011,%00000000,%00111100,%00111100,%00000000,%00000000,%00000000,%00111100
!BYTE %00111100,%00000000,%00000000,%00111100,%00111100,%00000000,%00000000,%00111100
!BYTE %00111100,%00000000,%00000000,%00000000,%00111100,%00111100,%00000000,%11000011

SPR02_AND_1
!BYTE %11111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111
!BYTE %00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111
!BYTE %00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%11111111
!BYTE %11110000,%11000000,%11001111,%11001111,%11000000,%11000000,%11000000,%11001111
!BYTE %11001111,%11000000,%11000000,%11001111,%11001111,%11000000,%11000000,%11001111
!BYTE %11001111,%11000000,%11000000,%11000000,%11001111,%11001111,%11000000,%11110000

SPR02_AND_2
!BYTE %00111111,%00001111,%11001111,%11001111,%00001111,%00001111,%00001111,%11001111
!BYTE %11001111,%00001111,%00001111,%11001111,%11001111,%00001111,%00001111,%11001111
!BYTE %11001111,%00001111,%00001111,%00001111,%11001111,%11001111,%00001111,%00111111
!BYTE %11111100,%11110000,%11110011,%11110011,%11110000,%11110000,%11110000,%11110011
!BYTE %11110011,%11110000,%11110000,%11110011,%11110011,%11110000,%11110000,%11110011
!BYTE %11110011,%11110000,%11110000,%11110000,%11110011,%11110011,%11110000,%11111100

SPR02_AND_3
!BYTE %00001111,%00000011,%11110011,%11110011,%00000011,%00000011,%00000011,%11110011
!BYTE %11110011,%00000011,%00000011,%11110011,%11110011,%00000011,%00000011,%11110011
!BYTE %11110011,%00000011,%00000011,%00000011,%11110011,%11110011,%00000011,%00001111
!BYTE %11111111,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100
!BYTE %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100
!BYTE %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111111


SPR03_ORA_0
!BYTE %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
!BYTE %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
!BYTE %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
!BYTE %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
!BYTE %00101000,%10111110,%10000010,%10000010,%10010110,%10111110,%10010110,%10000010
!BYTE %10000010,%10010110,%10010110,%10000010,%10000010,%10111110,%10111110,%10000010
!BYTE %10000010,%10010110,%10010110,%10000010,%10000010,%10111110,%10111110,%10000010
!BYTE %10000010,%10010110,%10111110,%10010110,%10000010,%10000010,%10111110,%00101000

SPR03_ORA_1
!BYTE %00000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000
!BYTE %10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000
!BYTE %10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000
!BYTE %10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%00000000
!BYTE %00001010,%00101111,%00100000,%00100000,%00100101,%00101111,%00100101,%00100000
!BYTE %00100000,%00100101,%00100101,%00100000,%00100000,%00101111,%00101111,%00100000
!BYTE %00100000,%00100101,%00100101,%00100000,%00100000,%00101111,%00101111,%00100000
!BYTE %00100000,%00100101,%00101111,%00100101,%00100000,%00100000,%00101111,%00001010

SPR03_ORA_2
!BYTE %10000000,%11100000,%00100000,%00100000,%01100000,%11100000,%01100000,%00100000
!BYTE %00100000,%01100000,%01100000,%00100000,%00100000,%11100000,%11100000,%00100000
!BYTE %00100000,%01100000,%01100000,%00100000,%00100000,%11100000,%11100000,%00100000
!BYTE %00100000,%01100000,%11100000,%01100000,%00100000,%00100000,%11100000,%10000000
!BYTE %00000010,%00001011,%00001000,%00001000,%00001001,%00001011,%00001001,%00001000
!BYTE %00001000,%00001001,%00001001,%00001000,%00001000,%00001011,%00001011,%00001000
!BYTE %00001000,%00001001,%00001001,%00001000,%00001000,%00001011,%00001011,%00001000
!BYTE %00001000,%00001001,%00001011,%00001001,%00001000,%00001000,%00001011,%00000010

SPR03_ORA_3
!BYTE %10100000,%11111000,%00001000,%00001000,%01011000,%11111000,%01011000,%00001000
!BYTE %00001000,%01011000,%01011000,%00001000,%00001000,%11111000,%11111000,%00001000
!BYTE %00001000,%01011000,%01011000,%00001000,%00001000,%11111000,%11111000,%00001000
!BYTE %00001000,%01011000,%11111000,%01011000,%00001000,%00001000,%11111000,%10100000
!BYTE %00000000,%00000010,%00000010,%00000010,%00000010,%00000010,%00000010,%00000010
!BYTE %00000010,%00000010,%00000010,%00000010,%00000010,%00000010,%00000010,%00000010
!BYTE %00000010,%00000010,%00000010,%00000010,%00000010,%00000010,%00000010,%00000010
!BYTE %00000010,%00000010,%00000010,%00000010,%00000010,%00000010,%00000010,%00000000

SPR03_AND_0
!BYTE %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
!BYTE %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
!BYTE %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
!BYTE %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
!BYTE %11000011,%00000000,%00111100,%00111100,%00000000,%00000000,%00000000,%00111100
!BYTE %00111100,%00000000,%00000000,%00111100,%00111100,%00000000,%00000000,%00111100
!BYTE %00111100,%00000000,%00000000,%00111100,%00111100,%00000000,%00000000,%00111100
!BYTE %00111100,%00000000,%00000000,%00000000,%00111100,%00111100,%00000000,%11000011

SPR03_AND_1
!BYTE %11111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111
!BYTE %00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111
!BYTE %00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111
!BYTE %00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%00111111,%11111111
!BYTE %11110000,%11000000,%11001111,%11001111,%11000000,%11000000,%11000000,%11001111
!BYTE %11001111,%11000000,%11000000,%11001111,%11001111,%11000000,%11000000,%11001111
!BYTE %11001111,%11000000,%11000000,%11001111,%11001111,%11000000,%11000000,%11001111
!BYTE %11001111,%11000000,%11000000,%11000000,%11001111,%11001111,%11000000,%11110000

SPR03_AND_2
!BYTE %00111111,%00001111,%11001111,%11001111,%00001111,%00001111,%00001111,%11001111
!BYTE %11001111,%00001111,%00001111,%11001111,%11001111,%00001111,%00001111,%11001111
!BYTE %11001111,%00001111,%00001111,%11001111,%11001111,%00001111,%00001111,%11001111
!BYTE %11001111,%00001111,%00001111,%00001111,%11001111,%11001111,%00001111,%00111111
!BYTE %11111100,%11110000,%11110011,%11110011,%11110000,%11110000,%11110000,%11110011
!BYTE %11110011,%11110000,%11110000,%11110011,%11110011,%11110000,%11110000,%11110011
!BYTE %11110011,%11110000,%11110000,%11110011,%11110011,%11110000,%11110000,%11110011
!BYTE %11110011,%11110000,%11110000,%11110000,%11110011,%11110011,%11110000,%11111100

SPR03_AND_3
!BYTE %00001111,%00000011,%11110011,%11110011,%00000011,%00000011,%00000011,%11110011
!BYTE %11110011,%00000011,%00000011,%11110011,%11110011,%00000011,%00000011,%11110011
!BYTE %11110011,%00000011,%00000011,%11110011,%11110011,%00000011,%00000011,%11110011
!BYTE %11110011,%00000011,%00000011,%00000011,%11110011,%11110011,%00000011,%00001111
!BYTE %11111111,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100
!BYTE %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100
!BYTE %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100
!BYTE %11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111100,%11111111


SPRITE_BAK_TMP_LO   !BYTE <BAKB_TMPB_08,<BAKB_TMPB_16,<BAKB_TMPB_24,<BAKB_TMPB_32
SPRITE_BAK_TMP_HI   !BYTE >BAKB_TMPB_08,>BAKB_TMPB_16,>BAKB_TMPB_24,>BAKB_TMPB_32
SPRITE_BAK_TMP_SIZE !BYTE 1,1,1,1

SPRITE_SPR_TMP_LO   !BYTE <SPRN_TMPB_08,<SPRN_TMPB_16,<SPRN_TMPB_24,<SPRN_TMPB_32
SPRITE_SPR_TMP_HI   !BYTE >SPRN_TMPB_08,>SPRN_TMPB_16,>SPRN_TMPB_24,>SPRN_TMPB_32
SPRITE_SPR_TMP_SIZE !BYTE 16,32,48,64

SPRITE_TMP_SCN_LO   !BYTE <TMPB_SCNB_08,<TMPB_SCNB_16,<TMPB_SCNB_24,<TMPB_SCNB_32
SPRITE_TMP_SCN_HI   !BYTE >TMPB_SCNB_08,>TMPB_SCNB_16,>TMPB_SCNB_24,>TMPB_SCNB_32

SCN_BUF = 41984 ; 41 *1024
TMP_BUF = 57344 ; $e000 ; 57344
