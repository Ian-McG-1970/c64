
;b29EF = $29ef
;
; **** ZP ABSOLUTE ADRESSES **** 
;
SCREEN_POS_LO = $02
SCREEN_POS_HI = $03
SCREEN_FLIP = $24
SCREEN_BANK = $25
LINE_INC = $66
SCREEN_POS_PTR = $02
SCREEN_0 = $40
SCREEN_1 = $60

X_POS_HI = $52
X_POS_LO = $53

Y_POS_HI = $54
Y_POS_LO = $55

Z_POS_HI = $56
Z_POS_LO = $57

OBJECT_TO_DRAW = $B8

LINE_JUMP_PTR_LO = $04
LINE_JUMP_PTR_HI = $05

ab06 = $06 ; math temp?
ab07 = $07 ; math temp?

LINE_FRACTION_ab08 = $08

ab08 = $08 ; math temp? line draw fraction?
ab09 = $09 ; math temp?

Z_ROT_LO = $08 ; math temp?
Z_ROT_HI = $09 

ab0A = $0A ; math temp?
X_ROT_LO = $0A ; math temp?
ab0B = $0B ; math temp?
X_ROT_HI = $0B ; math temp?
ab0C = $0C ; math temp?

ab0D = $0D ; math temp?

ab18 = $18 ; math temp?
; ab19 = $19 ; current point pos - current line pos?
POINT_LINE_COUNT = $19

REGA = $0E
REGX = $0F
REGY = $20

ab21 = $21 ; used in line draw?

FP_MULTIPLY_LO = $22
FP_MULTIPLY_HI = $23
FP_DIVIDE_LO = FP_MULTIPLY_LO
FP_DIVIDE_HI = FP_MULTIPLY_HI

ROT_LO = $2C
ROT_HI = $2D

SIN_LO = $3C
SIN_HI = $3D
COS_LO = $3E
COS_HI = $3F

X_ROTATION_LO = $58
X_ROTATION_HI = $59
Y_ROTATION_LO = $5A
Y_ROTATION_HI = $5B
Z_ROTATION_LO = $5C
Z_ROTATION_HI = $5D
ab5E = $5E	; pers?
ab5F = $5F	; pers?
ab60 = $60	; pers?
ab61 = $61	; pers?
ab62 = $62	; pers?
ab63 = $63	; pers?
ab64 = $64	; pers?
ab65 = $65	; pers?
LINE_TYPE_POINTER = $67 ; line type?
ab68 = $68
ab69 = $69
LINE_START_HOR = $6A ; line start x?
LINE_START_VER = $6B ; line start y?
ab6C = $6C	; pers?
ab6D = $6D  ; pers?
POINT_CLASSIFY_1 = $6E	; start point classification of this point?
POINT_CLASSIFY_2 = $6F  ; end point classification

CURR_X_LSB = $72
CURR_X_MSB = $73
CURR_X_HSB = $74
CURR_Y_LSB = $75
CURR_Y_MSB = $76
CURR_Y_HSB = $77
CURR_Z_LSB = $78
CURR_Z_MSB = $79
CURR_Z_HSB = $7A
JOYSTICK_MOVEMENT = $80

SCR_HOR_MID = 160/2
SCR_VER_MID = 136/2

ab90 = $90
ab91 = $91
ab92 = $92
ab93 = $93
ab94 = $94
ab95 = $95
ab96 = $96
ab97 = $97
SPEED_LO = $AA
SPEED_HI = $AB
ROT_SPD = $AC
OBJECT_POINTER_POS = $AD
CURRENT_OBJECT = $AF
NUMBER_OF_POINTS = $B0
DRAW_OBJECT_COUNT = $B2
DRAW_OBJECT_COUNTER = $B3
VIC_SCREEN_BANK = $C7

OBJ_PNT_X 		= $CF
OBJ_PNT_X_MSB 	= $D0
OBJ_PNT_Y 		= $D1
OBJ_PNT_Y_MSB 	= $D2
OBJ_PNT_Z 		= $D3
OBJ_PNT_Z_MSB 	= $D4
DIFF_X_LSB = $D5
DIFF_X_MSB = $D6
DIFF_X_HSB = $D7
DIFF_Y_LSB = $D8
DIFF_Y_MSB = $D9
DIFF_Y_HSB = $DA
DIFF_Z_LSB = $DB
DIFF_Z_MSB = $DC
DIFF_Z_HSB = $DD
OBJECT_POINTER = $1D

IRQ = $FFFE
LINE_JUMP_PTR = LINE_JUMP_PTR_LO

CLIP_TEST_BOTTOM = $88
CLIP_BOTTOM = $87
CLIP_TEST_RIGHT = $A0 ; $80
CLIP_RIGHT = $9F ; $7F
CLIP_TEST_TOP = $00
CLIP_TEST_LEFT = $00

PNT_OFF_RIGHT = $01
PNT_OFF_LEFT = 0
PNT_BEHIND = 0
PNT_ONSCREEN = 0
PNT_OFF_BOTTOM = $02
PNT_OFF_TOP = 0

;        CMP #$88 ; clip test?
;        LDA #$9F ; clip right ?
;        CMP #$A0 ; clip test
;        LDA #$87 ; clip bottom
;        CMP #$88 ; clip test
;        LDA #$00 ; clip off top
;        CMP #$A0 ; clip test
;        LDA #$00 ; clip off right
;        CMP #$88 ; clip test
;        CMP #$A0 ; clip test
;        CPX #$A0 ; clip test

        * = $801

;        JMP	STARTUP ; 3 bytes used taking UNKNOWN_POINT_TAB_7 from 64 bytes to 61 bytes

STARTUP	; CALL STARTUP BEFORE CALLING MAIN - needs to setup vic pointers?
	SEI

 LDA #$00
 STA $D020
 LDA #$01 ; $00
 STA $D021
 LDA #$0B ; $00
 STA $D022
 LDA #$0C ; $00
 STA $D023

; LDA #$01 ; $01 ; colour 11 
; LDX #<$D800
; LDY #>$D800
; STX SCR+0
; STY SCR+1
; LDX #>1000 
; LDY #<1000
; JSR MEMSET

 LDA #$BC ;$65 ; colour 01 (0000????) and colour 10 (????0000) - bank 1
 LDX #<(ab5C00)
 LDY #>(ab5C00)
 STX SCREEN_POS_LO+0
 STY SCREEN_POS_LO+1
 LDX #>1000 
 LDY #<1000
 JSR MEMSET

;	LDA	#$33
;	LDX	#$22
;	LDY	#$11
;	JSR	BIT24TOFP

;	LDX	$08
;	LDY	$09
;	JSR FPTO16BIT
; stx TEMPX
; sty TEMPY

;    LDA #0
;	STA $08
;	STA $09
	
;	ldx #$fd ; #$38 ; #fd
;	ldy #$8f ; #$25 ; #8f
;	jsr	s838B

;	ldx #$38 ; #fd
;	ldy #$25 ; #8f
;	jsr	s838B

;	ldx #$fd ; #$38 ; #fd
;	ldy #$8f ; #$25 ; #8f
;	jsr FPTO8BIT

;	ldx #$38 ; #fd
;	ldy #$25 ; #8f
;	jsr FPTO8BIT

;	txa
;	tya
		
	LDA #$35
	STA $1
	LDA #$70
	STA $D018
	LDA #$3B
	STA $D011
	LDA #$00 
	STA $D021
	LDA #$18
	STA $D016
	LDA #<pBA1E
	STA $FFFE
	LDA #>pBA1E
	STA $FFFF

 LDA #$7F
 STA $DC0D  ; disable timer interrupts which can be generated by the two CIA chips
 STA $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

 LDA $DC0D  ; by reading this two registers we negate any pending CIA irqs.
 LDA $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

  LDA #$01   ; this is how to tell the VICII to generate a raster interrupt
 STA $D01A
	
 LDA #2 ; SCRNBANK
 STA $DD00 ; bank

	
	LDA #$BA
	STA $D012
	LDA #$01
	STA $D019


	LDX #253
ZP_LOOP	LDA ZP,X
	STA 00,X
	DEX 
	CPX #2
	BNE ZP_LOOP
		
	CLI

MAIN_LOOP   JSR SIN_COS
			JSR DRAW_SCREEN
			JSR COLOUR_SETUP_WHITE
			JSR DRAW_OBJECTS
			JSR READ_JOYSTICK_KEYBOARD
			JSR MOVEMENT
			
			LDX CURR_X_MSB
			LDA CURR_X_HSB
			LDY	#0
			JSR	HEX16
			LDA CURR_X_LSB
			LDX #32
			LDY	#0
			JSR	HEX8

			LDX CURR_Y_MSB
			LDA CURR_Y_HSB
			LDY	#6
			JSR	HEX16
			LDA CURR_Y_LSB
			LDX #32
			LDY	#6
			JSR	HEX8

			LDX CURR_Z_MSB
			LDA CURR_Z_HSB
			LDY	#12
			JSR	HEX16
			LDA CURR_Z_LSB
			LDX #32
			LDY	#12
			JSR	HEX8

;			LDA temp1
;			LDX #0
;			LDY	#18
;			JSR	HEX8

;			LDA temp2
;			LDX #16
;			LDY	#18
;			JSR	HEX8

;			LDA temp5
;			LDX #32
;			LDY	#18
;			JSR	HEX8

;			LDA temp3
;			LDX #0
;			LDY	#24
;			JSR	HEX8

;			LDA temp4
;			LDX #16
;			LDY	#24
;			JSR	HEX8

;			LDA temp6
;			LDX #32
;			LDY	#24
;			JSR	HEX8

			LDA ab90
			LDX #0
			LDY	#36
			JSR	HEX8
			LDA ab91
			LDX #24
			LDY	#36
			JSR	HEX8
			LDA ab92
			LDX #48
			LDY	#36
			JSR	HEX8
			LDA ab93
			LDX #72
			LDY	#36
			JSR	HEX8

			LDA ab94
			LDX #96
			LDY	#36
			JSR	HEX8
			LDA ab95
			LDX #120
			LDY	#36
			JSR	HEX8
			LDA ab96
			LDX #144
			LDY	#36
			JSR	HEX8
			LDA ab97
			LDX #168
			LDY	#36
			JSR	HEX8

			LDA ab5E
			LDX #0
			LDY	#42
			JSR	HEX8
			LDA ab5F
			LDX #24
			LDY	#42
			JSR	HEX8
			LDA ab60
			LDX #48
			LDY	#42
			JSR	HEX8
			LDA ab61
			LDX #72
			LDY	#42
			JSR	HEX8
			LDA ab62
			LDX #96
			LDY	#42
			JSR	HEX8
			LDA ab63
			LDX #120
			LDY	#42
			JSR	HEX8
			LDA ab64
			LDX #144
			LDY	#42
			JSR	HEX8
			LDA ab65
			LDX #168
			LDY	#42
			JSR	HEX8

			JMP MAIN_LOOP

temp1 .byte 0
temp2 .byte 0
temp3 .byte 0
temp4 .byte 0
temp5 .byte 0
temp6 .byte 0

pBA1E   PHA 
        TXA 
        PHA 
        TYA 
        PHA 
        LDA #<pB9BB
        STA IRQ   ;IRQ
        LDA #>pB9BB
        STA IRQ+1   ;IRQ
        LDA #$00
        STA $D012    ;Raster Position
        LDA #$01
        STA $D019    ;VIC Interrupt Request Register (IRR)
        LDA #$7E
        LDX #$1B
        LDY #$01
        STA $D018    ;VIC Memory Control Register
        STX $D011    ;VIC Control Register 1
        STY $D021    ;Background Color 0
        LDA #$08
        STA $D016    ;VIC Control Register 2
		PLA 
        TAY 
        PLA 
        TAX 
        PLA 
NMI_NOP	RTI ; This is the irq handler for the NMI. Just returns without acknowledge. This prevents subsequent NMI's from interfering.

pB9BB  	PHA
        LDA VIC_SCREEN_BANK
        STA $D018    ;VIC Memory Control Register
		LDA #$3B
        STA $D011    ;VIC Control Register 1
        LDA #$18
		STA $D016    ;VIC Control Register 2
        LDA #<pBA1E
        STA IRQ   ;IRQ
        LDA #>pBA1E
        STA IRQ+1   ;IRQ
        LDA #$BA
        STA $D012    ;Raster Position
        LDA #$01
        STA $D019    ;VIC Interrupt Request Register (IRR)
        PLA 
        RTI

MEMSET       STY    LSB_ONLY+1 ; store LSB count
             CPX    #0          ; MSB?     
             BEQ    LSB_ONLY   ; no
             LDY    #0          ; yes so reset LSB
MSB_LOOP  
LSB_LOOP      STA    (SCREEN_POS_LO),Y   ; clear whole MSB
               DEY 
               BNE    LSB_LOOP
              INC    SCREEN_POS_LO+1      ; inc MSB
              DEX               ; dec MSB count
              BNE    MSB_LOOP
LSB_ONLY    LDY    #0          ; LSB count 
             BEQ    MS_END
LAST_LSB_LOOP STA   (SCREEN_POS_LO),Y
               DEY 
               BNE   LAST_LSB_LOOP               
              STA   (SCREEN_POS_LO),Y     ; clear last Y (0)
MS_END      RTS

FP_DIVIDE	STA		FP_DIVIDE_HI	; inputs = X-(LO) + Y-(HI) + A (HI) + FP_MULTILPLY_LO - outputs = AY
			LDA 	LOG_TABLE,Y
			LDY 	FP_DIVIDE_LO
			SEC 
			SBC 	LOG_TABLE,Y
			TAY
			TXA
			ORA 	#$02
			BCS 	_FP_DIV_CNT
					SBC 	#$03
					SEC 
_FP_DIV_CNT SBC 	FP_DIVIDE_HI
			AND 	#$FD
			LDX 	EXP_TABLE,Y
			RTS

		
FP_MULTIPLY	STA		FP_MULTIPLY_HI	; inputs = X-(LO) + Y-(HI) + A (HI) + FP_MULTILPLY_LO - outputs = AY
			LDA 	LOG_TABLE,X		
			LDX 	FP_MULTIPLY_LO
			CLC 
			ADC 	LOG_TABLE,X
			TAX 
			TYA 
			BCC 	_FP_MUL_CNT
					ADC 	#$03
					CLC 
_FP_MUL_CNT	ADC 	FP_MULTIPLY_HI
			AND 	#$FD
			LDY 	EXP_TABLE,X
			RTS 

FPMUL		LDA LOG_TABLE,X		; fpMul - ; Input:  [08] = fp multiplier ;         XY   = fp multiplicand ; Output: [08] and XY = result
			LDX ab08
			CLC 
			ADC LOG_TABLE,X
			TAX 
			TYA 
			BCC _PF_MUL_CNT
				ADC #$03
				CLC 
_PF_MUL_CNT   	ADC ab09
			BVS MATH_LIMIT 
			AND #$FD
			STA ab09
			TAY 
			LDA EXP_TABLE,X
			TAX 
			STA ab08
			RTS 

MATH_LIMIT	BPL _MATH_LIMIT_POS
			AND #$01
			ORA #$78
			TAY 
			LDX #$00
			STX ab08
			STY ab09
			RTS 

_MATH_LIMIT_POS	AND #$01
				ORA #$84

MATH_LIMIT_EXIT	TAY 
				LDX #$00
				STX ab08
				STY ab09
				RTS 

; ** CODE BLOCK END **        

; ** CODE BLOCK START ** TAKES IN 08 AND X AND Y AND RETURNS 08 AND 09

FPDIV ; fpDiv - Input:  [08] = fp divisor - XY   = fp dividend - Output: [08] and XY = result
	STY ab06
        LDY ab08
        LDA LOG_TABLE,Y
        SEC 
        SBC LOG_TABLE,X
        TAX 
        LDA ab09
        ORA #$02
        BCS b8349
        SBC #$03
        SEC 
b8349   
	SBC ab06
        BVS MATH_LIMIT 
        AND #$FD
        STA ab09
        TAY 
        LDA EXP_TABLE,X
        TAX 
        STA ab08
        RTS 

FPADD ; ($838B entry point)  
	LDA ab18
        LSR 
        BCS b8373
        TXA 
        ADC ab08
        ROR 
        INY 
        INY 
        INY 
        INY 
        TAX 
        STA ab08
        STY ab09
        RTS 

b836C   TYA 
        ASL 
        BCC b83CC
        JMP j8419

b8373   TXA 
        SBC ab08
        BEQ b8383
        BCS b83D5
        LDY ab09
        EOR #$FF
        ADC #$01
        JMP b83D5

b8383   TYA 
        SEC 
        SBC #$24
        BVS _MATH_LIMIT_POS
        BVC MATH_LIMIT_EXIT
	
; BIT16 + BIT16
;;;;;; BIT16TOFP ; ? takes in x and y does something with 8 and 9 and outputs x and y? = test with x = 38 / y = 25 and check output then pass results into fpto16 and see if 38/25 is returned?
s838B   TYA			; looks like some fp conversion?
        SEC 
        SBC ab09
        BVS b836C
        STA ab18
        ADC #$01
        BVS b836C
        BMI b83F5
        LSR 
        LSR 
        BEQ FPADD
        CMP #$09
        BCS b83CC
        EOR #$0F
        STA ab83AB +1
        LDA ab08
        SEC 
        ROR 
ab83AB  BNE b83B3 ; looks like part of fp calculation?
        NOP 
        NOP 
        NOP 
        NOP 
        NOP 
        NOP 
        NOP 
b83B3   LSR 
        LSR 
        LSR 
        LSR 
        LSR 
        LSR 
        LSR 
        STA ab06
        LDA ab18
        LSR 
        TXA 
        BCS b83D1
b83C2   ADC ab06
        BCC b83CB
        LSR 
        INY 
        INY 
        INY 
        INY 
b83CB   TAX 
b83CC   STX ab08
        STY ab09
        RTS 

b83D1   SBC ab06
        BCS b83CB
b83D5   STY ab06
        LDY #$00
b83D9   ASL 
        DEY 
        BCC b83D9
        TAX 
        TYA 
        ASL 
        ASL 
        CLC 
        ADC ab06
        BVS b83EC
        TAY 
        STX ab08
        STY ab09
        RTS 

b83EC   
	LDX #<p8400
        LDY #>p8400
        STX ab08
        STY ab09
        RTS 

b83F5   CMP #$E0
        BCC j8419
        LSR 
        LSR 
        AND #$07
        STA ab8404 +1
p8400   TXA 
        SEC 
        ROR 
ab8404  BNE b8408
        LSR 
        LSR 
        LSR 
b8408   LSR 
        LSR 
        LSR 
        LSR 
        STA ab06
        LDY ab09
        LDA ab18
        LSR 
        LDA ab08
        BCC b83C2
        BCS b83D1
j8419   LDX ab08
        LDY ab09
        RTS 

; ** CODE BLOCK END **

; ** CODE BLOCK START ** - TAKES IN XY AND LOOKS UP 5B00 AND 5A00 AND RETURNS XY

COS_FP	INY 
SIN_FP	TYA 
		LSR 
		BCC b8429
			TXA 
			EOR #$FF
			TAX 
			TYA 
			LSR 
b8429   AND #$01
		ORA SIN_MSB,X
		TAY 
		LDA SIN_LSB,X
		TAX 
		RTS 

; ** CODE BLOCK END **

; ** CODE BLOCK START ** - TAKES IN Y (and X?) Y as mantissa and X as exponent?

; Y format = floating point position 
; bit0 = ignored / shifted out - first bit can be set to show negative?
; bit1 = ignored / shifted out
; bit2 = 
; bit3 = 
; bit4 = 
; bit5 = 
; bit6 = 
; bit7 = must be 0 or if set value must be gt FC for 1 to be added to result?

; X format = actual number
; bit0 = 
; bit1 = 
; bit2 = 
; bit3 = 
; bit4 = 
; bit5 = 
; bit6 = 
; bit7 = 

FPTO8BIT
		TYA 			; transfer y (floating point position) to a
		BMI	b849F		; if negative
		LSR 			; divide and remove first bit
        LSR 			; divide and remove second bit
        CMP #$07		; is it greater than 7
        BCS b84A6		; yes so error so exit with carry set
        STA ab8487+1	; no so self modifying code to jump forward a number of divides
        TXA 			; transfer x (actual number) to a
        SEC 			; set carry
        ROR 			; /2 - putting 1 in top bit (and putting 0 in carry?) 
ab8487  BNE b848C		; jump forward self modifying code - always done as carry is set so ROR result is never 0
        LSR 			; /2
        LSR 			; /4
        LSR 			; /8
        LSR 			; /16
b848C   LSR 			; /32
        LSR 			; /64
        LSR 			; /128
b848F   ADC #$00		; add carry?
        BMI b84A5		; if minus then error?
        TAX 			; backup result
        TYA 			; transfer y to a
        LSR				; / 2
        TXA 			; restore result
        BCC b849E		; clear carry so ok?
		EOR #$FF		; negate?
			ADC #$00		; negete by adding carry that is already set?
			CLC 			; clear carry for ok?
b849E   RTS 			; exit

b849F   CMP #$FC		; sets the carry flag if greater than (11111100 binary)
        LDA #$00		; resets the output x value? 
        BEQ b848F		; jump back into code

b84A5   SEC 			; set carry for error?
b84A6   RTS 			; exit

; ** CODE BLOCK END **

; ** CODE BLOCK START **

FPTO16BIT	; input X/Y - output X=HI/Y=LO
		TYA				; get input (exponent?)
        BMI b8501 		; if negative
        LSR 			; ignore bit 1
        LSR 			; ignore bit 2
        CMP #$0F		; compare with 15
        BCS b84A6		; greater so exit with carry set
        STA ab06		; store intermediate in temp var
        ASL 			; *2
        ADC ab06		; *3 
        STA ab84C2 +1	; number of bytes to jump
        LDA #$00
        STA ab06		; clear result
        TXA 			; get input (mantisa?)
        SEC 			; set carry to move 1 into result
        ROR 			; rotate carry into high bit and low bit into carry
        ROR ab06		; rotate carry into result
ab84C2  BCC b84D2		; jump forward
        LSR 			; half and shift lowest bit into carry  
        ROR ab06		; half and rotate carry bit into result
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
b84D2   LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
		ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        TAX 		; store low byte of result?
        TYA 		; get input (exponent?)
        LDY ab06	; store high byte of result?
        LSR 		; move 1st bit of input into carry
        BCC b8500	; set y/n
			TXA 		; yes
			EOR #$FF	; negate x
			TAX 
			TYA 
			EOR #$FF	; negate y
			TAY 
			CLC 
b8500   RTS 		; no

b8501 	LSR 		; move 1st bit to carry
        BCC b850B	; set y/n
			LDX #$FF	; yes
			LDY #$FF
			CLC 
			RTS 
b850B   LDX #$00	; no
        LDY #$00
        RTS 

; ** CODE BLOCK END **

; ** CODE BLOCK START **

BIT24TOFP ; MATH_24BitToFP (FP.SetToObjectSpaceCoordinate24) ; Enter: A = Coordinate.MSB X = Coordinate.PSB Y = Coordinate.LSB ; Usese: [06].b  Temporary store for coordinate MSB ; Exit:  [08].fp Result, also stored in X:A (exp:man)
		STY	ab07 ; store lsb
		STA ab06 ; store msb
        BPL b8527 ; positive ?
			LDA #$00 ; negative so 
			SEC 
			SBC ab07 ; negate lsb
			STA ab07
			TXA 		; negate psb
			EOR #$FF
			ADC #$00
			TAX 
			LDA #$00
			SBC ab06	; negate msb
b8527   BNE b8538	; if msb not 0
			TXA 		; move psb to a
			BNE b854F	; if psb not 0
				LDA ab07	; get lsb
				BEQ b8553	; if lsb not 0
					LDX #$00
					STX ab07
					LDX #$08
					BNE b853C ; jump?
b8538   STX ab07
        LDX #$18
b853C   	DEX 
			ASL ab07 ; *2
			ROL 	 ; *2
			BCC b853C
        STA ab08
        TXA 
        ASL 
        ASL ab06
        ROL 
        TAX 
        STX ab09
        LDA ab08
        RTS 

b854F   LDX #$10
        BNE b853C ; jump?
		
b8553   LDA #<OVERFLOW ; overflow?
        LDX #>OVERFLOW
        STA ab08
        STX ab09
        RTS 

; ** CODE BLOCK END **

OVERFLOW = $E000 ; overflow?

DRAW_OBJECTS
	LDY DRAW_OBJECT_COUNT ; number of objects to draw
	BEQ DRAW_OBJECTS_EXIT ; exit if none
		STY DRAW_OBJECT_COUNTER ; store temp object count
DRAW_OBJECTS_LOOP   	
		LDX OBJECTS_TO_DRAW,Y 	; object number
		JSR DRAW_OBJECT
		DEC DRAW_OBJECT_COUNTER ; dec temp object count
		LDY DRAW_OBJECT_COUNTER ; get temp object count
		BNE DRAW_OBJECTS_LOOP 	; exit y/n
DRAW_OBJECTS_EXIT 
	RTS 	; exit

DRAW_OBJECT			STX	CURRENT_OBJECT					; store object number 
					LDA	OBJECT_SHAPE_PTR_LO,X	; get object pos hi
					STA	OBJECT_POINTER			; store in pointer
					LDA	OBJECT_SHAPE_PTR_HI,X	; get object pos lo
					STA	OBJECT_POINTER+1		; store in pointer
					JSR	CAMERA_OBJECT_DIFF
;					JSR	DRAW_OBJECT_SHAPE 		; draw object
; SEC
;					BCS	DRAW_OBJECT_CONT
;DRAW_OBJECT_EXIT	RTS 

DRAW_OBJECT_CONT   	LDX	#$00
					STX	POINT_LINE_COUNT
					LDY	#$01
					JSR	s999A
					BCC	b978A
					LDA	DIFF_Y_HSB
					BPL	b9755
					LDY	#$00
					LDX	#$00
					JSR	s999A
					BCS	DRAW_OBJECTS_EXIT

b9755 ; object is a point
		LDY	DIFF_X_LSB
        LDX	DIFF_X_MSB
        LDA	DIFF_X_HSB
        JSR	BIT24TOFP
        STA	X_POS_HI
        STX	X_POS_LO
        LDY	DIFF_Y_LSB
        LDX	DIFF_Y_MSB
        LDA	DIFF_Y_HSB
		RTS
        STA	Y_POS_HI
        STX	Y_POS_LO
        LDY	DIFF_Z_LSB
        LDX	DIFF_Z_MSB
        LDA	DIFF_Z_HSB
        JSR	BIT24TOFP
        STA	Z_POS_HI
        STX	Z_POS_LO
        JSR	ROTATE_PERS
        LDX	#$00
;        JMP	PLOT_POINT 	; PLOT POINT

PLOT_POINT_CHK	LDA	POINT_CLASSIFICATION,X	; GET POINT FROM PLOT POINT TABLE ?
				BNE	PLOT_POINT_EXIT	; EXIT IF ITS not ZERO - this being set to not zero plots a point - what sets it to 0?
PLOT_POINT			LDY	PERS_VER,X	; GET VER POS
					LDA	VER_POS_LO,Y 
					STA	SCREEN_POS_LO
					LDA	PERS_HOR,X	; GET HOR POS into A and X
					TAX 	
					ASL 
					LDA	VER_POS_HI,Y
					ADC	SCREEN_BANK
					STA	SCREEN_POS_HI
					LDY	HOR_SCR_POS,X
					LDA	(SCREEN_POS_PTR),Y	; GET SCREEN BYTE
LINE_DRAW_8_TYPE	AND	PIXEL_POS,X			; AND PIXEL
					STA	(SCREEN_POS_PTR),Y	; PUT SCREEN BYTE
PLOT_POINT_EXIT RTS 

b978A   LDA DIFF_X_MSB
        SEC 
        SBC #$08
        STA DIFF_X_MSB
        BCS b9795
        DEC DIFF_X_HSB
		
b9795   LDA DIFF_Y_MSB
        SEC 
        SBC #$08
        STA DIFF_Y_MSB
        BCS b97A0
        DEC DIFF_Y_HSB

b97A0   LDA DIFF_Z_MSB
        SEC 
        SBC #$08
        STA DIFF_Z_MSB
        BCS b97AB
        DEC DIFF_Z_HSB

b97AB   LDY #$00
        STY POINT_LINE_COUNT ; start point count
        LDA (OBJECT_POINTER),Y ; object point count
        STA NUMBER_OF_POINTS ; number of points?
        STY OBJECT_POINTER_POS ; store mem pos

PROCESS_POINT_LOOP	JSR PROCESS_POINT_TO_FP		; get point then *16 then convert to 24bit fp
					JSR ROTATE_PERS
					LDA POINT_LINE_COUNT		 ; get point count
					INC POINT_LINE_COUNT		 ; inc point count
					CMP NUMBER_OF_POINTS	 	; last point yn
					BNE PROCESS_POINT_LOOP  	; no so do next
        INC OBJECT_POINTER_POS ; inc mem pos
        LDY OBJECT_POINTER_POS ; get mem pos
        LDA (OBJECT_POINTER),Y  ; object line count
        STA POINT_LINE_COUNT  ; number of lines?
        BPL NEXT_COMPRESSED_LINE

NEXT_LINE	LDY OBJECT_POINTER_POS ; get mem pos
			INY  ; inc mem pos
			LAX (OBJECT_POINTER),Y ; get 1st point into a and x
			INY ; inc mem pos
			LDA (OBJECT_POINTER),Y ; get 2nd point
			STY OBJECT_POINTER_POS ; store 2nd point?
			TAY ; 2nd point
			JSR LINE_DRAW ; draw line
			DEC POINT_LINE_COUNT ; dec line count
			BMI NEXT_LINE ; last line y/n
			RTS ; yes

NEXT_COMPRESSED_LINE	LDY OBJECT_POINTER_POS ; get mem pos ; first and second point are stored in 1 byte as 2 nibbles
						INY  ; inc mem pos
						STY OBJECT_POINTER_POS ; store mem pos
						LAX (OBJECT_POINTER),Y ; get point count into a and x
						AND #$0F ; and with 15 = 1st point
						TAY ; y = first point
						TXA  ; get backup
						LSR  ; /2
						LSR  ; /2
						LSR  ; /2
						LSR  ; /2
						TAX  ; divide by 16 = 2nd point
						JSR LINE_DRAW       ; DRAW LINE
						DEC POINT_LINE_COUNT ; dec line count
						BPL NEXT_COMPRESSED_LINE ; last line yn
						RTS  ; yes

CAMERA_OBJECT_DIFF ; calc diff between object pos and current pos  
		SEC 
        LDA OBJ_X_LSB,X		;
        SBC CURR_X_LSB		;
        STA DIFF_X_LSB		;
        LDA OBJ_X_MSB,X		;
        SBC CURR_X_MSB		;
        STA DIFF_X_MSB		;
        LDA OBJ_X_HSB,X		;
        SBC CURR_X_HSB		;
        STA DIFF_X_HSB		;

        SEC 
        LDA OBJ_Y_LSB,X		;
        SBC CURR_Y_LSB		;
        STA DIFF_Y_LSB		;
        LDA OBJ_Y_MSB,X		;
        SBC CURR_Y_MSB		;
        STA DIFF_Y_MSB		;
        LDA OBJ_Y_HSB,X		;
        SBC CURR_Y_HSB		;
        STA DIFF_Y_HSB		;

        SEC 
        LDA OBJ_Z_LSB,X		;
        SBC CURR_Z_LSB		;
        STA DIFF_Z_LSB		;
        LDA OBJ_Z_MSB,X		;
        SBC CURR_Z_MSB		;
        STA DIFF_Z_MSB		;
        LDA OBJ_Z_HSB,X		;
        SBC CURR_Z_HSB		;
        STA DIFF_Z_HSB		;
        RTS 

s999A   STX ab08
        STY ab09
        LDA DIFF_X_LSB
        LDX DIFF_X_MSB
        LDY DIFF_X_HSB
        JSR s99BE
        BCS b99BD ; error so exit
        LDA DIFF_Y_LSB
        LDX DIFF_Y_MSB
        LDY DIFF_Y_HSB
        JSR s99BE
        BCS b99BD ; error so exit
        LDA DIFF_Z_LSB
        LDX DIFF_Z_MSB
        LDY DIFF_Z_HSB
        JSR s99BE
b99BD   RTS 

s99BE   	; negate a/x/y which hold lsb/msb/hsb if needed and subtract 08 and 09 from msb/hsb 
			BPL CONTINUE1 	; if number is positive continue 
			EOR #$FF  		; negative so negate LSB
			PHA 			; backup LSB
			TXA       		; negate MSB
			EOR #$FF		;
			TAX 			;
			TYA 			; negate HSB
			EOR #$FF		;
			TAY 			;
			PLA 			; restore LSB
			CLC 
			ADC #$01		; inc LSB
			BCC CONTINUE1	; no overlow so continue
			INX 			; inc MSB
			BNE CONTINUE1	; no overlow so continue
			INY 			; inc HSB
CONTINUE1   SEC 
			TXA 
			SBC ab08		; subtract from MSB
			TYA 
			SBC ab09		; subtract from HSB
			RTS 
        
LINE_DRAW ; LINE_DRAW_04 - DRAW LINE - x is start index - y is end index
				LDA POINT_CLASSIFICATION,X 		; start point X classification
				BEQ POINT_X_INFRONT 			; start point X onscreen
				BMI POINT_X_BEHIND 				; start point X behind

				LDA POINT_CLASSIFICATION,Y 		; end point Y classification 
				BEQ POINT_X_BEHIND 				; end point Y onscreen
				BMI POINT_X_INFRONT 			; end point Y behind	

				LDA Z_ROT_TAB_HI,Y 
				EOR #$80
				STA ab06
				LDA Z_ROT_TAB_HI,X
				EOR #$80
				CMP ab06
				BCS POINT_X_INFRONT

POINT_X_BEHIND 	TYA 		; start X is behind so swap start X and end Y pointer so that Y is behind and X start might be behind? so swap start and end - so Y is behind?
				STX ab06	; swap start / end
				TAX 		; swap start / end
				LDY ab06	; swap start / end

				LDA POINT_CLASSIFICATION,X 	; start point X which was end point Y classification
				BPL POINT_X_INFRONT 		; end point X point infront
					RTS 					; both points behind

POINT_X_INFRONT	LDA POINT_CLASSIFICATION,X 	; at least 1 point is in front ; point 1 classification
				STA POINT_CLASSIFY_1
				BMI X_ROT_COPY 				; point X is behind so x rotation points need to be copied and pers doesnt
					LDA PERS_HOR,X
					STA LINE_START_HOR
					LDA PERS_VER,X
					STA LINE_START_VER
					LDA PERS_POINT_TAB_2,X
					STA ab5E
					LDA PERS_POINT_TAB_3,X
					STA ab5F
					LDA PERS_POINT_TAB_4,X
					STA ab60
					LDA PERS_POINT_TAB_5,X
					STA ab61

X_ROT_COPY		LDA X_ROT_TAB_LO,X ; a point is behind? so x and y rotation needs to be copied to be used in z clip
				STA X_POS_HI
				LDA X_ROT_TAB_HI,X
				STA X_POS_LO
				LDA Y_ROT_TAB_LO,X
				STA Y_POS_HI
				LDA Y_ROT_TAB_HI,X
				STA Y_POS_LO
				LDA Z_ROT_TAB_LO,X
				STA Z_POS_HI
				LDA Z_ROT_TAB_HI,X
				STA Z_POS_LO
				LDA POINT_CLASSIFICATION,Y
				STA POINT_CLASSIFY_2
				BMI Y_ROT_COPY				; Y is behind so y rotation points need to be copied and pers doesnt
					LDA PERS_HOR,Y
					STA ab6C
					LDA PERS_VER,Y
					STA ab6D
					LDA PERS_POINT_TAB_2,Y
					STA ab62
					LDA PERS_POINT_TAB_3,Y
					STA ab63
					LDA PERS_POINT_TAB_4,Y
					STA ab64
					LDA PERS_POINT_TAB_5,Y
					STA ab65

Y_ROT_COPY		LDA X_ROT_TAB_LO,Y
				STA X_ROTATION_LO
				LDA X_ROT_TAB_HI,Y
				STA X_ROTATION_HI
				LDA Y_ROT_TAB_LO,Y
				STA Y_ROTATION_LO
				LDA Y_ROT_TAB_HI,Y
				STA Y_ROTATION_HI
				LDA Z_ROT_TAB_LO,Y
				STA Z_ROTATION_LO
				LDA Z_ROT_TAB_HI,Y
				STA Z_ROTATION_HI
				LDA POINT_CLASSIFY_2
				BPL b9A94
					JMP j9B2C ; LINE DRAW

b9A94   LDX ab5E
        LDA ab5F
        EOR #$01
        STX ab08
        STA ab09
        LDX ab62
        LDY ab63
        JSR s838B ; xy * 89 ?
        STX ab0A
        STY ab0B
        TYA 
        ASL 
        AND #$02
        STA LINE_TYPE_POINTER
        LDX ab60
        LDA ab61
        EOR #$01
        STX ab08
        STA ab09
        LDX ab64
        LDY ab65
        JSR s838B
        STX ab0C
        STY ab0D
        TYA 
        AND #$01
        ORA LINE_TYPE_POINTER
        STA LINE_TYPE_POINTER
		
		LDA		ab0A
		STA		FP_DIVIDE_LO
		LDX		ab09
		LDY		ab08
		LDA		ab0B
		JSR		FP_DIVIDE
		STx		ab68
		STA		ab69

        TAY 
        BMI b9B14
        LDA LINE_TYPE_POINTER
        ORA #$04
        STA LINE_TYPE_POINTER

		LDA		ab0C
		STA		FP_DIVIDE_LO
		LDX		ab0B
		LDY		ab0A
		LDA		ab0D
		JSR		FP_DIVIDE
		STX		ab08
		STA		ab09

b9B14   TAY 
        BMI b9B1E
        LDA #$FF		; straight line?
        STA LINE_INC
        JMP GET_LINE_TYPE

b9B1E   CLC 
        ADC #$20
        AND #$FC
        TAY 
        JSR FPTO16BIT
        STY LINE_INC
        JMP GET_LINE_TYPE


j9B2C	LDA		Z_POS_HI
		STA		FP_DIVIDE_LO
		LDX		Z_ROTATION_HI
		LDY		Z_ROTATION_LO
		LDA		Z_POS_LO
		JSR		FP_DIVIDE
		STX		ab0A
		STA		ab0B

		EOR #$01
        STA ab0B

		LDA 	X_POS_HI
		STA		FP_MULTIPLY_LO
		LDA 	X_POS_LO
		LDY 	ab0B
        LDX 	ab0A
		JSR		FP_MULTIPLY
        STy 	ab08
        STA 	ab09
		
        LDX X_ROTATION_LO
        LDY X_ROTATION_HI
        JSR s838B
        STX ab0C
        STY ab0D
        TYA 
        EOR Z_POS_LO
        ASL 
        AND #$02
        STA LINE_TYPE_POINTER

		LDA 	Y_POS_HI
		STA		FP_MULTIPLY_LO
		LDA 	Y_POS_LO
		LDY 	ab0B
        LDX 	ab0A
		JSR		FP_MULTIPLY
        STy 	ab08
        STA 	ab09
				
        LDX Y_ROTATION_LO
        LDY Y_ROTATION_HI
        JSR s838B
        STX ab0A
        STY ab0B
        TYA 
        EOR Z_POS_LO
        AND #$01
        ORA LINE_TYPE_POINTER
        STA LINE_TYPE_POINTER

		LDA		ab0C
		STA		FP_DIVIDE_LO
		LDX		ab09
		LDY		ab08
		LDA		ab0D
		JSR		FP_DIVIDE
		STX		ab68
		STA		ab69

        TAY 
        BMI b9BFC
        LDA LINE_TYPE_POINTER
        ORA #$04
        STA LINE_TYPE_POINTER

		LDA		ab0A
		STA		FP_DIVIDE_LO
		LDX		ab0D
		LDY		ab0C
		LDA		ab0B
		JSR		FP_DIVIDE
		STX		ab08
		STA		ab09
	
b9BFC   TAY 
        BMI b9C05
			LDY #$FF			; straight line?
			BNE LINE_CONT_99 ; jump
b9C05   CLC 
        ADC #$20
        AND #$FC
        TAY 
        JSR FPTO16BIT

LINE_CONT_99	STY LINE_INC

GET_LINE_TYPE	LDX LINE_TYPE_POINTER    ; GET LINE TYPE 0-7
				LDY LINE_DRAW_CONV_PTR,X ; CONVERT LINE TYPE TO POINTER TYPE
				LDA LINE_DRAW_PTR_LO,Y ; GET POINTER TO CORRECT LINE
				STA LINE_JUMP_PTR_LO    ; STORE AT JUMP TABLE ADDRESS
				LDA LINE_DRAW_PTR_HI,Y ; GET POINTER TO CORRECT LINE
				STA LINE_JUMP_PTR_HI    ; STORE AT JUMP TABLE ADDRESS
				LDA POINT_CLASSIFY_2
				BEQ b9C2F
				LDA fBBD8,Y
				STA ab6C
				LDA fBBE0,Y
				STA ab6D

b9C2F   		LDA POINT_CLASSIFY_1
				BNE b9C36				; point off screen
				JMP		LINE_DRAW_JMP

b9C36   LDA ab61
        ASL 
        ASL 
        AND #$04
        ORA POINT_CLASSIFY_1
        STA ab06
        LDA ab5F
        ASL 
        ASL 
        ASL 
        AND #$08
        ORA ab06
        TAX 
        TYA 
        ORA fBBE8,X
        LSR 
        TAX 
        LDA fBBF8,X
        BNE b9C56
        RTS 

b9C56   STA POINT_CLASSIFY_1
        LDA POINT_CLASSIFY_2
        BMI b9C7C
        LDA ab65
        ASL 
        ASL 
        AND #$04
        ORA POINT_CLASSIFY_2
        STA ab06
        LDA ab63
        ASL 
        ASL 
        ASL 
        AND #$08
        ORA ab06
        TAX 
        TYA 
        ORA fBBE8,X
        LSR 
        TAX 
        LDA fBC18,X
        BNE b9C7C
        RTS 

b9C7C   LDA POINT_CLASSIFY_1
        AND #$01 ; off this edge
        BEQ b9CC1 ; no
        LDX ab92 ; yes
        LDA ab93
        SEC 
        SBC ab21
        STX ab08
        STA ab09
        LDX ab5E
        LDA ab5F
        EOR #$01
        TAY 
        JSR s838B
        LDX ab68
        LDY ab69
        JSR FPMUL
        LDX ab60
        LDY ab61
        JSR s838B
        TYA 
        CLC 
        ADC ab21
        BVS b9CC1
        TAY 
        JSR FPTO8BIT
        BCS b9CC1
        CLC 
        ADC #SCR_VER_MID
        CMP #CLIP_TEST_BOTTOM ; clip test?
        BCS b9CC1
        STA LINE_START_VER
        LDA #CLIP_RIGHT ; clip right ?
        STA LINE_START_HOR ; clip right ?
        JMP LINE_DRAW_JMP

b9CC1   LDA POINT_CLASSIFY_1
        AND #$02 ; off this edge
        BEQ b9D06 ; no
        LDX ab96 ; yes
        LDA ab97
        SEC 
        SBC ab21
        STX ab08
        STA ab09
        LDX ab60
        LDA ab61
        EOR #$01
        TAY 
        JSR s838B
        LDX ab68
        LDY ab69
        JSR FPDIV
        LDX ab5E
        LDY ab5F
        JSR s838B
        TYA 
        CLC 
        ADC ab21
        BVS b9D06
        TAY 
        JSR FPTO8BIT
        BCS b9D06
        CLC 
        ADC #SCR_HOR_MID
        CMP #CLIP_TEST_RIGHT 		; clip test
        BCS b9D06
        STA LINE_START_HOR
        LDA #CLIP_BOTTOM 			; clip bottom
        STA LINE_START_VER 			; clip bottom
        JMP LINE_DRAW_JMP

b9D06   LDA POINT_CLASSIFY_1 ; LINE DRAW
        AND #$04 ; off this edge
        BEQ b9D4B ; no
        LDX ab90 ; yes
        LDA ab91
        SEC 
        SBC ab21
        STX ab08
        STA ab09
        LDX ab5E
        LDA ab5F
        EOR #$01
        TAY 
        JSR s838B
        LDX ab68
        LDY ab69
        JSR FPMUL
        LDX ab60
        LDY ab61
        JSR s838B
        TYA 
        CLC 
        ADC ab21
        BVS b9D4B
        TAY 
        JSR FPTO8BIT
        BCS b9D4B
        CLC 
        ADC #SCR_VER_MID
        CMP #CLIP_TEST_BOTTOM ; clip test
        BCS b9D4B
        STA LINE_START_VER
        LDA #CLIP_TEST_TOP ; clip off top
        STA LINE_START_HOR ; clip off top 
        JMP LINE_DRAW_JMP

b9D4B   LDA POINT_CLASSIFY_1 ; LINE DRAW
        AND #$08 ; off this edge
        BEQ b9D98 ; no
        LDX ab94 ; yes
        LDA ab95
        SEC 
        SBC ab21
        STX ab08
        STA ab09
        LDX ab60
        LDA ab61
        EOR #$01
        TAY 
        JSR s838B
        LDX ab68
        LDY ab69
        JSR FPDIV
        LDX ab5E
        LDY ab5F
        JSR s838B
        TYA 
        CLC 
        ADC ab21
        BVS b9D98
        TAY 
        JSR FPTO8BIT
        BCS b9D98
        CLC 
        ADC #SCR_HOR_MID
        CMP #CLIP_TEST_RIGHT ; clip test
        BCS b9D98
        STA LINE_START_HOR
        LDA #CLIP_TEST_LEFT ; clip off left
        STA LINE_START_VER ; clip off left

LINE_DRAW_JMP
		LDX LINE_START_HOR
        LDY LINE_START_VER
        LDA #$80 ; set fraction to half 
        STA LINE_FRACTION_ab08 ; set line fraction
        JMP (LINE_JUMP_PTR) ; LINE_DRAW_01
b9D98   RTS 

MOVEMENT
        LDA #$01                    ; UP
        BIT JOYSTICK_MOVEMENT
        BNE bA1A1
			LDA #$01 ; FORWARD
			JSR FORWARD_BACK
bA1A1   LDA #$02					; DOWN
        BIT JOYSTICK_MOVEMENT
        BNE bA1AC
			LDA #$00	; BACKWARD
			JSR FORWARD_BACK
bA1AC   LDA #$04					; LEFT
        BIT JOYSTICK_MOVEMENT
        BNE bA1C1
			LDA ROT_LO	; LEFT
			CLC 
			ADC ROT_SPD
			STA ROT_LO
			LDA ROT_HI
			ADC #$00
			AND #$03
			STA ROT_HI
bA1C1   LDA #$08					; RIGHT
        BIT JOYSTICK_MOVEMENT
        BNE bA1D6
			LDA ROT_LO	; RIGHT
			SEC 
			SBC ROT_SPD
			STA ROT_LO
			LDA ROT_HI
			SBC #$00
			AND #$03
			STA ROT_HI
bA1D6 	RTS

FORWARD_BACK	PHA 			; push sign/direction
				LDX SPEED_LO
				EOR SPEED_HI 	; set direction
				STX ab08
				STA ab09
				LDX COS_LO
				LDY COS_HI
				JSR FPMUL
				JSR FPTO16BIT
				TYA 
				CLC 
				ADC CURR_Z_LSB
				STA CURR_Z_LSB
				TXA 
				ADC CURR_Z_MSB
				STA CURR_Z_MSB
				TXA 
				
; Constant-time version, but destroys the carry - wont work?
;            ASL A           ; sign bit into carry; use CPX etc. if using X reg;	or		 cpx #$80             // copy the sign bit into c
;            LDA #$00
;            ADC #$FF        ; C set:   A = $FF + C = $00 /  C clear: A = $FF + C = $FF
;            EOR #$FF        ; Flip all bits and they all now match C
;
				
				BPL _Z_PLUS 		; if +
					LDA #$FF		; set to 255 for -
					BMI _Z_NEG_CONT	; jmp
_Z_PLUS   		LDA #$00			; set to 0 for +
_Z_NEG_CONT 	ADC CURR_Z_HSB		; either add or sub depending on + or -
				STA CURR_Z_HSB

				PLA 			; pop sign
				LDX SPEED_LO
				EOR SPEED_HI	; set direction
				STX ab08
				STA ab09
				LDX SIN_LO
				LDY SIN_HI
				JSR FPMUL
				JSR FPTO16BIT
				TYA 
				CLC 
				ADC CURR_X_LSB
				STA CURR_X_LSB
				TXA 
				ADC CURR_X_MSB
				STA CURR_X_MSB
				TXA 
				BPL _X_PLUS			; positive
					LDA #$FF		; negative so set to 255
					BMI _X_NEG_CONT ; jump to calc
_X_PLUS	   		LDA #$00			; positive so set to 0
_X_NEG_CONT    	ADC CURR_X_HSB		; calc
				STA CURR_X_HSB
				RTS 

SIN_COS	LDX ROT_LO
        LDY ROT_HI
        JSR SIN_FP
        STX SIN_LO ; sin_lo
        STY SIN_HI ; sin_hi
        LDX ROT_LO
        LDY ROT_HI
        JSR COS_FP
        STX COS_LO ; cos_lo
        STY COS_HI ; cos_hi
        RTS 

PROCESS_POINT_TO_FP	LDY OBJECT_POINTER_POS 	; get point then *16 then conveert to 24bit fp
					INY 
					LDA (OBJECT_POINTER),Y ; get x
					STA OBJ_PNT_X
					INY 
					LDA (OBJECT_POINTER),Y ; get y
					STA OBJ_PNT_Y
					INY 
					LDA (OBJECT_POINTER),Y ; get z
					STA OBJ_PNT_Z
					STY OBJECT_POINTER_POS

					JSR POINT_X16

					LDA DIFF_X_LSB
					CLC  			; clear
					ADC OBJ_PNT_X 	; x lsb
					TAY
					LDA DIFF_X_MSB
					ADC OBJ_PNT_X_MSB
					TAX 
					LDA DIFF_X_HSB
					ADC #$00
					JSR BIT24TOFP
					STA X_POS_HI
					STX X_POS_LO

					LDA DIFF_Y_LSB
					CLC 
					ADC OBJ_PNT_Y ; y lsb
					TAY
					LDA DIFF_Y_MSB
					ADC OBJ_PNT_Y_MSB
					TAX 
					LDA DIFF_Y_HSB
					ADC #$00
					JSR BIT24TOFP
					STA Y_POS_HI
					STX Y_POS_LO

					LDA DIFF_Z_LSB
					CLC 
					ADC OBJ_PNT_Z ; z lsb
					TAY
					LDA DIFF_Z_MSB
					ADC OBJ_PNT_Z_MSB
					TAX 
					LDA DIFF_Z_HSB
					ADC #$00
					JSR BIT24TOFP
					STA Z_POS_HI
					STX Z_POS_LO

					RTS 

POINT_X16		; MULTIPLY POINT *16 ? 
		LDA #$00
        STA OBJ_PNT_X_MSB
        STA OBJ_PNT_Y_MSB
        STA OBJ_PNT_Z_MSB

        LDX CURRENT_OBJECT
		LDA OBJ_PNT_X
        EOR #$80 ; change the sign?
        ASL 
        ROL OBJ_PNT_X_MSB ; *2
        ASL 
        ROL OBJ_PNT_X_MSB ; *4
        ASL 
        ROL OBJ_PNT_X_MSB ; *8
        ASL 
        ROL OBJ_PNT_X_MSB ; *16
        STA OBJ_PNT_X

        LDA OBJ_PNT_Y
        EOR #$80
        ASL 
        ROL OBJ_PNT_Y_MSB
        ASL 
        ROL OBJ_PNT_Y_MSB
        ASL 
        ROL OBJ_PNT_Y_MSB
        ASL 
        ROL OBJ_PNT_Y_MSB
        STA OBJ_PNT_Y

        LDA OBJ_PNT_Z
        EOR #$80
        ASL 
        ROL OBJ_PNT_Z_MSB
        ASL 
        ROL OBJ_PNT_Z_MSB
        ASL 
        ROL OBJ_PNT_Z_MSB
        ASL 
        ROL OBJ_PNT_Z_MSB
        STA OBJ_PNT_Z

        RTS 

ROTATE_PERS 
			LDA 	SIN_LO
			STA		FP_MULTIPLY_LO
			LDA 	SIN_HI
			LDX		X_POS_HI
			LDY		X_POS_LO
			JSR		FP_MULTIPLY	; x * SIN
			STy 	X_ROT_LO
			STA		X_ROT_HI

			LDA 	COS_LO
			STA		FP_MULTIPLY_LO
			LDA 	COS_HI
			LDX		Z_POS_HI
			LDY		Z_POS_LO
			JSR		FP_MULTIPLY	; Z * COS
			STy 	Z_ROT_LO
			STA		Z_ROT_HI

        LDX X_ROT_LO
        LDY X_ROT_HI
        JSR s838B				; Z = (X * SIN) + (Z * COS)
        STX Z_ROTATION_LO	; Z rotation result?
        TYA 
        EOR #$01
        STA Z_ROTATION_HI		; Z rotation result?
        AND #$01				; keep fp sign
        LSR 					; shift sign
        ROR 					; rotate sign into top bit
        STA POINT_CLASSIFY_1	; so -ve = $80 / +ve = $00 ? = behind point classification?

			LDA 	COS_LO
			STA		FP_MULTIPLY_LO
			LDA 	COS_HI
			LDX		X_POS_HI
			LDY		X_POS_LO
			JSR		FP_MULTIPLY	; X * COS
			STy 	X_ROT_LO
			STA		X_ROT_HI

			LDA 	SIN_LO
			STA		FP_MULTIPLY_LO
			LDA 	SIN_HI
			LDX		Z_POS_HI
			LDY		Z_POS_LO
			JSR		FP_MULTIPLY	; Z * SIN
			STy 	Z_ROT_LO

        EOR #$01 				; -Z * SIN
        STA Z_ROT_HI

        LDX X_ROT_LO
        LDY X_ROT_HI
        JSR s838B 				; X = (X * COS) + (-Z * SIN)
        STX X_ROTATION_LO	; X rotation result?
        TYA 
        STA X_ROTATION_HI	; X rotation result?

        LDY POINT_CLASSIFY_1	; z classification? (see #1 above) 0 is infront - !0 is behind
        BNE bAA54				; behind?
        STA ab09

		LDA		Z_ROTATION_LO
		STA		FP_DIVIDE_LO
		LDX		ab09
		LDY		ab08
		LDA		Z_ROTATION_HI
		JSR		FP_DIVIDE
		STX		ab5E
		STA		ab5F

        CLC 
        ADC ab21
        BVS bAA50
        TAY 
        JSR FPTO8BIT
        BCS bAA50
        ADC #SCR_HOR_MID
        STA LINE_START_HOR
        CMP #CLIP_TEST_RIGHT ; clip test
        BCC bAA54 ; off right
bAA50   LDA #PNT_OFF_RIGHT ; right clip
        STA POINT_CLASSIFY_1
bAA54   LDX Y_POS_HI
        LDA Y_POS_LO
        EOR #$01
        TAY 
        STX ab08
        STY ab09
;        JMP jA8E9

jA8E9   STX Y_ROTATION_LO
        TYA 
        CLC 
        ADC #$04
        BVS bA8F2
			TAY 
bA8F2   STY Y_ROTATION_HI
        STY ab09
        LDA POINT_CLASSIFY_1
        BMI bA933
		
		LDA		Z_ROTATION_LO
		STA		FP_DIVIDE_LO
		LDX		ab09
		LDY		ab08
		LDA		Z_ROTATION_HI
		JSR		FP_DIVIDE
		STX		ab60
		STA		ab61

        CLC 
        ADC ab21
        BVS bA92D
			TAY 
			JSR FPTO8BIT
        BCS bA92D
			ADC #SCR_VER_MID
			STA LINE_START_VER
			CMP #CLIP_TEST_BOTTOM ; clip test
			BCC bA933
bA92D   LDA POINT_CLASSIFY_1
        ORA #PNT_OFF_BOTTOM
        STA POINT_CLASSIFY_1
bA933   LDY POINT_LINE_COUNT						; point position?
        LDA POINT_CLASSIFY_1
        STA POINT_CLASSIFICATION,Y
        BMI bA95A					; behind
			LDA ab5E
			STA PERS_POINT_TAB_2,Y	; pers point?
			LDA ab5F
			STA PERS_POINT_TAB_3,Y	; pers point?
			LDA ab60
			STA PERS_POINT_TAB_4,Y	; pers point?
			LDA ab61
			STA PERS_POINT_TAB_5,Y	; pers point?
			LDA LINE_START_HOR 			; get perspective ver
			STA PERS_HOR,Y 				; put perspective ver
			LDA LINE_START_VER 			; get perspective hor
			STA PERS_VER,Y 				; put perspective hor
bA95A   LDA X_ROTATION_LO
        STA X_ROT_TAB_LO,Y 	; X rotation result x pos lo
        LDA X_ROTATION_HI
        STA X_ROT_TAB_HI,Y 	; X rotation result x pos hi
        LDA Y_ROTATION_LO
        STA Y_ROT_TAB_LO,Y	; rotation result y pos lo
        LDA Y_ROTATION_HI
        STA Y_ROT_TAB_HI,Y	; rotation result y pos hi
        LDA Z_ROTATION_LO
        STA Z_ROT_TAB_LO,Y	; rotation result z pos lo
        LDA Z_ROTATION_HI
        STA Z_ROT_TAB_HI,Y	; rotation result z pos hi
        RTS 

LINE_DRAW_0_LOOP  	INX 
					LDA LINE_FRACTION_ab08
					ADC LINE_INC
					STA LINE_FRACTION_ab08
					BCC LINE_DRAW_0
						INY 
						CPY #CLIP_TEST_BOTTOM
						BEQ LINE_DRAW_0_EXIT
LINE_DRAW_0			LDA VER_POS_LO,Y ; LINE-DRAW-START
					STA SCREEN_POS_LO
					TXA 
					ASL 
					LDA VER_POS_HI,Y
					ADC SCREEN_BANK
					STA SCREEN_POS_HI
					STY ab06
					LDY HOR_SCR_POS,X
					LDA (SCREEN_POS_PTR),Y
LINE_DRAW_0_TYPE	AND PIXEL_POS,X
					STA (SCREEN_POS_PTR),Y
					LDY ab06
					CPX ab6C
					BNE LINE_DRAW_0_LOOP
LINE_DRAW_0_EXIT   RTS 

LINE_DRAW_1_LOOP   INY  ; LINE-DRAW
					LDA LINE_FRACTION_ab08
					ADC LINE_INC
					STA LINE_FRACTION_ab08
					BCC LINE_DRAW_1
						INX 
						CPX #CLIP_TEST_RIGHT ; clip test
						BEQ LINE_DRAW_1_EXIT
LINE_DRAW_1			LDA VER_POS_LO,Y ; LINE-DRAW-START
					STA SCREEN_POS_LO
					TXA 
					ASL 
					LDA VER_POS_HI,Y
					ADC SCREEN_BANK
					STA SCREEN_POS_HI
					STY ab06
					LDY HOR_SCR_POS,X
					LDA (SCREEN_POS_PTR),Y
LINE_DRAW_1_TYPE	AND PIXEL_POS,X
					STA (SCREEN_POS_PTR),Y
					LDY ab06
					CPY ab6D
					BNE LINE_DRAW_1_LOOP ; GOTO LINE-DRAW
LINE_DRAW_1_EXIT   	RTS 

LINE_DRAW_2_LOOP   	INY  ; LINE-DRAW
					LDA LINE_FRACTION_ab08
					ADC LINE_INC
					STA LINE_FRACTION_ab08
					BCC LINE_DRAW_2
						DEX 
						CPX #$FF
						BEQ LINE_DRAW_2_EXIT
LINE_DRAW_2			LDA VER_POS_LO,Y ; LINE-DRAW-START
					STA SCREEN_POS_LO
					TXA 
					ASL 
					LDA VER_POS_HI,Y
					ADC SCREEN_BANK
					STA SCREEN_POS_HI
					STY ab06
					LDY HOR_SCR_POS,X
					LDA (SCREEN_POS_PTR),Y
LINE_DRAW_2_TYPE	AND PIXEL_POS,X
					STA (SCREEN_POS_PTR),Y
					LDY ab06
					CPY ab6D
					BNE LINE_DRAW_2_LOOP ; GOTO LINE-DRAW
LINE_DRAW_2_EXIT   	RTS 

LINE_DRAW_3_LOOP  	DEX ; LINE-DRAW
					LDA LINE_FRACTION_ab08
					SBC LINE_INC
					STA LINE_FRACTION_ab08
					BCS LINE_DRAW_3
						INY 
						CPY #CLIP_TEST_BOTTOM
						BEQ LINE_DRAW_3_EXIT
LINE_DRAW_3			LDA VER_POS_LO,Y ; LINE-DRAW-START
					STA SCREEN_POS_LO
					TXA 
					ASL 
					LDA VER_POS_HI,Y
					ADC SCREEN_BANK
					STA SCREEN_POS_HI
					STY ab06
					LDY HOR_SCR_POS,X
					LDA (SCREEN_POS_PTR),Y
LINE_DRAW_3_TYPE	AND PIXEL_POS,X
					STA (SCREEN_POS_PTR),Y
					LDY ab06
					CPX ab6C
					BNE LINE_DRAW_3_LOOP ; GOTO LINE-DRAW
LINE_DRAW_3_EXIT   	RTS 

LINE_DRAW_4_LOOP   	DEX  ; LINE-DRAW
					LDA LINE_FRACTION_ab08
					SBC LINE_INC
					STA LINE_FRACTION_ab08
					BCS LINE_DRAW_4
						DEY 
						CPY #$FF
						BEQ LINE_DRAW_4_EXIT
LINE_DRAW_4			LDA VER_POS_LO,Y ; LINE-DRAW-START
					STA SCREEN_POS_LO
					TXA 
					ASL 
					LDA VER_POS_HI,Y
					ADC SCREEN_BANK
					STA SCREEN_POS_HI
					STY ab06
					LDY HOR_SCR_POS,X
					LDA (SCREEN_POS_PTR),Y
LINE_DRAW_4_TYPE  	AND PIXEL_POS,X
					STA (SCREEN_POS_PTR),Y
					LDY ab06
					CPX ab6C
					BNE LINE_DRAW_4_LOOP ; GOTO LINE-DRAW
LINE_DRAW_4_EXIT   	RTS 

LINE_DRAW_5_LOOP   	DEY  ; LINE-DRAW
					LDA LINE_FRACTION_ab08
					ADC LINE_INC
					STA LINE_FRACTION_ab08
					BCC LINE_DRAW_5
						DEX 
						CPX #$FF
						BEQ LINE_DRAW_5_EXIT
LINE_DRAW_5			LDA VER_POS_LO,Y ; LINE-DRAW-START
					STA SCREEN_POS_LO
					TXA 
					ASL 
					LDA VER_POS_HI,Y
					ADC SCREEN_BANK
					STA SCREEN_POS_HI
					STY ab06
					LDY HOR_SCR_POS,X
					LDA (SCREEN_POS_PTR),Y
LINE_DRAW_5_TYPE  	AND PIXEL_POS,X
					STA (SCREEN_POS_PTR),Y
					LDY ab06
					CPY ab6D
					BNE LINE_DRAW_5_LOOP ; GOTO LINE-DRAW
LINE_DRAW_5_EXIT  	RTS

LINE_DRAW_6_LOOP   	DEY  ; LINE-DRAW
					LDA LINE_FRACTION_ab08
					SBC LINE_INC
					STA LINE_FRACTION_ab08
					BCS LINE_DRAW_6
						INX             ; NEXT VER
						CPX #$A0        ; OFF BOTTOM
						BEQ LINE_DRAW_6_EXIT       ; EXIT
LINE_DRAW_6			LDA VER_POS_LO,Y ; LINE-DRAW-START
					STA SCREEN_POS_LO
					TXA 
					ASL 
					LDA VER_POS_HI,Y
					ADC SCREEN_BANK
					STA SCREEN_POS_HI
					STY ab06
					LDY HOR_SCR_POS,X
					LDA (SCREEN_POS_PTR),Y
LINE_DRAW_6_TYPE	AND PIXEL_POS,X
					STA (SCREEN_POS_PTR),Y
					LDY ab06
					CPY ab6D
					BNE LINE_DRAW_6_LOOP ; GOTO LINE-DRAW 
LINE_DRAW_6_EXIT	RTS 

LINE_DRAW_7_LOOP   	INX	; LINE-DRAW
					LDA	LINE_FRACTION_ab08
					ADC	LINE_INC
					STA	LINE_FRACTION_ab08
					BCC	LINE_DRAW_7
						DEY 
						CPY	#$FF
						BEQ	LINE_DRAW_7_EXIT
LINE_DRAW_7			LDA	VER_POS_LO,Y ; LINE-DRAW-START
					STA	SCREEN_POS_LO
					TXA 
					ASL 
					LDA VER_POS_HI,Y
					ADC SCREEN_BANK
					STA SCREEN_POS_HI
					STY ab06
					LDY HOR_SCR_POS,X
					LDA (SCREEN_POS_PTR),Y
LINE_DRAW_7_TYPE	AND PIXEL_POS,X
					STA (SCREEN_POS_PTR),Y
					LDY ab06
					CPX ab6C
					BNE LINE_DRAW_7_LOOP ; GOTO LINE DRAW
LINE_DRAW_7_EXIT   	RTS 

COLOUR_SETUP_WHITE	LDA #>PIXEL_POS ; #$77 ; todo - currently hardcoded - needs to point to high value of and_pixel_table #>PIXEL_POS1
					LDX #$3D
					BNE COLOUR_SETUP ; JUMP
COLOUR_SETUP_BLACK	LDA #$56
					LDX #$1D
COLOUR_SETUP		STA LINE_DRAW_0_TYPE +2
					STA LINE_DRAW_1_TYPE +2
					STA LINE_DRAW_2_TYPE +2
					STA LINE_DRAW_3_TYPE +2
					STA LINE_DRAW_4_TYPE +2
					STA LINE_DRAW_5_TYPE +2
					STA LINE_DRAW_6_TYPE +2
					STA LINE_DRAW_7_TYPE +2
					STA LINE_DRAW_8_TYPE +2
					STX LINE_DRAW_0_TYPE
					STX LINE_DRAW_1_TYPE
					STX LINE_DRAW_2_TYPE
					STX LINE_DRAW_3_TYPE
					STX LINE_DRAW_4_TYPE
					STX LINE_DRAW_5_TYPE
					STX LINE_DRAW_6_TYPE
					STX LINE_DRAW_7_TYPE
					STX LINE_DRAW_8_TYPE
					RTS

DRAW_SCREEN			LDA	#$E0
WAIT_RASTER			CMP	$D012
					BNE WAIT_RASTER

		INC	SCREEN_FLIP	; INCREMENT SCREEN FLIP
        LDA	SCREEN_FLIP	; GET SCREEN FLIP
        LSR 				; SHIFT BIT0 INTO CARRY
        BCS	SCRN_2			; CARRY SET ?

		LDA	#SCREEN_0			; SCREEN 1 OFFSET
		STA	SCREEN_BANK		; SCREEN 1 OFFSET
		LDA	#$78
		STA	VIC_SCREEN_BANK
		BNE	SCNCLR			; JUMP

SCRN_2  LDA	#SCREEN_1		; SCREEN 2 OFFSET
        STA	SCREEN_BANK		; SCREEN 2 OFFSET
        LDA	#$70
        STA	VIC_SCREEN_BANK

SCNCLR  LDA #$A5
        LDX #136
        LDY SCREEN_BANK
        CPY #SCREEN_1
        BEQ CLSN1LP
CLSN0LP	STA SCREEN0-1+(136*00),X ; 1
        STA SCREEN0-1+(136*01),X ;f40F7,X ; 2
        STA SCREEN0-1+(136*02),X ;f41EF,X ;3
        STA SCREEN0-1+(136*03),X ;f42E7,X ;4
        STA SCREEN0-1+(136*04),X ;f43DF,X ;5
        STA SCREEN0-1+(136*05),X ;f44D7,X ;6
        STA SCREEN0-1+(136*06),X ;f45CF,X ;7
        STA SCREEN0-1+(136*07),X ;f46C7,X ;8
        STA SCREEN0-1+(136*08),X ;f47BF,X ;9
        STA SCREEN0-1+(136*09),X ;f48B7,X ;10
        STA SCREEN0-1+(136*10),X ;f49AF,X ;11
        STA SCREEN0-1+(136*11),X ;f4AA7,X ;12
        STA SCREEN0-1+(136*12),X ;f4B9F,X ;13
        STA SCREEN0-1+(136*13),X ;f4C97,X ;14
        STA SCREEN0-1+(136*14),X ;f4D8F,X ;15
        STA SCREEN0-1+(136*15),X ;f4E87,X ;16
        STA SCREEN0-1+(136*16),X ;f4F7F,X ;17
        STA SCREEN0-1+(136*17),X ;f5077,X ;18
        STA SCREEN0-1+(136*18),X ;f516F,X ;19
        STA SCREEN0-1+(136*19),X ;f5267,X ;20
        STA SCREEN0-1+(136*20),X ;f535F,X ;21
        STA SCREEN0-1+(136*21),X ;f5447,X ;22
		sta SCREEN0-1+(136*22),X ;f5447,x ;23
		sta SCREEN0-1+(136*23),X ;f5447,x ;24
		sta SCREEN0-1+(136*24),X ;f5447,x ;25
		sta SCREEN0-1+(136*25),X ;f5447,x ;26
		sta SCREEN0-1+(136*26),X ;f5447,x ;27
		sta SCREEN0-1+(136*27),X ;f5447,x ;28
		sta SCREEN0-1+(136*28),X ;f5447,x ;29
		sta SCREEN0-1+(136*29),X ;f5447,x ;30
		sta SCREEN0-1+(136*30),X ;f5447,x ;31
		sta SCREEN0-1+(136*31),X ;f5447,x ;32
		sta SCREEN0-1+(136*32),X ;f5447,x ;33
		sta SCREEN0-1+(136*33),X ;f5447,x ;34
		sta SCREEN0-1+(136*34),X ;f5447,x ;35
		sta SCREEN0-1+(136*35),X ;f5447,x ;36
		sta SCREEN0-1+(136*36),X ;f5447,x ;37
		sta SCREEN0-1+(136*37),X ;f5447,x ;38
		sta SCREEN0-1+(136*38),X ;f5447,x ;39
		sta SCREEN0-1+(136*39),X ;f5447,x ;40
		
        DEX 
        BNE CLSN0LP
        RTS 

CLSN1LP	STA SCREEN1-1+(136*00),X ; 1
        STA SCREEN1-1+(136*01),X ;f40F7,X ; 2
        STA SCREEN1-1+(136*02),X ;f41EF,X ;3
        STA SCREEN1-1+(136*03),X ;f42E7,X ;4
        STA SCREEN1-1+(136*04),X ;f43DF,X ;5
        STA SCREEN1-1+(136*05),X ;f44D7,X ;6
        STA SCREEN1-1+(136*06),X ;f45CF,X ;7
        STA SCREEN1-1+(136*07),X ;f46C7,X ;8
        STA SCREEN1-1+(136*08),X ;f47BF,X ;9
        STA SCREEN1-1+(136*09),X ;f48B7,X ;10
        STA SCREEN1-1+(136*10),X ;f49AF,X ;11
        STA SCREEN1-1+(136*11),X ;f4AA7,X ;12
        STA SCREEN1-1+(136*12),X ;f4B9F,X ;13
        STA SCREEN1-1+(136*13),X ;f4C97,X ;14
        STA SCREEN1-1+(136*14),X ;f4D8F,X ;15
        STA SCREEN1-1+(136*15),X ;f4E87,X ;16
        STA SCREEN1-1+(136*16),X ;f4F7F,X ;17
        STA SCREEN1-1+(136*17),X ;f5077,X ;18
        STA SCREEN1-1+(136*18),X ;f516F,X ;19
        STA SCREEN1-1+(136*19),X ;f5267,X ;20
        STA SCREEN1-1+(136*20),X ;f535F,X ;21
        STA SCREEN1-1+(136*21),X ;f5447,X ;22
		sta SCREEN1-1+(136*22),X ;f5447,x ;23
		sta SCREEN1-1+(136*23),X ;f5447,x ;24
		sta SCREEN1-1+(136*24),X ;f5447,x ;25
		sta SCREEN1-1+(136*25),X ;f5447,x ;26
		sta SCREEN1-1+(136*26),X ;f5447,x ;27
		sta SCREEN1-1+(136*27),X ;f5447,x ;28
		sta SCREEN1-1+(136*28),X ;f5447,x ;29
		sta SCREEN1-1+(136*29),X ;f5447,x ;30
		sta SCREEN1-1+(136*30),X ;f5447,x ;31
		sta SCREEN1-1+(136*31),X ;f5447,x ;32
		sta SCREEN1-1+(136*32),X ;f5447,x ;33
		sta SCREEN1-1+(136*33),X ;f5447,x ;34
		sta SCREEN1-1+(136*34),X ;f5447,x ;35
		sta SCREEN1-1+(136*35),X ;f5447,x ;36
		sta SCREEN1-1+(136*36),X ;f5447,x ;37
		sta SCREEN1-1+(136*37),X ;f5447,x ;38
		sta SCREEN1-1+(136*38),X ;f5447,x ;39
		sta SCREEN1-1+(136*39),X ;f5447,x ;40
        DEX 
        BNE CLSN1LP
        RTS 

READ_JOYSTICK_KEYBOARD
        LDA #$00
        STA $DC02    ;CIA1: Data Direction Register A
        LAX $DC00    ;CIA1: Data Port Register A into A and X
;        TAX 
        AND #$0F
        STA JOYSTICK_MOVEMENT ; JOYSTICK MOVEMENT
        TXA 
        LSR 
        LSR 
        LSR 
        LSR 
        AND #$01
;        STA ab81 ; FIRE BUTTON
		bne rjk
			lda OBJECTS_TO_DRAW+1
			clc
			adc #1
			and #31
			sta OBJECTS_TO_DRAW+1
rjk		RTS 

HEXCHAR		LDA		HEX0,Y
HEX_NUMBER0	STA		$ABCD,X
			LDA		HEX1,Y
HEX_NUMBER1	STA		$ABCD,X
			LDA		HEX2,Y
HEX_NUMBER2	STA		$ABCD,X
			LDA		HEX3,Y
HEX_NUMBER3	STA		$ABCD,X
			LDA		HEX4,Y
HEX_NUMBER4	STA		$ABCD,X
			RTS

HEX16	; Y = YPOS / A = HI / X = LO
			STY		REGY
			STX		REGX		
			LDX		#0
			JSR		HEX8
			LDA		REGX
			LDY		REGY
			LDX		#16
			JSR		HEX8
			RTS

HEX8	; A = NUM / Y = YPOS / X = XPOS
			CLC

			STA		REGA
			LDA		VER_POS_LO+0,Y
			STA		HEX_NUMBER0+1
			
			LDA		VER_POS_HI+0,Y
			CLC
			ADC 	SCREEN_BANK
			STA		HEX_NUMBER0+2

			LDA		VER_POS_LO+1,Y
			STA		HEX_NUMBER1+1
			
			LDA		VER_POS_HI+1,Y 
			CLC
			ADC 	SCREEN_BANK
			STA		HEX_NUMBER1+2

			LDA		VER_POS_LO+2,Y
			STA		HEX_NUMBER2+1
			
			LDA		VER_POS_HI+2,Y 
			CLC
			ADC 	SCREEN_BANK
			STA		HEX_NUMBER2+2

			LDA		VER_POS_LO+3,Y
			STA		HEX_NUMBER3+1
			
			LDA		VER_POS_HI+3,Y 
			CLC
			ADC 	SCREEN_BANK
			STA		HEX_NUMBER3+2

			LDA		VER_POS_LO+4,Y
			STA		HEX_NUMBER4+1
			
			LDA		VER_POS_HI+4,Y 
			CLC
			ADC 	SCREEN_BANK
			STA		HEX_NUMBER4+2

			LDA		REGA
			LSR
			LSR
			LSR
			LSR
			TAY
			JSR		HEXCHAR

			TXA
			CLC
			ADC 	#8
			TAX

			LDA		REGA
			AND		#15
			TAY
			JSR		HEXCHAR

			RTS

X_ROT_TAB_LO =$0100 ; UNKNOWN_POINT_TAB_6
X_ROT_TAB_HI = $0140
Y_ROT_TAB_LO = $0180
Y_ROT_TAB_HI = $02C0
Z_ROT_TAB_LO = $0340 
Z_ROT_TAB_HI = $0380
PERS_POINT_TAB_3 = $03C0
PERS_POINT_TAB_2 = $0600
PERS_POINT_TAB_5 = $0640
PERS_HOR = $0680
PERS_VER = $06C0
POINT_CLASSIFICATION = $0700 ; 00 = point is onscreen - 01 = point needs off left/right - 02 = point is off top/bottom - 03 = point is off left/right + top/bottom - 80 / minus = point is behind

f0A5C = $0A5C   
;f1512 = $1512   
f167A = $167A   
f20A0 = $20A0   
f20E0 = $20E0   
f2120 = $2120   
f2210 = $2210

HEX0	.BYTE %10000000,%10100010,%10000000,%10000000,%10001000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000010,%10000000,%10000000 
HEX1	.BYTE %10001000,%10000010,%10101000,%10101000,%10001000,%10001010,%10001010,%10101000,%10001000,%10001000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010 
HEX2	.BYTE %10001000,%10100010,%10000000,%10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10000000,%10000010,%10001010,%10001000,%10000000,%10000000
HEX3	.BYTE %10001000,%10100010,%10001010,%10101000,%10101000,%10101000,%10001000,%10101000,%10001000,%10101000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010
HEX4	.BYTE %10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10101000,%10000000,%10000000,%10001000,%10000000,%10100000,%10000010,%10000000,%10001010

OBJ_X_MSB 
.FILL 64,00 ;04
 
OBJ_Y_MSB  
.FILL 64,00

OBJ_Z_MSB   
.FILL 64,00 ; 01

OBJ_X_HSB   
.FILL 64,00

OBJ_Y_HSB
.FILL 64,00

OBJ_Z_HSB
.FILL 64,00

OBJECT_SHAPE_PTR_LO
	.BYTE <OBJ_01,<OBJ_02,<OBJ_03,<OBJ_04,<OBJ_05,<OBJ_06,<OBJ_07,<OBJ_08
    .BYTE <OBJ_09,<OBJ_10,<OBJ_11,<OBJ_12,<OBJ_13,<OBJ_14,<OBJ_15,<OBJ_16
	.BYTE <OBJ_17,<OBJ_18,<OBJ_19,<OBJ_20,<OBJ_21,<OBJ_02,<OBJ_03,<OBJ_04
	.BYTE <OBJ_05,<OBJ_06,<OBJ_07,<OBJ_08,<OBJ_09,<OBJ_10,<OBJ_11,<OBJ_12
	.BYTE <OBJ_13,<OBJ_14,<OBJ_15,<OBJ_16,<OBJ_17,<OBJ_18,<OBJ_19,<OBJ_20
        .BYTE $80,$06,$74,$76,$E5,$28,$B8,$87
        .BYTE $FA,$CF,$5E,$0C,$BE,$61,$8F,$BF
        .BYTE $45,$F8,$00,$00,$F8,$4A,$4A,$8D

OBJECT_SHAPE_PTR_HI
	.BYTE >OBJ_01,>OBJ_02,>OBJ_03,>OBJ_04,>OBJ_05,>OBJ_06,>OBJ_07,>OBJ_08
    .BYTE >OBJ_09,>OBJ_10,>OBJ_11,>OBJ_12,>OBJ_13,>OBJ_14,>OBJ_15,>OBJ_16
	.BYTE >OBJ_17,>OBJ_18,>OBJ_19,>OBJ_20,>OBJ_21,>OBJ_02,>OBJ_03,>OBJ_04
	.BYTE >OBJ_05,>OBJ_06,>OBJ_07,>OBJ_08,>OBJ_09,>OBJ_10,>OBJ_11,>OBJ_12
	.BYTE >OBJ_13,>OBJ_14,>OBJ_15,>OBJ_16,>OBJ_17,>OBJ_18,>OBJ_19,>OBJ_20
        .BYTE $1A,$19,$19,$1D,$1A,$1B,$1A,$18
        .BYTE $17,$1E,$1B,$1F,$1C,$3E,$3E,$3E
        .BYTE $1B,$3E,$17,$17,$3E,$3F,$3F,$3F

OBJ_X_LSB
.FILL 64,$E5
;		.BYTE $41,$A6,$2E,$57,$0E,$78,$A8,$00
;        .BYTE $E5,$9C,$00,$9C,$61,$3C,$AC,$E7
;        .BYTE $E5,$B7,$F1,$F6,$AE,$A7,$16,$C7
;        .BYTE $1D,$28,$53,$53,$28,$53,$02,$9E
;        .BYTE $11,$C0,$51,$B3,$B5,$D0,$87,$20
;        .BYTE $4F,$85,$2E,$0B,$10,$58,$60,$8C
;        .BYTE $6E,$CF,$05,$A6,$DF,$8C,$5A,$58
;        .BYTE $DA,$00,$80,$80,$00,$00,$00,$00

OBJ_Y_LSB
.FILL 64,00
;		.BYTE $01,$00,$00,$00,$00,$00,$00,$00
;        .BYTE $00,$00,$00,$00,$00,$00,$FF,$32
;        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
;        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
;        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
;        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
;        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
;        .BYTE $00,$00,$00,$00,$00,$00,$00,$C0

OBJ_Z_LSB
.FILL 64,$65
;		.BYTE $A4,$89,$44,$20,$4B,$90,$37,$00
;        .BYTE $65,$72,$00,$72,$D9,$FE,$5A,$C6
;        .BYTE $65,$72,$BA,$95,$15,$B0,$8A,$74
;        .BYTE $BA,$22,$27,$27,$22,$27,$FE,$8A
;        .BYTE $70,$28,$7A,$7B,$B1,$00,$A3,$67
;        .BYTE $2B,$5E,$8E,$5D,$3E,$13,$80,$B9
;        .BYTE $AB,$B9,$58,$20,$C4,$A2,$ED,$AC
;        .BYTE $69,$80,$00,$00,$80,$00,$00,$00

OBJECTS_TO_DRAW   ; objects to draw
		.BYTE $00
		.BYTE $06 ; object being drawn
		.BYTE $3E,$3D,$38,$32,$0A,$02,$01
        .BYTE $00,$01,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00

f2A00  
.FILL 32*8,0

OBJ_01	.BYTE $0F
		.BYTE $F8,$00,$10
		.BYTE $FA,$0C,$0C
		.BYTE $FA,$0C,$00
		.BYTE $F9,$06,$FD
		.BYTE $F9,$04,$F4
		.BYTE $FC,$04,$F0
		.BYTE $FC,$00,$F0
        .BYTE $F9,$00,$F4
		.BYTE $08,$00,$10
		.BYTE $06,$0C,$0C
		.BYTE $06,$0C,$00
		.BYTE $07,$06,$FD
		.BYTE $07,$04,$F4
		.BYTE $04,$04,$F0
		.BYTE $04,$00,$F0
        .BYTE $07,$00,$F4
		.BYTE $17
		.BYTE $01,$12,$23,$34,$45,$56,$67,$70,$89,$9A,$AB,$BC,$CD,$DE,$EF,$F8,$47,$CF,$08,$19,$2A,$3B,$5D,$6E

OBJ_02	.BYTE $0F
		.BYTE $F8,$04,$18
        .BYTE $08,$04,$18
		.BYTE $00,$04,$E8
		.BYTE $00,$0C,$18
		.BYTE $E2,$04,$18
		.BYTE $1E,$04,$18
		.BYTE $FC,$04,$00
		.BYTE $04,$04,$00
		.BYTE $00,$14,$18
        .BYTE $00,$0A,$0C
		.BYTE $F2,$04,$10
		.BYTE $F2,$00,$10
		.BYTE $0E,$04,$10
		.BYTE $0E,$00,$10
		.BYTE $00,$04,$F0
		.BYTE $00,$00,$F0
		.BYTE $0C
		.BYTE $20,$23,$21,$13,$03,$45,$46,$57,$38,$89,$AB,$CD,$EF

OBJ_03	.BYTE $07
		.BYTE $00,$00,$00
		.BYTE $EC,$07,$00
		.BYTE $F6,$07,$11
		.BYTE $0A,$07,$11
        .BYTE $14,$07,$00
		.BYTE $0A,$07,$EF
		.BYTE $F6,$07,$EF
		.BYTE $00,$10,$00
		.BYTE $11
		.BYTE $01,$02,$03,$04,$05,$06,$71,$72,$73,$74,$75,$76,$12,$23,$34,$45,$56,$61

OBJ_04	.BYTE $05
        .BYTE $F4,$00,$10
		.BYTE $00,$00,$F0
		.BYTE $0C,$00,$10
		.BYTE $F4,$0A,$10
		.BYTE $00,$0A,$F0
		.BYTE $0C,$0A,$10
		.BYTE $08
		.BYTE $01,$12,$20,$34,$45,$53,$03,$14,$25
		
OBJ_05	.BYTE $05
		.BYTE $FB,$00,$FF
		.BYTE $05,$00,$FF
		.BYTE $00,$0C,$FF
		.BYTE $FB,$00,$01
		.BYTE $05,$00,$01
		.BYTE $00,$0C,$01
		.BYTE $08
		.BYTE $01,$12,$20,$34,$45,$53,$03,$14,$25

OBJ_06	.BYTE $0F
		.BYTE $F0,$00,$10
        .BYTE $10,$00,$10
		.BYTE $00,$00,$EC
		.BYTE $FC,$00,$04
		.BYTE $04,$00,$04
		.BYTE $00,$00,$FC
		.BYTE $FD,$04,$03
		.BYTE $03,$04,$03
		.BYTE $00,$04,$FD
        .BYTE $FE,$14,$02
		.BYTE $02,$14,$02
		.BYTE $00,$14,$FE
		.BYTE $FF,$04,$01
		.BYTE $01,$04,$01
		.BYTE $00,$04,$FF
		.BYTE $00,$34,$00
		.BYTE $14
		.BYTE $F6,$F7,$F8,$90,$A1,$B2,$06,$17,$28,$C3,$D4,$E5,$34,$45,$53,$67,$78,$86,$CD,$DE,$EC

OBJ_07	.BYTE $07
		.BYTE $F8,$F8,$F8
		.BYTE $08,$F8,$F8
		.BYTE $08,$F8,$08
		.BYTE $F8,$F8,$08
		.BYTE $F8,$08,$F8
		.BYTE $08,$08,$F8
		.BYTE $08,$08,$08
		.BYTE $F8,$08,$08
		.BYTE $0B
		.BYTE $01,$12,$23,$30,$04,$15,$26,$37,$45,$56,$67,$74
		
OBJ_08	.BYTE $09
		.BYTE $FC,$07,$04
		.BYTE $04,$07,$04
        .BYTE $00,$07,$FC
		.BYTE $00,$0E,$00
		.BYTE $FF,$07,$01
		.BYTE $01,$07,$01
		.BYTE $00,$07,$FF
		.BYTE $FE,$00,$02
		.BYTE $02,$00,$02
		.BYTE $00,$00,$FE
        .BYTE $0E
		.BYTE $01,$12,$20,$03,$13,$23,$45,$56,$64,$78,$89,$97,$47,$58,$69,$0F,$F9

OBJ_09  .BYTE $05
        .BYTE $8B,$00,$8F
        .BYTE $75,$00,$8F
        .BYTE $00,$0C,$8F
        .BYTE $8B,$00,$71
        .BYTE $75,$00,$71
        .BYTE $00,$0C,$71
        .BYTE $08
        .BYTE $01,$12,$20, $34,$45,$53, $03,$14,$25

OBJ_10  .BYTE $05
		.BYTE $F0,$00,$20
		.BYTE $10,$00,$20
		.BYTE $FD,$02,$20
		.BYTE $03,$02,$20
		.BYTE $00,$0C,$20
		.BYTE $00,$00,$E1
		.BYTE $09
		.BYTE $01,$13,$34,$42,$20,$05,$15,$25,$35,$45

OBJ_11	.BYTE $07
		.BYTE $F8,$F8,$F8
		.BYTE $08,$F8,$F8
		.BYTE $08,$F8,$08
		.BYTE $F8,$F8,$08
		.BYTE $F8,$08,$F8
		.BYTE $08,$08,$F8
		.BYTE $08,$08,$08
		.BYTE $F8,$08,$08
		.BYTE $0B
		.BYTE $01,$12,$23,$30,$04,$15,$26,$37,$45,$56,$67,$74,$09,$FC
	
OBJ_12	.BYTE $07
		.BYTE $FF,$00,$FC
		.BYTE $FF,$00,$04
		.BYTE $FF,$0C,$02
		.BYTE $FF,$0C,$FE
		.BYTE $01,$00,$FC
		.BYTE $01,$00,$04
		.BYTE $01,$0C,$02
		.BYTE $01,$0C,$FE
		.BYTE $0B
		.BYTE $01,$12,$23,$30,$45,$56,$67,$74,$04,$15,$26,$37
	
OBJ_13	.BYTE $09
		.BYTE $04,$00,$FF
		.BYTE $FC,$00,$FF
		.BYTE $FA,$08,$FF
		.BYTE $00,$0C,$FF
		.BYTE $06,$08,$FF
		.BYTE $04,$00,$01
		.BYTE $FC,$00,$01
		.BYTE $FA,$08,$01
		.BYTE $00,$0C,$01
		.BYTE $06,$08,$01
		.BYTE $0E
		.BYTE $01,$12,$23,$34,$40,$56,$67,$78,$89,$95,$05,$16,$27,$38,$49
	
OBJ_14
		.BYTE $09
		.BYTE $FD,$00,$FF
		.BYTE $03,$00,$FF
		.BYTE $03,$0A,$FF
		.BYTE $00,$0C,$FF
		.BYTE $FD,$0A,$FF
		.BYTE $FD,$00,$01
		.BYTE $03,$00,$01
		.BYTE $03,$0A,$01
		.BYTE $00,$0C,$01
		.BYTE $FD,$0A,$01
		.BYTE $0E
		.BYTE $01,$12,$23,$34,$40,$56,$67,$78,$89,$95,$05,$16,$27,$38,$49
	
OBJ_15	.BYTE $07
		.BYTE $FE,$00,$FF
		.BYTE $02,$00,$FF
		.BYTE $04,$0C,$FF
		.BYTE $FC,$0C,$FF
		.BYTE $FE,$00,$01
		.BYTE $02,$00,$01
		.BYTE $04,$0C,$01
		.BYTE $FC,$0C,$01
		.BYTE $0B
		.BYTE $01,$12,$23,$30,$45,$56,$67,$74,$04,$15,$26,$37
	
OBJ_16	.BYTE $0B
		.BYTE $02,$00,$FF
		.BYTE $04,$06,$FF
		.BYTE $02,$0C,$FF
		.BYTE $FE,$0C,$FF
		.BYTE $FC,$06,$FF
		.BYTE $FE,$00,$FF
		.BYTE $02,$00,$01
		.BYTE $04,$06,$01
		.BYTE $02,$0C,$01
		.BYTE $FE,$0C,$01
		.BYTE $FC,$06,$01
		.BYTE $FE,$00,$01
		.BYTE $11
		.BYTE $01,$12,$23,$34,$45,$50,$67,$78,$89,$9A,$AB,$B6,$06,$17,$28,$39,$4A,$5B

OBJ_17	.BYTE $0B
		.BYTE $03,$00,$FF
		.BYTE $03,$08,$FF
		.BYTE $01,$0C,$FF
		.BYTE $FF,$0C,$FF
		.BYTE $FD,$08,$FF
		.BYTE $FD,$00,$FF
		.BYTE $03,$00,$01
		.BYTE $03,$08,$01
		.BYTE $01,$0C,$01
		.BYTE $FF,$0C,$01
		.BYTE $FD,$08,$01
		.BYTE $FD,$00,$01
		.BYTE $11
		.BYTE $01,$12,$23,$34,$45,$50,$67,$78,$89,$9A,$AB,$B6,$06,$17,$28,$39,$4A,$5B

OBJ_18	.BYTE $0B
		.BYTE $F9,$00,$F3
		.BYTE $07,$00,$F3
		.BYTE $07,$00,$0D
		.BYTE $F9,$00,$0D
		.BYTE $F9,$06,$F3
		.BYTE $07,$06,$F3
		.BYTE $07,$06,$0D
		.BYTE $F9,$06,$0D
		.BYTE $F6,$06,$F0
		.BYTE $0A,$06,$F0
		.BYTE $0A,$06,$10
		.BYTE $F6,$06,$10
		.BYTE $07
		.BYTE $04,$15,$26,$37,$89,$9A,$AB,$B8
	
OBJ_19	.BYTE $0B
		.BYTE $FE,$00,$FE
		.BYTE $FE,$00,$02
		.BYTE $02,$00,$02
		.BYTE $02,$00,$FE
		.BYTE $FE,$04,$FE
		.BYTE $FE,$04,$02
		.BYTE $02,$04,$02
		.BYTE $02,$04,$FE
		.BYTE $02,$06,$02
		.BYTE $02,$06,$FE
		.BYTE $02,$07,$02
		.BYTE $02,$07,$FE
		.BYTE $09
		.BYTE $04,$15,$2A,$3B,$45,$56,$67,$74,$89,$AB
	
OBJ_20	.BYTE $0D
		.BYTE $F6,$00,$FB
		.BYTE $F6,$00,$05
		.BYTE $0A,$00,$05
		.BYTE $0A,$00,$FB
		.BYTE $F6,$02,$FB
		.BYTE $F6,$02,$05
		.BYTE $0A,$02,$05
		.BYTE $0A,$02,$FB
		.BYTE $F6,$04,$FB
		.BYTE $F6,$04,$05
		.BYTE $0A,$04,$05
		.BYTE $0A,$04,$FB
		.BYTE $0A,$08,$05
		.BYTE $0A,$08,$FB
		.BYTE $0C
		.BYTE $08,$19,$2C,$3D,$45,$56,$67,$74,$89,$9A,$AB,$B8,$CD

OBJ_21	.BYTE 4-1
		.BYTE 255-127, 255-90, 0
		.BYTE 127, 255-90, 0
		.BYTE 0, 90, 255-127
		.BYTE 0, 90, 127
		.BYTE 6-1
		.BYTE $01,$02,$03,$12,$13,$23

OBJ_99	.BYTE $07
		.BYTE 0,0,0
		.BYTE 0,0,255
		.BYTE 0,255,0
		.BYTE 0,255,255
		.BYTE 255,0,0
		.BYTE 255,0,255
		.BYTE 255,255,0
		.BYTE 255,255,255
        .BYTE $0B
        .BYTE $01,$13,$32,$20
        .BYTE $45,$57,$76,$64
        .BYTE $04,$15,$26,$37
		
.ALIGN $100
SIN_LSB   ; SIN/COS TABLE? f5A00
		.BYTE $92,$2E,$F7,$60,$C4,$14,$47,$79
        .BYTE $AB,$DD,$08,$21,$3A,$53,$6C,$85
        .BYTE $9E,$B7,$D0,$E9,$01,$0D,$1A,$26
        .BYTE $33,$3F,$4C,$58,$64,$71,$7D,$89
        .BYTE $96,$A2,$AE,$BB,$C7,$D3,$DF,$EC
        .BYTE $F8,$02,$08,$0E,$14,$1A,$20,$26
        .BYTE $2C,$32,$38,$3E,$44,$4A,$50,$56
        .BYTE $5C,$62,$68,$6E,$73,$79,$7F,$85
        .BYTE $8B,$91,$96,$9C,$A2,$A8,$AD,$B3
        .BYTE $B9,$BE,$C4,$CA,$CF,$D5,$DA,$E0
        .BYTE $E5,$EB,$F1,$F6,$FB,$00,$03,$06
        .BYTE $09,$0B,$0E,$11,$13,$16,$19,$1B
        .BYTE $1E,$20,$23,$26,$28,$2B,$2D,$30
        .BYTE $32,$35,$37,$3A,$3C,$3F,$41,$44
        .BYTE $46,$48,$4B,$4D,$50,$52,$54,$57
        .BYTE $59,$5B,$5E,$60,$62,$64,$67,$69
        .BYTE $6B,$6D,$70,$72,$74,$76,$78,$7A
        .BYTE $7C,$7F,$81,$83,$85,$87,$89,$8B
        .BYTE $8D,$8F,$91,$93,$95,$97,$98,$9A
        .BYTE $9C,$9E,$A0,$A2,$A4,$A5,$A7,$A9
        .BYTE $AB,$AC,$AE,$B0,$B1,$B3,$B5,$B6
        .BYTE $B8,$BA,$BB,$BD,$BE,$C0,$C1,$C3
        .BYTE $C4,$C6,$C7,$C9,$CA,$CB,$CD,$CE
        .BYTE $D0,$D1,$D2,$D3,$D5,$D6,$D7,$D8
        .BYTE $DA,$DB,$DC,$DD,$DE,$DF,$E0,$E2
        .BYTE $E3,$E4,$E5,$E6,$E7,$E8,$E9,$E9
        .BYTE $EA,$EB,$EC,$ED,$EE,$EF,$EF,$F0
        .BYTE $F1,$F2,$F3,$F3,$F4,$F5,$F5,$F6
        .BYTE $F6,$F7,$F8,$F8,$F9,$F9,$FA,$FA
        .BYTE $FB,$FB,$FC,$FC,$FC,$FD,$FD,$FD
        .BYTE $FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF
        .BYTE $FF,$00,$00,$00,$00,$00,$00,$00
 
SIN_MSB ; f5B00   ; SIN / COS TABLE?
		.BYTE $DC,$E4,$E4,$E8,$E8,$EC,$EC,$EC
        .BYTE $EC,$EC,$F0,$F0,$F0,$F0,$F0,$F0
        .BYTE $F0,$F0,$F0,$F0,$F4,$F4,$F4,$F4
        .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4
        .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4
        .BYTE $F4,$F8,$F8,$F8,$F8,$F8,$F8,$F8
        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8
        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8
        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8
        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8
        .BYTE $F8,$F8,$F8,$F8,$F8,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$00,$00,$00,$00,$00,$00,$00
	
LOG_TABLE ; f5800
		.BYTE $00,$01,$03,$04,$06,$07,$09,$0A
        .BYTE $0B,$0D,$0E,$10,$11,$12,$14,$15
        .BYTE $16,$18,$19,$1A,$1C,$1D,$1E,$20
        .BYTE $21,$22,$24,$25,$26,$28,$29,$2A
        .BYTE $2C,$2D,$2E,$2F,$31,$32,$33,$34
        .BYTE $36,$37,$38,$39,$3B,$3C,$3D,$3E
        .BYTE $3F,$41,$42,$43,$44,$45,$47,$48
        .BYTE $49,$4A,$4B,$4D,$4E,$4F,$50,$51
        .BYTE $52,$54,$55,$56,$57,$58,$59,$5A
        .BYTE $5C,$5D,$5E,$5F,$60,$61,$62,$63
        .BYTE $64,$66,$67,$68,$69,$6A,$6B,$6C
        .BYTE $6D,$6E,$6F,$70,$71,$72,$74,$75
        .BYTE $76,$77,$78,$79,$7A,$7B,$7C,$7D
        .BYTE $7E,$7F,$80,$81,$82,$83,$84,$85
        .BYTE $86,$87,$88,$89,$8A,$8B,$8C,$8D
        .BYTE $8E,$8F,$90,$91,$92,$93,$94,$95
        .BYTE $96,$97,$98,$99,$9A,$9B,$9B,$9C
        .BYTE $9D,$9E,$9F,$A0,$A1,$A2,$A3,$A4
        .BYTE $A5,$A6,$A7,$A8,$A9,$A9,$AA,$AB
        .BYTE $AC,$AD,$AE,$AF,$B0,$B1,$B2,$B2
        .BYTE $B3,$B4,$B5,$B6,$B7,$B8,$B9,$B9
        .BYTE $BA,$BB,$BC,$BD,$BE,$BF,$C0,$C0
        .BYTE $C1,$C2,$C3,$C4,$C5,$C6,$C6,$C7
        .BYTE $C8,$C9,$CA,$CB,$CB,$CC,$CD,$CE
        .BYTE $CF,$D0,$D0,$D1,$D2,$D3,$D4,$D4
        .BYTE $D5,$D6,$D7,$D8,$D8,$D9,$DA,$DB
        .BYTE $DC,$DC,$DD,$DE,$DF,$E0,$E0,$E1
        .BYTE $E2,$E3,$E4,$E4,$E5,$E6,$E7,$E7
        .BYTE $E8,$E9,$EA,$EA,$EB,$EC,$ED,$EE
        .BYTE $EE,$EF,$F0,$F1,$F1,$F2,$F3,$F4
        .BYTE $F4,$F5,$F6,$F7,$F7,$F8,$F9,$F9
        .BYTE $FA,$FB,$FC,$FC,$FD,$FE,$FF,$FF

EXP_TABLE ; f5900
		.BYTE $00,$01,$01,$02,$03,$03,$04,$05
        .BYTE $06,$06,$07,$08,$08,$09,$0A,$0B
        .BYTE $0B,$0C,$0D,$0E,$0E,$0F,$10,$10
        .BYTE $11,$12,$13,$13,$14,$15,$16,$16
        .BYTE $17,$18,$19,$19,$1A,$1B,$1C,$1D
        .BYTE $1D,$1E,$1F,$20,$20,$21,$22,$23
        .BYTE $24,$24,$25,$26,$27,$28,$28,$29
        .BYTE $2A,$2B,$2C,$2C,$2D,$2E,$2F,$30
        .BYTE $30,$31,$32,$33,$34,$35,$35,$36
        .BYTE $37,$38,$39,$3A,$3A,$3B,$3C,$3D
        .BYTE $3E,$3F,$40,$41,$41,$42,$43,$44
        .BYTE $45,$46,$47,$48,$48,$49,$4A,$4B
        .BYTE $4C,$4D,$4E,$4F,$50,$51,$51,$52
        .BYTE $53,$54,$55,$56,$57,$58,$59,$5A
        .BYTE $5B,$5C,$5D,$5E,$5E,$5F,$60,$61
        .BYTE $62,$63,$64,$65,$66,$67,$68,$69
        .BYTE $6A,$6B,$6C,$6D,$6E,$6F,$70,$71
        .BYTE $72,$73,$74,$75,$76,$77,$78,$79
        .BYTE $7A,$7B,$7C,$7D,$7E,$7F,$80,$81
        .BYTE $82,$83,$84,$85,$87,$88,$89,$8A
        .BYTE $8B,$8C,$8D,$8E,$8F,$90,$91,$92
        .BYTE $93,$95,$96,$97,$98,$99,$9A,$9B
        .BYTE $9C,$9D,$9F,$A0,$A1,$A2,$A3,$A4
        .BYTE $A5,$A6,$A8,$A9,$AA,$AB,$AC,$AD
        .BYTE $AF,$B0,$B1,$B2,$B3,$B4,$B6,$B7
        .BYTE $B8,$B9,$BA,$BC,$BD,$BE,$BF,$C0
        .BYTE $C2,$C3,$C4,$C5,$C6,$C8,$C9,$CA
        .BYTE $CB,$CD,$CE,$CF,$D0,$D2,$D3,$D4
        .BYTE $D6,$D7,$D8,$D9,$DB,$DC,$DD,$DE
        .BYTE $E0,$E1,$E2,$E4,$E5,$E6,$E8,$E9
        .BYTE $EA,$EC,$ED,$EE,$F0,$F1,$F2,$F4
        .BYTE $F5,$F6,$F8,$F9,$FA,$FC,$FD,$FF

VER_POS_HI
		.BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
        .BYTE $02,$02,$02,$02,$02,$02,$02,$02
        .BYTE $03,$03,$03,$03,$03,$03,$03,$03
        .BYTE $05,$05,$05,$05,$05,$05,$05,$05
        .BYTE $06,$06,$06,$06,$06,$06,$06,$06
        .BYTE $07,$07,$07,$07,$07,$07,$07,$07
        .BYTE $08,$08,$08,$08,$08,$08,$08,$08
        .BYTE $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A
        .BYTE $0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B
        .BYTE $0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C
        .BYTE $0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D
        .BYTE $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F
        .BYTE $10,$10,$10,$10,$10,$10,$10,$10
        .BYTE $11,$11,$11,$11,$11,$11,$11,$11
        .BYTE $12,$12,$12,$12,$12,$12,$12,$12
        .BYTE $14,$14,$14,$14,$14,$14,$14,$14
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

VER_POS_LO
		.BYTE $00,$01,$02,$03,$04,$05,$06,$07
        .BYTE $40,$41,$42,$43,$44,$45,$46,$47
        .BYTE $80,$81,$82,$83,$84,$85,$86,$87
        .BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7
        .BYTE $00,$01,$02,$03,$04,$05,$06,$07
        .BYTE $40,$41,$42,$43,$44,$45,$46,$47
        .BYTE $80,$81,$82,$83,$84,$85,$86,$87
		.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7
		.BYTE $00,$01,$02,$03,$04,$05,$06,$07
		.BYTE $40,$41,$42,$43,$44,$45,$46,$47
		.BYTE $80,$81,$82,$83,$84,$85,$86,$87
		.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7
		.BYTE $00,$01,$02,$03,$04,$05,$06,$07
		.BYTE $40,$41,$42,$43,$44,$45,$46,$47
		.BYTE $80,$81,$82,$83,$84,$85,$86,$87
		.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7
		.BYTE $00,$01,$02,$03,$04,$05,$06,$07
		.BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

HOR_SCR_POS
		.BYTE $00,$00,$00,$00,$08,$08,$08,$08
        .BYTE $10,$10,$10,$10,$18,$18,$18,$18
        .BYTE $20,$20,$20,$20,$28,$28,$28,$28
        .BYTE $30,$30,$30,$30,$38,$38,$38,$38
        .BYTE $40,$40,$40,$40,$48,$48,$48,$48
        .BYTE $50,$50,$50,$50,$58,$58,$58,$58
        .BYTE $60,$60,$60,$60,$68,$68,$68,$68
        .BYTE $70,$70,$70,$70,$78,$78,$78,$78
        .BYTE $80,$80,$80,$80,$88,$88,$88,$88
        .BYTE $90,$90,$90,$90,$98,$98,$98,$98
        .BYTE $A0,$A0,$A0,$A0,$A8,$A8,$A8,$A8
        .BYTE $B0,$B0,$B0,$B0,$B8,$B8,$B8,$B8
        .BYTE $C0,$C0,$C0,$C0,$C8,$C8,$C8,$C8
        .BYTE $D0,$D0,$D0,$D0,$D8,$D8,$D8,$D8
        .BYTE $E0,$E0,$E0,$E0,$E8,$E8,$E8,$E8
        .BYTE $F0,$F0,$F0,$F0,$F8,$F8,$F8,$F8

        .BYTE $00,$00,$00,$00,$08,$08,$08,$08
        .BYTE $10,$10,$10,$10,$18,$18,$18,$18
		.BYTE $20,$20,$20,$20,$28,$28,$28,$28
		.BYTE $30,$30,$30,$30,$38,$38,$38,$38
		.BYTE $C0,$C0,$C0,$C0,$C0,$C0,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
		.BYTE $25,$25,$28,$29,$24,$24,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
		.BYTE $80,$80,$00,$00,$80,$80,$14,$15
        .BYTE $15,$16,$16,$17,$17,$0C,$00,$0C
		.BYTE $29,$28,$19,$18,$28,$29,$04,$10
        .BYTE $05,$11,$06,$12,$07,$13,$08,$14
		.BYTE $09,$15,$0A,$16,$0B,$17,$18,$19
        .BYTE $19,$1A,$1B,$1C,$1C,$1D,$01,$3D
		.BYTE $1B,$3D,$1A,$3C,$1D,$3C,$22,$E2
		.BYTE $22,$60,$1F,$60,$1F,$E2,$1D,$62

;f56E8  	.BYTE $40,$10,$04,$01,$40,$10,$04,$01
;        .BYTE $40,$10,$04,$01,$40,$10,$04,$01
;        .BYTE $40,$10,$04,$01,$40,$10,$04,$01
;f7700   .BYTE $00,$00,$90,$00,$AA,$AA,$AA,$AA
;        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
;        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
;        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

LINE_DRAW_PTR_LO   .BYTE <LINE_DRAW_0,<LINE_DRAW_1,<LINE_DRAW_2,<LINE_DRAW_3,<LINE_DRAW_4,<LINE_DRAW_5,<LINE_DRAW_6,<LINE_DRAW_7 
LINE_DRAW_PTR_HI   .BYTE >LINE_DRAW_0,>LINE_DRAW_1,>LINE_DRAW_2,>LINE_DRAW_3,>LINE_DRAW_4,>LINE_DRAW_5,>LINE_DRAW_6,>LINE_DRAW_7 
LINE_DRAW_CONV_PTR .BYTE $00,$07,$03,$04,$01,$06,$02,$05

fBBD8   .BYTE $9F,$9F,$00,$00,$00,$00,$9F,$9F
fBBE0   .BYTE $87,$87,$87,$87,$00,$00,$00,$00
fBBE8   .BYTE $40,$38,$08,$00,$40,$38,$28,$30
		.BYTE $40,$18,$08,$10,$40,$18,$28,$20
fBBF8   .BYTE $00,$00,$03,$00,$00,$00,$02,$02
		.BYTE $00,$00,$00,$06,$04,$00,$00,$04
		.BYTE $0C,$00,$00,$00,$08,$08,$00,$00
		.BYTE $00,$09,$00,$00,$00,$01,$01,$00
fBC18   .BYTE $01,$00,$00,$00,$01,$01,$00,$00
		.BYTE $00,$01,$00,$00,$00,$01,$01,$00
		.BYTE $00,$00,$01,$00,$00,$00,$01,$01
		.BYTE $00,$00,$00,$01,$01,$00,$00,$01
;fBEB0   .BYTE $00

.ALIGN $100
PIXEL_POS
		.BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

PERS_POINT_TAB_4 .FILL 64,0  ; 7600

ZP 	.BYTE $2f,$35,$41,$62,$67,$96,$09,$00
	.BYTE $be,$fd,$9f,$10,$c0,$f5,$a0,$40
	.BYTE $a7,$54,$00,$00,$00,$00,$92,$f4
	.BYTE $0c,$ff,$78,$34,$30,$b1,$3c,$81
	.BYTE $0a,$18,$12,$0d,$09,$60,$8f,$88
	.BYTE $00,$00,$00,$02,$01,$01,$92,$dc
	.BYTE $00,$00,$92,$dc,$46,$20,$92,$dd
	.BYTE $00,$01,$92,$dc,$00,$00,$2e,$e5
	.BYTE $48,$fc,$e0,$29,$00,$1d,$39,$1c
	.BYTE $00,$01,$1b,$e1,$89,$fd,$92,$dd
	.BYTE $48,$fc,$e0,$29,$00,$1d,$39,$1c
	.BYTE $a6,$28,$00,$1d,$ee,$18,$89,$0d
	.BYTE $a3,$fd,$b6,$0c,$09,$01,$02,$07
	.BYTE $15,$e5,$00,$0a,$9f,$00,$04,$01
	.BYTE $1b,$1a,$42,$02,$00,$80,$00,$00
	.BYTE $01,$01,$00,$00,$a3,$01,$00,$3f
	.BYTE $0f,$01,$aa,$55,$ff,$03,$00,$00
	.BYTE $1c,$1c,$1f,$1f,$00,$e0,$50,$44
	.BYTE $40,$19,$3c,$18,$10,$19,$0c,$18
	.BYTE $ff,$b8,$2c,$ab,$fc,$1b,$fc,$00
	.BYTE $7b,$85,$18,$01,$06,$06,$0e,$a9
	.BYTE $01,$80,$40,$18,$10,$1c,$00,$11
	.BYTE $05,$00,$01,$00,$3f,$3c,$02,$03
	.BYTE $3f,$00,$00,$fe,$01,$00,$00,$15
	.BYTE $5a,$00,$01,$06,$06,$0e,$01,$70
	.BYTE $00,$00,$00,$44,$00,$03,$06,$00
	.BYTE $08,$c0,$08,$10,$0f,$75,$f7,$ff
	.BYTE $80,$f7,$ff,$71,$f8,$ff,$02,$00
	.BYTE $00,$7d,$19,$64,$0b,$02,$00,$03
	.BYTE $25,$3f,$ff,$00,$00,$88,$ff,$00
	.BYTE $00,$00,$43,$16,$00,$00,$7e,$09
	.BYTE $00,$00,$00,$00,$0a,$60,$21,$7d

SCREEN0 = $4000
ab5C00 = $5C00 ; SCREEN COLOUR 
SCREEN1 = $6000
