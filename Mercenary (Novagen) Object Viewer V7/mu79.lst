
;6502/65C02/65816/CPU64/DTV Turbo Assembler V1.47 listing file of "mu79.tas"
;done on Sun Nov 27 18:57:34 2022

=0002					SCREEN_POS_LO = $02

=0003					SCREEN_POS_HI = $03

=0024					SCREEN_FLIP = $24

=0025					SCREEN_BANK = $25

=0066					LINE_INC = $66

=0002					SCREEN_POS_PTR = $02

=0040					SCREEN_0 = $40

=0060					SCREEN_1 = $60

=0052					X_POS_HI = $52

=0053					X_POS_LO = $53

=0054					Y_POS_HI = $54

=0055					Y_POS_LO = $55

=0056					Z_POS_HI = $56

=0057					Z_POS_LO = $57

=00b8					OBJECT_TO_DRAW = $B8

=0004					LINE_JUMP_PTR_LO = $04

=0005					LINE_JUMP_PTR_HI = $05

=0006					ab06 = $06 ; math temp?

=0007					ab07 = $07 ; math temp?

=0008					LINE_FRACTION_ab08 = $08

=0008					ab08 = $08 ; math temp? line draw fraction?

=0009					ab09 = $09 ; math temp?

=0008					Z_ROT_LO = $08 ; math temp?

=0009					Z_ROT_HI = $09 

=000a					ab0A = $0A ; math temp?

=000a					X_ROT_LO = $0A ; math temp?

=000b					ab0B = $0B ; math temp?

=000b					X_ROT_HI = $0B ; math temp?

=000c					ab0C = $0C ; math temp?

=000d					ab0D = $0D ; math temp?

=0018					ab18 = $18 ; math temp?

=0019					POINT_LINE_COUNT = $19

=000e					REGA = $0E

=000f					REGX = $0F

=0020					REGY = $20

=0021					ab21 = $21 ; used in line draw?

=0022					FP_MULTIPLY_LO = $22

=0023					FP_MULTIPLY_HI = $23

=0022					FP_DIVIDE_LO = FP_MULTIPLY_LO

=0023					FP_DIVIDE_HI = FP_MULTIPLY_HI

=002c					ROT_LO = $2C

=002d					ROT_HI = $2D

=003c					SIN_LO = $3C

=003d					SIN_HI = $3D

=003e					COS_LO = $3E

=003f					COS_HI = $3F

=0058					X_ROTATION_LO = $58

=0059					X_ROTATION_HI = $59

=005a					Y_ROTATION_LO = $5A

=005b					Y_ROTATION_HI = $5B

=005c					Z_ROTATION_LO = $5C

=005d					Z_ROTATION_HI = $5D

=005e					ab5E = $5E	; pers?

=005f					ab5F = $5F	; pers?

=0060					ab60 = $60	; pers?

=0061					ab61 = $61	; pers?

=0062					ab62 = $62	; pers?

=0063					ab63 = $63	; pers?

=0064					ab64 = $64	; pers?

=0065					ab65 = $65	; pers?

=0067					LINE_TYPE_POINTER = $67 ; line type?

=0068					ab68 = $68

=0069					ab69 = $69

=006a					LINE_START_HOR = $6A ; line start x?

=006b					LINE_START_VER = $6B ; line start y?

=006c					ab6C = $6C	; pers?

=006d					ab6D = $6D  ; pers?

=006e					POINT_CLASSIFY_1 = $6E	; start point classification of this point?

=006f					POINT_CLASSIFY_2 = $6F  ; end point classification

=0072					CURR_X_LSB = $72

=0073					CURR_X_MSB = $73

=0074					CURR_X_HSB = $74

=0075					CURR_Y_LSB = $75

=0076					CURR_Y_MSB = $76

=0077					CURR_Y_HSB = $77

=0078					CURR_Z_LSB = $78

=0079					CURR_Z_MSB = $79

=007a					CURR_Z_HSB = $7A

=0080					JOYSTICK_MOVEMENT = $80

=0050					SCR_HOR_MID = 160/2

=0044					SCR_VER_MID = 136/2

=0090					ab90 = $90

=0091					ab91 = $91

=0092					ab92 = $92

=0093					ab93 = $93

=0094					ab94 = $94

=0095					ab95 = $95

=0096					ab96 = $96

=0097					ab97 = $97

=00aa					SPEED_LO = $AA

=00ab					SPEED_HI = $AB

=00ac					ROT_SPD = $AC

=00ad					OBJECT_POINTER_POS = $AD

=00af					CURRENT_OBJECT = $AF

=00b0					NUMBER_OF_POINTS = $B0

=00b2					DRAW_OBJECT_COUNT = $B2

=00b3					DRAW_OBJECT_COUNTER = $B3

=00c7					VIC_SCREEN_BANK = $C7

=00cf					OBJ_PNT_X 		= $CF

=00d0					OBJ_PNT_X_MSB 	= $D0

=00d1					OBJ_PNT_Y 		= $D1

=00d2					OBJ_PNT_Y_MSB 	= $D2

=00d3					OBJ_PNT_Z 		= $D3

=00d4					OBJ_PNT_Z_MSB 	= $D4

=00d5					DIFF_X_LSB = $D5

=00d6					DIFF_X_MSB = $D6

=00d7					DIFF_X_HSB = $D7

=00d8					DIFF_Y_LSB = $D8

=00d9					DIFF_Y_MSB = $D9

=00da					DIFF_Y_HSB = $DA

=00db					DIFF_Z_LSB = $DB

=00dc					DIFF_Z_MSB = $DC

=00dd					DIFF_Z_HSB = $DD

=001d					OBJECT_POINTER = $1D

=fffe					IRQ = $FFFE

=0004					LINE_JUMP_PTR = LINE_JUMP_PTR_LO

=0088					CLIP_TEST_BOTTOM = $88

=0087					CLIP_BOTTOM = $87

=00a0					CLIP_TEST_RIGHT = $A0 ; $80

=009f					CLIP_RIGHT = $9F ; $7F

=0000					CLIP_TEST_TOP = $00

=0000					CLIP_TEST_LEFT = $00

=0001					PNT_OFF_RIGHT = $01

=0000					PNT_OFF_LEFT = 0

=0000					PNT_BEHIND = 0

=0000					PNT_ONSCREEN = 0

=0002					PNT_OFF_BOTTOM = $02

=0000					PNT_OFF_TOP = 0

.0801					startup

.0801	 78		sei			SEI

.0802	 a9 00		lda #$00	 LDA #$00

.0804	 8d 20 d0	sta $d020	 STA $D020

.0807	 a9 01		lda #$01	 LDA #$01 ; $00

.0809	 8d 21 d0	sta $d021	 STA $D021

.080c	 a9 0b		lda #$0b	 LDA #$0B ; $00

.080e	 8d 22 d0	sta $d022	 STA $D022

.0811	 a9 0c		lda #$0c	 LDA #$0C ; $00

.0813	 8d 23 d0	sta $d023	 STA $D023

.0816	 a9 bc		lda #$bc	 LDA #$BC ;$65 ; colour 01 (0000????) and colour 10 (????0000) - bank 1

.0818	 a2 00		ldx #$00	 LDX #<(ab5C00)

.081a	 a0 5c		ldy #$5c	 LDY #>(ab5C00)

.081c	 86 02		stx $02		 STX SCREEN_POS_LO+0

.081e	 84 03		sty $03		 STY SCREEN_POS_LO+1

.0820	 a2 03		ldx #$03	 LDX #>1000 

.0822	 a0 e8		ldy #$e8	 LDY #<1000

.0824	 20 b2 09	jsr $09b2	 JSR MEMSET

.0827	 a9 35		lda #$35		LDA #$35

.0829	 85 01		sta $01			STA $1

.082b	 a9 70		lda #$70		LDA #$70

.082d	 8d 18 d0	sta $d018		STA $D018

.0830	 a9 3b		lda #$3b		LDA #$3B

.0832	 8d 11 d0	sta $d011		STA $D011

.0835	 a9 00		lda #$00		LDA #$00 

.0837	 8d 21 d0	sta $d021		STA $D021

.083a	 a9 18		lda #$18		LDA #$18

.083c	 8d 16 d0	sta $d016		STA $D016

.083f	 a9 59		lda #$59		LDA #<pBA1E

.0841	 8d fe ff	sta $fffe		STA $FFFE

.0844	 a9 09		lda #$09		LDA #>pBA1E

.0846	 8d ff ff	sta $ffff		STA $FFFF

.0849	 a9 7f		lda #$7f	 LDA #$7F

.084b	 8d 0d dc	sta $dc0d	 STA $DC0D  ; disable timer interrupts which can be generated by the two CIA chips

.084e	 8d 0d dd	sta $dd0d	 STA $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

.0851	 ad 0d dc	lda $dc0d	 LDA $DC0D  ; by reading this two registers we negate any pending CIA irqs.

.0854	 ad 0d dd	lda $dd0d	 LDA $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

.0857	 a9 01		lda #$01	  LDA #$01   ; this is how to tell the VICII to generate a raster interrupt

.0859	 8d 1a d0	sta $d01a	 STA $D01A

.085c	 a9 02		lda #$02	 LDA #2 ; SCRNBANK

.085e	 8d 00 dd	sta $dd00	 STA $DD00 ; bank

.0861	 a9 ba		lda #$ba		LDA #$BA

.0863	 8d 12 d0	sta $d012		STA $D012

.0866	 a9 01		lda #$01		LDA #$01

.0868	 8d 19 d0	sta $d019		STA $D019

.086b	 a2 fd		ldx #$fd		LDX #253

.086d	 bd e0 27	lda $27e0,x	ZP_LOOP	LDA ZP,X

.0870	 95 00		sta $00,x		STA 00,X

.0872	 ca		dex			DEX 

.0873	 e0 02		cpx #$02		CPX #2

.0875	 d0 f6		bne $086d		BNE ZP_LOOP

.0877	 58		cli			CLI

.0878	 20 8c 11	jsr $118c	MAIN_LOOP   JSR SIN_COS

.087b	 20 16 15	jsr $1516				JSR DRAW_SCREEN

.087e	 20 d5 14	jsr $14d5				JSR COLOUR_SETUP_WHITE

.0881	 20 25 0c	jsr $0c25				JSR DRAW_OBJECTS

.0884	 20 38 16	jsr $1638				JSR READ_JOYSTICK_KEYBOARD

.0887	 20 f4 10	jsr $10f4				JSR MOVEMENT

.088a	 a6 73		ldx $73					LDX CURR_X_MSB

.088c	 a5 74		lda $74					LDA CURR_X_HSB

.088e	 a0 00		ldy #$00				LDY	#0

.0890	 20 78 16	jsr $1678				JSR	HEX16

.0893	 a5 72		lda $72					LDA CURR_X_LSB

.0895	 a2 20		ldx #$20				LDX #32

.0897	 a0 00		ldy #$00				LDY	#0

.0899	 20 8b 16	jsr $168b				JSR	HEX8

.089c	 a6 76		ldx $76					LDX CURR_Y_MSB

.089e	 a5 77		lda $77					LDA CURR_Y_HSB

.08a0	 a0 06		ldy #$06				LDY	#6

.08a2	 20 78 16	jsr $1678				JSR	HEX16

.08a5	 a5 75		lda $75					LDA CURR_Y_LSB

.08a7	 a2 20		ldx #$20				LDX #32

.08a9	 a0 06		ldy #$06				LDY	#6

.08ab	 20 8b 16	jsr $168b				JSR	HEX8

.08ae	 a6 79		ldx $79					LDX CURR_Z_MSB

.08b0	 a5 7a		lda $7a					LDA CURR_Z_HSB

.08b2	 a0 0c		ldy #$0c				LDY	#12

.08b4	 20 78 16	jsr $1678				JSR	HEX16

.08b7	 a5 78		lda $78					LDA CURR_Z_LSB

.08b9	 a2 20		ldx #$20				LDX #32

.08bb	 a0 0c		ldy #$0c				LDY	#12

.08bd	 20 8b 16	jsr $168b				JSR	HEX8

.08c0	 a5 90		lda $90					LDA ab90

.08c2	 a2 00		ldx #$00				LDX #0

.08c4	 a0 24		ldy #$24				LDY	#36

.08c6	 20 8b 16	jsr $168b				JSR	HEX8

.08c9	 a5 91		lda $91					LDA ab91

.08cb	 a2 18		ldx #$18				LDX #24

.08cd	 a0 24		ldy #$24				LDY	#36

.08cf	 20 8b 16	jsr $168b				JSR	HEX8

.08d2	 a5 92		lda $92					LDA ab92

.08d4	 a2 30		ldx #$30				LDX #48

.08d6	 a0 24		ldy #$24				LDY	#36

.08d8	 20 8b 16	jsr $168b				JSR	HEX8

.08db	 a5 93		lda $93					LDA ab93

.08dd	 a2 48		ldx #$48				LDX #72

.08df	 a0 24		ldy #$24				LDY	#36

.08e1	 20 8b 16	jsr $168b				JSR	HEX8

.08e4	 a5 94		lda $94					LDA ab94

.08e6	 a2 60		ldx #$60				LDX #96

.08e8	 a0 24		ldy #$24				LDY	#36

.08ea	 20 8b 16	jsr $168b				JSR	HEX8

.08ed	 a5 95		lda $95					LDA ab95

.08ef	 a2 78		ldx #$78				LDX #120

.08f1	 a0 24		ldy #$24				LDY	#36

.08f3	 20 8b 16	jsr $168b				JSR	HEX8

.08f6	 a5 96		lda $96					LDA ab96

.08f8	 a2 90		ldx #$90				LDX #144

.08fa	 a0 24		ldy #$24				LDY	#36

.08fc	 20 8b 16	jsr $168b				JSR	HEX8

.08ff	 a5 97		lda $97					LDA ab97

.0901	 a2 a8		ldx #$a8				LDX #168

.0903	 a0 24		ldy #$24				LDY	#36

.0905	 20 8b 16	jsr $168b				JSR	HEX8

.0908	 a5 5e		lda $5e					LDA ab5E

.090a	 a2 00		ldx #$00				LDX #0

.090c	 a0 2a		ldy #$2a				LDY	#42

.090e	 20 8b 16	jsr $168b				JSR	HEX8

.0911	 a5 5f		lda $5f					LDA ab5F

.0913	 a2 18		ldx #$18				LDX #24

.0915	 a0 2a		ldy #$2a				LDY	#42

.0917	 20 8b 16	jsr $168b				JSR	HEX8

.091a	 a5 60		lda $60					LDA ab60

.091c	 a2 30		ldx #$30				LDX #48

.091e	 a0 2a		ldy #$2a				LDY	#42

.0920	 20 8b 16	jsr $168b				JSR	HEX8

.0923	 a5 61		lda $61					LDA ab61

.0925	 a2 48		ldx #$48				LDX #72

.0927	 a0 2a		ldy #$2a				LDY	#42

.0929	 20 8b 16	jsr $168b				JSR	HEX8

.092c	 a5 62		lda $62					LDA ab62

.092e	 a2 60		ldx #$60				LDX #96

.0930	 a0 2a		ldy #$2a				LDY	#42

.0932	 20 8b 16	jsr $168b				JSR	HEX8

.0935	 a5 63		lda $63					LDA ab63

.0937	 a2 78		ldx #$78				LDX #120

.0939	 a0 2a		ldy #$2a				LDY	#42

.093b	 20 8b 16	jsr $168b				JSR	HEX8

.093e	 a5 64		lda $64					LDA ab64

.0940	 a2 90		ldx #$90				LDX #144

.0942	 a0 2a		ldy #$2a				LDY	#42

.0944	 20 8b 16	jsr $168b				JSR	HEX8

.0947	 a5 65		lda $65					LDA ab65

.0949	 a2 a8		ldx #$a8				LDX #168

.094b	 a0 2a		ldy #$2a				LDY	#42

.094d	 20 8b 16	jsr $168b				JSR	HEX8

.0950	 4c 78 08	jmp $0878				JMP MAIN_LOOP


>0953	 00                       	temp1 .byte 0

>0954	 00                       	temp2 .byte 0

>0955	 00                       	temp3 .byte 0

>0956	 00                       	temp4 .byte 0

>0957	 00                       	temp5 .byte 0

>0958	 00                       	temp6 .byte 0


.0959	 48		pha		pBA1E   PHA 

.095a	 8a		txa		        TXA 

.095b	 48		pha		        PHA 

.095c	 98		tya		        TYA 

.095d	 48		pha		        PHA 

.095e	 a9 8c		lda #$8c	        LDA #<pB9BB

.0960	 8d fe ff	sta $fffe	        STA IRQ   ;IRQ

.0963	 a9 09		lda #$09	        LDA #>pB9BB

.0965	 8d ff ff	sta $ffff	        STA IRQ+1   ;IRQ

.0968	 a9 00		lda #$00	        LDA #$00

.096a	 8d 12 d0	sta $d012	        STA $D012    ;Raster Position

.096d	 a9 01		lda #$01	        LDA #$01

.096f	 8d 19 d0	sta $d019	        STA $D019    ;VIC Interrupt Request Register (IRR)

.0972	 a9 7e		lda #$7e	        LDA #$7E

.0974	 a2 1b		ldx #$1b	        LDX #$1B

.0976	 a0 01		ldy #$01	        LDY #$01

.0978	 8d 18 d0	sta $d018	        STA $D018    ;VIC Memory Control Register

.097b	 8e 11 d0	stx $d011	        STX $D011    ;VIC Control Register 1

.097e	 8c 21 d0	sty $d021	        STY $D021    ;Background Color 0

.0981	 a9 08		lda #$08	        LDA #$08

.0983	 8d 16 d0	sta $d016	        STA $D016    ;VIC Control Register 2

.0986	 68		pla				PLA 

.0987	 a8		tay		        TAY 

.0988	 68		pla		        PLA 

.0989	 aa		tax		        TAX 

.098a	 68		pla		        PLA 

.098b	 40		rti		NMI_NOP	RTI ; This is the irq handler for the NMI. Just returns without acknowledge. This prevents subsequent NMI's from interfering.

.098c	 48		pha		pB9BB  	PHA

.098d	 a5 c7		lda $c7		        LDA VIC_SCREEN_BANK

.098f	 8d 18 d0	sta $d018	        STA $D018    ;VIC Memory Control Register

.0992	 a9 3b		lda #$3b			LDA #$3B

.0994	 8d 11 d0	sta $d011	        STA $D011    ;VIC Control Register 1

.0997	 a9 18		lda #$18	        LDA #$18

.0999	 8d 16 d0	sta $d016			STA $D016    ;VIC Control Register 2

.099c	 a9 59		lda #$59	        LDA #<pBA1E

.099e	 8d fe ff	sta $fffe	        STA IRQ   ;IRQ

.09a1	 a9 09		lda #$09	        LDA #>pBA1E

.09a3	 8d ff ff	sta $ffff	        STA IRQ+1   ;IRQ

.09a6	 a9 ba		lda #$ba	        LDA #$BA

.09a8	 8d 12 d0	sta $d012	        STA $D012    ;Raster Position

.09ab	 a9 01		lda #$01	        LDA #$01

.09ad	 8d 19 d0	sta $d019	        STA $D019    ;VIC Interrupt Request Register (IRR)

.09b0	 68		pla		        PLA 

.09b1	 40		rti		        RTI

.09b2	 8c c6 09	sty $09c6	MEMSET       STY    LSB_ONLY+1 ; store LSB count

.09b5	 e0 00		cpx #$00	             CPX    #0          ; MSB?     

.09b7	 f0 0c		beq $09c5	             BEQ    LSB_ONLY   ; no

.09b9	 a0 00		ldy #$00	             LDY    #0          ; yes so reset LSB

.09bb					msb_loop
.09bb	 91 02		sta ($02),y	LSB_LOOP      STA    (SCREEN_POS_LO),Y   ; clear whole MSB

.09bd	 88		dey		               DEY 

.09be	 d0 fb		bne $09bb	               BNE    LSB_LOOP

.09c0	 e6 03		inc $03		              INC    SCREEN_POS_LO+1      ; inc MSB

.09c2	 ca		dex		              DEX               ; dec MSB count

.09c3	 d0 f6		bne $09bb	              BNE    MSB_LOOP

.09c5	 a0 00		ldy #$00	LSB_ONLY    LDY    #0          ; LSB count 

.09c7	 f0 07		beq $09d0	             BEQ    MS_END

.09c9	 91 02		sta ($02),y	LAST_LSB_LOOP STA   (SCREEN_POS_LO),Y

.09cb	 88		dey		               DEY 

.09cc	 d0 fb		bne $09c9	               BNE   LAST_LSB_LOOP               

.09ce	 91 02		sta ($02),y	              STA   (SCREEN_POS_LO),Y     ; clear last Y (0)

.09d0	 60		rts		MS_END      RTS

.09d1	 85 23		sta $23		FP_DIVIDE	STA		FP_DIVIDE_HI	; inputs = X-(LO) + Y-(HI) + A (HI) + FP_MULTILPLY_LO - outputs = AY

.09d3	 b9 00 22	lda $2200,y				LDA 	LOG_TABLE,Y

.09d6	 a4 22		ldy $22					LDY 	FP_DIVIDE_LO

.09d8	 38		sec					SEC 

.09d9	 f9 00 22	sbc $2200,y				SBC 	LOG_TABLE,Y

.09dc	 a8		tay					TAY

.09dd	 8a		txa					TXA

.09de	 09 02		ora #$02				ORA 	#$02

.09e0	 b0 03		bcs $09e5				BCS 	_FP_DIV_CNT

.09e2	 e9 03		sbc #$03						SBC 	#$03

.09e4	 38		sec							SEC 

.09e5	 e5 23		sbc $23		_FP_DIV_CNT SBC 	FP_DIVIDE_HI

.09e7	 29 fd		and #$fd				AND 	#$FD

.09e9	 be 00 23	ldx $2300,y				LDX 	EXP_TABLE,Y

.09ec	 60		rts					RTS

.09ed	 85 23		sta $23		FP_MULTIPLY	STA		FP_MULTIPLY_HI	; inputs = X-(LO) + Y-(HI) + A (HI) + FP_MULTILPLY_LO - outputs = AY

.09ef	 bd 00 22	lda $2200,x				LDA 	LOG_TABLE,X		

.09f2	 a6 22		ldx $22					LDX 	FP_MULTIPLY_LO

.09f4	 18		clc					CLC 

.09f5	 7d 00 22	adc $2200,x				ADC 	LOG_TABLE,X

.09f8	 aa		tax					TAX 

.09f9	 98		tya					TYA 

.09fa	 90 03		bcc $09ff				BCC 	_FP_MUL_CNT

.09fc	 69 03		adc #$03						ADC 	#$03

.09fe	 18		clc							CLC 

.09ff	 65 23		adc $23		_FP_MUL_CNT	ADC 	FP_MULTIPLY_HI

.0a01	 29 fd		and #$fd				AND 	#$FD

.0a03	 bc 00 23	ldy $2300,x				LDY 	EXP_TABLE,X

.0a06	 60		rts					RTS 

.0a07	 bd 00 22	lda $2200,x	FPMUL		LDA LOG_TABLE,X		; fpMul - ; Input:  [08] = fp multiplier ;         XY   = fp multiplicand ; Output: [08] and XY = result

.0a0a	 a6 08		ldx $08					LDX ab08

.0a0c	 18		clc					CLC 

.0a0d	 7d 00 22	adc $2200,x				ADC LOG_TABLE,X

.0a10	 aa		tax					TAX 

.0a11	 98		tya					TYA 

.0a12	 90 03		bcc $0a17				BCC _PF_MUL_CNT

.0a14	 69 03		adc #$03					ADC #$03

.0a16	 18		clc						CLC 

.0a17	 65 09		adc $09		_PF_MUL_CNT   	ADC ab09

.0a19	 70 0c		bvs $0a27				BVS MATH_LIMIT 

.0a1b	 29 fd		and #$fd				AND #$FD

.0a1d	 85 09		sta $09					STA ab09

.0a1f	 a8		tay					TAY 

.0a20	 bd 00 23	lda $2300,x				LDA EXP_TABLE,X

.0a23	 aa		tax					TAX 

.0a24	 85 08		sta $08					STA ab08

.0a26	 60		rts					RTS 

.0a27	 10 0c		bpl $0a35	MATH_LIMIT	BPL _MATH_LIMIT_POS

.0a29	 29 01		and #$01				AND #$01

.0a2b	 09 78		ora #$78				ORA #$78

.0a2d	 a8		tay					TAY 

.0a2e	 a2 00		ldx #$00				LDX #$00

.0a30	 86 08		stx $08					STX ab08

.0a32	 84 09		sty $09					STY ab09

.0a34	 60		rts					RTS 

.0a35	 29 01		and #$01	_MATH_LIMIT_POS	AND #$01

.0a37	 09 84		ora #$84					ORA #$84

.0a39	 a8		tay		MATH_LIMIT_EXIT	TAY 

.0a3a	 a2 00		ldx #$00					LDX #$00

.0a3c	 86 08		stx $08						STX ab08

.0a3e	 84 09		sty $09						STY ab09

.0a40	 60		rts						RTS 

.0a41					fpdiv
.0a41	 84 06		sty $06			STY ab06

.0a43	 a4 08		ldy $08		        LDY ab08

.0a45	 b9 00 22	lda $2200,y	        LDA LOG_TABLE,Y

.0a48	 38		sec		        SEC 

.0a49	 fd 00 22	sbc $2200,x	        SBC LOG_TABLE,X

.0a4c	 aa		tax		        TAX 

.0a4d	 a5 09		lda $09		        LDA ab09

.0a4f	 09 02		ora #$02	        ORA #$02

.0a51	 b0 03		bcs $0a56	        BCS b8349

.0a53	 e9 03		sbc #$03	        SBC #$03

.0a55	 38		sec		        SEC 

.0a56					b8349
.0a56	 e5 06		sbc $06			SBC ab06

.0a58	 70 cd		bvs $0a27	        BVS MATH_LIMIT 

.0a5a	 29 fd		and #$fd	        AND #$FD

.0a5c	 85 09		sta $09		        STA ab09

.0a5e	 a8		tay		        TAY 

.0a5f	 bd 00 23	lda $2300,x	        LDA EXP_TABLE,X

.0a62	 aa		tax		        TAX 

.0a63	 85 08		sta $08		        STA ab08

.0a65	 60		rts		        RTS 

.0a66					fpadd
.0a66	 a5 18		lda $18			LDA ab18

.0a68	 4a		lsr		        LSR 

.0a69	 b0 15		bcs $0a80	        BCS b8373

.0a6b	 8a		txa		        TXA 

.0a6c	 65 08		adc $08		        ADC ab08

.0a6e	 6a		ror		        ROR 

.0a6f	 c8		iny		        INY 

.0a70	 c8		iny		        INY 

.0a71	 c8		iny		        INY 

.0a72	 c8		iny		        INY 

.0a73	 aa		tax		        TAX 

.0a74	 85 08		sta $08		        STA ab08

.0a76	 84 09		sty $09		        STY ab09

.0a78	 60		rts		        RTS 

.0a79	 98		tya		b836C   TYA 

.0a7a	 0a		asl		        ASL 

.0a7b	 90 5c		bcc $0ad9	        BCC b83CC

.0a7d	 4c 26 0b	jmp $0b26	        JMP j8419

.0a80	 8a		txa		b8373   TXA 

.0a81	 e5 08		sbc $08		        SBC ab08

.0a83	 f0 0b		beq $0a90	        BEQ b8383

.0a85	 b0 5b		bcs $0ae2	        BCS b83D5

.0a87	 a4 09		ldy $09		        LDY ab09

.0a89	 49 ff		eor #$ff	        EOR #$FF

.0a8b	 69 01		adc #$01	        ADC #$01

.0a8d	 4c e2 0a	jmp $0ae2	        JMP b83D5

.0a90	 98		tya		b8383   TYA 

.0a91	 38		sec		        SEC 

.0a92	 e9 24		sbc #$24	        SBC #$24

.0a94	 70 9f		bvs $0a35	        BVS _MATH_LIMIT_POS

.0a96	 50 a1		bvc $0a39	        BVC MATH_LIMIT_EXIT

.0a98	 98		tya		s838B   TYA			; looks like some fp conversion?

.0a99	 38		sec		        SEC 

.0a9a	 e5 09		sbc $09		        SBC ab09

.0a9c	 70 db		bvs $0a79	        BVS b836C

.0a9e	 85 18		sta $18		        STA ab18

.0aa0	 69 01		adc #$01	        ADC #$01

.0aa2	 70 d5		bvs $0a79	        BVS b836C

.0aa4	 30 5c		bmi $0b02	        BMI b83F5

.0aa6	 4a		lsr		        LSR 

.0aa7	 4a		lsr		        LSR 

.0aa8	 f0 bc		beq $0a66	        BEQ FPADD

.0aaa	 c9 09		cmp #$09	        CMP #$09

.0aac	 b0 2b		bcs $0ad9	        BCS b83CC

.0aae	 49 0f		eor #$0f	        EOR #$0F

.0ab0	 8d b8 0a	sta $0ab8	        STA ab83AB +1

.0ab3	 a5 08		lda $08		        LDA ab08

.0ab5	 38		sec		        SEC 

.0ab6	 6a		ror		        ROR 

.0ab7	 d0 07		bne $0ac0	ab83AB  BNE b83B3 ; looks like part of fp calculation?

.0ab9	 ea		nop		        NOP 

.0aba	 ea		nop		        NOP 

.0abb	 ea		nop		        NOP 

.0abc	 ea		nop		        NOP 

.0abd	 ea		nop		        NOP 

.0abe	 ea		nop		        NOP 

.0abf	 ea		nop		        NOP 

.0ac0	 4a		lsr		b83B3   LSR 

.0ac1	 4a		lsr		        LSR 

.0ac2	 4a		lsr		        LSR 

.0ac3	 4a		lsr		        LSR 

.0ac4	 4a		lsr		        LSR 

.0ac5	 4a		lsr		        LSR 

.0ac6	 4a		lsr		        LSR 

.0ac7	 85 06		sta $06		        STA ab06

.0ac9	 a5 18		lda $18		        LDA ab18

.0acb	 4a		lsr		        LSR 

.0acc	 8a		txa		        TXA 

.0acd	 b0 0f		bcs $0ade	        BCS b83D1

.0acf	 65 06		adc $06		b83C2   ADC ab06

.0ad1	 90 05		bcc $0ad8	        BCC b83CB

.0ad3	 4a		lsr		        LSR 

.0ad4	 c8		iny		        INY 

.0ad5	 c8		iny		        INY 

.0ad6	 c8		iny		        INY 

.0ad7	 c8		iny		        INY 

.0ad8	 aa		tax		b83CB   TAX 

.0ad9	 86 08		stx $08		b83CC   STX ab08

.0adb	 84 09		sty $09		        STY ab09

.0add	 60		rts		        RTS 

.0ade	 e5 06		sbc $06		b83D1   SBC ab06

.0ae0	 b0 f6		bcs $0ad8	        BCS b83CB

.0ae2	 84 06		sty $06		b83D5   STY ab06

.0ae4	 a0 00		ldy #$00	        LDY #$00

.0ae6	 0a		asl		b83D9   ASL 

.0ae7	 88		dey		        DEY 

.0ae8	 90 fc		bcc $0ae6	        BCC b83D9

.0aea	 aa		tax		        TAX 

.0aeb	 98		tya		        TYA 

.0aec	 0a		asl		        ASL 

.0aed	 0a		asl		        ASL 

.0aee	 18		clc		        CLC 

.0aef	 65 06		adc $06		        ADC ab06

.0af1	 70 06		bvs $0af9	        BVS b83EC

.0af3	 a8		tay		        TAY 

.0af4	 86 08		stx $08		        STX ab08

.0af6	 84 09		sty $09		        STY ab09

.0af8	 60		rts		        RTS 

.0af9					b83ec
.0af9	 a2 0d		ldx #$0d		LDX #<p8400

.0afb	 a0 0b		ldy #$0b	        LDY #>p8400

.0afd	 86 08		stx $08		        STX ab08

.0aff	 84 09		sty $09		        STY ab09

.0b01	 60		rts		        RTS 

.0b02	 c9 e0		cmp #$e0	b83F5   CMP #$E0

.0b04	 90 20		bcc $0b26	        BCC j8419

.0b06	 4a		lsr		        LSR 

.0b07	 4a		lsr		        LSR 

.0b08	 29 07		and #$07	        AND #$07

.0b0a	 8d 11 0b	sta $0b11	        STA ab8404 +1

.0b0d	 8a		txa		p8400   TXA 

.0b0e	 38		sec		        SEC 

.0b0f	 6a		ror		        ROR 

.0b10	 d0 03		bne $0b15	ab8404  BNE b8408

.0b12	 4a		lsr		        LSR 

.0b13	 4a		lsr		        LSR 

.0b14	 4a		lsr		        LSR 

.0b15	 4a		lsr		b8408   LSR 

.0b16	 4a		lsr		        LSR 

.0b17	 4a		lsr		        LSR 

.0b18	 4a		lsr		        LSR 

.0b19	 85 06		sta $06		        STA ab06

.0b1b	 a4 09		ldy $09		        LDY ab09

.0b1d	 a5 18		lda $18		        LDA ab18

.0b1f	 4a		lsr		        LSR 

.0b20	 a5 08		lda $08		        LDA ab08

.0b22	 90 ab		bcc $0acf	        BCC b83C2

.0b24	 b0 b8		bcs $0ade	        BCS b83D1

.0b26	 a6 08		ldx $08		j8419   LDX ab08

.0b28	 a4 09		ldy $09		        LDY ab09

.0b2a	 60		rts		        RTS 

.0b2b	 c8		iny		COS_FP	INY 

.0b2c	 98		tya		SIN_FP	TYA 

.0b2d	 4a		lsr				LSR 

.0b2e	 90 06		bcc $0b36			BCC b8429

.0b30	 8a		txa					TXA 

.0b31	 49 ff		eor #$ff				EOR #$FF

.0b33	 aa		tax					TAX 

.0b34	 98		tya					TYA 

.0b35	 4a		lsr					LSR 

.0b36	 29 01		and #$01	b8429   AND #$01

.0b38	 1d 00 21	ora $2100,x			ORA SIN_MSB,X

.0b3b	 a8		tay				TAY 

.0b3c	 bd 00 20	lda $2000,x			LDA SIN_LSB,X

.0b3f	 aa		tax				TAX 

.0b40	 60		rts				RTS 

.0b41					fpto8bit
.0b41	 98		tya				TYA 			; transfer y (floating point position) to a

.0b42	 30 25		bmi $0b69			BMI	b849F		; if negative

.0b44	 4a		lsr				LSR 			; divide and remove first bit

.0b45	 4a		lsr		        LSR 			; divide and remove second bit

.0b46	 c9 07		cmp #$07	        CMP #$07		; is it greater than 7

.0b48	 b0 26		bcs $0b70	        BCS b84A6		; yes so error so exit with carry set

.0b4a	 8d 51 0b	sta $0b51	        STA ab8487+1	; no so self modifying code to jump forward a number of divides

.0b4d	 8a		txa		        TXA 			; transfer x (actual number) to a

.0b4e	 38		sec		        SEC 			; set carry

.0b4f	 6a		ror		        ROR 			; /2 - putting 1 in top bit (and putting 0 in carry?) 

.0b50	 d0 04		bne $0b56	ab8487  BNE b848C		; jump forward self modifying code - always done as carry is set so ROR result is never 0

.0b52	 4a		lsr		        LSR 			; /2

.0b53	 4a		lsr		        LSR 			; /4

.0b54	 4a		lsr		        LSR 			; /8

.0b55	 4a		lsr		        LSR 			; /16

.0b56	 4a		lsr		b848C   LSR 			; /32

.0b57	 4a		lsr		        LSR 			; /64

.0b58	 4a		lsr		        LSR 			; /128

.0b59	 69 00		adc #$00	b848F   ADC #$00		; add carry?

.0b5b	 30 12		bmi $0b6f	        BMI b84A5		; if minus then error?

.0b5d	 aa		tax		        TAX 			; backup result

.0b5e	 98		tya		        TYA 			; transfer y to a

.0b5f	 4a		lsr		        LSR				; / 2

.0b60	 8a		txa		        TXA 			; restore result

.0b61	 90 05		bcc $0b68	        BCC b849E		; clear carry so ok?

.0b63	 49 ff		eor #$ff			EOR #$FF		; negate?

.0b65	 69 00		adc #$00				ADC #$00		; negete by adding carry that is already set?

.0b67	 18		clc					CLC 			; clear carry for ok?

.0b68	 60		rts		b849E   RTS 			; exit

.0b69	 c9 fc		cmp #$fc	b849F   CMP #$FC		; sets the carry flag if greater than (11111100 binary)

.0b6b	 a9 00		lda #$00	        LDA #$00		; resets the output x value? 

.0b6d	 f0 ea		beq $0b59	        BEQ b848F		; jump back into code

.0b6f	 38		sec		b84A5   SEC 			; set carry for error?

.0b70	 60		rts		b84A6   RTS 			; exit

.0b71					fpto16bit
.0b71	 98		tya				TYA				; get input (exponent?)

.0b72	 30 57		bmi $0bcb	        BMI b8501 		; if negative

.0b74	 4a		lsr		        LSR 			; ignore bit 1

.0b75	 4a		lsr		        LSR 			; ignore bit 2

.0b76	 c9 0f		cmp #$0f	        CMP #$0F		; compare with 15

.0b78	 b0 f6		bcs $0b70	        BCS b84A6		; greater so exit with carry set

.0b7a	 85 06		sta $06		        STA ab06		; store intermediate in temp var

.0b7c	 0a		asl		        ASL 			; *2

.0b7d	 65 06		adc $06		        ADC ab06		; *3 

.0b7f	 8d 8c 0b	sta $0b8c	        STA ab84C2 +1	; number of bytes to jump

.0b82	 a9 00		lda #$00	        LDA #$00

.0b84	 85 06		sta $06		        STA ab06		; clear result

.0b86	 8a		txa		        TXA 			; get input (mantisa?)

.0b87	 38		sec		        SEC 			; set carry to move 1 into result

.0b88	 6a		ror		        ROR 			; rotate carry into high bit and low bit into carry

.0b89	 66 06		ror $06		        ROR ab06		; rotate carry into result

.0b8b	 90 0f		bcc $0b9c	ab84C2  BCC b84D2		; jump forward

.0b8d	 4a		lsr		        LSR 			; half and shift lowest bit into carry  

.0b8e	 66 06		ror $06		        ROR ab06		; half and rotate carry bit into result

.0b90	 4a		lsr		        LSR 

.0b91	 66 06		ror $06		        ROR ab06

.0b93	 4a		lsr		        LSR 

.0b94	 66 06		ror $06		        ROR ab06

.0b96	 4a		lsr		        LSR 

.0b97	 66 06		ror $06		        ROR ab06

.0b99	 4a		lsr		        LSR 

.0b9a	 66 06		ror $06		        ROR ab06

.0b9c	 4a		lsr		b84D2   LSR 

.0b9d	 66 06		ror $06		        ROR ab06

.0b9f	 4a		lsr		        LSR 

.0ba0	 66 06		ror $06		        ROR ab06

.0ba2	 4a		lsr		        LSR 

.0ba3	 66 06		ror $06				ROR ab06

.0ba5	 4a		lsr		        LSR 

.0ba6	 66 06		ror $06		        ROR ab06

.0ba8	 4a		lsr		        LSR 

.0ba9	 66 06		ror $06		        ROR ab06

.0bab	 4a		lsr		        LSR 

.0bac	 66 06		ror $06		        ROR ab06

.0bae	 4a		lsr		        LSR 

.0baf	 66 06		ror $06		        ROR ab06

.0bb1	 4a		lsr		        LSR 

.0bb2	 66 06		ror $06		        ROR ab06

.0bb4	 4a		lsr		        LSR 

.0bb5	 66 06		ror $06		        ROR ab06

.0bb7	 4a		lsr		        LSR 

.0bb8	 66 06		ror $06		        ROR ab06

.0bba	 aa		tax		        TAX 		; store low byte of result?

.0bbb	 98		tya		        TYA 		; get input (exponent?)

.0bbc	 a4 06		ldy $06		        LDY ab06	; store high byte of result?

.0bbe	 4a		lsr		        LSR 		; move 1st bit of input into carry

.0bbf	 90 09		bcc $0bca	        BCC b8500	; set y/n

.0bc1	 8a		txa					TXA 		; yes

.0bc2	 49 ff		eor #$ff				EOR #$FF	; negate x

.0bc4	 aa		tax					TAX 

.0bc5	 98		tya					TYA 

.0bc6	 49 ff		eor #$ff				EOR #$FF	; negate y

.0bc8	 a8		tay					TAY 

.0bc9	 18		clc					CLC 

.0bca	 60		rts		b8500   RTS 		; no

.0bcb	 4a		lsr		b8501 	LSR 		; move 1st bit to carry

.0bcc	 90 06		bcc $0bd4	        BCC b850B	; set y/n

.0bce	 a2 ff		ldx #$ff				LDX #$FF	; yes

.0bd0	 a0 ff		ldy #$ff				LDY #$FF

.0bd2	 18		clc					CLC 

.0bd3	 60		rts					RTS 

.0bd4	 a2 00		ldx #$00	b850B   LDX #$00	; no

.0bd6	 a0 00		ldy #$00	        LDY #$00

.0bd8	 60		rts		        RTS 

.0bd9					bit24tofp
.0bd9	 84 07		sty $07				STY	ab07 ; store lsb

.0bdb	 85 06		sta $06				STA ab06 ; store msb

.0bdd	 10 11		bpl $0bf0	        BPL b8527 ; positive ?

.0bdf	 a9 00		lda #$00				LDA #$00 ; negative so 

.0be1	 38		sec					SEC 

.0be2	 e5 07		sbc $07					SBC ab07 ; negate lsb

.0be4	 85 07		sta $07					STA ab07

.0be6	 8a		txa					TXA 		; negate psb

.0be7	 49 ff		eor #$ff				EOR #$FF

.0be9	 69 00		adc #$00				ADC #$00

.0beb	 aa		tax					TAX 

.0bec	 a9 00		lda #$00				LDA #$00

.0bee	 e5 06		sbc $06					SBC ab06	; negate msb

.0bf0	 d0 0f		bne $0c01	b8527   BNE b8538	; if msb not 0

.0bf2	 8a		txa					TXA 		; move psb to a

.0bf3	 d0 23		bne $0c18				BNE b854F	; if psb not 0

.0bf5	 a5 07		lda $07						LDA ab07	; get lsb

.0bf7	 f0 23		beq $0c1c					BEQ b8553	; if lsb not 0

.0bf9	 a2 00		ldx #$00						LDX #$00

.0bfb	 86 07		stx $07							STX ab07

.0bfd	 a2 08		ldx #$08						LDX #$08

.0bff	 d0 04		bne $0c05						BNE b853C ; jump?

.0c01	 86 07		stx $07		b8538   STX ab07

.0c03	 a2 18		ldx #$18	        LDX #$18

.0c05	 ca		dex		b853C   	DEX 

.0c06	 06 07		asl $07					ASL ab07 ; *2

.0c08	 2a		rol					ROL 	 ; *2

.0c09	 90 fa		bcc $0c05				BCC b853C

.0c0b	 85 08		sta $08		        STA ab08

.0c0d	 8a		txa		        TXA 

.0c0e	 0a		asl		        ASL 

.0c0f	 06 06		asl $06		        ASL ab06

.0c11	 2a		rol		        ROL 

.0c12	 aa		tax		        TAX 

.0c13	 86 09		stx $09		        STX ab09

.0c15	 a5 08		lda $08		        LDA ab08

.0c17	 60		rts		        RTS 

.0c18	 a2 10		ldx #$10	b854F   LDX #$10

.0c1a	 d0 e9		bne $0c05	        BNE b853C ; jump?

.0c1c	 a9 00		lda #$00	b8553   LDA #<OVERFLOW ; overflow?

.0c1e	 a2 e0		ldx #$e0	        LDX #>OVERFLOW

.0c20	 85 08		sta $08		        STA ab08

.0c22	 86 09		stx $09		        STX ab09

.0c24	 60		rts		        RTS 

=e000					OVERFLOW = $E000 ; overflow?

.0c25					draw_objects
.0c25	 a4 b2		ldy $b2			LDY DRAW_OBJECT_COUNT ; number of objects to draw

.0c27	 f0 0e		beq $0c37		BEQ DRAW_OBJECTS_EXIT ; exit if none

.0c29	 84 b3		sty $b3				STY DRAW_OBJECT_COUNTER ; store temp object count

.0c2b					draw_objects_loop
.0c2b	 be 01 1a	ldx $1a01,y			LDX OBJECTS_TO_DRAW,Y 	; object number

.0c2e	 20 38 0c	jsr $0c38			JSR DRAW_OBJECT

.0c31	 c6 b3		dec $b3				DEC DRAW_OBJECT_COUNTER ; dec temp object count

.0c33	 a4 b3		ldy $b3				LDY DRAW_OBJECT_COUNTER ; get temp object count

.0c35	 d0 f4		bne $0c2b			BNE DRAW_OBJECTS_LOOP 	; exit y/n

.0c37					draw_objects_exit
.0c37	 60		rts			RTS 	; exit

.0c38	 86 af		stx $af		DRAW_OBJECT			STX	CURRENT_OBJECT					; store object number 

.0c3a	 bd c1 18	lda $18c1,x						LDA	OBJECT_SHAPE_PTR_LO,X	; get object pos hi

.0c3d	 85 1d		sta $1d							STA	OBJECT_POINTER			; store in pointer

.0c3f	 bd 01 19	lda $1901,x						LDA	OBJECT_SHAPE_PTR_HI,X	; get object pos lo

.0c42	 85 1e		sta $1e							STA	OBJECT_POINTER+1		; store in pointer

.0c44	 20 1b 0d	jsr $0d1b						JSR	CAMERA_OBJECT_DIFF

.0c47	 a2 00		ldx #$00	DRAW_OBJECT_CONT   	LDX	#$00

.0c49	 86 19		stx $19							STX	POINT_LINE_COUNT

.0c4b	 a0 01		ldy #$01						LDY	#$01

.0c4d	 20 5e 0d	jsr $0d5e						JSR	s999A

.0c50	 90 5b		bcc $0cad						BCC	b978A

.0c52	 a5 da		lda $da							LDA	DIFF_Y_HSB

.0c54	 10 09		bpl $0c5f						BPL	b9755

.0c56	 a0 00		ldy #$00						LDY	#$00

.0c58	 a2 00		ldx #$00						LDX	#$00

.0c5a	 20 5e 0d	jsr $0d5e						JSR	s999A

.0c5d	 b0 d8		bcs $0c37						BCS	DRAW_OBJECTS_EXIT

.0c5f					b9755
.0c5f	 a4 d5		ldy $d5				LDY	DIFF_X_LSB

.0c61	 a6 d6		ldx $d6		        LDX	DIFF_X_MSB

.0c63	 a5 d7		lda $d7		        LDA	DIFF_X_HSB

.0c65	 20 d9 0b	jsr $0bd9	        JSR	BIT24TOFP

.0c68	 85 52		sta $52		        STA	X_POS_HI

.0c6a	 86 53		stx $53		        STX	X_POS_LO

.0c6c	 a4 d8		ldy $d8		        LDY	DIFF_Y_LSB

.0c6e	 a6 d9		ldx $d9		        LDX	DIFF_Y_MSB

.0c70	 a5 da		lda $da		        LDA	DIFF_Y_HSB

.0c72	 60		rts				RTS

.0c73	 85 54		sta $54		        STA	Y_POS_HI

.0c75	 86 55		stx $55		        STX	Y_POS_LO

.0c77	 a4 db		ldy $db		        LDY	DIFF_Z_LSB

.0c79	 a6 dc		ldx $dc		        LDX	DIFF_Z_MSB

.0c7b	 a5 dd		lda $dd		        LDA	DIFF_Z_HSB

.0c7d	 20 d9 0b	jsr $0bd9	        JSR	BIT24TOFP

.0c80	 85 56		sta $56		        STA	Z_POS_HI

.0c82	 86 57		stx $57		        STX	Z_POS_LO

.0c84	 20 3d 12	jsr $123d	        JSR	ROTATE_PERS

.0c87	 a2 00		ldx #$00	        LDX	#$00

.0c89	 bd 00 07	lda $0700,x	PLOT_POINT_CHK	LDA	POINT_CLASSIFICATION,X	; GET POINT FROM PLOT POINT TABLE ?

.0c8c	 d0 1e		bne $0cac					BNE	PLOT_POINT_EXIT	; EXIT IF ITS not ZERO - this being set to not zero plots a point - what sets it to 0?

.0c8e	 bc c0 06	ldy $06c0,x	PLOT_POINT			LDY	PERS_VER,X	; GET VER POS

.0c91	 b9 90 24	lda $2490,y						LDA	VER_POS_LO,Y 

.0c94	 85 02		sta $02							STA	SCREEN_POS_LO

.0c96	 bd 80 06	lda $0680,x						LDA	PERS_HOR,X	; GET HOR POS into A and X

.0c99	 aa		tax							TAX 	

.0c9a	 0a		asl							ASL 

.0c9b	 b9 00 24	lda $2400,y						LDA	VER_POS_HI,Y

.0c9e	 65 25		adc $25							ADC	SCREEN_BANK

.0ca0	 85 03		sta $03							STA	SCREEN_POS_HI

.0ca2	 bc 20 25	ldy $2520,x						LDY	HOR_SCR_POS,X

.0ca5	 b1 02		lda ($02),y						LDA	(SCREEN_POS_PTR),Y	; GET SCREEN BYTE

.0ca7	 3d 00 27	and $2700,x	LINE_DRAW_8_TYPE	AND	PIXEL_POS,X			; AND PIXEL

.0caa	 91 02		sta ($02),y						STA	(SCREEN_POS_PTR),Y	; PUT SCREEN BYTE

.0cac	 60		rts		PLOT_POINT_EXIT RTS 

.0cad	 a5 d6		lda $d6		b978A   LDA DIFF_X_MSB

.0caf	 38		sec		        SEC 

.0cb0	 e9 08		sbc #$08	        SBC #$08

.0cb2	 85 d6		sta $d6		        STA DIFF_X_MSB

.0cb4	 b0 02		bcs $0cb8	        BCS b9795

.0cb6	 c6 d7		dec $d7		        DEC DIFF_X_HSB

.0cb8	 a5 d9		lda $d9		b9795   LDA DIFF_Y_MSB

.0cba	 38		sec		        SEC 

.0cbb	 e9 08		sbc #$08	        SBC #$08

.0cbd	 85 d9		sta $d9		        STA DIFF_Y_MSB

.0cbf	 b0 02		bcs $0cc3	        BCS b97A0

.0cc1	 c6 da		dec $da		        DEC DIFF_Y_HSB

.0cc3	 a5 dc		lda $dc		b97A0   LDA DIFF_Z_MSB

.0cc5	 38		sec		        SEC 

.0cc6	 e9 08		sbc #$08	        SBC #$08

.0cc8	 85 dc		sta $dc		        STA DIFF_Z_MSB

.0cca	 b0 02		bcs $0cce	        BCS b97AB

.0ccc	 c6 dd		dec $dd		        DEC DIFF_Z_HSB

.0cce	 a0 00		ldy #$00	b97AB   LDY #$00

.0cd0	 84 19		sty $19		        STY POINT_LINE_COUNT ; start point count

.0cd2	 b1 1d		lda ($1d),y	        LDA (OBJECT_POINTER),Y ; object point count

.0cd4	 85 b0		sta $b0		        STA NUMBER_OF_POINTS ; number of points?

.0cd6	 84 ad		sty $ad		        STY OBJECT_POINTER_POS ; store mem pos

.0cd8	 20 a3 11	jsr $11a3	PROCESS_POINT_LOOP	JSR PROCESS_POINT_TO_FP		; get point then *16 then convert to 24bit fp

.0cdb	 20 3d 12	jsr $123d						JSR ROTATE_PERS

.0cde	 a5 19		lda $19							LDA POINT_LINE_COUNT		 ; get point count

.0ce0	 e6 19		inc $19							INC POINT_LINE_COUNT		 ; inc point count

.0ce2	 c5 b0		cmp $b0							CMP NUMBER_OF_POINTS	 	; last point yn

.0ce4	 d0 f2		bne $0cd8						BNE PROCESS_POINT_LOOP  	; no so do next

.0ce6	 e6 ad		inc $ad		        INC OBJECT_POINTER_POS ; inc mem pos

.0ce8	 a4 ad		ldy $ad		        LDY OBJECT_POINTER_POS ; get mem pos

.0cea	 b1 1d		lda ($1d),y	        LDA (OBJECT_POINTER),Y  ; object line count

.0cec	 85 19		sta $19		        STA POINT_LINE_COUNT  ; number of lines?

.0cee	 10 13		bpl $0d03	        BPL NEXT_COMPRESSED_LINE

.0cf0	 a4 ad		ldy $ad		NEXT_LINE	LDY OBJECT_POINTER_POS ; get mem pos

.0cf2	 c8		iny					INY  ; inc mem pos

.0cf3	 b3 1d		lax ($1d),y				LAX (OBJECT_POINTER),Y ; get 1st point into a and x

.0cf5	 c8		iny					INY ; inc mem pos

.0cf6	 b1 1d		lda ($1d),y				LDA (OBJECT_POINTER),Y ; get 2nd point

.0cf8	 84 ad		sty $ad					STY OBJECT_POINTER_POS ; store 2nd point?

.0cfa	 a8		tay					TAY ; 2nd point

.0cfb	 20 a1 0d	jsr $0da1				JSR LINE_DRAW ; draw line

.0cfe	 c6 19		dec $19					DEC POINT_LINE_COUNT ; dec line count

.0d00	 30 ee		bmi $0cf0				BMI NEXT_LINE ; last line y/n

.0d02	 60		rts					RTS ; yes

.0d03	 a4 ad		ldy $ad		NEXT_COMPRESSED_LINE	LDY OBJECT_POINTER_POS ; get mem pos ; first and second point are stored in 1 byte as 2 nibbles

.0d05	 c8		iny								INY  ; inc mem pos

.0d06	 84 ad		sty $ad								STY OBJECT_POINTER_POS ; store mem pos

.0d08	 b3 1d		lax ($1d),y							LAX (OBJECT_POINTER),Y ; get point count into a and x

.0d0a	 29 0f		and #$0f							AND #$0F ; and with 15 = 1st point

.0d0c	 a8		tay								TAY ; y = first point

.0d0d	 8a		txa								TXA  ; get backup

.0d0e	 4a		lsr								LSR  ; /2

.0d0f	 4a		lsr								LSR  ; /2

.0d10	 4a		lsr								LSR  ; /2

.0d11	 4a		lsr								LSR  ; /2

.0d12	 aa		tax								TAX  ; divide by 16 = 2nd point

.0d13	 20 a1 0d	jsr $0da1							JSR LINE_DRAW       ; DRAW LINE

.0d16	 c6 19		dec $19								DEC POINT_LINE_COUNT ; dec line count

.0d18	 10 e9		bpl $0d03							BPL NEXT_COMPRESSED_LINE ; last line yn

.0d1a	 60		rts								RTS  ; yes

.0d1b					camera_object_diff
.0d1b	 38		sec				SEC 

.0d1c	 bd 41 19	lda $1941,x	        LDA OBJ_X_LSB,X		;

.0d1f	 e5 72		sbc $72		        SBC CURR_X_LSB		;

.0d21	 85 d5		sta $d5		        STA DIFF_X_LSB		;

.0d23	 bd 41 17	lda $1741,x	        LDA OBJ_X_MSB,X		;

.0d26	 e5 73		sbc $73		        SBC CURR_X_MSB		;

.0d28	 85 d6		sta $d6		        STA DIFF_X_MSB		;

.0d2a	 bd 01 18	lda $1801,x	        LDA OBJ_X_HSB,X		;

.0d2d	 e5 74		sbc $74		        SBC CURR_X_HSB		;

.0d2f	 85 d7		sta $d7		        STA DIFF_X_HSB		;

.0d31	 38		sec		        SEC 

.0d32	 bd 81 19	lda $1981,x	        LDA OBJ_Y_LSB,X		;

.0d35	 e5 75		sbc $75		        SBC CURR_Y_LSB		;

.0d37	 85 d8		sta $d8		        STA DIFF_Y_LSB		;

.0d39	 bd 81 17	lda $1781,x	        LDA OBJ_Y_MSB,X		;

.0d3c	 e5 76		sbc $76		        SBC CURR_Y_MSB		;

.0d3e	 85 d9		sta $d9		        STA DIFF_Y_MSB		;

.0d40	 bd 41 18	lda $1841,x	        LDA OBJ_Y_HSB,X		;

.0d43	 e5 77		sbc $77		        SBC CURR_Y_HSB		;

.0d45	 85 da		sta $da		        STA DIFF_Y_HSB		;

.0d47	 38		sec		        SEC 

.0d48	 bd c1 19	lda $19c1,x	        LDA OBJ_Z_LSB,X		;

.0d4b	 e5 78		sbc $78		        SBC CURR_Z_LSB		;

.0d4d	 85 db		sta $db		        STA DIFF_Z_LSB		;

.0d4f	 bd c1 17	lda $17c1,x	        LDA OBJ_Z_MSB,X		;

.0d52	 e5 79		sbc $79		        SBC CURR_Z_MSB		;

.0d54	 85 dc		sta $dc		        STA DIFF_Z_MSB		;

.0d56	 bd 81 18	lda $1881,x	        LDA OBJ_Z_HSB,X		;

.0d59	 e5 7a		sbc $7a		        SBC CURR_Z_HSB		;

.0d5b	 85 dd		sta $dd		        STA DIFF_Z_HSB		;

.0d5d	 60		rts		        RTS 

.0d5e	 86 08		stx $08		s999A   STX ab08

.0d60	 84 09		sty $09		        STY ab09

.0d62	 a5 d5		lda $d5		        LDA DIFF_X_LSB

.0d64	 a6 d6		ldx $d6		        LDX DIFF_X_MSB

.0d66	 a4 d7		ldy $d7		        LDY DIFF_X_HSB

.0d68	 20 82 0d	jsr $0d82	        JSR s99BE

.0d6b	 b0 14		bcs $0d81	        BCS b99BD ; error so exit

.0d6d	 a5 d8		lda $d8		        LDA DIFF_Y_LSB

.0d6f	 a6 d9		ldx $d9		        LDX DIFF_Y_MSB

.0d71	 a4 da		ldy $da		        LDY DIFF_Y_HSB

.0d73	 20 82 0d	jsr $0d82	        JSR s99BE

.0d76	 b0 09		bcs $0d81	        BCS b99BD ; error so exit

.0d78	 a5 db		lda $db		        LDA DIFF_Z_LSB

.0d7a	 a6 dc		ldx $dc		        LDX DIFF_Z_MSB

.0d7c	 a4 dd		ldy $dd		        LDY DIFF_Z_HSB

.0d7e	 20 82 0d	jsr $0d82	        JSR s99BE

.0d81	 60		rts		b99BD   RTS 

.0d82					s99be
.0d82	 10 15		bpl $0d99				BPL CONTINUE1 	; if number is positive continue 

.0d84	 49 ff		eor #$ff				EOR #$FF  		; negative so negate LSB

.0d86	 48		pha					PHA 			; backup LSB

.0d87	 8a		txa					TXA       		; negate MSB

.0d88	 49 ff		eor #$ff				EOR #$FF		;

.0d8a	 aa		tax					TAX 			;

.0d8b	 98		tya					TYA 			; negate HSB

.0d8c	 49 ff		eor #$ff				EOR #$FF		;

.0d8e	 a8		tay					TAY 			;

.0d8f	 68		pla					PLA 			; restore LSB

.0d90	 18		clc					CLC 

.0d91	 69 01		adc #$01				ADC #$01		; inc LSB

.0d93	 90 04		bcc $0d99				BCC CONTINUE1	; no overlow so continue

.0d95	 e8		inx					INX 			; inc MSB

.0d96	 d0 01		bne $0d99				BNE CONTINUE1	; no overlow so continue

.0d98	 c8		iny					INY 			; inc HSB

.0d99	 38		sec		CONTINUE1   SEC 

.0d9a	 8a		txa					TXA 

.0d9b	 e5 08		sbc $08					SBC ab08		; subtract from MSB

.0d9d	 98		tya					TYA 

.0d9e	 e5 09		sbc $09					SBC ab09		; subtract from HSB

.0da0	 60		rts					RTS 

.0da1					line_draw
.0da1	 bd 00 07	lda $0700,x					LDA POINT_CLASSIFICATION,X 		; start point X classification

.0da4	 f0 25		beq $0dcb					BEQ POINT_X_INFRONT 			; start point X onscreen

.0da6	 30 17		bmi $0dbf					BMI POINT_X_BEHIND 				; start point X behind

.0da8	 b9 00 07	lda $0700,y					LDA POINT_CLASSIFICATION,Y 		; end point Y classification 

.0dab	 f0 12		beq $0dbf					BEQ POINT_X_BEHIND 				; end point Y onscreen

.0dad	 30 1c		bmi $0dcb					BMI POINT_X_INFRONT 			; end point Y behind	

.0daf	 b9 80 03	lda $0380,y					LDA Z_ROT_TAB_HI,Y 

.0db2	 49 80		eor #$80					EOR #$80

.0db4	 85 06		sta $06						STA ab06

.0db6	 bd 80 03	lda $0380,x					LDA Z_ROT_TAB_HI,X

.0db9	 49 80		eor #$80					EOR #$80

.0dbb	 c5 06		cmp $06						CMP ab06

.0dbd	 b0 0c		bcs $0dcb					BCS POINT_X_INFRONT

.0dbf	 98		tya		POINT_X_BEHIND 	TYA 		; start X is behind so swap start X and end Y pointer so that Y is behind and X start might be behind? so swap start and end - so Y is behind?

.0dc0	 86 06		stx $06						STX ab06	; swap start / end

.0dc2	 aa		tax						TAX 		; swap start / end

.0dc3	 a4 06		ldy $06						LDY ab06	; swap start / end

.0dc5	 bd 00 07	lda $0700,x					LDA POINT_CLASSIFICATION,X 	; start point X which was end point Y classification

.0dc8	 10 01		bpl $0dcb					BPL POINT_X_INFRONT 		; end point X point infront

.0dca	 60		rts							RTS 					; both points behind

.0dcb	 bd 00 07	lda $0700,x	POINT_X_INFRONT	LDA POINT_CLASSIFICATION,X 	; at least 1 point is in front ; point 1 classification

.0dce	 85 6e		sta $6e						STA POINT_CLASSIFY_1

.0dd0	 30 1e		bmi $0df0					BMI X_ROT_COPY 				; point X is behind so x rotation points need to be copied and pers doesnt

.0dd2	 bd 80 06	lda $0680,x						LDA PERS_HOR,X

.0dd5	 85 6a		sta $6a							STA LINE_START_HOR

.0dd7	 bd c0 06	lda $06c0,x						LDA PERS_VER,X

.0dda	 85 6b		sta $6b							STA LINE_START_VER

.0ddc	 bd 00 06	lda $0600,x						LDA PERS_POINT_TAB_2,X

.0ddf	 85 5e		sta $5e							STA ab5E

.0de1	 bd c0 03	lda $03c0,x						LDA PERS_POINT_TAB_3,X

.0de4	 85 5f		sta $5f							STA ab5F

.0de6	 bd a0 27	lda $27a0,x						LDA PERS_POINT_TAB_4,X

.0de9	 85 60		sta $60							STA ab60

.0deb	 bd 40 06	lda $0640,x						LDA PERS_POINT_TAB_5,X

.0dee	 85 61		sta $61							STA ab61

.0df0	 bd 00 01	lda $0100,x	X_ROT_COPY		LDA X_ROT_TAB_LO,X ; a point is behind? so x and y rotation needs to be copied to be used in z clip

.0df3	 85 52		sta $52						STA X_POS_HI

.0df5	 bd 40 01	lda $0140,x					LDA X_ROT_TAB_HI,X

.0df8	 85 53		sta $53						STA X_POS_LO

.0dfa	 bd 80 01	lda $0180,x					LDA Y_ROT_TAB_LO,X

.0dfd	 85 54		sta $54						STA Y_POS_HI

.0dff	 bd c0 02	lda $02c0,x					LDA Y_ROT_TAB_HI,X

.0e02	 85 55		sta $55						STA Y_POS_LO

.0e04	 bd 40 03	lda $0340,x					LDA Z_ROT_TAB_LO,X

.0e07	 85 56		sta $56						STA Z_POS_HI

.0e09	 bd 80 03	lda $0380,x					LDA Z_ROT_TAB_HI,X

.0e0c	 85 57		sta $57						STA Z_POS_LO

.0e0e	 b9 00 07	lda $0700,y					LDA POINT_CLASSIFICATION,Y

.0e11	 85 6f		sta $6f						STA POINT_CLASSIFY_2

.0e13	 30 1e		bmi $0e33					BMI Y_ROT_COPY				; Y is behind so y rotation points need to be copied and pers doesnt

.0e15	 b9 80 06	lda $0680,y						LDA PERS_HOR,Y

.0e18	 85 6c		sta $6c							STA ab6C

.0e1a	 b9 c0 06	lda $06c0,y						LDA PERS_VER,Y

.0e1d	 85 6d		sta $6d							STA ab6D

.0e1f	 b9 00 06	lda $0600,y						LDA PERS_POINT_TAB_2,Y

.0e22	 85 62		sta $62							STA ab62

.0e24	 b9 c0 03	lda $03c0,y						LDA PERS_POINT_TAB_3,Y

.0e27	 85 63		sta $63							STA ab63

.0e29	 b9 a0 27	lda $27a0,y						LDA PERS_POINT_TAB_4,Y

.0e2c	 85 64		sta $64							STA ab64

.0e2e	 b9 40 06	lda $0640,y						LDA PERS_POINT_TAB_5,Y

.0e31	 85 65		sta $65							STA ab65

.0e33	 b9 00 01	lda $0100,y	Y_ROT_COPY		LDA X_ROT_TAB_LO,Y

.0e36	 85 58		sta $58						STA X_ROTATION_LO

.0e38	 b9 40 01	lda $0140,y					LDA X_ROT_TAB_HI,Y

.0e3b	 85 59		sta $59						STA X_ROTATION_HI

.0e3d	 b9 80 01	lda $0180,y					LDA Y_ROT_TAB_LO,Y

.0e40	 85 5a		sta $5a						STA Y_ROTATION_LO

.0e42	 b9 c0 02	lda $02c0,y					LDA Y_ROT_TAB_HI,Y

.0e45	 85 5b		sta $5b						STA Y_ROTATION_HI

.0e47	 b9 40 03	lda $0340,y					LDA Z_ROT_TAB_LO,Y

.0e4a	 85 5c		sta $5c						STA Z_ROTATION_LO

.0e4c	 b9 80 03	lda $0380,y					LDA Z_ROT_TAB_HI,Y

.0e4f	 85 5d		sta $5d						STA Z_ROTATION_HI

.0e51	 a5 6f		lda $6f						LDA POINT_CLASSIFY_2

.0e53	 10 03		bpl $0e58					BPL b9A94

.0e55	 4c d2 0e	jmp $0ed2						JMP j9B2C ; LINE DRAW

.0e58	 a6 5e		ldx $5e		b9A94   LDX ab5E

.0e5a	 a5 5f		lda $5f		        LDA ab5F

.0e5c	 49 01		eor #$01	        EOR #$01

.0e5e	 86 08		stx $08		        STX ab08

.0e60	 85 09		sta $09		        STA ab09

.0e62	 a6 62		ldx $62		        LDX ab62

.0e64	 a4 63		ldy $63		        LDY ab63

.0e66	 20 98 0a	jsr $0a98	        JSR s838B ; xy * 89 ?

.0e69	 86 0a		stx $0a		        STX ab0A

.0e6b	 84 0b		sty $0b		        STY ab0B

.0e6d	 98		tya		        TYA 

.0e6e	 0a		asl		        ASL 

.0e6f	 29 02		and #$02	        AND #$02

.0e71	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0e73	 a6 60		ldx $60		        LDX ab60

.0e75	 a5 61		lda $61		        LDA ab61

.0e77	 49 01		eor #$01	        EOR #$01

.0e79	 86 08		stx $08		        STX ab08

.0e7b	 85 09		sta $09		        STA ab09

.0e7d	 a6 64		ldx $64		        LDX ab64

.0e7f	 a4 65		ldy $65		        LDY ab65

.0e81	 20 98 0a	jsr $0a98	        JSR s838B

.0e84	 86 0c		stx $0c		        STX ab0C

.0e86	 84 0d		sty $0d		        STY ab0D

.0e88	 98		tya		        TYA 

.0e89	 29 01		and #$01	        AND #$01

.0e8b	 05 67		ora $67		        ORA LINE_TYPE_POINTER

.0e8d	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0e8f	 a5 0a		lda $0a				LDA		ab0A

.0e91	 85 22		sta $22				STA		FP_DIVIDE_LO

.0e93	 a6 09		ldx $09				LDX		ab09

.0e95	 a4 08		ldy $08				LDY		ab08

.0e97	 a5 0b		lda $0b				LDA		ab0B

.0e99	 20 d1 09	jsr $09d1			JSR		FP_DIVIDE

.0e9c	 86 68		stx $68				STx		ab68

.0e9e	 85 69		sta $69				STA		ab69

.0ea0	 a8		tay		        TAY 

.0ea1	 30 17		bmi $0eba	        BMI b9B14

.0ea3	 a5 67		lda $67		        LDA LINE_TYPE_POINTER

.0ea5	 09 04		ora #$04	        ORA #$04

.0ea7	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0ea9	 a5 0c		lda $0c				LDA		ab0C

.0eab	 85 22		sta $22				STA		FP_DIVIDE_LO

.0ead	 a6 0b		ldx $0b				LDX		ab0B

.0eaf	 a4 0a		ldy $0a				LDY		ab0A

.0eb1	 a5 0d		lda $0d				LDA		ab0D

.0eb3	 20 d1 09	jsr $09d1			JSR		FP_DIVIDE

.0eb6	 86 08		stx $08				STX		ab08

.0eb8	 85 09		sta $09				STA		ab09

.0eba	 a8		tay		b9B14   TAY 

.0ebb	 30 07		bmi $0ec4	        BMI b9B1E

.0ebd	 a9 ff		lda #$ff	        LDA #$FF		; straight line?

.0ebf	 85 66		sta $66		        STA LINE_INC

.0ec1	 4c 6d 0f	jmp $0f6d	        JMP GET_LINE_TYPE

.0ec4	 18		clc		b9B1E   CLC 

.0ec5	 69 20		adc #$20	        ADC #$20

.0ec7	 29 fc		and #$fc	        AND #$FC

.0ec9	 a8		tay		        TAY 

.0eca	 20 71 0b	jsr $0b71	        JSR FPTO16BIT

.0ecd	 84 66		sty $66		        STY LINE_INC

.0ecf	 4c 6d 0f	jmp $0f6d	        JMP GET_LINE_TYPE

.0ed2	 a5 56		lda $56		j9B2C	LDA		Z_POS_HI

.0ed4	 85 22		sta $22				STA		FP_DIVIDE_LO

.0ed6	 a6 5d		ldx $5d				LDX		Z_ROTATION_HI

.0ed8	 a4 5c		ldy $5c				LDY		Z_ROTATION_LO

.0eda	 a5 57		lda $57				LDA		Z_POS_LO

.0edc	 20 d1 09	jsr $09d1			JSR		FP_DIVIDE

.0edf	 86 0a		stx $0a				STX		ab0A

.0ee1	 85 0b		sta $0b				STA		ab0B

.0ee3	 49 01		eor #$01			EOR #$01

.0ee5	 85 0b		sta $0b		        STA ab0B

.0ee7	 a5 52		lda $52				LDA 	X_POS_HI

.0ee9	 85 22		sta $22				STA		FP_MULTIPLY_LO

.0eeb	 a5 53		lda $53				LDA 	X_POS_LO

.0eed	 a4 0b		ldy $0b				LDY 	ab0B

.0eef	 a6 0a		ldx $0a		        LDX 	ab0A

.0ef1	 20 ed 09	jsr $09ed			JSR		FP_MULTIPLY

.0ef4	 84 08		sty $08		        STy 	ab08

.0ef6	 85 09		sta $09		        STA 	ab09

.0ef8	 a6 58		ldx $58		        LDX X_ROTATION_LO

.0efa	 a4 59		ldy $59		        LDY X_ROTATION_HI

.0efc	 20 98 0a	jsr $0a98	        JSR s838B

.0eff	 86 0c		stx $0c		        STX ab0C

.0f01	 84 0d		sty $0d		        STY ab0D

.0f03	 98		tya		        TYA 

.0f04	 45 57		eor $57		        EOR Z_POS_LO

.0f06	 0a		asl		        ASL 

.0f07	 29 02		and #$02	        AND #$02

.0f09	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0f0b	 a5 54		lda $54				LDA 	Y_POS_HI

.0f0d	 85 22		sta $22				STA		FP_MULTIPLY_LO

.0f0f	 a5 55		lda $55				LDA 	Y_POS_LO

.0f11	 a4 0b		ldy $0b				LDY 	ab0B

.0f13	 a6 0a		ldx $0a		        LDX 	ab0A

.0f15	 20 ed 09	jsr $09ed			JSR		FP_MULTIPLY

.0f18	 84 08		sty $08		        STy 	ab08

.0f1a	 85 09		sta $09		        STA 	ab09

.0f1c	 a6 5a		ldx $5a		        LDX Y_ROTATION_LO

.0f1e	 a4 5b		ldy $5b		        LDY Y_ROTATION_HI

.0f20	 20 98 0a	jsr $0a98	        JSR s838B

.0f23	 86 0a		stx $0a		        STX ab0A

.0f25	 84 0b		sty $0b		        STY ab0B

.0f27	 98		tya		        TYA 

.0f28	 45 57		eor $57		        EOR Z_POS_LO

.0f2a	 29 01		and #$01	        AND #$01

.0f2c	 05 67		ora $67		        ORA LINE_TYPE_POINTER

.0f2e	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0f30	 a5 0c		lda $0c				LDA		ab0C

.0f32	 85 22		sta $22				STA		FP_DIVIDE_LO

.0f34	 a6 09		ldx $09				LDX		ab09

.0f36	 a4 08		ldy $08				LDY		ab08

.0f38	 a5 0d		lda $0d				LDA		ab0D

.0f3a	 20 d1 09	jsr $09d1			JSR		FP_DIVIDE

.0f3d	 86 68		stx $68				STX		ab68

.0f3f	 85 69		sta $69				STA		ab69

.0f41	 a8		tay		        TAY 

.0f42	 30 17		bmi $0f5b	        BMI b9BFC

.0f44	 a5 67		lda $67		        LDA LINE_TYPE_POINTER

.0f46	 09 04		ora #$04	        ORA #$04

.0f48	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0f4a	 a5 0a		lda $0a				LDA		ab0A

.0f4c	 85 22		sta $22				STA		FP_DIVIDE_LO

.0f4e	 a6 0d		ldx $0d				LDX		ab0D

.0f50	 a4 0c		ldy $0c				LDY		ab0C

.0f52	 a5 0b		lda $0b				LDA		ab0B

.0f54	 20 d1 09	jsr $09d1			JSR		FP_DIVIDE

.0f57	 86 08		stx $08				STX		ab08

.0f59	 85 09		sta $09				STA		ab09

.0f5b	 a8		tay		b9BFC   TAY 

.0f5c	 30 04		bmi $0f62	        BMI b9C05

.0f5e	 a0 ff		ldy #$ff				LDY #$FF			; straight line?

.0f60	 d0 09		bne $0f6b				BNE LINE_CONT_99 ; jump

.0f62	 18		clc		b9C05   CLC 

.0f63	 69 20		adc #$20	        ADC #$20

.0f65	 29 fc		and #$fc	        AND #$FC

.0f67	 a8		tay		        TAY 

.0f68	 20 71 0b	jsr $0b71	        JSR FPTO16BIT

.0f6b	 84 66		sty $66		LINE_CONT_99	STY LINE_INC

.0f6d	 a6 67		ldx $67		GET_LINE_TYPE	LDX LINE_TYPE_POINTER    ; GET LINE TYPE 0-7

.0f6f	 bc 30 26	ldy $2630,x					LDY LINE_DRAW_CONV_PTR,X ; CONVERT LINE TYPE TO POINTER TYPE

.0f72	 b9 20 26	lda $2620,y					LDA LINE_DRAW_PTR_LO,Y ; GET POINTER TO CORRECT LINE

.0f75	 85 04		sta $04						STA LINE_JUMP_PTR_LO    ; STORE AT JUMP TABLE ADDRESS

.0f77	 b9 28 26	lda $2628,y					LDA LINE_DRAW_PTR_HI,Y ; GET POINTER TO CORRECT LINE

.0f7a	 85 05		sta $05						STA LINE_JUMP_PTR_HI    ; STORE AT JUMP TABLE ADDRESS

.0f7c	 a5 6f		lda $6f						LDA POINT_CLASSIFY_2

.0f7e	 f0 0a		beq $0f8a					BEQ b9C2F

.0f80	 b9 38 26	lda $2638,y					LDA fBBD8,Y

.0f83	 85 6c		sta $6c						STA ab6C

.0f85	 b9 40 26	lda $2640,y					LDA fBBE0,Y

.0f88	 85 6d		sta $6d						STA ab6D

.0f8a	 a5 6e		lda $6e		b9C2F   		LDA POINT_CLASSIFY_1

.0f8c	 d0 03		bne $0f91					BNE b9C36				; point off screen

.0f8e	 4c e8 10	jmp $10e8					JMP		LINE_DRAW_JMP

.0f91	 a5 61		lda $61		b9C36   LDA ab61

.0f93	 0a		asl		        ASL 

.0f94	 0a		asl		        ASL 

.0f95	 29 04		and #$04	        AND #$04

.0f97	 05 6e		ora $6e		        ORA POINT_CLASSIFY_1

.0f99	 85 06		sta $06		        STA ab06

.0f9b	 a5 5f		lda $5f		        LDA ab5F

.0f9d	 0a		asl		        ASL 

.0f9e	 0a		asl		        ASL 

.0f9f	 0a		asl		        ASL 

.0fa0	 29 08		and #$08	        AND #$08

.0fa2	 05 06		ora $06		        ORA ab06

.0fa4	 aa		tax		        TAX 

.0fa5	 98		tya		        TYA 

.0fa6	 1d 48 26	ora $2648,x	        ORA fBBE8,X

.0fa9	 4a		lsr		        LSR 

.0faa	 aa		tax		        TAX 

.0fab	 bd 58 26	lda $2658,x	        LDA fBBF8,X

.0fae	 d0 01		bne $0fb1	        BNE b9C56

.0fb0	 60		rts		        RTS 

.0fb1	 85 6e		sta $6e		b9C56   STA POINT_CLASSIFY_1

.0fb3	 a5 6f		lda $6f		        LDA POINT_CLASSIFY_2

.0fb5	 30 20		bmi $0fd7	        BMI b9C7C

.0fb7	 a5 65		lda $65		        LDA ab65

.0fb9	 0a		asl		        ASL 

.0fba	 0a		asl		        ASL 

.0fbb	 29 04		and #$04	        AND #$04

.0fbd	 05 6f		ora $6f		        ORA POINT_CLASSIFY_2

.0fbf	 85 06		sta $06		        STA ab06

.0fc1	 a5 63		lda $63		        LDA ab63

.0fc3	 0a		asl		        ASL 

.0fc4	 0a		asl		        ASL 

.0fc5	 0a		asl		        ASL 

.0fc6	 29 08		and #$08	        AND #$08

.0fc8	 05 06		ora $06		        ORA ab06

.0fca	 aa		tax		        TAX 

.0fcb	 98		tya		        TYA 

.0fcc	 1d 48 26	ora $2648,x	        ORA fBBE8,X

.0fcf	 4a		lsr		        LSR 

.0fd0	 aa		tax		        TAX 

.0fd1	 bd 78 26	lda $2678,x	        LDA fBC18,X

.0fd4	 d0 01		bne $0fd7	        BNE b9C7C

.0fd6	 60		rts		        RTS 

.0fd7	 a5 6e		lda $6e		b9C7C   LDA POINT_CLASSIFY_1

.0fd9	 29 01		and #$01	        AND #$01 ; off this edge

.0fdb	 f0 3f		beq $101c	        BEQ b9CC1 ; no

.0fdd	 a6 92		ldx $92		        LDX ab92 ; yes

.0fdf	 a5 93		lda $93		        LDA ab93

.0fe1	 38		sec		        SEC 

.0fe2	 e5 21		sbc $21		        SBC ab21

.0fe4	 86 08		stx $08		        STX ab08

.0fe6	 85 09		sta $09		        STA ab09

.0fe8	 a6 5e		ldx $5e		        LDX ab5E

.0fea	 a5 5f		lda $5f		        LDA ab5F

.0fec	 49 01		eor #$01	        EOR #$01

.0fee	 a8		tay		        TAY 

.0fef	 20 98 0a	jsr $0a98	        JSR s838B

.0ff2	 a6 68		ldx $68		        LDX ab68

.0ff4	 a4 69		ldy $69		        LDY ab69

.0ff6	 20 07 0a	jsr $0a07	        JSR FPMUL

.0ff9	 a6 60		ldx $60		        LDX ab60

.0ffb	 a4 61		ldy $61		        LDY ab61

.0ffd	 20 98 0a	jsr $0a98	        JSR s838B

.1000	 98		tya		        TYA 

.1001	 18		clc		        CLC 

.1002	 65 21		adc $21		        ADC ab21

.1004	 70 16		bvs $101c	        BVS b9CC1

.1006	 a8		tay		        TAY 

.1007	 20 41 0b	jsr $0b41	        JSR FPTO8BIT

.100a	 b0 10		bcs $101c	        BCS b9CC1

.100c	 18		clc		        CLC 

.100d	 69 44		adc #$44	        ADC #SCR_VER_MID

.100f	 c9 88		cmp #$88	        CMP #CLIP_TEST_BOTTOM ; clip test?

.1011	 b0 09		bcs $101c	        BCS b9CC1

.1013	 85 6b		sta $6b		        STA LINE_START_VER

.1015	 a9 9f		lda #$9f	        LDA #CLIP_RIGHT ; clip right ?

.1017	 85 6a		sta $6a		        STA LINE_START_HOR ; clip right ?

.1019	 4c e8 10	jmp $10e8	        JMP LINE_DRAW_JMP

.101c	 a5 6e		lda $6e		b9CC1   LDA POINT_CLASSIFY_1

.101e	 29 02		and #$02	        AND #$02 ; off this edge

.1020	 f0 3f		beq $1061	        BEQ b9D06 ; no

.1022	 a6 96		ldx $96		        LDX ab96 ; yes

.1024	 a5 97		lda $97		        LDA ab97

.1026	 38		sec		        SEC 

.1027	 e5 21		sbc $21		        SBC ab21

.1029	 86 08		stx $08		        STX ab08

.102b	 85 09		sta $09		        STA ab09

.102d	 a6 60		ldx $60		        LDX ab60

.102f	 a5 61		lda $61		        LDA ab61

.1031	 49 01		eor #$01	        EOR #$01

.1033	 a8		tay		        TAY 

.1034	 20 98 0a	jsr $0a98	        JSR s838B

.1037	 a6 68		ldx $68		        LDX ab68

.1039	 a4 69		ldy $69		        LDY ab69

.103b	 20 41 0a	jsr $0a41	        JSR FPDIV

.103e	 a6 5e		ldx $5e		        LDX ab5E

.1040	 a4 5f		ldy $5f		        LDY ab5F

.1042	 20 98 0a	jsr $0a98	        JSR s838B

.1045	 98		tya		        TYA 

.1046	 18		clc		        CLC 

.1047	 65 21		adc $21		        ADC ab21

.1049	 70 16		bvs $1061	        BVS b9D06

.104b	 a8		tay		        TAY 

.104c	 20 41 0b	jsr $0b41	        JSR FPTO8BIT

.104f	 b0 10		bcs $1061	        BCS b9D06

.1051	 18		clc		        CLC 

.1052	 69 50		adc #$50	        ADC #SCR_HOR_MID

.1054	 c9 a0		cmp #$a0	        CMP #CLIP_TEST_RIGHT 		; clip test

.1056	 b0 09		bcs $1061	        BCS b9D06

.1058	 85 6a		sta $6a		        STA LINE_START_HOR

.105a	 a9 87		lda #$87	        LDA #CLIP_BOTTOM 			; clip bottom

.105c	 85 6b		sta $6b		        STA LINE_START_VER 			; clip bottom

.105e	 4c e8 10	jmp $10e8	        JMP LINE_DRAW_JMP

.1061	 a5 6e		lda $6e		b9D06   LDA POINT_CLASSIFY_1 ; LINE DRAW

.1063	 29 04		and #$04	        AND #$04 ; off this edge

.1065	 f0 3f		beq $10a6	        BEQ b9D4B ; no

.1067	 a6 90		ldx $90		        LDX ab90 ; yes

.1069	 a5 91		lda $91		        LDA ab91

.106b	 38		sec		        SEC 

.106c	 e5 21		sbc $21		        SBC ab21

.106e	 86 08		stx $08		        STX ab08

.1070	 85 09		sta $09		        STA ab09

.1072	 a6 5e		ldx $5e		        LDX ab5E

.1074	 a5 5f		lda $5f		        LDA ab5F

.1076	 49 01		eor #$01	        EOR #$01

.1078	 a8		tay		        TAY 

.1079	 20 98 0a	jsr $0a98	        JSR s838B

.107c	 a6 68		ldx $68		        LDX ab68

.107e	 a4 69		ldy $69		        LDY ab69

.1080	 20 07 0a	jsr $0a07	        JSR FPMUL

.1083	 a6 60		ldx $60		        LDX ab60

.1085	 a4 61		ldy $61		        LDY ab61

.1087	 20 98 0a	jsr $0a98	        JSR s838B

.108a	 98		tya		        TYA 

.108b	 18		clc		        CLC 

.108c	 65 21		adc $21		        ADC ab21

.108e	 70 16		bvs $10a6	        BVS b9D4B

.1090	 a8		tay		        TAY 

.1091	 20 41 0b	jsr $0b41	        JSR FPTO8BIT

.1094	 b0 10		bcs $10a6	        BCS b9D4B

.1096	 18		clc		        CLC 

.1097	 69 44		adc #$44	        ADC #SCR_VER_MID

.1099	 c9 88		cmp #$88	        CMP #CLIP_TEST_BOTTOM ; clip test

.109b	 b0 09		bcs $10a6	        BCS b9D4B

.109d	 85 6b		sta $6b		        STA LINE_START_VER

.109f	 a9 00		lda #$00	        LDA #CLIP_TEST_TOP ; clip off top

.10a1	 85 6a		sta $6a		        STA LINE_START_HOR ; clip off top 

.10a3	 4c e8 10	jmp $10e8	        JMP LINE_DRAW_JMP

.10a6	 a5 6e		lda $6e		b9D4B   LDA POINT_CLASSIFY_1 ; LINE DRAW

.10a8	 29 08		and #$08	        AND #$08 ; off this edge

.10aa	 f0 47		beq $10f3	        BEQ b9D98 ; no

.10ac	 a6 94		ldx $94		        LDX ab94 ; yes

.10ae	 a5 95		lda $95		        LDA ab95

.10b0	 38		sec		        SEC 

.10b1	 e5 21		sbc $21		        SBC ab21

.10b3	 86 08		stx $08		        STX ab08

.10b5	 85 09		sta $09		        STA ab09

.10b7	 a6 60		ldx $60		        LDX ab60

.10b9	 a5 61		lda $61		        LDA ab61

.10bb	 49 01		eor #$01	        EOR #$01

.10bd	 a8		tay		        TAY 

.10be	 20 98 0a	jsr $0a98	        JSR s838B

.10c1	 a6 68		ldx $68		        LDX ab68

.10c3	 a4 69		ldy $69		        LDY ab69

.10c5	 20 41 0a	jsr $0a41	        JSR FPDIV

.10c8	 a6 5e		ldx $5e		        LDX ab5E

.10ca	 a4 5f		ldy $5f		        LDY ab5F

.10cc	 20 98 0a	jsr $0a98	        JSR s838B

.10cf	 98		tya		        TYA 

.10d0	 18		clc		        CLC 

.10d1	 65 21		adc $21		        ADC ab21

.10d3	 70 1e		bvs $10f3	        BVS b9D98

.10d5	 a8		tay		        TAY 

.10d6	 20 41 0b	jsr $0b41	        JSR FPTO8BIT

.10d9	 b0 18		bcs $10f3	        BCS b9D98

.10db	 18		clc		        CLC 

.10dc	 69 50		adc #$50	        ADC #SCR_HOR_MID

.10de	 c9 a0		cmp #$a0	        CMP #CLIP_TEST_RIGHT ; clip test

.10e0	 b0 11		bcs $10f3	        BCS b9D98

.10e2	 85 6a		sta $6a		        STA LINE_START_HOR

.10e4	 a9 00		lda #$00	        LDA #CLIP_TEST_LEFT ; clip off left

.10e6	 85 6b		sta $6b		        STA LINE_START_VER ; clip off left

.10e8					line_draw_jmp
.10e8	 a6 6a		ldx $6a				LDX LINE_START_HOR

.10ea	 a4 6b		ldy $6b		        LDY LINE_START_VER

.10ec	 a9 80		lda #$80	        LDA #$80 ; set fraction to half 

.10ee	 85 08		sta $08		        STA LINE_FRACTION_ab08 ; set line fraction

.10f0	 6c 04 00	jmp ($0004)	        JMP (LINE_JUMP_PTR) ; LINE_DRAW_01

.10f3	 60		rts		b9D98   RTS 

.10f4					movement
.10f4	 a9 01		lda #$01	        LDA #$01                    ; UP

.10f6	 24 80		bit $80		        BIT JOYSTICK_MOVEMENT

.10f8	 d0 05		bne $10ff	        BNE bA1A1

.10fa	 a9 01		lda #$01				LDA #$01 ; FORWARD

.10fc	 20 35 11	jsr $1135				JSR FORWARD_BACK

.10ff	 a9 02		lda #$02	bA1A1   LDA #$02					; DOWN

.1101	 24 80		bit $80		        BIT JOYSTICK_MOVEMENT

.1103	 d0 05		bne $110a	        BNE bA1AC

.1105	 a9 00		lda #$00				LDA #$00	; BACKWARD

.1107	 20 35 11	jsr $1135				JSR FORWARD_BACK

.110a	 a9 04		lda #$04	bA1AC   LDA #$04					; LEFT

.110c	 24 80		bit $80		        BIT JOYSTICK_MOVEMENT

.110e	 d0 0f		bne $111f	        BNE bA1C1

.1110	 a5 2c		lda $2c					LDA ROT_LO	; LEFT

.1112	 18		clc					CLC 

.1113	 65 ac		adc $ac					ADC ROT_SPD

.1115	 85 2c		sta $2c					STA ROT_LO

.1117	 a5 2d		lda $2d					LDA ROT_HI

.1119	 69 00		adc #$00				ADC #$00

.111b	 29 03		and #$03				AND #$03

.111d	 85 2d		sta $2d					STA ROT_HI

.111f	 a9 08		lda #$08	bA1C1   LDA #$08					; RIGHT

.1121	 24 80		bit $80		        BIT JOYSTICK_MOVEMENT

.1123	 d0 0f		bne $1134	        BNE bA1D6

.1125	 a5 2c		lda $2c					LDA ROT_LO	; RIGHT

.1127	 38		sec					SEC 

.1128	 e5 ac		sbc $ac					SBC ROT_SPD

.112a	 85 2c		sta $2c					STA ROT_LO

.112c	 a5 2d		lda $2d					LDA ROT_HI

.112e	 e9 00		sbc #$00				SBC #$00

.1130	 29 03		and #$03				AND #$03

.1132	 85 2d		sta $2d					STA ROT_HI

.1134	 60		rts		bA1D6 	RTS

.1135	 48		pha		FORWARD_BACK	PHA 			; push sign/direction

.1136	 a6 aa		ldx $aa						LDX SPEED_LO

.1138	 45 ab		eor $ab						EOR SPEED_HI 	; set direction

.113a	 86 08		stx $08						STX ab08

.113c	 85 09		sta $09						STA ab09

.113e	 a6 3e		ldx $3e						LDX COS_LO

.1140	 a4 3f		ldy $3f						LDY COS_HI

.1142	 20 07 0a	jsr $0a07					JSR FPMUL

.1145	 20 71 0b	jsr $0b71					JSR FPTO16BIT

.1148	 98		tya						TYA 

.1149	 18		clc						CLC 

.114a	 65 78		adc $78						ADC CURR_Z_LSB

.114c	 85 78		sta $78						STA CURR_Z_LSB

.114e	 8a		txa						TXA 

.114f	 65 79		adc $79						ADC CURR_Z_MSB

.1151	 85 79		sta $79						STA CURR_Z_MSB

.1153	 8a		txa						TXA 

.1154	 10 04		bpl $115a					BPL _Z_PLUS 		; if +

.1156	 a9 ff		lda #$ff						LDA #$FF		; set to 255 for -

.1158	 30 02		bmi $115c						BMI _Z_NEG_CONT	; jmp

.115a	 a9 00		lda #$00	_Z_PLUS   		LDA #$00			; set to 0 for +

.115c	 65 7a		adc $7a		_Z_NEG_CONT 	ADC CURR_Z_HSB		; either add or sub depending on + or -

.115e	 85 7a		sta $7a						STA CURR_Z_HSB

.1160	 68		pla						PLA 			; pop sign

.1161	 a6 aa		ldx $aa						LDX SPEED_LO

.1163	 45 ab		eor $ab						EOR SPEED_HI	; set direction

.1165	 86 08		stx $08						STX ab08

.1167	 85 09		sta $09						STA ab09

.1169	 a6 3c		ldx $3c						LDX SIN_LO

.116b	 a4 3d		ldy $3d						LDY SIN_HI

.116d	 20 07 0a	jsr $0a07					JSR FPMUL

.1170	 20 71 0b	jsr $0b71					JSR FPTO16BIT

.1173	 98		tya						TYA 

.1174	 18		clc						CLC 

.1175	 65 72		adc $72						ADC CURR_X_LSB

.1177	 85 72		sta $72						STA CURR_X_LSB

.1179	 8a		txa						TXA 

.117a	 65 73		adc $73						ADC CURR_X_MSB

.117c	 85 73		sta $73						STA CURR_X_MSB

.117e	 8a		txa						TXA 

.117f	 10 04		bpl $1185					BPL _X_PLUS			; positive

.1181	 a9 ff		lda #$ff						LDA #$FF		; negative so set to 255

.1183	 30 02		bmi $1187						BMI _X_NEG_CONT ; jump to calc

.1185	 a9 00		lda #$00	_X_PLUS	   		LDA #$00			; positive so set to 0

.1187	 65 74		adc $74		_X_NEG_CONT    	ADC CURR_X_HSB		; calc

.1189	 85 74		sta $74						STA CURR_X_HSB

.118b	 60		rts						RTS 

.118c	 a6 2c		ldx $2c		SIN_COS	LDX ROT_LO

.118e	 a4 2d		ldy $2d		        LDY ROT_HI

.1190	 20 2c 0b	jsr $0b2c	        JSR SIN_FP

.1193	 86 3c		stx $3c		        STX SIN_LO ; sin_lo

.1195	 84 3d		sty $3d		        STY SIN_HI ; sin_hi

.1197	 a6 2c		ldx $2c		        LDX ROT_LO

.1199	 a4 2d		ldy $2d		        LDY ROT_HI

.119b	 20 2b 0b	jsr $0b2b	        JSR COS_FP

.119e	 86 3e		stx $3e		        STX COS_LO ; cos_lo

.11a0	 84 3f		sty $3f		        STY COS_HI ; cos_hi

.11a2	 60		rts		        RTS 

.11a3	 a4 ad		ldy $ad		PROCESS_POINT_TO_FP	LDY OBJECT_POINTER_POS 	; get point then *16 then conveert to 24bit fp

.11a5	 c8		iny							INY 

.11a6	 b1 1d		lda ($1d),y						LDA (OBJECT_POINTER),Y ; get x

.11a8	 85 cf		sta $cf							STA OBJ_PNT_X

.11aa	 c8		iny							INY 

.11ab	 b1 1d		lda ($1d),y						LDA (OBJECT_POINTER),Y ; get y

.11ad	 85 d1		sta $d1							STA OBJ_PNT_Y

.11af	 c8		iny							INY 

.11b0	 b1 1d		lda ($1d),y						LDA (OBJECT_POINTER),Y ; get z

.11b2	 85 d3		sta $d3							STA OBJ_PNT_Z

.11b4	 84 ad		sty $ad							STY OBJECT_POINTER_POS

.11b6	 20 fc 11	jsr $11fc						JSR POINT_X16

.11b9	 a5 d5		lda $d5							LDA DIFF_X_LSB

.11bb	 18		clc							CLC  			; clear

.11bc	 65 cf		adc $cf							ADC OBJ_PNT_X 	; x lsb

.11be	 a8		tay							TAY

.11bf	 a5 d6		lda $d6							LDA DIFF_X_MSB

.11c1	 65 d0		adc $d0							ADC OBJ_PNT_X_MSB

.11c3	 aa		tax							TAX 

.11c4	 a5 d7		lda $d7							LDA DIFF_X_HSB

.11c6	 69 00		adc #$00						ADC #$00

.11c8	 20 d9 0b	jsr $0bd9						JSR BIT24TOFP

.11cb	 85 52		sta $52							STA X_POS_HI

.11cd	 86 53		stx $53							STX X_POS_LO

.11cf	 a5 d8		lda $d8							LDA DIFF_Y_LSB

.11d1	 18		clc							CLC 

.11d2	 65 d1		adc $d1							ADC OBJ_PNT_Y ; y lsb

.11d4	 a8		tay							TAY

.11d5	 a5 d9		lda $d9							LDA DIFF_Y_MSB

.11d7	 65 d2		adc $d2							ADC OBJ_PNT_Y_MSB

.11d9	 aa		tax							TAX 

.11da	 a5 da		lda $da							LDA DIFF_Y_HSB

.11dc	 69 00		adc #$00						ADC #$00

.11de	 20 d9 0b	jsr $0bd9						JSR BIT24TOFP

.11e1	 85 54		sta $54							STA Y_POS_HI

.11e3	 86 55		stx $55							STX Y_POS_LO

.11e5	 a5 db		lda $db							LDA DIFF_Z_LSB

.11e7	 18		clc							CLC 

.11e8	 65 d3		adc $d3							ADC OBJ_PNT_Z ; z lsb

.11ea	 a8		tay							TAY

.11eb	 a5 dc		lda $dc							LDA DIFF_Z_MSB

.11ed	 65 d4		adc $d4							ADC OBJ_PNT_Z_MSB

.11ef	 aa		tax							TAX 

.11f0	 a5 dd		lda $dd							LDA DIFF_Z_HSB

.11f2	 69 00		adc #$00						ADC #$00

.11f4	 20 d9 0b	jsr $0bd9						JSR BIT24TOFP

.11f7	 85 56		sta $56							STA Z_POS_HI

.11f9	 86 57		stx $57							STX Z_POS_LO

.11fb	 60		rts							RTS 

.11fc					point_x16
.11fc	 a9 00		lda #$00			LDA #$00

.11fe	 85 d0		sta $d0		        STA OBJ_PNT_X_MSB

.1200	 85 d2		sta $d2		        STA OBJ_PNT_Y_MSB

.1202	 85 d4		sta $d4		        STA OBJ_PNT_Z_MSB

.1204	 a6 af		ldx $af		        LDX CURRENT_OBJECT

.1206	 a5 cf		lda $cf				LDA OBJ_PNT_X

.1208	 49 80		eor #$80	        EOR #$80 ; change the sign?

.120a	 0a		asl		        ASL 

.120b	 26 d0		rol $d0		        ROL OBJ_PNT_X_MSB ; *2

.120d	 0a		asl		        ASL 

.120e	 26 d0		rol $d0		        ROL OBJ_PNT_X_MSB ; *4

.1210	 0a		asl		        ASL 

.1211	 26 d0		rol $d0		        ROL OBJ_PNT_X_MSB ; *8

.1213	 0a		asl		        ASL 

.1214	 26 d0		rol $d0		        ROL OBJ_PNT_X_MSB ; *16

.1216	 85 cf		sta $cf		        STA OBJ_PNT_X

.1218	 a5 d1		lda $d1		        LDA OBJ_PNT_Y

.121a	 49 80		eor #$80	        EOR #$80

.121c	 0a		asl		        ASL 

.121d	 26 d2		rol $d2		        ROL OBJ_PNT_Y_MSB

.121f	 0a		asl		        ASL 

.1220	 26 d2		rol $d2		        ROL OBJ_PNT_Y_MSB

.1222	 0a		asl		        ASL 

.1223	 26 d2		rol $d2		        ROL OBJ_PNT_Y_MSB

.1225	 0a		asl		        ASL 

.1226	 26 d2		rol $d2		        ROL OBJ_PNT_Y_MSB

.1228	 85 d1		sta $d1		        STA OBJ_PNT_Y

.122a	 a5 d3		lda $d3		        LDA OBJ_PNT_Z

.122c	 49 80		eor #$80	        EOR #$80

.122e	 0a		asl		        ASL 

.122f	 26 d4		rol $d4		        ROL OBJ_PNT_Z_MSB

.1231	 0a		asl		        ASL 

.1232	 26 d4		rol $d4		        ROL OBJ_PNT_Z_MSB

.1234	 0a		asl		        ASL 

.1235	 26 d4		rol $d4		        ROL OBJ_PNT_Z_MSB

.1237	 0a		asl		        ASL 

.1238	 26 d4		rol $d4		        ROL OBJ_PNT_Z_MSB

.123a	 85 d3		sta $d3		        STA OBJ_PNT_Z

.123c	 60		rts		        RTS 

.123d					rotate_pers
.123d	 a5 3c		lda $3c					LDA 	SIN_LO

.123f	 85 22		sta $22					STA		FP_MULTIPLY_LO

.1241	 a5 3d		lda $3d					LDA 	SIN_HI

.1243	 a6 52		ldx $52					LDX		X_POS_HI

.1245	 a4 53		ldy $53					LDY		X_POS_LO

.1247	 20 ed 09	jsr $09ed				JSR		FP_MULTIPLY	; x * SIN

.124a	 84 0a		sty $0a					STy 	X_ROT_LO

.124c	 85 0b		sta $0b					STA		X_ROT_HI

.124e	 a5 3e		lda $3e					LDA 	COS_LO

.1250	 85 22		sta $22					STA		FP_MULTIPLY_LO

.1252	 a5 3f		lda $3f					LDA 	COS_HI

.1254	 a6 56		ldx $56					LDX		Z_POS_HI

.1256	 a4 57		ldy $57					LDY		Z_POS_LO

.1258	 20 ed 09	jsr $09ed				JSR		FP_MULTIPLY	; Z * COS

.125b	 84 08		sty $08					STy 	Z_ROT_LO

.125d	 85 09		sta $09					STA		Z_ROT_HI

.125f	 a6 0a		ldx $0a		        LDX X_ROT_LO

.1261	 a4 0b		ldy $0b		        LDY X_ROT_HI

.1263	 20 98 0a	jsr $0a98	        JSR s838B				; Z = (X * SIN) + (Z * COS)

.1266	 86 5c		stx $5c		        STX Z_ROTATION_LO	; Z rotation result?

.1268	 98		tya		        TYA 

.1269	 49 01		eor #$01	        EOR #$01

.126b	 85 5d		sta $5d		        STA Z_ROTATION_HI		; Z rotation result?

.126d	 29 01		and #$01	        AND #$01				; keep fp sign

.126f	 4a		lsr		        LSR 					; shift sign

.1270	 6a		ror		        ROR 					; rotate sign into top bit

.1271	 85 6e		sta $6e		        STA POINT_CLASSIFY_1	; so -ve = $80 / +ve = $00 ? = behind point classification?

.1273	 a5 3e		lda $3e					LDA 	COS_LO

.1275	 85 22		sta $22					STA		FP_MULTIPLY_LO

.1277	 a5 3f		lda $3f					LDA 	COS_HI

.1279	 a6 52		ldx $52					LDX		X_POS_HI

.127b	 a4 53		ldy $53					LDY		X_POS_LO

.127d	 20 ed 09	jsr $09ed				JSR		FP_MULTIPLY	; X * COS

.1280	 84 0a		sty $0a					STy 	X_ROT_LO

.1282	 85 0b		sta $0b					STA		X_ROT_HI

.1284	 a5 3c		lda $3c					LDA 	SIN_LO

.1286	 85 22		sta $22					STA		FP_MULTIPLY_LO

.1288	 a5 3d		lda $3d					LDA 	SIN_HI

.128a	 a6 56		ldx $56					LDX		Z_POS_HI

.128c	 a4 57		ldy $57					LDY		Z_POS_LO

.128e	 20 ed 09	jsr $09ed				JSR		FP_MULTIPLY	; Z * SIN

.1291	 84 08		sty $08					STy 	Z_ROT_LO

.1293	 49 01		eor #$01	        EOR #$01 				; -Z * SIN

.1295	 85 09		sta $09		        STA Z_ROT_HI

.1297	 a6 0a		ldx $0a		        LDX X_ROT_LO

.1299	 a4 0b		ldy $0b		        LDY X_ROT_HI

.129b	 20 98 0a	jsr $0a98	        JSR s838B 				; X = (X * COS) + (-Z * SIN)

.129e	 86 58		stx $58		        STX X_ROTATION_LO	; X rotation result?

.12a0	 98		tya		        TYA 

.12a1	 85 59		sta $59		        STA X_ROTATION_HI	; X rotation result?

.12a3	 a4 6e		ldy $6e		        LDY POINT_CLASSIFY_1	; z classification? (see #1 above) 0 is infront - !0 is behind

.12a5	 d0 2a		bne $12d1	        BNE bAA54				; behind?

.12a7	 85 09		sta $09		        STA ab09

.12a9	 a5 5c		lda $5c				LDA		Z_ROTATION_LO

.12ab	 85 22		sta $22				STA		FP_DIVIDE_LO

.12ad	 a6 09		ldx $09				LDX		ab09

.12af	 a4 08		ldy $08				LDY		ab08

.12b1	 a5 5d		lda $5d				LDA		Z_ROTATION_HI

.12b3	 20 d1 09	jsr $09d1			JSR		FP_DIVIDE

.12b6	 86 5e		stx $5e				STX		ab5E

.12b8	 85 5f		sta $5f				STA		ab5F

.12ba	 18		clc		        CLC 

.12bb	 65 21		adc $21		        ADC ab21

.12bd	 70 0e		bvs $12cd	        BVS bAA50

.12bf	 a8		tay		        TAY 

.12c0	 20 41 0b	jsr $0b41	        JSR FPTO8BIT

.12c3	 b0 08		bcs $12cd	        BCS bAA50

.12c5	 69 50		adc #$50	        ADC #SCR_HOR_MID

.12c7	 85 6a		sta $6a		        STA LINE_START_HOR

.12c9	 c9 a0		cmp #$a0	        CMP #CLIP_TEST_RIGHT ; clip test

.12cb	 90 04		bcc $12d1	        BCC bAA54 ; off right

.12cd	 a9 01		lda #$01	bAA50   LDA #PNT_OFF_RIGHT ; right clip

.12cf	 85 6e		sta $6e		        STA POINT_CLASSIFY_1

.12d1	 a6 54		ldx $54		bAA54   LDX Y_POS_HI

.12d3	 a5 55		lda $55		        LDA Y_POS_LO

.12d5	 49 01		eor #$01	        EOR #$01

.12d7	 a8		tay		        TAY 

.12d8	 86 08		stx $08		        STX ab08

.12da	 84 09		sty $09		        STY ab09

.12dc	 86 5a		stx $5a		jA8E9   STX Y_ROTATION_LO

.12de	 98		tya		        TYA 

.12df	 18		clc		        CLC 

.12e0	 69 04		adc #$04	        ADC #$04

.12e2	 70 01		bvs $12e5	        BVS bA8F2

.12e4	 a8		tay					TAY 

.12e5	 84 5b		sty $5b		bA8F2   STY Y_ROTATION_HI

.12e7	 84 09		sty $09		        STY ab09

.12e9	 a5 6e		lda $6e		        LDA POINT_CLASSIFY_1

.12eb	 30 2a		bmi $1317	        BMI bA933

.12ed	 a5 5c		lda $5c				LDA		Z_ROTATION_LO

.12ef	 85 22		sta $22				STA		FP_DIVIDE_LO

.12f1	 a6 09		ldx $09				LDX		ab09

.12f3	 a4 08		ldy $08				LDY		ab08

.12f5	 a5 5d		lda $5d				LDA		Z_ROTATION_HI

.12f7	 20 d1 09	jsr $09d1			JSR		FP_DIVIDE

.12fa	 86 60		stx $60				STX		ab60

.12fc	 85 61		sta $61				STA		ab61

.12fe	 18		clc		        CLC 

.12ff	 65 21		adc $21		        ADC ab21

.1301	 70 0e		bvs $1311	        BVS bA92D

.1303	 a8		tay					TAY 

.1304	 20 41 0b	jsr $0b41				JSR FPTO8BIT

.1307	 b0 08		bcs $1311	        BCS bA92D

.1309	 69 44		adc #$44				ADC #SCR_VER_MID

.130b	 85 6b		sta $6b					STA LINE_START_VER

.130d	 c9 88		cmp #$88				CMP #CLIP_TEST_BOTTOM ; clip test

.130f	 90 06		bcc $1317				BCC bA933

.1311	 a5 6e		lda $6e		bA92D   LDA POINT_CLASSIFY_1

.1313	 09 02		ora #$02	        ORA #PNT_OFF_BOTTOM

.1315	 85 6e		sta $6e		        STA POINT_CLASSIFY_1

.1317	 a4 19		ldy $19		bA933   LDY POINT_LINE_COUNT						; point position?

.1319	 a5 6e		lda $6e		        LDA POINT_CLASSIFY_1

.131b	 99 00 07	sta $0700,y	        STA POINT_CLASSIFICATION,Y

.131e	 30 1e		bmi $133e	        BMI bA95A					; behind

.1320	 a5 5e		lda $5e					LDA ab5E

.1322	 99 00 06	sta $0600,y				STA PERS_POINT_TAB_2,Y	; pers point?

.1325	 a5 5f		lda $5f					LDA ab5F

.1327	 99 c0 03	sta $03c0,y				STA PERS_POINT_TAB_3,Y	; pers point?

.132a	 a5 60		lda $60					LDA ab60

.132c	 99 a0 27	sta $27a0,y				STA PERS_POINT_TAB_4,Y	; pers point?

.132f	 a5 61		lda $61					LDA ab61

.1331	 99 40 06	sta $0640,y				STA PERS_POINT_TAB_5,Y	; pers point?

.1334	 a5 6a		lda $6a					LDA LINE_START_HOR 			; get perspective ver

.1336	 99 80 06	sta $0680,y				STA PERS_HOR,Y 				; put perspective ver

.1339	 a5 6b		lda $6b					LDA LINE_START_VER 			; get perspective hor

.133b	 99 c0 06	sta $06c0,y				STA PERS_VER,Y 				; put perspective hor

.133e	 a5 58		lda $58		bA95A   LDA X_ROTATION_LO

.1340	 99 00 01	sta $0100,y	        STA X_ROT_TAB_LO,Y 	; X rotation result x pos lo

.1343	 a5 59		lda $59		        LDA X_ROTATION_HI

.1345	 99 40 01	sta $0140,y	        STA X_ROT_TAB_HI,Y 	; X rotation result x pos hi

.1348	 a5 5a		lda $5a		        LDA Y_ROTATION_LO

.134a	 99 80 01	sta $0180,y	        STA Y_ROT_TAB_LO,Y	; rotation result y pos lo

.134d	 a5 5b		lda $5b		        LDA Y_ROTATION_HI

.134f	 99 c0 02	sta $02c0,y	        STA Y_ROT_TAB_HI,Y	; rotation result y pos hi

.1352	 a5 5c		lda $5c		        LDA Z_ROTATION_LO

.1354	 99 40 03	sta $0340,y	        STA Z_ROT_TAB_LO,Y	; rotation result z pos lo

.1357	 a5 5d		lda $5d		        LDA Z_ROTATION_HI

.1359	 99 80 03	sta $0380,y	        STA Z_ROT_TAB_HI,Y	; rotation result z pos hi

.135c	 60		rts		        RTS 

.135d	 e8		inx		LINE_DRAW_0_LOOP  	INX 

.135e	 a5 08		lda $08							LDA LINE_FRACTION_ab08

.1360	 65 66		adc $66							ADC LINE_INC

.1362	 85 08		sta $08							STA LINE_FRACTION_ab08

.1364	 90 05		bcc $136b						BCC LINE_DRAW_0

.1366	 c8		iny								INY 

.1367	 c0 88		cpy #$88							CPY #CLIP_TEST_BOTTOM

.1369	 f0 20		beq $138b							BEQ LINE_DRAW_0_EXIT

.136b	 b9 90 24	lda $2490,y	LINE_DRAW_0			LDA VER_POS_LO,Y ; LINE-DRAW-START

.136e	 85 02		sta $02							STA SCREEN_POS_LO

.1370	 8a		txa							TXA 

.1371	 0a		asl							ASL 

.1372	 b9 00 24	lda $2400,y						LDA VER_POS_HI,Y

.1375	 65 25		adc $25							ADC SCREEN_BANK

.1377	 85 03		sta $03							STA SCREEN_POS_HI

.1379	 84 06		sty $06							STY ab06

.137b	 bc 20 25	ldy $2520,x						LDY HOR_SCR_POS,X

.137e	 b1 02		lda ($02),y						LDA (SCREEN_POS_PTR),Y

.1380	 3d 00 27	and $2700,x	LINE_DRAW_0_TYPE	AND PIXEL_POS,X

.1383	 91 02		sta ($02),y						STA (SCREEN_POS_PTR),Y

.1385	 a4 06		ldy $06							LDY ab06

.1387	 e4 6c		cpx $6c							CPX ab6C

.1389	 d0 d2		bne $135d						BNE LINE_DRAW_0_LOOP

.138b	 60		rts		LINE_DRAW_0_EXIT   RTS 

.138c	 c8		iny		LINE_DRAW_1_LOOP   INY  ; LINE-DRAW

.138d	 a5 08		lda $08							LDA LINE_FRACTION_ab08

.138f	 65 66		adc $66							ADC LINE_INC

.1391	 85 08		sta $08							STA LINE_FRACTION_ab08

.1393	 90 05		bcc $139a						BCC LINE_DRAW_1

.1395	 e8		inx								INX 

.1396	 e0 a0		cpx #$a0							CPX #CLIP_TEST_RIGHT ; clip test

.1398	 f0 20		beq $13ba							BEQ LINE_DRAW_1_EXIT

.139a	 b9 90 24	lda $2490,y	LINE_DRAW_1			LDA VER_POS_LO,Y ; LINE-DRAW-START

.139d	 85 02		sta $02							STA SCREEN_POS_LO

.139f	 8a		txa							TXA 

.13a0	 0a		asl							ASL 

.13a1	 b9 00 24	lda $2400,y						LDA VER_POS_HI,Y

.13a4	 65 25		adc $25							ADC SCREEN_BANK

.13a6	 85 03		sta $03							STA SCREEN_POS_HI

.13a8	 84 06		sty $06							STY ab06

.13aa	 bc 20 25	ldy $2520,x						LDY HOR_SCR_POS,X

.13ad	 b1 02		lda ($02),y						LDA (SCREEN_POS_PTR),Y

.13af	 3d 00 27	and $2700,x	LINE_DRAW_1_TYPE	AND PIXEL_POS,X

.13b2	 91 02		sta ($02),y						STA (SCREEN_POS_PTR),Y

.13b4	 a4 06		ldy $06							LDY ab06

.13b6	 c4 6d		cpy $6d							CPY ab6D

.13b8	 d0 d2		bne $138c						BNE LINE_DRAW_1_LOOP ; GOTO LINE-DRAW

.13ba	 60		rts		LINE_DRAW_1_EXIT   	RTS 

.13bb	 c8		iny		LINE_DRAW_2_LOOP   	INY  ; LINE-DRAW

.13bc	 a5 08		lda $08							LDA LINE_FRACTION_ab08

.13be	 65 66		adc $66							ADC LINE_INC

.13c0	 85 08		sta $08							STA LINE_FRACTION_ab08

.13c2	 90 05		bcc $13c9						BCC LINE_DRAW_2

.13c4	 ca		dex								DEX 

.13c5	 e0 ff		cpx #$ff							CPX #$FF

.13c7	 f0 20		beq $13e9							BEQ LINE_DRAW_2_EXIT

.13c9	 b9 90 24	lda $2490,y	LINE_DRAW_2			LDA VER_POS_LO,Y ; LINE-DRAW-START

.13cc	 85 02		sta $02							STA SCREEN_POS_LO

.13ce	 8a		txa							TXA 

.13cf	 0a		asl							ASL 

.13d0	 b9 00 24	lda $2400,y						LDA VER_POS_HI,Y

.13d3	 65 25		adc $25							ADC SCREEN_BANK

.13d5	 85 03		sta $03							STA SCREEN_POS_HI

.13d7	 84 06		sty $06							STY ab06

.13d9	 bc 20 25	ldy $2520,x						LDY HOR_SCR_POS,X

.13dc	 b1 02		lda ($02),y						LDA (SCREEN_POS_PTR),Y

.13de	 3d 00 27	and $2700,x	LINE_DRAW_2_TYPE	AND PIXEL_POS,X

.13e1	 91 02		sta ($02),y						STA (SCREEN_POS_PTR),Y

.13e3	 a4 06		ldy $06							LDY ab06

.13e5	 c4 6d		cpy $6d							CPY ab6D

.13e7	 d0 d2		bne $13bb						BNE LINE_DRAW_2_LOOP ; GOTO LINE-DRAW

.13e9	 60		rts		LINE_DRAW_2_EXIT   	RTS 

.13ea	 ca		dex		LINE_DRAW_3_LOOP  	DEX ; LINE-DRAW

.13eb	 a5 08		lda $08							LDA LINE_FRACTION_ab08

.13ed	 e5 66		sbc $66							SBC LINE_INC

.13ef	 85 08		sta $08							STA LINE_FRACTION_ab08

.13f1	 b0 05		bcs $13f8						BCS LINE_DRAW_3

.13f3	 c8		iny								INY 

.13f4	 c0 88		cpy #$88							CPY #CLIP_TEST_BOTTOM

.13f6	 f0 20		beq $1418							BEQ LINE_DRAW_3_EXIT

.13f8	 b9 90 24	lda $2490,y	LINE_DRAW_3			LDA VER_POS_LO,Y ; LINE-DRAW-START

.13fb	 85 02		sta $02							STA SCREEN_POS_LO

.13fd	 8a		txa							TXA 

.13fe	 0a		asl							ASL 

.13ff	 b9 00 24	lda $2400,y						LDA VER_POS_HI,Y

.1402	 65 25		adc $25							ADC SCREEN_BANK

.1404	 85 03		sta $03							STA SCREEN_POS_HI

.1406	 84 06		sty $06							STY ab06

.1408	 bc 20 25	ldy $2520,x						LDY HOR_SCR_POS,X

.140b	 b1 02		lda ($02),y						LDA (SCREEN_POS_PTR),Y

.140d	 3d 00 27	and $2700,x	LINE_DRAW_3_TYPE	AND PIXEL_POS,X

.1410	 91 02		sta ($02),y						STA (SCREEN_POS_PTR),Y

.1412	 a4 06		ldy $06							LDY ab06

.1414	 e4 6c		cpx $6c							CPX ab6C

.1416	 d0 d2		bne $13ea						BNE LINE_DRAW_3_LOOP ; GOTO LINE-DRAW

.1418	 60		rts		LINE_DRAW_3_EXIT   	RTS 

.1419	 ca		dex		LINE_DRAW_4_LOOP   	DEX  ; LINE-DRAW

.141a	 a5 08		lda $08							LDA LINE_FRACTION_ab08

.141c	 e5 66		sbc $66							SBC LINE_INC

.141e	 85 08		sta $08							STA LINE_FRACTION_ab08

.1420	 b0 05		bcs $1427						BCS LINE_DRAW_4

.1422	 88		dey								DEY 

.1423	 c0 ff		cpy #$ff							CPY #$FF

.1425	 f0 20		beq $1447							BEQ LINE_DRAW_4_EXIT

.1427	 b9 90 24	lda $2490,y	LINE_DRAW_4			LDA VER_POS_LO,Y ; LINE-DRAW-START

.142a	 85 02		sta $02							STA SCREEN_POS_LO

.142c	 8a		txa							TXA 

.142d	 0a		asl							ASL 

.142e	 b9 00 24	lda $2400,y						LDA VER_POS_HI,Y

.1431	 65 25		adc $25							ADC SCREEN_BANK

.1433	 85 03		sta $03							STA SCREEN_POS_HI

.1435	 84 06		sty $06							STY ab06

.1437	 bc 20 25	ldy $2520,x						LDY HOR_SCR_POS,X

.143a	 b1 02		lda ($02),y						LDA (SCREEN_POS_PTR),Y

.143c	 3d 00 27	and $2700,x	LINE_DRAW_4_TYPE  	AND PIXEL_POS,X

.143f	 91 02		sta ($02),y						STA (SCREEN_POS_PTR),Y

.1441	 a4 06		ldy $06							LDY ab06

.1443	 e4 6c		cpx $6c							CPX ab6C

.1445	 d0 d2		bne $1419						BNE LINE_DRAW_4_LOOP ; GOTO LINE-DRAW

.1447	 60		rts		LINE_DRAW_4_EXIT   	RTS 

.1448	 88		dey		LINE_DRAW_5_LOOP   	DEY  ; LINE-DRAW

.1449	 a5 08		lda $08							LDA LINE_FRACTION_ab08

.144b	 65 66		adc $66							ADC LINE_INC

.144d	 85 08		sta $08							STA LINE_FRACTION_ab08

.144f	 90 05		bcc $1456						BCC LINE_DRAW_5

.1451	 ca		dex								DEX 

.1452	 e0 ff		cpx #$ff							CPX #$FF

.1454	 f0 20		beq $1476							BEQ LINE_DRAW_5_EXIT

.1456	 b9 90 24	lda $2490,y	LINE_DRAW_5			LDA VER_POS_LO,Y ; LINE-DRAW-START

.1459	 85 02		sta $02							STA SCREEN_POS_LO

.145b	 8a		txa							TXA 

.145c	 0a		asl							ASL 

.145d	 b9 00 24	lda $2400,y						LDA VER_POS_HI,Y

.1460	 65 25		adc $25							ADC SCREEN_BANK

.1462	 85 03		sta $03							STA SCREEN_POS_HI

.1464	 84 06		sty $06							STY ab06

.1466	 bc 20 25	ldy $2520,x						LDY HOR_SCR_POS,X

.1469	 b1 02		lda ($02),y						LDA (SCREEN_POS_PTR),Y

.146b	 3d 00 27	and $2700,x	LINE_DRAW_5_TYPE  	AND PIXEL_POS,X

.146e	 91 02		sta ($02),y						STA (SCREEN_POS_PTR),Y

.1470	 a4 06		ldy $06							LDY ab06

.1472	 c4 6d		cpy $6d							CPY ab6D

.1474	 d0 d2		bne $1448						BNE LINE_DRAW_5_LOOP ; GOTO LINE-DRAW

.1476	 60		rts		LINE_DRAW_5_EXIT  	RTS

.1477	 88		dey		LINE_DRAW_6_LOOP   	DEY  ; LINE-DRAW

.1478	 a5 08		lda $08							LDA LINE_FRACTION_ab08

.147a	 e5 66		sbc $66							SBC LINE_INC

.147c	 85 08		sta $08							STA LINE_FRACTION_ab08

.147e	 b0 05		bcs $1485						BCS LINE_DRAW_6

.1480	 e8		inx								INX             ; NEXT VER

.1481	 e0 a0		cpx #$a0							CPX #$A0        ; OFF BOTTOM

.1483	 f0 20		beq $14a5							BEQ LINE_DRAW_6_EXIT       ; EXIT

.1485	 b9 90 24	lda $2490,y	LINE_DRAW_6			LDA VER_POS_LO,Y ; LINE-DRAW-START

.1488	 85 02		sta $02							STA SCREEN_POS_LO

.148a	 8a		txa							TXA 

.148b	 0a		asl							ASL 

.148c	 b9 00 24	lda $2400,y						LDA VER_POS_HI,Y

.148f	 65 25		adc $25							ADC SCREEN_BANK

.1491	 85 03		sta $03							STA SCREEN_POS_HI

.1493	 84 06		sty $06							STY ab06

.1495	 bc 20 25	ldy $2520,x						LDY HOR_SCR_POS,X

.1498	 b1 02		lda ($02),y						LDA (SCREEN_POS_PTR),Y

.149a	 3d 00 27	and $2700,x	LINE_DRAW_6_TYPE	AND PIXEL_POS,X

.149d	 91 02		sta ($02),y						STA (SCREEN_POS_PTR),Y

.149f	 a4 06		ldy $06							LDY ab06

.14a1	 c4 6d		cpy $6d							CPY ab6D

.14a3	 d0 d2		bne $1477						BNE LINE_DRAW_6_LOOP ; GOTO LINE-DRAW 

.14a5	 60		rts		LINE_DRAW_6_EXIT	RTS 

.14a6	 e8		inx		LINE_DRAW_7_LOOP   	INX	; LINE-DRAW

.14a7	 a5 08		lda $08							LDA	LINE_FRACTION_ab08

.14a9	 65 66		adc $66							ADC	LINE_INC

.14ab	 85 08		sta $08							STA	LINE_FRACTION_ab08

.14ad	 90 05		bcc $14b4						BCC	LINE_DRAW_7

.14af	 88		dey								DEY 

.14b0	 c0 ff		cpy #$ff							CPY	#$FF

.14b2	 f0 20		beq $14d4							BEQ	LINE_DRAW_7_EXIT

.14b4	 b9 90 24	lda $2490,y	LINE_DRAW_7			LDA	VER_POS_LO,Y ; LINE-DRAW-START

.14b7	 85 02		sta $02							STA	SCREEN_POS_LO

.14b9	 8a		txa							TXA 

.14ba	 0a		asl							ASL 

.14bb	 b9 00 24	lda $2400,y						LDA VER_POS_HI,Y

.14be	 65 25		adc $25							ADC SCREEN_BANK

.14c0	 85 03		sta $03							STA SCREEN_POS_HI

.14c2	 84 06		sty $06							STY ab06

.14c4	 bc 20 25	ldy $2520,x						LDY HOR_SCR_POS,X

.14c7	 b1 02		lda ($02),y						LDA (SCREEN_POS_PTR),Y

.14c9	 3d 00 27	and $2700,x	LINE_DRAW_7_TYPE	AND PIXEL_POS,X

.14cc	 91 02		sta ($02),y						STA (SCREEN_POS_PTR),Y

.14ce	 a4 06		ldy $06							LDY ab06

.14d0	 e4 6c		cpx $6c							CPX ab6C

.14d2	 d0 d2		bne $14a6						BNE LINE_DRAW_7_LOOP ; GOTO LINE DRAW

.14d4	 60		rts		LINE_DRAW_7_EXIT   	RTS 

.14d5	 a9 27		lda #$27	COLOUR_SETUP_WHITE	LDA #>PIXEL_POS ; #$77 ; todo - currently hardcoded - needs to point to high value of and_pixel_table #>PIXEL_POS1

.14d7	 a2 3d		ldx #$3d						LDX #$3D

.14d9	 d0 04		bne $14df						BNE COLOUR_SETUP ; JUMP

.14db	 a9 56		lda #$56	COLOUR_SETUP_BLACK	LDA #$56

.14dd	 a2 1d		ldx #$1d						LDX #$1D

.14df	 8d 82 13	sta $1382	COLOUR_SETUP		STA LINE_DRAW_0_TYPE +2

.14e2	 8d b1 13	sta $13b1						STA LINE_DRAW_1_TYPE +2

.14e5	 8d e0 13	sta $13e0						STA LINE_DRAW_2_TYPE +2

.14e8	 8d 0f 14	sta $140f						STA LINE_DRAW_3_TYPE +2

.14eb	 8d 3e 14	sta $143e						STA LINE_DRAW_4_TYPE +2

.14ee	 8d 6d 14	sta $146d						STA LINE_DRAW_5_TYPE +2

.14f1	 8d 9c 14	sta $149c						STA LINE_DRAW_6_TYPE +2

.14f4	 8d cb 14	sta $14cb						STA LINE_DRAW_7_TYPE +2

.14f7	 8d a9 0c	sta $0ca9						STA LINE_DRAW_8_TYPE +2

.14fa	 8e 80 13	stx $1380						STX LINE_DRAW_0_TYPE

.14fd	 8e af 13	stx $13af						STX LINE_DRAW_1_TYPE

.1500	 8e de 13	stx $13de						STX LINE_DRAW_2_TYPE

.1503	 8e 0d 14	stx $140d						STX LINE_DRAW_3_TYPE

.1506	 8e 3c 14	stx $143c						STX LINE_DRAW_4_TYPE

.1509	 8e 6b 14	stx $146b						STX LINE_DRAW_5_TYPE

.150c	 8e 9a 14	stx $149a						STX LINE_DRAW_6_TYPE

.150f	 8e c9 14	stx $14c9						STX LINE_DRAW_7_TYPE

.1512	 8e a7 0c	stx $0ca7						STX LINE_DRAW_8_TYPE

.1515	 60		rts							RTS

.1516	 a9 e0		lda #$e0	DRAW_SCREEN			LDA	#$E0

.1518	 cd 12 d0	cmp $d012	WAIT_RASTER			CMP	$D012

.151b	 d0 fb		bne $1518						BNE WAIT_RASTER

.151d	 e6 24		inc $24				INC	SCREEN_FLIP	; INCREMENT SCREEN FLIP

.151f	 a5 24		lda $24		        LDA	SCREEN_FLIP	; GET SCREEN FLIP

.1521	 4a		lsr		        LSR 				; SHIFT BIT0 INTO CARRY

.1522	 b0 0a		bcs $152e	        BCS	SCRN_2			; CARRY SET ?

.1524	 a9 40		lda #$40			LDA	#SCREEN_0			; SCREEN 1 OFFSET

.1526	 85 25		sta $25				STA	SCREEN_BANK		; SCREEN 1 OFFSET

.1528	 a9 78		lda #$78			LDA	#$78

.152a	 85 c7		sta $c7				STA	VIC_SCREEN_BANK

.152c	 d0 08		bne $1536			BNE	SCNCLR			; JUMP

.152e	 a9 60		lda #$60	SCRN_2  LDA	#SCREEN_1		; SCREEN 2 OFFSET

.1530	 85 25		sta $25		        STA	SCREEN_BANK		; SCREEN 2 OFFSET

.1532	 a9 70		lda #$70	        LDA	#$70

.1534	 85 c7		sta $c7		        STA	VIC_SCREEN_BANK

.1536	 a9 a5		lda #$a5	SCNCLR  LDA #$A5

.1538	 a2 88		ldx #$88	        LDX #136

.153a	 a4 25		ldy $25		        LDY SCREEN_BANK

.153c	 c0 60		cpy #$60	        CPY #SCREEN_1

.153e	 f0 7c		beq $15bc	        BEQ CLSN1LP

.1540	 9d ff 3f	sta $3fff,x	CLSN0LP	STA SCREEN0-1+(136*00),X ; 1

.1543	 9d 87 40	sta $4087,x	        STA SCREEN0-1+(136*01),X ;f40F7,X ; 2

.1546	 9d 0f 41	sta $410f,x	        STA SCREEN0-1+(136*02),X ;f41EF,X ;3

.1549	 9d 97 41	sta $4197,x	        STA SCREEN0-1+(136*03),X ;f42E7,X ;4

.154c	 9d 1f 42	sta $421f,x	        STA SCREEN0-1+(136*04),X ;f43DF,X ;5

.154f	 9d a7 42	sta $42a7,x	        STA SCREEN0-1+(136*05),X ;f44D7,X ;6

.1552	 9d 2f 43	sta $432f,x	        STA SCREEN0-1+(136*06),X ;f45CF,X ;7

.1555	 9d b7 43	sta $43b7,x	        STA SCREEN0-1+(136*07),X ;f46C7,X ;8

.1558	 9d 3f 44	sta $443f,x	        STA SCREEN0-1+(136*08),X ;f47BF,X ;9

.155b	 9d c7 44	sta $44c7,x	        STA SCREEN0-1+(136*09),X ;f48B7,X ;10

.155e	 9d 4f 45	sta $454f,x	        STA SCREEN0-1+(136*10),X ;f49AF,X ;11

.1561	 9d d7 45	sta $45d7,x	        STA SCREEN0-1+(136*11),X ;f4AA7,X ;12

.1564	 9d 5f 46	sta $465f,x	        STA SCREEN0-1+(136*12),X ;f4B9F,X ;13

.1567	 9d e7 46	sta $46e7,x	        STA SCREEN0-1+(136*13),X ;f4C97,X ;14

.156a	 9d 6f 47	sta $476f,x	        STA SCREEN0-1+(136*14),X ;f4D8F,X ;15

.156d	 9d f7 47	sta $47f7,x	        STA SCREEN0-1+(136*15),X ;f4E87,X ;16

.1570	 9d 7f 48	sta $487f,x	        STA SCREEN0-1+(136*16),X ;f4F7F,X ;17

.1573	 9d 07 49	sta $4907,x	        STA SCREEN0-1+(136*17),X ;f5077,X ;18

.1576	 9d 8f 49	sta $498f,x	        STA SCREEN0-1+(136*18),X ;f516F,X ;19

.1579	 9d 17 4a	sta $4a17,x	        STA SCREEN0-1+(136*19),X ;f5267,X ;20

.157c	 9d 9f 4a	sta $4a9f,x	        STA SCREEN0-1+(136*20),X ;f535F,X ;21

.157f	 9d 27 4b	sta $4b27,x	        STA SCREEN0-1+(136*21),X ;f5447,X ;22

.1582	 9d af 4b	sta $4baf,x			sta SCREEN0-1+(136*22),X ;f5447,x ;23

.1585	 9d 37 4c	sta $4c37,x			sta SCREEN0-1+(136*23),X ;f5447,x ;24

.1588	 9d bf 4c	sta $4cbf,x			sta SCREEN0-1+(136*24),X ;f5447,x ;25

.158b	 9d 47 4d	sta $4d47,x			sta SCREEN0-1+(136*25),X ;f5447,x ;26

.158e	 9d cf 4d	sta $4dcf,x			sta SCREEN0-1+(136*26),X ;f5447,x ;27

.1591	 9d 57 4e	sta $4e57,x			sta SCREEN0-1+(136*27),X ;f5447,x ;28

.1594	 9d df 4e	sta $4edf,x			sta SCREEN0-1+(136*28),X ;f5447,x ;29

.1597	 9d 67 4f	sta $4f67,x			sta SCREEN0-1+(136*29),X ;f5447,x ;30

.159a	 9d ef 4f	sta $4fef,x			sta SCREEN0-1+(136*30),X ;f5447,x ;31

.159d	 9d 77 50	sta $5077,x			sta SCREEN0-1+(136*31),X ;f5447,x ;32

.15a0	 9d ff 50	sta $50ff,x			sta SCREEN0-1+(136*32),X ;f5447,x ;33

.15a3	 9d 87 51	sta $5187,x			sta SCREEN0-1+(136*33),X ;f5447,x ;34

.15a6	 9d 0f 52	sta $520f,x			sta SCREEN0-1+(136*34),X ;f5447,x ;35

.15a9	 9d 97 52	sta $5297,x			sta SCREEN0-1+(136*35),X ;f5447,x ;36

.15ac	 9d 1f 53	sta $531f,x			sta SCREEN0-1+(136*36),X ;f5447,x ;37

.15af	 9d a7 53	sta $53a7,x			sta SCREEN0-1+(136*37),X ;f5447,x ;38

.15b2	 9d 2f 54	sta $542f,x			sta SCREEN0-1+(136*38),X ;f5447,x ;39

.15b5	 9d b7 54	sta $54b7,x			sta SCREEN0-1+(136*39),X ;f5447,x ;40

.15b8	 ca		dex		        DEX 

.15b9	 d0 85		bne $1540	        BNE CLSN0LP

.15bb	 60		rts		        RTS 

.15bc	 9d ff 5f	sta $5fff,x	CLSN1LP	STA SCREEN1-1+(136*00),X ; 1

.15bf	 9d 87 60	sta $6087,x	        STA SCREEN1-1+(136*01),X ;f40F7,X ; 2

.15c2	 9d 0f 61	sta $610f,x	        STA SCREEN1-1+(136*02),X ;f41EF,X ;3

.15c5	 9d 97 61	sta $6197,x	        STA SCREEN1-1+(136*03),X ;f42E7,X ;4

.15c8	 9d 1f 62	sta $621f,x	        STA SCREEN1-1+(136*04),X ;f43DF,X ;5

.15cb	 9d a7 62	sta $62a7,x	        STA SCREEN1-1+(136*05),X ;f44D7,X ;6

.15ce	 9d 2f 63	sta $632f,x	        STA SCREEN1-1+(136*06),X ;f45CF,X ;7

.15d1	 9d b7 63	sta $63b7,x	        STA SCREEN1-1+(136*07),X ;f46C7,X ;8

.15d4	 9d 3f 64	sta $643f,x	        STA SCREEN1-1+(136*08),X ;f47BF,X ;9

.15d7	 9d c7 64	sta $64c7,x	        STA SCREEN1-1+(136*09),X ;f48B7,X ;10

.15da	 9d 4f 65	sta $654f,x	        STA SCREEN1-1+(136*10),X ;f49AF,X ;11

.15dd	 9d d7 65	sta $65d7,x	        STA SCREEN1-1+(136*11),X ;f4AA7,X ;12

.15e0	 9d 5f 66	sta $665f,x	        STA SCREEN1-1+(136*12),X ;f4B9F,X ;13

.15e3	 9d e7 66	sta $66e7,x	        STA SCREEN1-1+(136*13),X ;f4C97,X ;14

.15e6	 9d 6f 67	sta $676f,x	        STA SCREEN1-1+(136*14),X ;f4D8F,X ;15

.15e9	 9d f7 67	sta $67f7,x	        STA SCREEN1-1+(136*15),X ;f4E87,X ;16

.15ec	 9d 7f 68	sta $687f,x	        STA SCREEN1-1+(136*16),X ;f4F7F,X ;17

.15ef	 9d 07 69	sta $6907,x	        STA SCREEN1-1+(136*17),X ;f5077,X ;18

.15f2	 9d 8f 69	sta $698f,x	        STA SCREEN1-1+(136*18),X ;f516F,X ;19

.15f5	 9d 17 6a	sta $6a17,x	        STA SCREEN1-1+(136*19),X ;f5267,X ;20

.15f8	 9d 9f 6a	sta $6a9f,x	        STA SCREEN1-1+(136*20),X ;f535F,X ;21

.15fb	 9d 27 6b	sta $6b27,x	        STA SCREEN1-1+(136*21),X ;f5447,X ;22

.15fe	 9d af 6b	sta $6baf,x			sta SCREEN1-1+(136*22),X ;f5447,x ;23

.1601	 9d 37 6c	sta $6c37,x			sta SCREEN1-1+(136*23),X ;f5447,x ;24

.1604	 9d bf 6c	sta $6cbf,x			sta SCREEN1-1+(136*24),X ;f5447,x ;25

.1607	 9d 47 6d	sta $6d47,x			sta SCREEN1-1+(136*25),X ;f5447,x ;26

.160a	 9d cf 6d	sta $6dcf,x			sta SCREEN1-1+(136*26),X ;f5447,x ;27

.160d	 9d 57 6e	sta $6e57,x			sta SCREEN1-1+(136*27),X ;f5447,x ;28

.1610	 9d df 6e	sta $6edf,x			sta SCREEN1-1+(136*28),X ;f5447,x ;29

.1613	 9d 67 6f	sta $6f67,x			sta SCREEN1-1+(136*29),X ;f5447,x ;30

.1616	 9d ef 6f	sta $6fef,x			sta SCREEN1-1+(136*30),X ;f5447,x ;31

.1619	 9d 77 70	sta $7077,x			sta SCREEN1-1+(136*31),X ;f5447,x ;32

.161c	 9d ff 70	sta $70ff,x			sta SCREEN1-1+(136*32),X ;f5447,x ;33

.161f	 9d 87 71	sta $7187,x			sta SCREEN1-1+(136*33),X ;f5447,x ;34

.1622	 9d 0f 72	sta $720f,x			sta SCREEN1-1+(136*34),X ;f5447,x ;35

.1625	 9d 97 72	sta $7297,x			sta SCREEN1-1+(136*35),X ;f5447,x ;36

.1628	 9d 1f 73	sta $731f,x			sta SCREEN1-1+(136*36),X ;f5447,x ;37

.162b	 9d a7 73	sta $73a7,x			sta SCREEN1-1+(136*37),X ;f5447,x ;38

.162e	 9d 2f 74	sta $742f,x			sta SCREEN1-1+(136*38),X ;f5447,x ;39

.1631	 9d b7 74	sta $74b7,x			sta SCREEN1-1+(136*39),X ;f5447,x ;40

.1634	 ca		dex		        DEX 

.1635	 d0 85		bne $15bc	        BNE CLSN1LP

.1637	 60		rts		        RTS 

.1638					read_joystick_keyboard
.1638	 a9 00		lda #$00	        LDA #$00

.163a	 8d 02 dc	sta $dc02	        STA $DC02    ;CIA1: Data Direction Register A

.163d	 af 00 dc	lax $dc00	        LAX $DC00    ;CIA1: Data Port Register A into A and X

.1640	 29 0f		and #$0f	        AND #$0F

.1642	 85 80		sta $80		        STA JOYSTICK_MOVEMENT ; JOYSTICK MOVEMENT

.1644	 8a		txa		        TXA 

.1645	 4a		lsr		        LSR 

.1646	 4a		lsr		        LSR 

.1647	 4a		lsr		        LSR 

.1648	 4a		lsr		        LSR 

.1649	 29 01		and #$01	        AND #$01

.164b	 d0 0b		bne $1658			bne rjk

.164d	 ad 02 1a	lda $1a02				lda OBJECTS_TO_DRAW+1

.1650	 18		clc					clc

.1651	 69 01		adc #$01				adc #1

.1653	 29 1f		and #$1f				and #31

.1655	 8d 02 1a	sta $1a02				sta OBJECTS_TO_DRAW+1

.1658	 60		rts		rjk		RTS 

.1659	 b9 f1 16	lda $16f1,y	HEXCHAR		LDA		HEX0,Y

.165c	 9d cd ab	sta $abcd,x	HEX_NUMBER0	STA		$ABCD,X

.165f	 b9 01 17	lda $1701,y				LDA		HEX1,Y

.1662	 9d cd ab	sta $abcd,x	HEX_NUMBER1	STA		$ABCD,X

.1665	 b9 11 17	lda $1711,y				LDA		HEX2,Y

.1668	 9d cd ab	sta $abcd,x	HEX_NUMBER2	STA		$ABCD,X

.166b	 b9 21 17	lda $1721,y				LDA		HEX3,Y

.166e	 9d cd ab	sta $abcd,x	HEX_NUMBER3	STA		$ABCD,X

.1671	 b9 31 17	lda $1731,y				LDA		HEX4,Y

.1674	 9d cd ab	sta $abcd,x	HEX_NUMBER4	STA		$ABCD,X

.1677	 60		rts					RTS

.1678					hex16
.1678	 84 20		sty $20					STY		REGY

.167a	 86 0f		stx $0f					STX		REGX		

.167c	 a2 00		ldx #$00				LDX		#0

.167e	 20 8b 16	jsr $168b				JSR		HEX8

.1681	 a5 0f		lda $0f					LDA		REGX

.1683	 a4 20		ldy $20					LDY		REGY

.1685	 a2 10		ldx #$10				LDX		#16

.1687	 20 8b 16	jsr $168b				JSR		HEX8

.168a	 60		rts					RTS

.168b					hex8
.168b	 18		clc					CLC

.168c	 85 0e		sta $0e					STA		REGA

.168e	 b9 90 24	lda $2490,y				LDA		VER_POS_LO+0,Y

.1691	 8d 5d 16	sta $165d				STA		HEX_NUMBER0+1

.1694	 b9 00 24	lda $2400,y				LDA		VER_POS_HI+0,Y

.1697	 18		clc					CLC

.1698	 65 25		adc $25					ADC 	SCREEN_BANK

.169a	 8d 5e 16	sta $165e				STA		HEX_NUMBER0+2

.169d	 b9 91 24	lda $2491,y				LDA		VER_POS_LO+1,Y

.16a0	 8d 63 16	sta $1663				STA		HEX_NUMBER1+1

.16a3	 b9 01 24	lda $2401,y				LDA		VER_POS_HI+1,Y 

.16a6	 18		clc					CLC

.16a7	 65 25		adc $25					ADC 	SCREEN_BANK

.16a9	 8d 64 16	sta $1664				STA		HEX_NUMBER1+2

.16ac	 b9 92 24	lda $2492,y				LDA		VER_POS_LO+2,Y

.16af	 8d 69 16	sta $1669				STA		HEX_NUMBER2+1

.16b2	 b9 02 24	lda $2402,y				LDA		VER_POS_HI+2,Y 

.16b5	 18		clc					CLC

.16b6	 65 25		adc $25					ADC 	SCREEN_BANK

.16b8	 8d 6a 16	sta $166a				STA		HEX_NUMBER2+2

.16bb	 b9 93 24	lda $2493,y				LDA		VER_POS_LO+3,Y

.16be	 8d 6f 16	sta $166f				STA		HEX_NUMBER3+1

.16c1	 b9 03 24	lda $2403,y				LDA		VER_POS_HI+3,Y 

.16c4	 18		clc					CLC

.16c5	 65 25		adc $25					ADC 	SCREEN_BANK

.16c7	 8d 70 16	sta $1670				STA		HEX_NUMBER3+2

.16ca	 b9 94 24	lda $2494,y				LDA		VER_POS_LO+4,Y

.16cd	 8d 75 16	sta $1675				STA		HEX_NUMBER4+1

.16d0	 b9 04 24	lda $2404,y				LDA		VER_POS_HI+4,Y 

.16d3	 18		clc					CLC

.16d4	 65 25		adc $25					ADC 	SCREEN_BANK

.16d6	 8d 76 16	sta $1676				STA		HEX_NUMBER4+2

.16d9	 a5 0e		lda $0e					LDA		REGA

.16db	 4a		lsr					LSR

.16dc	 4a		lsr					LSR

.16dd	 4a		lsr					LSR

.16de	 4a		lsr					LSR

.16df	 a8		tay					TAY

.16e0	 20 59 16	jsr $1659				JSR		HEXCHAR

.16e3	 8a		txa					TXA

.16e4	 18		clc					CLC

.16e5	 69 08		adc #$08				ADC 	#8

.16e7	 aa		tax					TAX

.16e8	 a5 0e		lda $0e					LDA		REGA

.16ea	 29 0f		and #$0f				AND		#15

.16ec	 a8		tay					TAY

.16ed	 20 59 16	jsr $1659				JSR		HEXCHAR

.16f0	 60		rts					RTS

=0100					X_ROT_TAB_LO =$0100 ; UNKNOWN_POINT_TAB_6

=0140					X_ROT_TAB_HI = $0140

=0180					Y_ROT_TAB_LO = $0180

=02c0					Y_ROT_TAB_HI = $02C0

=0340					Z_ROT_TAB_LO = $0340 

=0380					Z_ROT_TAB_HI = $0380

=03c0					PERS_POINT_TAB_3 = $03C0

=0600					PERS_POINT_TAB_2 = $0600

=0640					PERS_POINT_TAB_5 = $0640

=0680					PERS_HOR = $0680

=06c0					PERS_VER = $06C0

=0700					POINT_CLASSIFICATION = $0700 ; 00 = point is onscreen - 01 = point needs off left/right - 02 = point is off top/bottom - 03 = point is off left/right + top/bottom - 80 / minus = point is behind

=0a5c					f0A5C = $0A5C   

=167a					f167A = $167A   

=20a0					f20A0 = $20A0   

=20e0					f20E0 = $20E0   

=2120					f2120 = $2120   

=2210					f2210 = $2210


>16f1	 80 a2 80 80 88 80 80 80 	HEX0	.BYTE %10000000,%10100010,%10000000,%10000000,%10001000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000010,%10000000,%10000000 

>16f9	 80 80 80 80 80 82 80 80 
>1701	 88 82 a8 a8 88 8a 8a a8 	HEX1	.BYTE %10001000,%10000010,%10101000,%10101000,%10001000,%10001010,%10001010,%10101000,%10001000,%10001000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010 

>1709	 88 88 88 88 8a 88 8a 8a 
>1711	 88 a2 80 80 80 80 80 a8 	HEX2	.BYTE %10001000,%10100010,%10000000,%10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10000000,%10000010,%10001010,%10001000,%10000000,%10000000

>1719	 80 80 80 82 8a 88 80 80 
>1721	 88 a2 8a a8 a8 a8 88 a8 	HEX3	.BYTE %10001000,%10100010,%10001010,%10101000,%10101000,%10101000,%10001000,%10101000,%10001000,%10101000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010

>1729	 88 a8 88 88 8a 88 8a 8a 
>1731	 80 80 80 80 a8 80 80 a8 	HEX4	.BYTE %10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10101000,%10000000,%10000000,%10001000,%10000000,%10100000,%10000010,%10000000,%10001010

>1739	 80 80 88 80 a0 82 80 8a 

.1741					obj_x_msb
.1781					obj_y_msb
.17c1					obj_z_msb
.1801					obj_x_hsb
.1841					obj_y_hsb
.1881					obj_z_hsb
.18c1					object_shape_ptr_lo

>18c1	 41 8b ca f6 13 30 77 9d  		.BYTE <OBJ_01,<OBJ_02,<OBJ_03,<OBJ_04,<OBJ_05,<OBJ_06,<OBJ_07,<OBJ_08

>18c9	 ce eb 09 31 57 86 b5 db  	    .BYTE <OBJ_09,<OBJ_10,<OBJ_11,<OBJ_12,<OBJ_13,<OBJ_14,<OBJ_15,<OBJ_16

>18d1	 13 4b 79 a9 e2 8b ca f6  		.BYTE <OBJ_17,<OBJ_18,<OBJ_19,<OBJ_20,<OBJ_21,<OBJ_02,<OBJ_03,<OBJ_04

>18d9	 13 30 77 9d ce eb 09 31  		.BYTE <OBJ_05,<OBJ_06,<OBJ_07,<OBJ_08,<OBJ_09,<OBJ_10,<OBJ_11,<OBJ_12

>18e1	 57 86 b5 db 13 4b 79 a9  		.BYTE <OBJ_13,<OBJ_14,<OBJ_15,<OBJ_16,<OBJ_17,<OBJ_18,<OBJ_19,<OBJ_20

>18e9	 80 06 74 76 e5 28 b8 87  	        .BYTE $80,$06,$74,$76,$E5,$28,$B8,$87

>18f1	 fa cf 5e 0c be 61 8f bf  	        .BYTE $FA,$CF,$5E,$0C,$BE,$61,$8F,$BF

>18f9	 45 f8 00 00 f8 4a 4a 8d  	        .BYTE $45,$F8,$00,$00,$F8,$4A,$4A,$8D


.1901					object_shape_ptr_hi

>1901	 1b 1b 1b 1b 1c 1c 1c 1c  		.BYTE >OBJ_01,>OBJ_02,>OBJ_03,>OBJ_04,>OBJ_05,>OBJ_06,>OBJ_07,>OBJ_08

>1909	 1c 1c 1d 1d 1d 1d 1d 1d  	    .BYTE >OBJ_09,>OBJ_10,>OBJ_11,>OBJ_12,>OBJ_13,>OBJ_14,>OBJ_15,>OBJ_16

>1911	 1e 1e 1e 1e 1e 1b 1b 1b  		.BYTE >OBJ_17,>OBJ_18,>OBJ_19,>OBJ_20,>OBJ_21,>OBJ_02,>OBJ_03,>OBJ_04

>1919	 1c 1c 1c 1c 1c 1c 1d 1d  		.BYTE >OBJ_05,>OBJ_06,>OBJ_07,>OBJ_08,>OBJ_09,>OBJ_10,>OBJ_11,>OBJ_12

>1921	 1d 1d 1d 1d 1e 1e 1e 1e  		.BYTE >OBJ_13,>OBJ_14,>OBJ_15,>OBJ_16,>OBJ_17,>OBJ_18,>OBJ_19,>OBJ_20

>1929	 1a 19 19 1d 1a 1b 1a 18  	        .BYTE $1A,$19,$19,$1D,$1A,$1B,$1A,$18

>1931	 17 1e 1b 1f 1c 3e 3e 3e  	        .BYTE $17,$1E,$1B,$1F,$1C,$3E,$3E,$3E

>1939	 1b 3e 17 17 3e 3f 3f 3f  	        .BYTE $1B,$3E,$17,$17,$3E,$3F,$3F,$3F


.1941					obj_x_lsb
.1981					obj_y_lsb
.19c1					obj_z_lsb
.1a01					objects_to_draw

>1a01	 00                       			.BYTE $00

>1a02	 06                       			.BYTE $06 ; object being drawn

>1a03	 3e 3d 38 32 0a 02 01     			.BYTE $3E,$3D,$38,$32,$0A,$02,$01

>1a0a	 00 01 00 00 00 00 00 00  	        .BYTE $00,$01,$00,$00,$00,$00,$00,$00

>1a12	 00 00 00 00 00 00 00 00  	        .BYTE $00,$00,$00,$00,$00,$00,$00,$00

>1a1a	 00 00 00 00 00 00 00 00  	        .BYTE $00,$00,$00,$00,$00,$00,$00,$00

>1a22	 00 00 00 00 00 00 00 00  	        .BYTE $00,$00,$00,$00,$00,$00,$00,$00

>1a2a	 00 00 00 00 00 00 00 00  	        .BYTE $00,$00,$00,$00,$00,$00,$00,$00

>1a32	 00 00 00 00 00 00 00 00  	        .BYTE $00,$00,$00,$00,$00,$00,$00,$00

>1a3a	 00 00 00 00 00 00 00     	        .BYTE $00,$00,$00,$00,$00,$00,$00


.1a41					f2a00

>1b41	 0f                       	OBJ_01	.BYTE $0F

>1b42	 f8 00 10                 			.BYTE $F8,$00,$10

>1b45	 fa 0c 0c                 			.BYTE $FA,$0C,$0C

>1b48	 fa 0c 00                 			.BYTE $FA,$0C,$00

>1b4b	 f9 06 fd                 			.BYTE $F9,$06,$FD

>1b4e	 f9 04 f4                 			.BYTE $F9,$04,$F4

>1b51	 fc 04 f0                 			.BYTE $FC,$04,$F0

>1b54	 fc 00 f0                 			.BYTE $FC,$00,$F0

>1b57	 f9 00 f4                 	        .BYTE $F9,$00,$F4

>1b5a	 08 00 10                 			.BYTE $08,$00,$10

>1b5d	 06 0c 0c                 			.BYTE $06,$0C,$0C

>1b60	 06 0c 00                 			.BYTE $06,$0C,$00

>1b63	 07 06 fd                 			.BYTE $07,$06,$FD

>1b66	 07 04 f4                 			.BYTE $07,$04,$F4

>1b69	 04 04 f0                 			.BYTE $04,$04,$F0

>1b6c	 04 00 f0                 			.BYTE $04,$00,$F0

>1b6f	 07 00 f4                 	        .BYTE $07,$00,$F4

>1b72	 17                       			.BYTE $17

>1b73	 01 12 23 34 45 56 67 70 			.BYTE $01,$12,$23,$34,$45,$56,$67,$70,$89,$9A,$AB,$BC,$CD,$DE,$EF,$F8,$47,$CF,$08,$19,$2A,$3B,$5D,$6E

>1b7b	 89 9a ab bc cd de ef f8 
>1b83	 47 cf 08 19 2a 3b 5d 6e 
>1b8b	 0f                       	OBJ_02	.BYTE $0F

>1b8c	 f8 04 18                 			.BYTE $F8,$04,$18

>1b8f	 08 04 18                 	        .BYTE $08,$04,$18

>1b92	 00 04 e8                 			.BYTE $00,$04,$E8

>1b95	 00 0c 18                 			.BYTE $00,$0C,$18

>1b98	 e2 04 18                 			.BYTE $E2,$04,$18

>1b9b	 1e 04 18                 			.BYTE $1E,$04,$18

>1b9e	 fc 04 00                 			.BYTE $FC,$04,$00

>1ba1	 04 04 00                 			.BYTE $04,$04,$00

>1ba4	 00 14 18                 			.BYTE $00,$14,$18

>1ba7	 00 0a 0c                 	        .BYTE $00,$0A,$0C

>1baa	 f2 04 10                 			.BYTE $F2,$04,$10

>1bad	 f2 00 10                 			.BYTE $F2,$00,$10

>1bb0	 0e 04 10                 			.BYTE $0E,$04,$10

>1bb3	 0e 00 10                 			.BYTE $0E,$00,$10

>1bb6	 00 04 f0                 			.BYTE $00,$04,$F0

>1bb9	 00 00 f0                 			.BYTE $00,$00,$F0

>1bbc	 0c                       			.BYTE $0C

>1bbd	 20 23 21 13 03 45 46 57 			.BYTE $20,$23,$21,$13,$03,$45,$46,$57,$38,$89,$AB,$CD,$EF

>1bc5	 38 89 ab cd ef 
>1bca	 07                       	OBJ_03	.BYTE $07

>1bcb	 00 00 00                 			.BYTE $00,$00,$00

>1bce	 ec 07 00                 			.BYTE $EC,$07,$00

>1bd1	 f6 07 11                 			.BYTE $F6,$07,$11

>1bd4	 0a 07 11                 			.BYTE $0A,$07,$11

>1bd7	 14 07 00                 	        .BYTE $14,$07,$00

>1bda	 0a 07 ef                 			.BYTE $0A,$07,$EF

>1bdd	 f6 07 ef                 			.BYTE $F6,$07,$EF

>1be0	 00 10 00                 			.BYTE $00,$10,$00

>1be3	 11                       			.BYTE $11

>1be4	 01 02 03 04 05 06 71 72 			.BYTE $01,$02,$03,$04,$05,$06,$71,$72,$73,$74,$75,$76,$12,$23,$34,$45,$56,$61

>1bec	 73 74 75 76 12 23 34 45 
>1bf4	 56 61 
>1bf6	 05                       	OBJ_04	.BYTE $05

>1bf7	 f4 00 10                 	        .BYTE $F4,$00,$10

>1bfa	 00 00 f0                 			.BYTE $00,$00,$F0

>1bfd	 0c 00 10                 			.BYTE $0C,$00,$10

>1c00	 f4 0a 10                 			.BYTE $F4,$0A,$10

>1c03	 00 0a f0                 			.BYTE $00,$0A,$F0

>1c06	 0c 0a 10                 			.BYTE $0C,$0A,$10

>1c09	 08                       			.BYTE $08

>1c0a	 01 12 20 34 45 53 03 14 			.BYTE $01,$12,$20,$34,$45,$53,$03,$14,$25

>1c12	 25 
>1c13	 05                       	OBJ_05	.BYTE $05

>1c14	 fb 00 ff                 			.BYTE $FB,$00,$FF

>1c17	 05 00 ff                 			.BYTE $05,$00,$FF

>1c1a	 00 0c ff                 			.BYTE $00,$0C,$FF

>1c1d	 fb 00 01                 			.BYTE $FB,$00,$01

>1c20	 05 00 01                 			.BYTE $05,$00,$01

>1c23	 00 0c 01                 			.BYTE $00,$0C,$01

>1c26	 08                       			.BYTE $08

>1c27	 01 12 20 34 45 53 03 14 			.BYTE $01,$12,$20,$34,$45,$53,$03,$14,$25

>1c2f	 25 
>1c30	 0f                       	OBJ_06	.BYTE $0F

>1c31	 f0 00 10                 			.BYTE $F0,$00,$10

>1c34	 10 00 10                 	        .BYTE $10,$00,$10

>1c37	 00 00 ec                 			.BYTE $00,$00,$EC

>1c3a	 fc 00 04                 			.BYTE $FC,$00,$04

>1c3d	 04 00 04                 			.BYTE $04,$00,$04

>1c40	 00 00 fc                 			.BYTE $00,$00,$FC

>1c43	 fd 04 03                 			.BYTE $FD,$04,$03

>1c46	 03 04 03                 			.BYTE $03,$04,$03

>1c49	 00 04 fd                 			.BYTE $00,$04,$FD

>1c4c	 fe 14 02                 	        .BYTE $FE,$14,$02

>1c4f	 02 14 02                 			.BYTE $02,$14,$02

>1c52	 00 14 fe                 			.BYTE $00,$14,$FE

>1c55	 ff 04 01                 			.BYTE $FF,$04,$01

>1c58	 01 04 01                 			.BYTE $01,$04,$01

>1c5b	 00 04 ff                 			.BYTE $00,$04,$FF

>1c5e	 00 34 00                 			.BYTE $00,$34,$00

>1c61	 14                       			.BYTE $14

>1c62	 f6 f7 f8 90 a1 b2 06 17 			.BYTE $F6,$F7,$F8,$90,$A1,$B2,$06,$17,$28,$C3,$D4,$E5,$34,$45,$53,$67,$78,$86,$CD,$DE,$EC

>1c6a	 28 c3 d4 e5 34 45 53 67 
>1c72	 78 86 cd de ec 
>1c77	 07                       	OBJ_07	.BYTE $07

>1c78	 f8 f8 f8                 			.BYTE $F8,$F8,$F8

>1c7b	 08 f8 f8                 			.BYTE $08,$F8,$F8

>1c7e	 08 f8 08                 			.BYTE $08,$F8,$08

>1c81	 f8 f8 08                 			.BYTE $F8,$F8,$08

>1c84	 f8 08 f8                 			.BYTE $F8,$08,$F8

>1c87	 08 08 f8                 			.BYTE $08,$08,$F8

>1c8a	 08 08 08                 			.BYTE $08,$08,$08

>1c8d	 f8 08 08                 			.BYTE $F8,$08,$08

>1c90	 0b                       			.BYTE $0B

>1c91	 01 12 23 30 04 15 26 37 			.BYTE $01,$12,$23,$30,$04,$15,$26,$37,$45,$56,$67,$74

>1c99	 45 56 67 74 
>1c9d	 09                       	OBJ_08	.BYTE $09

>1c9e	 fc 07 04                 			.BYTE $FC,$07,$04

>1ca1	 04 07 04                 			.BYTE $04,$07,$04

>1ca4	 00 07 fc                 	        .BYTE $00,$07,$FC

>1ca7	 00 0e 00                 			.BYTE $00,$0E,$00

>1caa	 ff 07 01                 			.BYTE $FF,$07,$01

>1cad	 01 07 01                 			.BYTE $01,$07,$01

>1cb0	 00 07 ff                 			.BYTE $00,$07,$FF

>1cb3	 fe 00 02                 			.BYTE $FE,$00,$02

>1cb6	 02 00 02                 			.BYTE $02,$00,$02

>1cb9	 00 00 fe                 			.BYTE $00,$00,$FE

>1cbc	 0e                       	        .BYTE $0E

>1cbd	 01 12 20 03 13 23 45 56 			.BYTE $01,$12,$20,$03,$13,$23,$45,$56,$64,$78,$89,$97,$47,$58,$69,$0F,$F9

>1cc5	 64 78 89 97 47 58 69 0f 
>1ccd	 f9 
>1cce	 05                       	OBJ_09  .BYTE $05

>1ccf	 8b 00 8f                 	        .BYTE $8B,$00,$8F

>1cd2	 75 00 8f                 	        .BYTE $75,$00,$8F

>1cd5	 00 0c 8f                 	        .BYTE $00,$0C,$8F

>1cd8	 8b 00 71                 	        .BYTE $8B,$00,$71

>1cdb	 75 00 71                 	        .BYTE $75,$00,$71

>1cde	 00 0c 71                 	        .BYTE $00,$0C,$71

>1ce1	 08                       	        .BYTE $08

>1ce2	 01 12 20 34 45 53 03 14 	        .BYTE $01,$12,$20, $34,$45,$53, $03,$14,$25

>1cea	 25 
>1ceb	 05                       	OBJ_10  .BYTE $05

>1cec	 f0 00 20                 			.BYTE $F0,$00,$20

>1cef	 10 00 20                 			.BYTE $10,$00,$20

>1cf2	 fd 02 20                 			.BYTE $FD,$02,$20

>1cf5	 03 02 20                 			.BYTE $03,$02,$20

>1cf8	 00 0c 20                 			.BYTE $00,$0C,$20

>1cfb	 00 00 e1                 			.BYTE $00,$00,$E1

>1cfe	 09                       			.BYTE $09

>1cff	 01 13 34 42 20 05 15 25 			.BYTE $01,$13,$34,$42,$20,$05,$15,$25,$35,$45

>1d07	 35 45 
>1d09	 07                       	OBJ_11	.BYTE $07

>1d0a	 f8 f8 f8                 			.BYTE $F8,$F8,$F8

>1d0d	 08 f8 f8                 			.BYTE $08,$F8,$F8

>1d10	 08 f8 08                 			.BYTE $08,$F8,$08

>1d13	 f8 f8 08                 			.BYTE $F8,$F8,$08

>1d16	 f8 08 f8                 			.BYTE $F8,$08,$F8

>1d19	 08 08 f8                 			.BYTE $08,$08,$F8

>1d1c	 08 08 08                 			.BYTE $08,$08,$08

>1d1f	 f8 08 08                 			.BYTE $F8,$08,$08

>1d22	 0b                       			.BYTE $0B

>1d23	 01 12 23 30 04 15 26 37 			.BYTE $01,$12,$23,$30,$04,$15,$26,$37,$45,$56,$67,$74,$09,$FC

>1d2b	 45 56 67 74 09 fc 
>1d31	 07                       	OBJ_12	.BYTE $07

>1d32	 ff 00 fc                 			.BYTE $FF,$00,$FC

>1d35	 ff 00 04                 			.BYTE $FF,$00,$04

>1d38	 ff 0c 02                 			.BYTE $FF,$0C,$02

>1d3b	 ff 0c fe                 			.BYTE $FF,$0C,$FE

>1d3e	 01 00 fc                 			.BYTE $01,$00,$FC

>1d41	 01 00 04                 			.BYTE $01,$00,$04

>1d44	 01 0c 02                 			.BYTE $01,$0C,$02

>1d47	 01 0c fe                 			.BYTE $01,$0C,$FE

>1d4a	 0b                       			.BYTE $0B

>1d4b	 01 12 23 30 45 56 67 74 			.BYTE $01,$12,$23,$30,$45,$56,$67,$74,$04,$15,$26,$37

>1d53	 04 15 26 37 
>1d57	 09                       	OBJ_13	.BYTE $09

>1d58	 04 00 ff                 			.BYTE $04,$00,$FF

>1d5b	 fc 00 ff                 			.BYTE $FC,$00,$FF

>1d5e	 fa 08 ff                 			.BYTE $FA,$08,$FF

>1d61	 00 0c ff                 			.BYTE $00,$0C,$FF

>1d64	 06 08 ff                 			.BYTE $06,$08,$FF

>1d67	 04 00 01                 			.BYTE $04,$00,$01

>1d6a	 fc 00 01                 			.BYTE $FC,$00,$01

>1d6d	 fa 08 01                 			.BYTE $FA,$08,$01

>1d70	 00 0c 01                 			.BYTE $00,$0C,$01

>1d73	 06 08 01                 			.BYTE $06,$08,$01

>1d76	 0e                       			.BYTE $0E

>1d77	 01 12 23 34 40 56 67 78 			.BYTE $01,$12,$23,$34,$40,$56,$67,$78,$89,$95,$05,$16,$27,$38,$49

>1d7f	 89 95 05 16 27 38 49 

.1d86					obj_14

>1d86	 09                       			.BYTE $09

>1d87	 fd 00 ff                 			.BYTE $FD,$00,$FF

>1d8a	 03 00 ff                 			.BYTE $03,$00,$FF

>1d8d	 03 0a ff                 			.BYTE $03,$0A,$FF

>1d90	 00 0c ff                 			.BYTE $00,$0C,$FF

>1d93	 fd 0a ff                 			.BYTE $FD,$0A,$FF

>1d96	 fd 00 01                 			.BYTE $FD,$00,$01

>1d99	 03 00 01                 			.BYTE $03,$00,$01

>1d9c	 03 0a 01                 			.BYTE $03,$0A,$01

>1d9f	 00 0c 01                 			.BYTE $00,$0C,$01

>1da2	 fd 0a 01                 			.BYTE $FD,$0A,$01

>1da5	 0e                       			.BYTE $0E

>1da6	 01 12 23 34 40 56 67 78 			.BYTE $01,$12,$23,$34,$40,$56,$67,$78,$89,$95,$05,$16,$27,$38,$49

>1dae	 89 95 05 16 27 38 49 
>1db5	 07                       	OBJ_15	.BYTE $07

>1db6	 fe 00 ff                 			.BYTE $FE,$00,$FF

>1db9	 02 00 ff                 			.BYTE $02,$00,$FF

>1dbc	 04 0c ff                 			.BYTE $04,$0C,$FF

>1dbf	 fc 0c ff                 			.BYTE $FC,$0C,$FF

>1dc2	 fe 00 01                 			.BYTE $FE,$00,$01

>1dc5	 02 00 01                 			.BYTE $02,$00,$01

>1dc8	 04 0c 01                 			.BYTE $04,$0C,$01

>1dcb	 fc 0c 01                 			.BYTE $FC,$0C,$01

>1dce	 0b                       			.BYTE $0B

>1dcf	 01 12 23 30 45 56 67 74 			.BYTE $01,$12,$23,$30,$45,$56,$67,$74,$04,$15,$26,$37

>1dd7	 04 15 26 37 
>1ddb	 0b                       	OBJ_16	.BYTE $0B

>1ddc	 02 00 ff                 			.BYTE $02,$00,$FF

>1ddf	 04 06 ff                 			.BYTE $04,$06,$FF

>1de2	 02 0c ff                 			.BYTE $02,$0C,$FF

>1de5	 fe 0c ff                 			.BYTE $FE,$0C,$FF

>1de8	 fc 06 ff                 			.BYTE $FC,$06,$FF

>1deb	 fe 00 ff                 			.BYTE $FE,$00,$FF

>1dee	 02 00 01                 			.BYTE $02,$00,$01

>1df1	 04 06 01                 			.BYTE $04,$06,$01

>1df4	 02 0c 01                 			.BYTE $02,$0C,$01

>1df7	 fe 0c 01                 			.BYTE $FE,$0C,$01

>1dfa	 fc 06 01                 			.BYTE $FC,$06,$01

>1dfd	 fe 00 01                 			.BYTE $FE,$00,$01

>1e00	 11                       			.BYTE $11

>1e01	 01 12 23 34 45 50 67 78 			.BYTE $01,$12,$23,$34,$45,$50,$67,$78,$89,$9A,$AB,$B6,$06,$17,$28,$39,$4A,$5B

>1e09	 89 9a ab b6 06 17 28 39 
>1e11	 4a 5b 
>1e13	 0b                       	OBJ_17	.BYTE $0B

>1e14	 03 00 ff                 			.BYTE $03,$00,$FF

>1e17	 03 08 ff                 			.BYTE $03,$08,$FF

>1e1a	 01 0c ff                 			.BYTE $01,$0C,$FF

>1e1d	 ff 0c ff                 			.BYTE $FF,$0C,$FF

>1e20	 fd 08 ff                 			.BYTE $FD,$08,$FF

>1e23	 fd 00 ff                 			.BYTE $FD,$00,$FF

>1e26	 03 00 01                 			.BYTE $03,$00,$01

>1e29	 03 08 01                 			.BYTE $03,$08,$01

>1e2c	 01 0c 01                 			.BYTE $01,$0C,$01

>1e2f	 ff 0c 01                 			.BYTE $FF,$0C,$01

>1e32	 fd 08 01                 			.BYTE $FD,$08,$01

>1e35	 fd 00 01                 			.BYTE $FD,$00,$01

>1e38	 11                       			.BYTE $11

>1e39	 01 12 23 34 45 50 67 78 			.BYTE $01,$12,$23,$34,$45,$50,$67,$78,$89,$9A,$AB,$B6,$06,$17,$28,$39,$4A,$5B

>1e41	 89 9a ab b6 06 17 28 39 
>1e49	 4a 5b 
>1e4b	 0b                       	OBJ_18	.BYTE $0B

>1e4c	 f9 00 f3                 			.BYTE $F9,$00,$F3

>1e4f	 07 00 f3                 			.BYTE $07,$00,$F3

>1e52	 07 00 0d                 			.BYTE $07,$00,$0D

>1e55	 f9 00 0d                 			.BYTE $F9,$00,$0D

>1e58	 f9 06 f3                 			.BYTE $F9,$06,$F3

>1e5b	 07 06 f3                 			.BYTE $07,$06,$F3

>1e5e	 07 06 0d                 			.BYTE $07,$06,$0D

>1e61	 f9 06 0d                 			.BYTE $F9,$06,$0D

>1e64	 f6 06 f0                 			.BYTE $F6,$06,$F0

>1e67	 0a 06 f0                 			.BYTE $0A,$06,$F0

>1e6a	 0a 06 10                 			.BYTE $0A,$06,$10

>1e6d	 f6 06 10                 			.BYTE $F6,$06,$10

>1e70	 07                       			.BYTE $07

>1e71	 04 15 26 37 89 9a ab b8  			.BYTE $04,$15,$26,$37,$89,$9A,$AB,$B8

>1e79	 0b                       	OBJ_19	.BYTE $0B

>1e7a	 fe 00 fe                 			.BYTE $FE,$00,$FE

>1e7d	 fe 00 02                 			.BYTE $FE,$00,$02

>1e80	 02 00 02                 			.BYTE $02,$00,$02

>1e83	 02 00 fe                 			.BYTE $02,$00,$FE

>1e86	 fe 04 fe                 			.BYTE $FE,$04,$FE

>1e89	 fe 04 02                 			.BYTE $FE,$04,$02

>1e8c	 02 04 02                 			.BYTE $02,$04,$02

>1e8f	 02 04 fe                 			.BYTE $02,$04,$FE

>1e92	 02 06 02                 			.BYTE $02,$06,$02

>1e95	 02 06 fe                 			.BYTE $02,$06,$FE

>1e98	 02 07 02                 			.BYTE $02,$07,$02

>1e9b	 02 07 fe                 			.BYTE $02,$07,$FE

>1e9e	 09                       			.BYTE $09

>1e9f	 04 15 2a 3b 45 56 67 74 			.BYTE $04,$15,$2A,$3B,$45,$56,$67,$74,$89,$AB

>1ea7	 89 ab 
>1ea9	 0d                       	OBJ_20	.BYTE $0D

>1eaa	 f6 00 fb                 			.BYTE $F6,$00,$FB

>1ead	 f6 00 05                 			.BYTE $F6,$00,$05

>1eb0	 0a 00 05                 			.BYTE $0A,$00,$05

>1eb3	 0a 00 fb                 			.BYTE $0A,$00,$FB

>1eb6	 f6 02 fb                 			.BYTE $F6,$02,$FB

>1eb9	 f6 02 05                 			.BYTE $F6,$02,$05

>1ebc	 0a 02 05                 			.BYTE $0A,$02,$05

>1ebf	 0a 02 fb                 			.BYTE $0A,$02,$FB

>1ec2	 f6 04 fb                 			.BYTE $F6,$04,$FB

>1ec5	 f6 04 05                 			.BYTE $F6,$04,$05

>1ec8	 0a 04 05                 			.BYTE $0A,$04,$05

>1ecb	 0a 04 fb                 			.BYTE $0A,$04,$FB

>1ece	 0a 08 05                 			.BYTE $0A,$08,$05

>1ed1	 0a 08 fb                 			.BYTE $0A,$08,$FB

>1ed4	 0c                       			.BYTE $0C

>1ed5	 08 19 2c 3d 45 56 67 74 			.BYTE $08,$19,$2C,$3D,$45,$56,$67,$74,$89,$9A,$AB,$B8,$CD

>1edd	 89 9a ab b8 cd 
>1ee2	 03                       	OBJ_21	.BYTE 4-1

>1ee3	 80 a5 00                 			.BYTE 255-127, 255-90, 0

>1ee6	 7f a5 00                 			.BYTE 127, 255-90, 0

>1ee9	 00 5a 80                 			.BYTE 0, 90, 255-127

>1eec	 00 5a 7f                 			.BYTE 0, 90, 127

>1eef	 05                       			.BYTE 6-1

>1ef0	 01 02 03 12 13 23        			.BYTE $01,$02,$03,$12,$13,$23

>1ef6	 07                       	OBJ_99	.BYTE $07

>1ef7	 00 00 00                 			.BYTE 0,0,0

>1efa	 00 00 ff                 			.BYTE 0,0,255

>1efd	 00 ff 00                 			.BYTE 0,255,0

>1f00	 00 ff ff                 			.BYTE 0,255,255

>1f03	 ff 00 00                 			.BYTE 255,0,0

>1f06	 ff 00 ff                 			.BYTE 255,0,255

>1f09	 ff ff 00                 			.BYTE 255,255,0

>1f0c	 ff ff ff                 			.BYTE 255,255,255

>1f0f	 0b                       	        .BYTE $0B

>1f10	 01 13 32 20              	        .BYTE $01,$13,$32,$20

>1f14	 45 57 76 64              	        .BYTE $45,$57,$76,$64

>1f18	 04 15 26 37              	        .BYTE $04,$15,$26,$37


.2000					sin_lsb

>2000	 92 2e f7 60 c4 14 47 79  			.BYTE $92,$2E,$F7,$60,$C4,$14,$47,$79

>2008	 ab dd 08 21 3a 53 6c 85  	        .BYTE $AB,$DD,$08,$21,$3A,$53,$6C,$85

>2010	 9e b7 d0 e9 01 0d 1a 26  	        .BYTE $9E,$B7,$D0,$E9,$01,$0D,$1A,$26

>2018	 33 3f 4c 58 64 71 7d 89  	        .BYTE $33,$3F,$4C,$58,$64,$71,$7D,$89

>2020	 96 a2 ae bb c7 d3 df ec  	        .BYTE $96,$A2,$AE,$BB,$C7,$D3,$DF,$EC

>2028	 f8 02 08 0e 14 1a 20 26  	        .BYTE $F8,$02,$08,$0E,$14,$1A,$20,$26

>2030	 2c 32 38 3e 44 4a 50 56  	        .BYTE $2C,$32,$38,$3E,$44,$4A,$50,$56

>2038	 5c 62 68 6e 73 79 7f 85  	        .BYTE $5C,$62,$68,$6E,$73,$79,$7F,$85

>2040	 8b 91 96 9c a2 a8 ad b3  	        .BYTE $8B,$91,$96,$9C,$A2,$A8,$AD,$B3

>2048	 b9 be c4 ca cf d5 da e0  	        .BYTE $B9,$BE,$C4,$CA,$CF,$D5,$DA,$E0

>2050	 e5 eb f1 f6 fb 00 03 06  	        .BYTE $E5,$EB,$F1,$F6,$FB,$00,$03,$06

>2058	 09 0b 0e 11 13 16 19 1b  	        .BYTE $09,$0B,$0E,$11,$13,$16,$19,$1B

>2060	 1e 20 23 26 28 2b 2d 30  	        .BYTE $1E,$20,$23,$26,$28,$2B,$2D,$30

>2068	 32 35 37 3a 3c 3f 41 44  	        .BYTE $32,$35,$37,$3A,$3C,$3F,$41,$44

>2070	 46 48 4b 4d 50 52 54 57  	        .BYTE $46,$48,$4B,$4D,$50,$52,$54,$57

>2078	 59 5b 5e 60 62 64 67 69  	        .BYTE $59,$5B,$5E,$60,$62,$64,$67,$69

>2080	 6b 6d 70 72 74 76 78 7a  	        .BYTE $6B,$6D,$70,$72,$74,$76,$78,$7A

>2088	 7c 7f 81 83 85 87 89 8b  	        .BYTE $7C,$7F,$81,$83,$85,$87,$89,$8B

>2090	 8d 8f 91 93 95 97 98 9a  	        .BYTE $8D,$8F,$91,$93,$95,$97,$98,$9A

>2098	 9c 9e a0 a2 a4 a5 a7 a9  	        .BYTE $9C,$9E,$A0,$A2,$A4,$A5,$A7,$A9

>20a0	 ab ac ae b0 b1 b3 b5 b6  	        .BYTE $AB,$AC,$AE,$B0,$B1,$B3,$B5,$B6

>20a8	 b8 ba bb bd be c0 c1 c3  	        .BYTE $B8,$BA,$BB,$BD,$BE,$C0,$C1,$C3

>20b0	 c4 c6 c7 c9 ca cb cd ce  	        .BYTE $C4,$C6,$C7,$C9,$CA,$CB,$CD,$CE

>20b8	 d0 d1 d2 d3 d5 d6 d7 d8  	        .BYTE $D0,$D1,$D2,$D3,$D5,$D6,$D7,$D8

>20c0	 da db dc dd de df e0 e2  	        .BYTE $DA,$DB,$DC,$DD,$DE,$DF,$E0,$E2

>20c8	 e3 e4 e5 e6 e7 e8 e9 e9  	        .BYTE $E3,$E4,$E5,$E6,$E7,$E8,$E9,$E9

>20d0	 ea eb ec ed ee ef ef f0  	        .BYTE $EA,$EB,$EC,$ED,$EE,$EF,$EF,$F0

>20d8	 f1 f2 f3 f3 f4 f5 f5 f6  	        .BYTE $F1,$F2,$F3,$F3,$F4,$F5,$F5,$F6

>20e0	 f6 f7 f8 f8 f9 f9 fa fa  	        .BYTE $F6,$F7,$F8,$F8,$F9,$F9,$FA,$FA

>20e8	 fb fb fc fc fc fd fd fd  	        .BYTE $FB,$FB,$FC,$FC,$FC,$FD,$FD,$FD

>20f0	 fe fe fe fe ff ff ff ff  	        .BYTE $FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF

>20f8	 ff 00 00 00 00 00 00 00  	        .BYTE $FF,$00,$00,$00,$00,$00,$00,$00


.2100					sin_msb

>2100	 dc e4 e4 e8 e8 ec ec ec  			.BYTE $DC,$E4,$E4,$E8,$E8,$EC,$EC,$EC

>2108	 ec ec f0 f0 f0 f0 f0 f0  	        .BYTE $EC,$EC,$F0,$F0,$F0,$F0,$F0,$F0

>2110	 f0 f0 f0 f0 f4 f4 f4 f4  	        .BYTE $F0,$F0,$F0,$F0,$F4,$F4,$F4,$F4

>2118	 f4 f4 f4 f4 f4 f4 f4 f4  	        .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4

>2120	 f4 f4 f4 f4 f4 f4 f4 f4  	        .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4

>2128	 f4 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F4,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2130	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2138	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2140	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2148	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2150	 f8 f8 f8 f8 f8 fc fc fc  	        .BYTE $F8,$F8,$F8,$F8,$F8,$FC,$FC,$FC

>2158	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2160	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2168	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2170	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2178	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2180	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2188	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2190	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2198	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>21a0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>21a8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>21b0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>21b8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>21c0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>21c8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>21d0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>21d8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>21e0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>21e8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>21f0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>21f8	 fc 00 00 00 00 00 00 00  	        .BYTE $FC,$00,$00,$00,$00,$00,$00,$00


.2200					log_table

>2200	 00 01 03 04 06 07 09 0a  			.BYTE $00,$01,$03,$04,$06,$07,$09,$0A

>2208	 0b 0d 0e 10 11 12 14 15  	        .BYTE $0B,$0D,$0E,$10,$11,$12,$14,$15

>2210	 16 18 19 1a 1c 1d 1e 20  	        .BYTE $16,$18,$19,$1A,$1C,$1D,$1E,$20

>2218	 21 22 24 25 26 28 29 2a  	        .BYTE $21,$22,$24,$25,$26,$28,$29,$2A

>2220	 2c 2d 2e 2f 31 32 33 34  	        .BYTE $2C,$2D,$2E,$2F,$31,$32,$33,$34

>2228	 36 37 38 39 3b 3c 3d 3e  	        .BYTE $36,$37,$38,$39,$3B,$3C,$3D,$3E

>2230	 3f 41 42 43 44 45 47 48  	        .BYTE $3F,$41,$42,$43,$44,$45,$47,$48

>2238	 49 4a 4b 4d 4e 4f 50 51  	        .BYTE $49,$4A,$4B,$4D,$4E,$4F,$50,$51

>2240	 52 54 55 56 57 58 59 5a  	        .BYTE $52,$54,$55,$56,$57,$58,$59,$5A

>2248	 5c 5d 5e 5f 60 61 62 63  	        .BYTE $5C,$5D,$5E,$5F,$60,$61,$62,$63

>2250	 64 66 67 68 69 6a 6b 6c  	        .BYTE $64,$66,$67,$68,$69,$6A,$6B,$6C

>2258	 6d 6e 6f 70 71 72 74 75  	        .BYTE $6D,$6E,$6F,$70,$71,$72,$74,$75

>2260	 76 77 78 79 7a 7b 7c 7d  	        .BYTE $76,$77,$78,$79,$7A,$7B,$7C,$7D

>2268	 7e 7f 80 81 82 83 84 85  	        .BYTE $7E,$7F,$80,$81,$82,$83,$84,$85

>2270	 86 87 88 89 8a 8b 8c 8d  	        .BYTE $86,$87,$88,$89,$8A,$8B,$8C,$8D

>2278	 8e 8f 90 91 92 93 94 95  	        .BYTE $8E,$8F,$90,$91,$92,$93,$94,$95

>2280	 96 97 98 99 9a 9b 9b 9c  	        .BYTE $96,$97,$98,$99,$9A,$9B,$9B,$9C

>2288	 9d 9e 9f a0 a1 a2 a3 a4  	        .BYTE $9D,$9E,$9F,$A0,$A1,$A2,$A3,$A4

>2290	 a5 a6 a7 a8 a9 a9 aa ab  	        .BYTE $A5,$A6,$A7,$A8,$A9,$A9,$AA,$AB

>2298	 ac ad ae af b0 b1 b2 b2  	        .BYTE $AC,$AD,$AE,$AF,$B0,$B1,$B2,$B2

>22a0	 b3 b4 b5 b6 b7 b8 b9 b9  	        .BYTE $B3,$B4,$B5,$B6,$B7,$B8,$B9,$B9

>22a8	 ba bb bc bd be bf c0 c0  	        .BYTE $BA,$BB,$BC,$BD,$BE,$BF,$C0,$C0

>22b0	 c1 c2 c3 c4 c5 c6 c6 c7  	        .BYTE $C1,$C2,$C3,$C4,$C5,$C6,$C6,$C7

>22b8	 c8 c9 ca cb cb cc cd ce  	        .BYTE $C8,$C9,$CA,$CB,$CB,$CC,$CD,$CE

>22c0	 cf d0 d0 d1 d2 d3 d4 d4  	        .BYTE $CF,$D0,$D0,$D1,$D2,$D3,$D4,$D4

>22c8	 d5 d6 d7 d8 d8 d9 da db  	        .BYTE $D5,$D6,$D7,$D8,$D8,$D9,$DA,$DB

>22d0	 dc dc dd de df e0 e0 e1  	        .BYTE $DC,$DC,$DD,$DE,$DF,$E0,$E0,$E1

>22d8	 e2 e3 e4 e4 e5 e6 e7 e7  	        .BYTE $E2,$E3,$E4,$E4,$E5,$E6,$E7,$E7

>22e0	 e8 e9 ea ea eb ec ed ee  	        .BYTE $E8,$E9,$EA,$EA,$EB,$EC,$ED,$EE

>22e8	 ee ef f0 f1 f1 f2 f3 f4  	        .BYTE $EE,$EF,$F0,$F1,$F1,$F2,$F3,$F4

>22f0	 f4 f5 f6 f7 f7 f8 f9 f9  	        .BYTE $F4,$F5,$F6,$F7,$F7,$F8,$F9,$F9

>22f8	 fa fb fc fc fd fe ff ff  	        .BYTE $FA,$FB,$FC,$FC,$FD,$FE,$FF,$FF


.2300					exp_table

>2300	 00 01 01 02 03 03 04 05  			.BYTE $00,$01,$01,$02,$03,$03,$04,$05

>2308	 06 06 07 08 08 09 0a 0b  	        .BYTE $06,$06,$07,$08,$08,$09,$0A,$0B

>2310	 0b 0c 0d 0e 0e 0f 10 10  	        .BYTE $0B,$0C,$0D,$0E,$0E,$0F,$10,$10

>2318	 11 12 13 13 14 15 16 16  	        .BYTE $11,$12,$13,$13,$14,$15,$16,$16

>2320	 17 18 19 19 1a 1b 1c 1d  	        .BYTE $17,$18,$19,$19,$1A,$1B,$1C,$1D

>2328	 1d 1e 1f 20 20 21 22 23  	        .BYTE $1D,$1E,$1F,$20,$20,$21,$22,$23

>2330	 24 24 25 26 27 28 28 29  	        .BYTE $24,$24,$25,$26,$27,$28,$28,$29

>2338	 2a 2b 2c 2c 2d 2e 2f 30  	        .BYTE $2A,$2B,$2C,$2C,$2D,$2E,$2F,$30

>2340	 30 31 32 33 34 35 35 36  	        .BYTE $30,$31,$32,$33,$34,$35,$35,$36

>2348	 37 38 39 3a 3a 3b 3c 3d  	        .BYTE $37,$38,$39,$3A,$3A,$3B,$3C,$3D

>2350	 3e 3f 40 41 41 42 43 44  	        .BYTE $3E,$3F,$40,$41,$41,$42,$43,$44

>2358	 45 46 47 48 48 49 4a 4b  	        .BYTE $45,$46,$47,$48,$48,$49,$4A,$4B

>2360	 4c 4d 4e 4f 50 51 51 52  	        .BYTE $4C,$4D,$4E,$4F,$50,$51,$51,$52

>2368	 53 54 55 56 57 58 59 5a  	        .BYTE $53,$54,$55,$56,$57,$58,$59,$5A

>2370	 5b 5c 5d 5e 5e 5f 60 61  	        .BYTE $5B,$5C,$5D,$5E,$5E,$5F,$60,$61

>2378	 62 63 64 65 66 67 68 69  	        .BYTE $62,$63,$64,$65,$66,$67,$68,$69

>2380	 6a 6b 6c 6d 6e 6f 70 71  	        .BYTE $6A,$6B,$6C,$6D,$6E,$6F,$70,$71

>2388	 72 73 74 75 76 77 78 79  	        .BYTE $72,$73,$74,$75,$76,$77,$78,$79

>2390	 7a 7b 7c 7d 7e 7f 80 81  	        .BYTE $7A,$7B,$7C,$7D,$7E,$7F,$80,$81

>2398	 82 83 84 85 87 88 89 8a  	        .BYTE $82,$83,$84,$85,$87,$88,$89,$8A

>23a0	 8b 8c 8d 8e 8f 90 91 92  	        .BYTE $8B,$8C,$8D,$8E,$8F,$90,$91,$92

>23a8	 93 95 96 97 98 99 9a 9b  	        .BYTE $93,$95,$96,$97,$98,$99,$9A,$9B

>23b0	 9c 9d 9f a0 a1 a2 a3 a4  	        .BYTE $9C,$9D,$9F,$A0,$A1,$A2,$A3,$A4

>23b8	 a5 a6 a8 a9 aa ab ac ad  	        .BYTE $A5,$A6,$A8,$A9,$AA,$AB,$AC,$AD

>23c0	 af b0 b1 b2 b3 b4 b6 b7  	        .BYTE $AF,$B0,$B1,$B2,$B3,$B4,$B6,$B7

>23c8	 b8 b9 ba bc bd be bf c0  	        .BYTE $B8,$B9,$BA,$BC,$BD,$BE,$BF,$C0

>23d0	 c2 c3 c4 c5 c6 c8 c9 ca  	        .BYTE $C2,$C3,$C4,$C5,$C6,$C8,$C9,$CA

>23d8	 cb cd ce cf d0 d2 d3 d4  	        .BYTE $CB,$CD,$CE,$CF,$D0,$D2,$D3,$D4

>23e0	 d6 d7 d8 d9 db dc dd de  	        .BYTE $D6,$D7,$D8,$D9,$DB,$DC,$DD,$DE

>23e8	 e0 e1 e2 e4 e5 e6 e8 e9  	        .BYTE $E0,$E1,$E2,$E4,$E5,$E6,$E8,$E9

>23f0	 ea ec ed ee f0 f1 f2 f4  	        .BYTE $EA,$EC,$ED,$EE,$F0,$F1,$F2,$F4

>23f8	 f5 f6 f8 f9 fa fc fd ff  	        .BYTE $F5,$F6,$F8,$F9,$FA,$FC,$FD,$FF


.2400					ver_pos_hi

>2400	 00 00 00 00 00 00 00 00  			.BYTE $00,$00,$00,$00,$00,$00,$00,$00

>2408	 01 01 01 01 01 01 01 01  	        .BYTE $01,$01,$01,$01,$01,$01,$01,$01

>2410	 02 02 02 02 02 02 02 02  	        .BYTE $02,$02,$02,$02,$02,$02,$02,$02

>2418	 03 03 03 03 03 03 03 03  	        .BYTE $03,$03,$03,$03,$03,$03,$03,$03

>2420	 05 05 05 05 05 05 05 05  	        .BYTE $05,$05,$05,$05,$05,$05,$05,$05

>2428	 06 06 06 06 06 06 06 06  	        .BYTE $06,$06,$06,$06,$06,$06,$06,$06

>2430	 07 07 07 07 07 07 07 07  	        .BYTE $07,$07,$07,$07,$07,$07,$07,$07

>2438	 08 08 08 08 08 08 08 08  	        .BYTE $08,$08,$08,$08,$08,$08,$08,$08

>2440	 0a 0a 0a 0a 0a 0a 0a 0a  	        .BYTE $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A

>2448	 0b 0b 0b 0b 0b 0b 0b 0b  	        .BYTE $0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B

>2450	 0c 0c 0c 0c 0c 0c 0c 0c  	        .BYTE $0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C

>2458	 0d 0d 0d 0d 0d 0d 0d 0d  	        .BYTE $0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D

>2460	 0f 0f 0f 0f 0f 0f 0f 0f  	        .BYTE $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F

>2468	 10 10 10 10 10 10 10 10  	        .BYTE $10,$10,$10,$10,$10,$10,$10,$10

>2470	 11 11 11 11 11 11 11 11  	        .BYTE $11,$11,$11,$11,$11,$11,$11,$11

>2478	 12 12 12 12 12 12 12 12  	        .BYTE $12,$12,$12,$12,$12,$12,$12,$12

>2480	 14 14 14 14 14 14 14 14  	        .BYTE $14,$14,$14,$14,$14,$14,$14,$14

>2488	 aa aa aa aa aa aa aa aa  	        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA


.2490					ver_pos_lo

>2490	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>2498	 40 41 42 43 44 45 46 47  	        .BYTE $40,$41,$42,$43,$44,$45,$46,$47

>24a0	 80 81 82 83 84 85 86 87  	        .BYTE $80,$81,$82,$83,$84,$85,$86,$87

>24a8	 c0 c1 c2 c3 c4 c5 c6 c7  	        .BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>24b0	 00 01 02 03 04 05 06 07  	        .BYTE $00,$01,$02,$03,$04,$05,$06,$07

>24b8	 40 41 42 43 44 45 46 47  	        .BYTE $40,$41,$42,$43,$44,$45,$46,$47

>24c0	 80 81 82 83 84 85 86 87  	        .BYTE $80,$81,$82,$83,$84,$85,$86,$87

>24c8	 c0 c1 c2 c3 c4 c5 c6 c7  			.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>24d0	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>24d8	 40 41 42 43 44 45 46 47  			.BYTE $40,$41,$42,$43,$44,$45,$46,$47

>24e0	 80 81 82 83 84 85 86 87  			.BYTE $80,$81,$82,$83,$84,$85,$86,$87

>24e8	 c0 c1 c2 c3 c4 c5 c6 c7  			.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>24f0	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>24f8	 40 41 42 43 44 45 46 47  			.BYTE $40,$41,$42,$43,$44,$45,$46,$47

>2500	 80 81 82 83 84 85 86 87  			.BYTE $80,$81,$82,$83,$84,$85,$86,$87

>2508	 c0 c1 c2 c3 c4 c5 c6 c7  			.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>2510	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>2518	 aa aa aa aa aa aa aa aa  			.BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA


.2520					hor_scr_pos

>2520	 00 00 00 00 08 08 08 08  			.BYTE $00,$00,$00,$00,$08,$08,$08,$08

>2528	 10 10 10 10 18 18 18 18  	        .BYTE $10,$10,$10,$10,$18,$18,$18,$18

>2530	 20 20 20 20 28 28 28 28  	        .BYTE $20,$20,$20,$20,$28,$28,$28,$28

>2538	 30 30 30 30 38 38 38 38  	        .BYTE $30,$30,$30,$30,$38,$38,$38,$38

>2540	 40 40 40 40 48 48 48 48  	        .BYTE $40,$40,$40,$40,$48,$48,$48,$48

>2548	 50 50 50 50 58 58 58 58  	        .BYTE $50,$50,$50,$50,$58,$58,$58,$58

>2550	 60 60 60 60 68 68 68 68  	        .BYTE $60,$60,$60,$60,$68,$68,$68,$68

>2558	 70 70 70 70 78 78 78 78  	        .BYTE $70,$70,$70,$70,$78,$78,$78,$78

>2560	 80 80 80 80 88 88 88 88  	        .BYTE $80,$80,$80,$80,$88,$88,$88,$88

>2568	 90 90 90 90 98 98 98 98  	        .BYTE $90,$90,$90,$90,$98,$98,$98,$98

>2570	 a0 a0 a0 a0 a8 a8 a8 a8  	        .BYTE $A0,$A0,$A0,$A0,$A8,$A8,$A8,$A8

>2578	 b0 b0 b0 b0 b8 b8 b8 b8  	        .BYTE $B0,$B0,$B0,$B0,$B8,$B8,$B8,$B8

>2580	 c0 c0 c0 c0 c8 c8 c8 c8  	        .BYTE $C0,$C0,$C0,$C0,$C8,$C8,$C8,$C8

>2588	 d0 d0 d0 d0 d8 d8 d8 d8  	        .BYTE $D0,$D0,$D0,$D0,$D8,$D8,$D8,$D8

>2590	 e0 e0 e0 e0 e8 e8 e8 e8  	        .BYTE $E0,$E0,$E0,$E0,$E8,$E8,$E8,$E8

>2598	 f0 f0 f0 f0 f8 f8 f8 f8  	        .BYTE $F0,$F0,$F0,$F0,$F8,$F8,$F8,$F8

>25a0	 00 00 00 00 08 08 08 08  	        .BYTE $00,$00,$00,$00,$08,$08,$08,$08

>25a8	 10 10 10 10 18 18 18 18  	        .BYTE $10,$10,$10,$10,$18,$18,$18,$18

>25b0	 20 20 20 20 28 28 28 28  			.BYTE $20,$20,$20,$20,$28,$28,$28,$28

>25b8	 30 30 30 30 38 38 38 38  			.BYTE $30,$30,$30,$30,$38,$38,$38,$38

>25c0	 c0 c0 c0 c0 c0 c0 aa aa  			.BYTE $C0,$C0,$C0,$C0,$C0,$C0,$AA,$AA

>25c8	 aa aa aa aa aa aa aa aa  	        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

>25d0	 25 25 28 29 24 24 aa aa  			.BYTE $25,$25,$28,$29,$24,$24,$AA,$AA

>25d8	 aa aa aa aa aa aa aa aa  	        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

>25e0	 80 80 00 00 80 80 14 15  			.BYTE $80,$80,$00,$00,$80,$80,$14,$15

>25e8	 15 16 16 17 17 0c 00 0c  	        .BYTE $15,$16,$16,$17,$17,$0C,$00,$0C

>25f0	 29 28 19 18 28 29 04 10  			.BYTE $29,$28,$19,$18,$28,$29,$04,$10

>25f8	 05 11 06 12 07 13 08 14  	        .BYTE $05,$11,$06,$12,$07,$13,$08,$14

>2600	 09 15 0a 16 0b 17 18 19  			.BYTE $09,$15,$0A,$16,$0B,$17,$18,$19

>2608	 19 1a 1b 1c 1c 1d 01 3d  	        .BYTE $19,$1A,$1B,$1C,$1C,$1D,$01,$3D

>2610	 1b 3d 1a 3c 1d 3c 22 e2  			.BYTE $1B,$3D,$1A,$3C,$1D,$3C,$22,$E2

>2618	 22 60 1f 60 1f e2 1d 62  			.BYTE $22,$60,$1F,$60,$1F,$E2,$1D,$62

>2620	 6b 9a c9 f8 27 56 85 b4  	LINE_DRAW_PTR_LO   .BYTE <LINE_DRAW_0,<LINE_DRAW_1,<LINE_DRAW_2,<LINE_DRAW_3,<LINE_DRAW_4,<LINE_DRAW_5,<LINE_DRAW_6,<LINE_DRAW_7 

>2628	 13 13 13 13 14 14 14 14  	LINE_DRAW_PTR_HI   .BYTE >LINE_DRAW_0,>LINE_DRAW_1,>LINE_DRAW_2,>LINE_DRAW_3,>LINE_DRAW_4,>LINE_DRAW_5,>LINE_DRAW_6,>LINE_DRAW_7 

>2630	 00 07 03 04 01 06 02 05  	LINE_DRAW_CONV_PTR .BYTE $00,$07,$03,$04,$01,$06,$02,$05

>2638	 9f 9f 00 00 00 00 9f 9f  	fBBD8   .BYTE $9F,$9F,$00,$00,$00,$00,$9F,$9F

>2640	 87 87 87 87 00 00 00 00  	fBBE0   .BYTE $87,$87,$87,$87,$00,$00,$00,$00

>2648	 40 38 08 00 40 38 28 30  	fBBE8   .BYTE $40,$38,$08,$00,$40,$38,$28,$30

>2650	 40 18 08 10 40 18 28 20  			.BYTE $40,$18,$08,$10,$40,$18,$28,$20

>2658	 00 00 03 00 00 00 02 02  	fBBF8   .BYTE $00,$00,$03,$00,$00,$00,$02,$02

>2660	 00 00 00 06 04 00 00 04  			.BYTE $00,$00,$00,$06,$04,$00,$00,$04

>2668	 0c 00 00 00 08 08 00 00  			.BYTE $0C,$00,$00,$00,$08,$08,$00,$00

>2670	 00 09 00 00 00 01 01 00  			.BYTE $00,$09,$00,$00,$00,$01,$01,$00

>2678	 01 00 00 00 01 01 00 00  	fBC18   .BYTE $01,$00,$00,$00,$01,$01,$00,$00

>2680	 00 01 00 00 00 01 01 00  			.BYTE $00,$01,$00,$00,$00,$01,$01,$00

>2688	 00 00 01 00 00 00 01 01  			.BYTE $00,$00,$01,$00,$00,$00,$01,$01

>2690	 00 00 00 01 01 00 00 01  			.BYTE $00,$00,$00,$01,$01,$00,$00,$01


.2700					pixel_pos

>2700	 3f cf f3 fc 3f cf f3 fc  			.BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2708	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2710	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2718	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2720	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2728	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2730	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2738	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2740	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2748	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2750	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2758	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2760	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2768	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2770	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2778	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2780	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2788	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2790	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2798	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC


.27a0					pers_point_tab_4

>27e0	 2f 35 41 62 67 96 09 00  	ZP 	.BYTE $2f,$35,$41,$62,$67,$96,$09,$00

>27e8	 be fd 9f 10 c0 f5 a0 40  		.BYTE $be,$fd,$9f,$10,$c0,$f5,$a0,$40

>27f0	 a7 54 00 00 00 00 92 f4  		.BYTE $a7,$54,$00,$00,$00,$00,$92,$f4

>27f8	 0c ff 78 34 30 b1 3c 81  		.BYTE $0c,$ff,$78,$34,$30,$b1,$3c,$81

>2800	 0a 18 12 0d 09 60 8f 88  		.BYTE $0a,$18,$12,$0d,$09,$60,$8f,$88

>2808	 00 00 00 02 01 01 92 dc  		.BYTE $00,$00,$00,$02,$01,$01,$92,$dc

>2810	 00 00 92 dc 46 20 92 dd  		.BYTE $00,$00,$92,$dc,$46,$20,$92,$dd

>2818	 00 01 92 dc 00 00 2e e5  		.BYTE $00,$01,$92,$dc,$00,$00,$2e,$e5

>2820	 48 fc e0 29 00 1d 39 1c  		.BYTE $48,$fc,$e0,$29,$00,$1d,$39,$1c

>2828	 00 01 1b e1 89 fd 92 dd  		.BYTE $00,$01,$1b,$e1,$89,$fd,$92,$dd

>2830	 48 fc e0 29 00 1d 39 1c  		.BYTE $48,$fc,$e0,$29,$00,$1d,$39,$1c

>2838	 a6 28 00 1d ee 18 89 0d  		.BYTE $a6,$28,$00,$1d,$ee,$18,$89,$0d

>2840	 a3 fd b6 0c 09 01 02 07  		.BYTE $a3,$fd,$b6,$0c,$09,$01,$02,$07

>2848	 15 e5 00 0a 9f 00 04 01  		.BYTE $15,$e5,$00,$0a,$9f,$00,$04,$01

>2850	 1b 1a 42 02 00 80 00 00  		.BYTE $1b,$1a,$42,$02,$00,$80,$00,$00

>2858	 01 01 00 00 a3 01 00 3f  		.BYTE $01,$01,$00,$00,$a3,$01,$00,$3f

>2860	 0f 01 aa 55 ff 03 00 00  		.BYTE $0f,$01,$aa,$55,$ff,$03,$00,$00

>2868	 1c 1c 1f 1f 00 e0 50 44  		.BYTE $1c,$1c,$1f,$1f,$00,$e0,$50,$44

>2870	 40 19 3c 18 10 19 0c 18  		.BYTE $40,$19,$3c,$18,$10,$19,$0c,$18

>2878	 ff b8 2c ab fc 1b fc 00  		.BYTE $ff,$b8,$2c,$ab,$fc,$1b,$fc,$00

>2880	 7b 85 18 01 06 06 0e a9  		.BYTE $7b,$85,$18,$01,$06,$06,$0e,$a9

>2888	 01 80 40 18 10 1c 00 11  		.BYTE $01,$80,$40,$18,$10,$1c,$00,$11

>2890	 05 00 01 00 3f 3c 02 03  		.BYTE $05,$00,$01,$00,$3f,$3c,$02,$03

>2898	 3f 00 00 fe 01 00 00 15  		.BYTE $3f,$00,$00,$fe,$01,$00,$00,$15

>28a0	 5a 00 01 06 06 0e 01 70  		.BYTE $5a,$00,$01,$06,$06,$0e,$01,$70

>28a8	 00 00 00 44 00 03 06 00  		.BYTE $00,$00,$00,$44,$00,$03,$06,$00

>28b0	 08 c0 08 10 0f 75 f7 ff  		.BYTE $08,$c0,$08,$10,$0f,$75,$f7,$ff

>28b8	 80 f7 ff 71 f8 ff 02 00  		.BYTE $80,$f7,$ff,$71,$f8,$ff,$02,$00

>28c0	 00 7d 19 64 0b 02 00 03  		.BYTE $00,$7d,$19,$64,$0b,$02,$00,$03

>28c8	 25 3f ff 00 00 88 ff 00  		.BYTE $25,$3f,$ff,$00,$00,$88,$ff,$00

>28d0	 00 00 43 16 00 00 7e 09  		.BYTE $00,$00,$43,$16,$00,$00,$7e,$09

>28d8	 00 00 00 00 0a 60 21 7d  		.BYTE $00,$00,$00,$00,$0a,$60,$21,$7d

=4000					SCREEN0 = $4000

=5c00					ab5C00 = $5C00 ; SCREEN COLOUR 

=6000					SCREEN1 = $6000


;******  end of code
