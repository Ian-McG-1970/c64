; work out what flags collision with ground sets

UNKNOWN_POINT_TAB_6 =$0100 ; UNKNOWN_POINT_TAB_6
abbbc7 =$BBC7
abbbc4 =$BBC4
abbbc5 =$BBC5
abbbc6 =$BBC6
fbba5 =$BBA5
fbb89 =$BB89
abbbc2 =$BBC2
abbbc3 =$BBC3

b29EF = $29ef
sae96 = $ae96
jaed3 = $aed3


; **** ZP FIELDS **** 
;
f00 = $00
f01 = $01
f03 = $03
f2E = $2E
f2F = $2F
f30 = $30
f32 = $32
f3F = $3F
f70 = $70
f8B = $8B
f8C = $8C
fA3 = $A3
fC2 = $C2
;
; **** ZP ABSOLUTE ADRESSES **** 
;
SCREEN_POS_LO = $02
SCREEN_POS_HI = $03
SCREEN_FLIP = $24
SCREEN_BANK = $25
LINE_INC = $66
SCREEN_POS_PTR = $02


ab00 = $00
ab01 = $01
ab02 = $02
ab03 = $03
ab04 = $04
ab05 = $05
ab06 = $06
ab07 = $07
ab08 = $08
ab09 = $09
ab0A = $0A
ab0B = $0B
ab0C = $0C
ab0D = $0D
ab16 = $16
ab17 = $17
ab18 = $18
ab19 = $19
ab1A = $1A
ab1D = $1D
ab1E = $1E
ab1F = $1F
ab20 = $20
ab21 = $21
ab23 = $23
ab24 = $24
ab25 = $25
ab26 = $26
ab27 = $27
ab28 = $28
ab29 = $29
ab2A = $2A
ab2B = $2B
ab2C = $2C
ab2D = $2D
ab2E = $2E
ab2F = $2F
ab30 = $30
ab31 = $31
ab32 = $32
ab33 = $33
ab34 = $34
ab35 = $35
ab36 = $36
ab37 = $37
ab38 = $38
ab39 = $39
ab3A = $3A
ab3B = $3B
ab3C = $3C
ab3D = $3D
ab3E = $3E
ab3F = $3F
ab40 = $40
ab41 = $41
ab42 = $42
ab43 = $43
ab44 = $44
ab45 = $45
ab46 = $46
ab47 = $47
ab48 = $48
ab49 = $49
ab4A = $4A
ab4B = $4B
ab4C = $4C
ab4D = $4D
ab4E = $4E
ab4F = $4F
ab50 = $50
ab51 = $51
ab52 = $52
ab53 = $53
ab54 = $54
ab55 = $55
ab56 = $56
ab57 = $57
ab58 = $58
ab59 = $59
ab5A = $5A
ab5B = $5B
ab5C = $5C
ab5D = $5D
ab5E = $5E
ab5F = $5F
ab60 = $60
ab61 = $61
ab62 = $62
ab63 = $63
ab64 = $64
ab65 = $65
ab66 = $66
ab67 = $67
ab68 = $68
ab69 = $69
ab6A = $6A
ab6B = $6B
ab6C = $6C
ab6D = $6D
ab6E = $6E
ab6F = $6F
ab70 = $70
ab71 = $71
CURR_X_LSB = $72
CURR_X_MSB = $73
CURR_X_HSB = $74
CURR_Y_LSB = $75
CURR_Y_MSB = $76
CURR_Y_HSB = $77
CURR_Z_LSB = $78
CURR_Z_MSB = $79
CURR_Z_HSB = $7A
ab7B = $7B
ab7C = $7C
ab7D = $7D
ab7F = $7F
ab80 = $80
ab81 = $81
ab82 = $82
ab83 = $83
ab84 = $84
ab85 = $85
ab86 = $86
ab87 = $87
ab88 = $88
ab89 = $89
ab8A = $8A
ab8B = $8B
ab8C = $8C
ab8D = $8D
ab8E = $8E
ab8F = $8F
ab90 = $90
ab91 = $91
ab92 = $92
ab93 = $93
ab94 = $94
ab95 = $95
ab96 = $96
ab97 = $97
ab98 = $98
ab99 = $99
ab9A = $9A
ab9B = $9B
ab9C = $9C
ab9D = $9D
ab9E = $9E
ab9F = $9F
abA0 = $A0
abA1 = $A1
abA2 = $A2
abA3 = $A3
abA4 = $A4
abA5 = $A5
abA6 = $A6
PLANET = $A8 ; ON GROUND (0) OR UNDERGROUND (NOT 0)
TRANSPORT_MODE = $A9 ; CRAFT ID or $80 FOR WALKING
abAA = $AA
abAB = $AB
abAC = $AC
abAD = $AD
abAE = $AE
abAF = $AF
abB0 = $B0
abB1 = $B1
abB2 = $B2
abB3 = $B3
abB5 = $B5
abB6 = $B6
abB7 = $B7
abB8 = $B8
abB9 = $B9
abBA = $BA
abBB = $BB
abBC = $BC
abBE = $BE
abBF = $BF
abC0 = $C0
abC2 = $C2
abC4 = $C4
abC5 = $C5
abC6 = $C6
abC7 = $C7
abC8 = $C8
ELEVATOR = $CA ; LIFT FLAG
abCB = $CB
abCC = $CC
abCD = $CD
abCF = $CF
abD0 = $D0
abD1 = $D1
abD2 = $D2
abD3 = $D3
abD4 = $D4
DIFF_X_LSB = $D5
DIFF_X_MSB = $D6
DIFF_X_HSB = $D7
DIFF_Y_LSB = $D8
DIFF_Y_MSB = $D9
DIFF_Y_HSB = $DA
DIFF_Z_LSB = $DB
DIFF_Z_MSB = $DC
DIFF_Z_HSB = $DD
abDE = $DE
abDF = $DF
abE0 = $E0
abE1 = $E1
abE2 = $E2
abE3 = $E3
abE4 = $E4
abE5 = $E5
abE6 = $E6
abE7 = $E7
abE8 = $E8
abE9 = $E9
abEA = $EA
abEB = $EB
abEC = $EC
abED = $ED
abEE = $EE
abEF = $EF
abF0 = $F0
abF1 = $F1
abF2 = $F2
abF3 = $F3
abF6 = $F6
abF7 = $F7
abF8 = $F8
abF9 = $F9
abFA = $FA
abFC = $FC
;
; **** ZP POINTERS **** 
;
p00 = $00
p01 = $01
p02 = $02
p03 = $03
p04 = $04
p06 = $06
p08 = $08
p09 = $09
p0B = $0B
p0E = $0E
p0F = $0F
p16 = $16
p1B = $1B
OBJECT_POINTER = $1D
p1F = $1F
p21 = $21
p2B = $2B
p34 = $34
p3C = $3C
p47 = $47
p48 = $48
p50 = $50
p51 = $51
p59 = $59
p61 = $61
p8B = $8B
p8C = $8C
;
; **** FIELDS **** 
;
f0000 = $0000
f002A = $002A
f0100 = $0100
fD7FF = $D7FF
fD8A9 = $D8A9
fD953 = $D953
fD9FD = $D9FD
fDAA7 = $DAA7
fDB00 = $DB00
fDB09 = $DB09
fDB12 = $DB12
fDB47 = $DB47
fDB77 = $DB77
;
; **** ABSOLUTE ADRESSES **** 
;
ab000B = $000B
ab0042 = $0042
ab0080 = $0080
ab0101 = $0101
abD800 = $D800
abDAFA = $DAFA
abDAFB = $DAFB
abDB22 = $DB22
abDB23 = $DB23
abDB42 = $DB42
abDB43 = $DB43
abDB44 = $DB44
abDB45 = $DB45
abDB4A = $DB4A
abDB4B = $DB4B
abDB6A = $DB6A
abDB6B = $DB6B
abDB6C = $DB6C
abDB6D = $DB6D
abDB72 = $DB72
abDB73 = $DB73
abFFFE = $FFFE
abFFFF = $FFFF
;
; **** POINTERS **** 
;
p0004 = $0004
p20 = $0020
p39 = $0039
;
; **** EXTERNAL JUMPS **** 
;
e0038 = $0038

;;        * = $0140
        * = $2300

        JMP	STARTUP ; 3 bytes used taking UNKNOWN_POINT_TAB_7 from 64 bytes to 61 bytes
ZP .BYTE $2f,$35,$41,$62,$67,$96,$09,$00
 .BYTE $be,$fd,$9f,$10,$c0,$f5,$a0,$40
 .BYTE $a7,$54,$00,$00,$00,$00,$92,$f4
 .BYTE $0c,$ff,$78,$34,$30,$b1,$3c,$81
 .BYTE $0a,$18,$12,$0d,$09,$60,$8f,$88
 .BYTE $00,$00,$00,$02,$01,$01,$92,$dc
 .BYTE $00,$00,$92,$dc,$46,$20,$92,$dd
 .BYTE $00,$01,$92,$dc,$00,$00,$2e,$e5
 .BYTE $48,$fc,$e0,$29,$00,$1d,$39,$1c
 .BYTE $00,$01,$1b,$e1,$89,$fd,$92,$dd
 .BYTE $48,$fc,$e0,$29,$00,$1d,$39,$1c
 .BYTE $a6,$28,$00,$1d,$ee,$18,$89,$0d
 .BYTE $a3,$fd,$b6,$0c,$09,$01,$02,$07
 .BYTE $15,$e5,$00,$0a,$9f,$00,$04,$01
 .BYTE $1b,$1a,$42,$02,$00,$80,$00,$00
 .BYTE $01,$01,$00,$00,$a3,$01,$00,$3f
 .BYTE $0f,$01,$aa,$55,$ff,$03,$00,$00
 .BYTE $1c,$1c,$1f,$1f,$00,$e0,$50,$44
 .BYTE $40,$19,$3c,$18,$10,$19,$0c,$18
 .BYTE $ff,$b8,$2c,$ab,$fc,$1b,$fc,$00
 .BYTE $7b,$85,$18,$01,$06,$06,$0e,$a9
 .BYTE $01,$80,$40,$18,$10,$1c,$00,$11
 .BYTE $05,$00,$01,$00,$3f,$3c,$02,$03
 .BYTE $3f,$00,$00,$fe,$01,$00,$00,$15
 .BYTE $5a,$00,$01,$06,$06,$0e,$01,$70
 .BYTE $00,$00,$00,$44,$00,$03,$06,$00
 .BYTE $08,$c0,$08,$10,$0f,$75,$f7,$ff
 .BYTE $80,$f7,$ff,$71,$f8,$ff,$02,$00
 .BYTE $00,$7d,$19,$64,$0b,$02,$00,$03
 .BYTE $25,$3f,$ff,$00,$00,$88,$ff,$00
 .BYTE $00,$00,$43,$16,$00,$00,$7e,$09
 .BYTE $00,$00,$00,$00,$0a,$60,$21,$7d
 	
;;UNKNOWN_POINT_TAB_7 .FILL 61,0 ; .FILL 64,0  ; f0140
UNKNOWN_POINT_TAB_7 = $0140 ; .FILL 61,0 ; .FILL 64,0  ; f0140

;;UNKNOWN_POINT_TAB_8 ; f0180
UNKNOWN_POINT_TAB_8 = $0180
;;	.FILL 64,0
;;	.FILL 64,0
;;	.FILL 64,0
;;	.FILL 64,0
;;	.FILL 64,0
;;UNKNOWN_POINT_TAB_9	.FILL 64,0 ; f02C0
UNKNOWN_POINT_TAB_9 = $02C0
;;	.FILL 64,0

;;UNKNOWN_POINT_TAB_10 .FILL 64,0 ; f0340 
UNKNOWN_POINT_TAB_10 = $0340 
;;UNKNOWN_POINT_TAB_1 .FILL 64,0 ; f0380
UNKNOWN_POINT_TAB_1 = $0380
;;UNKNOWN_POINT_TAB_3 .FILL 64,0 ; f03C0
UNKNOWN_POINT_TAB_3 = $03C0

;;f0400 .FILL 64,0
f0400 = $0400
;;ab0440 .FILL 64,0
ab0440 = $0440
;; .FILL 64,0 ; f0480
;;  .FILL 64,0 ; f04C0
;;f0500   .FILL 64,0
f0500 = $0500
;;ab0540   .FILL 64,0
ab0540 = $0540
; f0580   
;;	.FILL 64,0
; f05C0   
;;	.FILL 64,0
;;UNKNOWN_POINT_TAB_2   .FILL 64,0 ; 0600
UNKNOWN_POINT_TAB_2 = $0600
;;UNKNOWN_POINT_TAB_5   .FILL 64,0 ; f0640
UNKNOWN_POINT_TAB_5 = $0640
;;PERS_HOR .FILL 64,0
PERS_HOR = $0680
;;PERS_VER .FILL 64,0
PERS_VER = $06C0

; 00 = point is onscreen
; 01 = point needs off left/right
; 02 = point is off top/bottom
; 03 = point is off left/right + top/bottom
; 80 / minus = point is behind

;;POINT_CLASSIFICATION   .FILL 64,0; 0700
POINT_CLASSIFICATION = $0700

;;f0740   .FILL 64,0
f0740 = $0740
;;f0780    .FILL 64,0
f0780 = $0780
;;f07C0   .FILL 64,0
f07C0 = $07C0
;;	.FILL 75*8,0
;;	.FILL 4,0

;;f0A5C   
f0A5C = $0A5C   
;;	.FILL 150*8,0
;;	.FILL 2,0
;;	.FILL 159*8,0
;;        .FILL 6,0
;;	.FILL 32*8,0
;;	.FILL 6,0

;;f1512   
f1512 = $1512   
;;	.FILL 45*8,0

;;f167A   
f167A = $167A   
;;	.FILL 324*8,0
;;	.FILL 6,0

;;f20A0   
f20A0 = $20A0   
;;	.FILL 64,0

;;f20E0   
f20E0 = $20E0   
;;	.FILL 64,0

;;f2120   
f2120 = $2120   
;;	.FILL 240,0

;;f2210 
f2210 = $2210 
;;	.FILL 31*8,0
;;	.FILL 7,0

;;ab230F .FILL 26,0
ab230F = $230F

;;ab2329 
ab2329 = $2329 
;;	.FILL 26*8,0
;;	.FILL 7,0

;;ab2400 
ab2400 = $2400 
;	JMP	STARTUP ; 3 bytes used taking UNKNOWN_POINT_TAB_7 from 64 bytes to 61 bytes 	
	.FILL (16*8)-3,0

OBJ_X_MSB  
	.BYTE $6F,$61,$7F,$04,$0A,$03,$01,$08
        .BYTE $73,$00,$88,$00,$01,$01,$88,$37
        .BYTE $04,$01,$01,$02,$04,$03,$01,$05
        .BYTE $02,$04,$03,$03,$04,$03,$03,$05
        .BYTE $06,$0A,$02,$02,$04,$02,$05,$00
        .BYTE $04,$06,$05,$06,$03,$05,$02,$05
        .BYTE $00,$03,$83,$01,$03,$02,$03,$03
        .BYTE $03,$00,$04,$01,$00,$72,$72,$70

OBJ_Y_MSB  
	.BYTE $80,$00,$00,$00,$00,$00,$00,$00
        .BYTE $FF,$00,$00,$00,$00,$00,$FF,$24
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$FC

OBJ_Z_MSB   
	.BYTE $FB,$80,$80,$08,$04,$08,$04,$08
        .BYTE $8E,$03,$88,$03,$03,$00,$7F,$81
        .BYTE $01,$01,$00,$02,$02,$02,$01,$01
        .BYTE $00
ab2519  .BYTE $02,$02,$02,$02,$02,$00,$01,$02
        .BYTE $01,$01,$02,$03,$04,$02,$01,$02
        .BYTE $04,$03,$03,$02,$02,$04,$03,$04
f2531   .BYTE $00,$8D,$00,$06,$02,$02,$00,$57
        .BYTE $01,$00,$00,$06,$72,$72,$70

OBJ_X_HSB   
	.BYTE $00,$03,$0C,$00,$00,$00,$00,$00
        .BYTE $03,$00,$08,$00,$00,$00,$03,$03
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$DE,$00,$00,$00,$00,$00
        .BYTE $B5,$00,$00,$00,$00,$51,$88,$08

OBJ_Y_HSB
	.BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $FF,$00,$00,$00,$00,$00,$FF,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$40

OBJ_Z_HSB
	.BYTE $0C,$00,$0D,$00,$00,$00,$00,$00
        .BYTE $0F,$00,$08,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$0B,$00,$00,$00,$00,$00
        .BYTE $D9,$00,$00,$00,$00,$23,$88,$08

f2600   
	.FILL 32*8,0

 f2700  
	.FILL 32*8,0

 OBJECT_SHAPE_PTR_LO
	.BYTE $25,$25,$43,$8D,$CC,$52,$F8,$15
        .BYTE $5C,$25,$28,$25,$CA,$25,$5C,$CC
        .BYTE $82,$B1,$CE,$F4,$23,$52,$78,$B0
        .BYTE $E8,$06,$A6,$4C,$C4,$84,$54,$8E
        .BYTE $91,$5D,$5A,$17,$12,$C9,$6A,$90
        .BYTE $80,$06,$74,$76,$E5,$28,$B8,$87
        .BYTE $FA,$CF,$5E,$0C,$BE,$61,$8F,$BF
        .BYTE $45,$F8,$00,$00,$F8,$4A,$4A,$8D

OBJECT_SHAPE_PTR_HI
	.BYTE $3B,$3B,$3B,$3B,$3B,$17,$3B,$3C
        .BYTE $3C,$3B,$20,$3B,$1B,$3B,$3C,$3B
        .BYTE $3C,$3C,$3C,$3C,$3D,$3D,$3D,$3D
        .BYTE $3D,$1E,$1B,$1C,$1D,$1C,$1E,$1E
        .BYTE $17,$18,$1A,$3E,$1A,$17,$1F,$1F
        .BYTE $1A,$19,$19,$1D,$1A,$1B,$1A,$18
        .BYTE $17,$1E,$1B,$1F,$1C,$3E,$3E,$3E
        .BYTE $1B,$3E,$17,$17,$3E,$3F,$3F,$3F

OBJ_X_LSB
	.BYTE $41,$A6,$2E,$57,$0E,$78,$A8,$00
        .BYTE $7D,$9C,$00,$9C,$61,$3C,$AC,$E7
        .BYTE $E5,$B7,$F1,$F6,$AE,$A7,$16,$C7
        .BYTE $1D,$28,$53,$53,$28,$53,$02,$9E
        .BYTE $11,$C0,$51,$B3,$B5,$D0,$87,$20
        .BYTE $4F,$85,$2E,$0B,$10,$58,$60,$8C
        .BYTE $6E,$CF,$05,$A6,$DF,$8C,$5A,$58
        .BYTE $DA,$00,$80,$80,$00,$00,$00,$00

OBJ_Y_LSB
	.BYTE $01,$00,$00,$00,$00,$00,$00,$00
        .BYTE $A4,$00,$00,$00,$00,$00,$FF,$32
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$C0

OBJ_Z_LSB
	.BYTE $A4,$89,$44,$20,$4B,$90,$37,$00
        .BYTE $2C,$72,$00,$72,$D9,$FE,$5A,$C6
        .BYTE $65,$72,$BA,$95,$15,$B0,$8A,$74
        .BYTE $BA,$22,$27,$27,$22,$27,$FE,$8A
        .BYTE $70,$28,$7A,$7B,$B1,$00,$A3,$67
        .BYTE $2B,$5E,$8E,$5D,$3E,$13,$80,$B9
        .BYTE $AB,$B9,$58,$20,$C4,$A2,$ED,$AC
        .BYTE $69,$80,$00,$00,$80,$00,$00,$00

f2940 
	.FILL 8*8,0

OBJECTS_TO_DRAW   ; objects to draw
	.BYTE $00,$11,$3E,$3D,$38,$32,$0A,$02,$01
        .BYTE $00,$01,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00

f29C0   .BYTE $30,$20,$20,$20,$20,$20,$08,$24
f29C8   .BYTE $10,$10,$10,$10,$04,$10,$10,$10
        .BYTE $08,$00,$00,$00,$00,$00,$00,$00
        .BYTE $08,$08
ab29DA  .BYTE $08
ab29DB  .BYTE $08,$08,$28,$08,$08,$08,$00,$08
        .BYTE $08,$00,$10,$08,$00,$08,$08,$08
        .BYTE $08,$08,$08
ab29EE  .BYTE $08
ab29EF  .BYTE $08
ab29F0  .BYTE $10,$00,$10,$10,$10,$00,$00,$00
ab29F8  .BYTE $10,$10,$10,$10,$10,$10,$10,$10

f2A00  
	.FILL 32*8,0

f2B00  
	.FILL 32*8,0

f2C00   
	.FILL 3,0
f2C03   
	.FILL 31*8,0
	.FILL 5,0

f2D00
	.FILL 3,0
f2D03   
	.FILL 17*8,0
        .FILL 1,0

f2D8C   
	.FILL 14*8,0
        .FILL 4,0

f2E00   .FILL 3,0
f2E03   
	.FILL 31*8,0
	.FILL 5,0

f2F00   .FILL 3,0
f2F03  
	.FILL 55*8,0
	.FILL 5,0

ab30C0 
	.FILL 40*8,0

ab3200 
	.FILL 68*8,0
        .FILL 1,0
        
	.FILL 1798,0
;        3B43
        
AB3421 = $3421 
        
OBJ_00
        .BYTE $00,$20
        .BYTE $10,$00,$20,$FD,$02,$20,$03,$02
        .BYTE $20,$00,$0C,$20,$00,$00,$E1,$09
        .BYTE $01,$13,$34,$42,$20,$05,$15,$25
        .BYTE $35,$45
OBJ_01
	.BYTE $0F,$F8,$00,$10,$FA,$0C
        .BYTE $0C,$FA,$0C,$00,$F9,$06,$FD,$F9
        .BYTE $04,$F4,$FC,$04,$F0,$FC,$00,$F0
        .BYTE $F9,$00,$F4,$08,$00,$10,$06,$0C
        .BYTE $0C,$06,$0C,$00,$07,$06,$FD,$07
        .BYTE $04,$F4,$04,$04,$F0,$04,$00,$F0
        .BYTE $07,$00,$F4,$17,$01,$12,$23,$34
        .BYTE $45,$56,$67,$70,$89,$9A,$AB,$BC
        .BYTE $CD,$DE,$EF,$F8,$47,$CF,$08,$19
        .BYTE $2A,$3B,$5D,$6E
OBJ_03
	.BYTE $0F,$F8,$04,$18
        .BYTE $08,$04,$18,$00,$04,$E8,$00,$0C
        .BYTE $18,$E2,$04,$18,$1E,$04,$18,$FC
        .BYTE $04,$00,$04,$04,$00,$00,$14,$18
        .BYTE $00,$0A,$0C,$F2,$04,$10,$F2,$00
        .BYTE $10,$0E,$04,$10,$0E,$00,$10,$00
        .BYTE $04,$F0,$00,$00,$F0,$0C,$20,$23
        .BYTE $21,$13,$03,$45,$46,$57,$38,$89
        .BYTE $AB,$CD,$EF,$07,$00,$00,$00,$EC
        .BYTE $07,$00,$F6,$07,$11,$0A,$07,$11
        .BYTE $14,$07,$00,$0A,$07,$EF,$F6,$07
        .BYTE $EF,$00,$10,$00,$11,$01,$02,$03
        .BYTE $04,$05,$06,$71,$72,$73,$74,$75
        .BYTE $76,$12,$23,$34,$45,$56,$61,$05
        .BYTE $F4,$00,$10,$00,$00,$F0,$0C,$00
        .BYTE $10,$F4,$0A,$10,$00,$0A,$F0,$0C
        .BYTE $0A,$10,$08,$01,$12,$20,$34,$45
        .BYTE $53,$03,$14,$25,$0F,$F0,$00,$10
        .BYTE $10,$00,$10,$00,$00,$EC,$FC,$00
        .BYTE $04,$04,$00,$04,$00,$00,$FC,$FD
        .BYTE $04,$03,$03,$04,$03,$00,$04,$FD
        .BYTE $FE,$14,$02,$02,$14,$02,$00,$14
        .BYTE $FE,$FF,$04,$01,$01,$04,$01,$00
        .BYTE $04,$FF,$00,$34,$00,$14,$F6,$F7
        .BYTE $F8,$90,$A1,$B2,$06,$17,$28,$C3
        .BYTE $D4,$E5,$34,$45,$53,$67,$78,$86
        .BYTE $CD,$DE,$EC,$07,$F8,$F8,$F8,$08
        .BYTE $F8,$F8,$08,$F8,$08,$F8,$F8,$08
        .BYTE $F8,$08,$F8,$08,$08,$F8,$08,$08
        .BYTE $08,$F8,$08,$08,$0B,$01,$12,$23
        .BYTE $30,$04,$15,$26,$37,$45,$56,$67
        .BYTE $74,$09,$FC,$07,$04,$04,$07,$04
        .BYTE $00,$07,$FC,$00,$0E,$00,$FF,$07
        .BYTE $01,$01,$07,$01,$00,$07,$FF,$FE
        .BYTE $00,$02,$02,$00,$02,$00,$00,$FE
        .BYTE $0E,$01,$12,$20,$03,$13,$23,$45
        .BYTE $56,$64,$78,$89,$97,$47,$58,$69

OBJ_11
        .BYTE $05
        .BYTE $8B,$00,$8F
        .BYTE $75,$00,$8F
        .BYTE $00,$0C,$8F
        .BYTE $8B,$00,$71
        .BYTE $75,$00,$71
        .BYTE $00,$0C,$71
        .BYTE $08
        .BYTE $01,$12,$20,$34
        .BYTE $45,$53,$03,$14,$25

        .BYTE $07,$FF,$00

        .FILL 814,0

f3FFF   .BYTE $00
F4000   .FILL $14C8,0

f40F7 = $40F7
f41EF = $41EF
f42E7 = $42E7
f43DF = $43DF
f44D7 = $44D7
f45CF = $45CF
f46C7 = $46C7
f47BF = $47BF
f48B7 = $48B7
f49AF = $49AF
f4AA7 = $4AA7
f4B9F = $4B9F
f4C97 = $4C97
f4D8F = $4D8F
f4E87 = $4E87
f4F7F = $4F7F
f5077 = $5077
f516F = $516F
f5267 = $5267
f535F = $535F
f5447 = $5447
ab4C1D = $4C1D

	.FILL 15*8,0
;;HORIZON_COLUMNS_LO
;;	.BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
;;        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
;;        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
;;        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
;;        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
;;        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
;;        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
;;        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
;;        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
;;        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
;;        .BYTE $BA,$AE,$AB,$AA,$AA,$AA,$AA,$AA
;;        .BYTE $AA,$AA,$AA,$EA,$BA,$AE,$AB,$AA
;;        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$EA
;;        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
;;        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

VER_POS_HI
	.BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
        .BYTE $02,$02,$02,$02,$02,$02,$02,$02
        .BYTE $03,$03,$03,$03,$03,$03,$03,$03
        .BYTE $05,$05,$05,$05,$05,$05,$05,$05
        .BYTE $06,$06,$06,$06,$06,$06,$06,$06
        .BYTE $07,$07,$07,$07,$07,$07,$07,$07
        .BYTE $08,$08,$08,$08,$08,$08,$08,$08
        .BYTE $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A
        .BYTE $0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B
        .BYTE $0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C
        .BYTE $0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D
        .BYTE $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F
        .BYTE $10,$10,$10,$10,$10,$10,$10,$10
        .BYTE $11,$11,$11,$11,$11,$11,$11,$11
        .BYTE $12,$12,$12,$12,$12,$12,$12,$12
        .BYTE $14,$14,$14,$14,$14,$14,$14,$14
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

VER_POS_LO
	.BYTE $00,$01,$02,$03,$04,$05,$06,$07
        .BYTE $40,$41,$42,$43,$44,$45,$46,$47
        .BYTE $80,$81,$82,$83,$84,$85,$86,$87
        .BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7
        .BYTE $00,$01,$02,$03,$04,$05,$06,$07
        .BYTE $40,$41,$42,$43,$44,$45,$46,$47
        .BYTE $80,$81,$82
	.BYTE $83,$84,$85,$86,$87,$C0,$C1,$C2
        .BYTE $C3,$C4,$C5,$C6,$C7,$00,$01,$02
        .BYTE $03,$04,$05,$06,$07,$40,$41,$42
        .BYTE $43,$44,$45,$46,$47,$80,$81,$82
        .BYTE $83,$84,$85,$86,$87,$C0,$C1,$C2
        .BYTE $C3,$C4,$C5,$C6,$C7,$00,$01,$02
        .BYTE $03,$04,$05,$06,$07,$40,$41,$42
        .BYTE $43,$44,$45,$46,$47,$80,$81,$82
        .BYTE $83,$84,$85,$86,$87,$C0,$C1,$C2
        .BYTE $C3,$C4,$C5,$C6,$C7,$00,$01,$02
        .BYTE $03,$04,$05,$06,$07,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01
f56E8  
	.BYTE $40,$10,$04,$01,$40,$10,$04,$01
        .BYTE $40,$10,$04,$01,$40,$10,$04,$01
        .BYTE $40,$10,$04,$01,$40,$10,$04,$01

HOR_SCR_POS
	.BYTE $00,$00,$00,$00,$08,$08,$08,$08
        .BYTE $10,$10,$10,$10,$18,$18,$18,$18
        .BYTE $20,$20,$20,$20,$28,$28,$28,$28
        .BYTE $30,$30,$30,$30,$38,$38,$38,$38
        .BYTE $40,$40,$40,$40,$48,$48,$48,$48
        .BYTE $50,$50,$50,$50,$58,$58,$58,$58
        .BYTE $60,$60,$60,$60,$68,$68,$68,$68
        .BYTE $70,$70,$70,$70,$78,$78,$78,$78
        .BYTE $80,$80,$80,$80,$88,$88,$88,$88
        .BYTE $90,$90,$90,$90,$98,$98,$98,$98
        .BYTE $A0,$A0,$A0,$A0,$A8,$A8,$A8,$A8
        .BYTE $B0,$B0,$B0,$B0,$B8,$B8,$B8,$B8
        .BYTE $C0,$C0,$C0,$C0,$C8,$C8,$C8,$C8
        .BYTE $D0,$D0,$D0,$D0,$D8,$D8,$D8,$D8
        .BYTE $E0,$E0,$E0,$E0,$E8,$E8,$E8,$E8
        .BYTE $F0,$F0,$F0,$F0,$F8,$F8,$F8,$F8
        .BYTE $00,$00,$00,$00,$08,$08,$08,$08
        .BYTE $10,$10,$10,$10

f578C   .BYTE $18,$18,$18,$18,$20,$20,$20,$20
        .BYTE $28,$28,$28,$28,$30,$30,$30,$30
        .BYTE $38,$38,$38,$38
f57A0   .BYTE $C0,$C0,$C0,$C0,$C0,$C0,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
f57B0   .BYTE $25,$25,$28,$29,$24,$24,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
f57C0   .BYTE $80,$80,$00,$00,$80,$80,$14,$15
        .BYTE $15,$16,$16,$17,$17,$0C,$00,$0C
f57D0   .BYTE $29,$28,$19,$18,$28,$29,$04,$10
        .BYTE $05,$11,$06,$12,$07,$13,$08,$14
f57E0   .BYTE $09,$15,$0A,$16,$0B,$17,$18,$19
        .BYTE $19,$1A,$1B,$1C,$1C,$1D
ab57EE  .BYTE $01,$3D,$1B,$3D,$1A,$3C,$1D,$3C
        .BYTE $22,$E2,$22,$60,$1F,$60,$1F,$E2
        .BYTE $1D,$62

LOG_TABLE ; f5800
	.BYTE $00,$01,$03,$04,$06,$07,$09,$0A
        .BYTE $0B,$0D,$0E,$10,$11,$12,$14,$15
        .BYTE $16,$18,$19,$1A,$1C,$1D,$1E,$20
        .BYTE $21,$22,$24,$25,$26,$28,$29,$2A
        .BYTE $2C,$2D,$2E,$2F,$31,$32,$33,$34
        .BYTE $36,$37,$38,$39,$3B,$3C,$3D,$3E
        .BYTE $3F,$41,$42,$43,$44,$45,$47,$48
        .BYTE $49,$4A,$4B,$4D,$4E,$4F,$50,$51
        .BYTE $52,$54,$55,$56,$57,$58,$59,$5A
        .BYTE $5C,$5D,$5E,$5F,$60,$61,$62,$63
        .BYTE $64,$66,$67,$68,$69,$6A,$6B,$6C
        .BYTE $6D,$6E,$6F,$70,$71,$72,$74,$75
        .BYTE $76,$77,$78,$79,$7A,$7B,$7C,$7D
        .BYTE $7E,$7F,$80,$81,$82,$83,$84,$85
        .BYTE $86,$87,$88,$89,$8A,$8B,$8C,$8D
        .BYTE $8E,$8F,$90,$91,$92,$93,$94,$95
        .BYTE $96,$97,$98,$99,$9A,$9B,$9B,$9C
        .BYTE $9D,$9E,$9F,$A0,$A1,$A2,$A3,$A4
        .BYTE $A5,$A6,$A7,$A8,$A9,$A9,$AA,$AB
        .BYTE $AC,$AD,$AE,$AF,$B0,$B1,$B2,$B2
        .BYTE $B3,$B4,$B5,$B6,$B7,$B8,$B9,$B9
        .BYTE $BA,$BB,$BC,$BD,$BE,$BF,$C0,$C0
        .BYTE $C1,$C2,$C3,$C4,$C5,$C6,$C6,$C7
        .BYTE $C8,$C9,$CA,$CB,$CB,$CC,$CD,$CE
        .BYTE $CF,$D0,$D0,$D1,$D2,$D3,$D4,$D4
        .BYTE $D5,$D6,$D7,$D8,$D8,$D9,$DA,$DB
        .BYTE $DC,$DC,$DD,$DE,$DF,$E0,$E0,$E1
        .BYTE $E2,$E3,$E4,$E4,$E5,$E6,$E7,$E7
        .BYTE $E8,$E9,$EA,$EA,$EB,$EC,$ED,$EE
        .BYTE $EE,$EF,$F0,$F1,$F1,$F2,$F3,$F4
        .BYTE $F4,$F5,$F6,$F7,$F7,$F8,$F9,$F9
        .BYTE $FA,$FB,$FC,$FC,$FD,$FE,$FF,$FF

EXP_TABLE ; f5900
	.BYTE $00,$01,$01,$02,$03,$03,$04,$05
        .BYTE $06,$06,$07,$08,$08,$09,$0A,$0B
        .BYTE $0B,$0C,$0D,$0E,$0E,$0F,$10,$10
        .BYTE $11,$12,$13,$13,$14,$15,$16,$16
        .BYTE $17,$18,$19,$19,$1A,$1B,$1C,$1D
        .BYTE $1D,$1E,$1F,$20,$20,$21,$22,$23
        .BYTE $24,$24,$25,$26,$27,$28,$28,$29
        .BYTE $2A,$2B,$2C,$2C,$2D,$2E,$2F,$30
        .BYTE $30,$31,$32,$33,$34,$35,$35,$36
        .BYTE $37,$38,$39,$3A,$3A,$3B,$3C,$3D
        .BYTE $3E,$3F,$40,$41,$41,$42,$43,$44
        .BYTE $45,$46,$47,$48,$48,$49,$4A,$4B
        .BYTE $4C,$4D,$4E,$4F,$50,$51,$51,$52
        .BYTE $53,$54,$55,$56,$57,$58,$59,$5A
        .BYTE $5B,$5C,$5D,$5E,$5E,$5F,$60,$61
        .BYTE $62,$63,$64,$65,$66,$67,$68,$69
        .BYTE $6A,$6B,$6C,$6D,$6E,$6F,$70,$71
        .BYTE $72,$73,$74,$75,$76,$77,$78,$79
        .BYTE $7A,$7B,$7C,$7D,$7E,$7F,$80,$81
        .BYTE $82,$83,$84,$85,$87,$88,$89,$8A
        .BYTE $8B,$8C,$8D,$8E,$8F,$90,$91,$92
        .BYTE $93,$95,$96,$97,$98,$99,$9A,$9B
        .BYTE $9C,$9D,$9F,$A0,$A1,$A2,$A3,$A4
        .BYTE $A5,$A6,$A8,$A9,$AA,$AB,$AC,$AD
        .BYTE $AF,$B0,$B1,$B2,$B3,$B4,$B6,$B7
        .BYTE $B8,$B9,$BA,$BC,$BD,$BE,$BF,$C0
        .BYTE $C2,$C3,$C4,$C5,$C6,$C8,$C9,$CA
        .BYTE $CB,$CD,$CE,$CF,$D0,$D2,$D3,$D4
        .BYTE $D6,$D7,$D8,$D9,$DB,$DC,$DD,$DE
        .BYTE $E0,$E1,$E2,$E4,$E5,$E6,$E8,$E9
        .BYTE $EA,$EC,$ED,$EE,$F0,$F1,$F2,$F4
        .BYTE $F5,$F6,$F8,$F9,$FA,$FC,$FD,$FF

SIN_LSB   ; SIN/COS TABLE? f5A00
	.BYTE $92,$2E,$F7,$60,$C4,$14,$47,$79
        .BYTE $AB,$DD,$08,$21,$3A,$53,$6C,$85
        .BYTE $9E,$B7,$D0,$E9,$01,$0D,$1A,$26
        .BYTE $33,$3F,$4C,$58,$64,$71,$7D,$89
        .BYTE $96,$A2,$AE,$BB,$C7,$D3,$DF,$EC
        .BYTE $F8,$02,$08,$0E,$14,$1A,$20,$26
        .BYTE $2C,$32,$38,$3E,$44,$4A,$50,$56
        .BYTE $5C,$62,$68,$6E,$73,$79,$7F,$85
        .BYTE $8B,$91,$96,$9C,$A2,$A8,$AD,$B3
        .BYTE $B9,$BE,$C4,$CA,$CF,$D5,$DA,$E0
        .BYTE $E5,$EB,$F1,$F6,$FB,$00,$03,$06
        .BYTE $09,$0B,$0E,$11,$13,$16,$19,$1B
        .BYTE $1E,$20,$23,$26,$28,$2B,$2D,$30
        .BYTE $32,$35,$37,$3A,$3C,$3F,$41,$44
        .BYTE $46,$48,$4B,$4D,$50,$52,$54,$57
        .BYTE $59,$5B,$5E,$60,$62,$64,$67,$69
        .BYTE $6B,$6D,$70,$72,$74,$76,$78,$7A
        .BYTE $7C,$7F,$81,$83,$85,$87,$89,$8B
        .BYTE $8D,$8F,$91,$93,$95,$97,$98,$9A
        .BYTE $9C,$9E,$A0,$A2,$A4,$A5,$A7,$A9
        .BYTE $AB,$AC,$AE,$B0,$B1,$B3,$B5,$B6
        .BYTE $B8,$BA,$BB,$BD,$BE,$C0,$C1,$C3
        .BYTE $C4,$C6,$C7,$C9,$CA,$CB,$CD,$CE
        .BYTE $D0,$D1,$D2,$D3,$D5,$D6,$D7,$D8
        .BYTE $DA,$DB,$DC,$DD,$DE,$DF,$E0,$E2
        .BYTE $E3,$E4,$E5,$E6,$E7,$E8,$E9,$E9
        .BYTE $EA,$EB,$EC,$ED,$EE,$EF,$EF,$F0
        .BYTE $F1,$F2,$F3,$F3,$F4,$F5,$F5,$F6
        .BYTE $F6,$F7,$F8,$F8,$F9,$F9,$FA,$FA
        .BYTE $FB,$FB,$FC,$FC,$FC,$FD,$FD,$FD
        .BYTE $FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF
        .BYTE $FF,$00,$00,$00,$00,$00,$00,$00
 
SIN_MSB ; f5B00   ; SIN / COS TABLE?
	.BYTE $DC,$E4,$E4,$E8,$E8,$EC,$EC,$EC
        .BYTE $EC,$EC,$F0,$F0,$F0,$F0,$F0,$F0
        .BYTE $F0,$F0,$F0,$F0,$F4,$F4,$F4,$F4
        .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4
        .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4
        .BYTE $F4,$F8,$F8,$F8,$F8,$F8,$F8,$F8
        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8
        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8
        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8
        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8
        .BYTE $F8,$F8,$F8,$F8,$F8,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$00,$00,$00,$00,$00,$00,$00
f5BFF=$5BFF

ab5C00 ; SCREEN COLOUR 
	.BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66

f5CA9   ; SCREEN COLOUR
	.BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66

	.BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66
  .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66
   .BYTE $66
  .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$A0,$A0,$A0,$A0,$A0,$A0,$A0
        .BYTE $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
        .BYTE $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
        .BYTE $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
        .BYTE $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
        .BYTE $A0

f5ED0   .FILL 303,0
f5FFF   .BYTE $AA

f6000   .FILL $1400,0

f7447= $7447
f7540 = $7540

p7400   .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA ; CLEAR UPTO 7760 = 30560 -  29696 = 864 TO CLEAR
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA
	.BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$BA,$AE,$AB,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$EA,$BA,$AE,$AB
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $EA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA
   .BYTE $A9,$50,$A8,$A6,$0C,$BD,$D0,$55
        .BYTE $F0,$DC,$D0,$99,$96,$8F,$B9,$DC
        .BYTE $99,$96,$99,$96,$99,$99,$8F,$B9
        .BYTE $79,$D6,$76,$73,$BD,$6D,$68,$B9
        .BYTE $79,$73,$BD,$6D,$68,$67,$BD,$6D
        .BYTE $BD,$6D,$68,$5F,$50,$4F,$5F,$50
        .BYTE $4F,$2D,$26,$26,$24,$19,$19,$10
        .BYTE $64,$04,$F2,$02
ab757C  .BYTE $0F
ab757D  .BYTE $01
ab757E  .BYTE $00
ab757F  .BYTE $00
f7580   .BYTE $B9,$3C,$3E,$3A,$38,$36,$35,$33
        .BYTE $31,$30,$2E,$2D,$2B,$29,$28,$26
        .BYTE $23,$22,$2B,$1F,$1C,$27,$19,$17
        .BYTE $16,$14,$12,$12,$1B,$0F,$0D,$0B
        .BYTE $14,$09,$2E,$A9,$AA,$CA,$30,$15
        .BYTE $BC,$DE,$75,$D1,$02,$F0,$0E,$91
        .BYTE $02,$91,$04,$BC,$F2,$75,$91,$0E
        .BYTE $91,$10,$4C,$A5,$75,$C6,$0C,$30
f75C0   .BYTE $14,$3D,$3F,$3B,$39,$37,$36,$34
        .BYTE $3A,$31,$2F,$2E,$2C,$2A,$29,$27
        .BYTE $24,$23,$21,$20,$1D,$1B,$1A,$18
        .BYTE $35,$15,$13,$13,$15,$10,$2F,$0C
        .BYTE $0E,$0A,$08,$70,$68,$60,$58,$50
        .BYTE $48,$40,$38,$30,$28,$20,$18,$10
        .BYTE $08,$00,$00,$08,$10,$18,$20,$28
        .BYTE $30,$38,$40,$48,$50,$58,$60,$68
        
UNKNOWN_POINT_TAB_4 .FILL 64,0  ; 7600
        .BYTE $FF,$00,$FF,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $FC,$FC
f7682   .BYTE $3C,$FC
f7684   .BYTE $FC,$E0,$E4,$24,$E4,$E0,$FC
f768B   .BYTE $FC,$3C,$FC,$FC
f768F   .BYTE $E0,$FC,$20,$E7,$E0,$E0,$FC,$20
        .BYTE $FC,$E0,$E4,$E4,$20,$FC,$FC,$E0
        .BYTE $E7,$20,$FC,$E0,$E0,$E7,$20,$E4
        .BYTE $E0,$E0,$FC,$3C,$FC,$FC,$E0,$E4
        .BYTE $20,$E4,$E0,$E0,$E4,$20,$FC,$FC
        .BYTE $E0,$E4,$20,$E4,$E0,$E0,$FC,$3C
        .BYTE $FC,$FC,$E0,$E7,$20,$E4,$E0,$E0
        .BYTE $E7,$20,$FC,$E0,$E4,$E4,$20,$FC
        .BYTE $FC,$E0,$FC,$20,$FC,$E0,$E0,$FC
        .BYTE $20,$E7,$E0,$FC,$FC,$3C,$FC,$FC
        .BYTE $E0
f76E0   .BYTE $E4
f76E1   .BYTE $24
f76E2   .BYTE $E4
ab76E3  .BYTE $E0,$FC,$FC,$3C,$FC
f76E8   .BYTE $FC,$C1,$C9,$C9,$C9,$C1,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
f7700   .BYTE $00,$00,$90,$00,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
f7720   .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

f7760
PIXEL_POS
	.BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

	.FILL 79*8,0
        .BYTE $00,$7E,$66,$66,$66
f7A7D
	.FILL 113*8,0
        .BYTE $33

        .FILL 26*8,0
        
        .BYTE $81,$FF
        
f7ED8   .BYTE $FF
f7ED9   .BYTE $0C,$4C,$0C,$4C,$0C,$FF,$FF
f7EE0   .BYTE $FF,$1E,$9E,$9E,$9F,$1F,$FF,$FF
f7EE8   .BYTE $FF,$0C,$4C,$0C,$CC,$CC,$FF,$FF
f7EF0   .BYTE $FF,$1E,$9E,$9E,$9E,$1E,$FF,$FF
f7EF8   .BYTE $FF,$0C,$4C,$0C,$4C,$0C,$FF,$FF
f7F00   .BYTE $FF,$10,$90,$90,$90,$10,$FF,$FF
        .BYTE $FF,$E1,$B1,$99,$8D,$87,$83,$FF
        .BYTE $FF,$E1,$B1,$99,$8D,$87,$83,$FF
        .BYTE $FF,$E1,$B1,$99,$8D,$87,$83,$FF
        .BYTE $FF,$E1,$B1,$99,$8D,$87,$83,$FF
        .BYTE $33,$FF,$60,$D0,$48,$C4,$42,$C1
        .BYTE $33,$FE,$07,$0A,$13,$22,$43,$82
        .BYTE $83,$42,$23,$12,$0B,$06,$FF,$CC
        .BYTE $41,$C2,$44,$C8,$50,$E0,$7F,$CC
        .BYTE $33,$FF,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$FF,$CC
        .BYTE $03,$02,$03,$02,$03,$02,$03,$02
        .BYTE $40,$C0,$40,$C0,$40,$C0,$40,$C0
        .BYTE $FF,$81,$99,$E1,$E7,$FF,$E7,$FF
        .BYTE $FF,$E7,$E7,$E7,$E7,$FF,$E7,$FF
        .BYTE $FF,$E7,$E7,$E7,$FF,$FF
f7F7E   .BYTE $FF,$FF,$E7,$E7,$E7,$E7,$E7,$E7
        .BYTE $E7,$E7,$CF,$CF,$CF,$CF,$CF,$CF
        .BYTE $CF,$CF,$9F,$9F,$9F,$9F,$9F,$9F
        .BYTE $9F,$9F,$3F,$3F,$3F,$3F,$3F,$3F
        .BYTE $3F,$3F,$7E,$7E,$7E,$7E,$7E,$7E
        .BYTE $7E,$7E,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$F9,$F9,$F9,$F9,$F9,$F9
        .BYTE $F9,$F9,$F3,$F3,$F3,$F3,$F3,$F3
        .BYTE $F3,$F3,$00,$1E,$4E,$66,$72,$78
        .BYTE $7C,$00,$00,$7E,$7E,$7E,$7E,$7E
        .BYTE $7E
f7FCF   .BYTE $00
f7FD0   .BYTE $C9
f7FD1   .BYTE $C1,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .BYTE $FF,$FF,$FF,$FF,$C1,$C9
f7FDF   .BYTE $C9
ab7FE0  .BYTE $FC
f7FE1   .BYTE $FC
f7FE2   .BYTE $FF
f7FE3   .BYTE $FF
f7FE4   .BYTE $FF
f7FE5   .BYTE $FF,$FF,$00,$FF,$FF,$FF
f7FEB   .BYTE $FF
f7FEC   .BYTE $FF
f7FED   .BYTE $E0
f7FEE   .BYTE $E4
ab7FEF  .BYTE $24
ab7FF0  .BYTE $E4
f7FF1   .BYTE $E0,$FF,$FF,$FF,$FF,$FF,$00,$FF
        .BYTE $FF,$FF,$FF,$FF,$FC,$FC
ab7FFF  .BYTE $3C
	.BYTE $00,$00,$00,$00,$00,$00,$00 ; CLEAR FROM 8000 UPTO 82FA = 672 TO CLEAR
        .BYTE $00,$00,$00
f800A   .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
f801A   .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
f802A   .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
   .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00
f80AC   .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00
j80E8   .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00
ab810A  .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00
j819E   .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
ab825E  .BYTE $00
ab825F  .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00
s82BB   ; MATH_uMul ; Input:  A = unsigned 8 bit multiplier ;         Y = unsigned 8 bit multiplicand ; Output: AY = unsigned 16 bit product
	.BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
s82D3   ; MATH_bMulTrig ; Input:  A = trig fraction as $81..$7F ;         Y = local coordinate $80..$7F ; Output: A = A * Y
	.BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00

; ** CODE BLOCK START **  TAKES IN X AND RETURNS 08 / 09   
        
FPMUL        ; fpMul - ; Input:  [08] = fp multiplier ;         XY   = fp multiplicand ; Output: [08] and XY = result
	LDA LOG_TABLE,X
        LDX ab08
        CLC 
        ADC LOG_TABLE,X
        TAX 
        TYA 
        BCC b830A
        ADC #$03
        CLC 
b830A   
	ADC ab09
        BVS MATH_LIMIT 
        AND #$FD
        STA ab09
        TAY 
        LDA EXP_TABLE,X
        TAX 
        STA ab08
        RTS 

MATH_LIMIT   
	BPL b8328
        AND #$01
        ORA #$78
        TAY 
        LDX #$00
        STX ab08
        STY ab09
        RTS 

b8328   
	AND #$01
        ORA #$84
b832C   
	TAY 
        LDX #$00
        STX ab08
        STY ab09
        RTS 

; ** CODE BLOCK END **        

; ** CODE BLOCK START ** TAKES IN 08 AND X AND Y AND RETURNS 08 AND 09

FPDIV ; fpDiv - Input:  [08] = fp divisor - XY   = fp dividend - Output: [08] and XY = result
	STY ab06
        LDY ab08
        LDA LOG_TABLE,Y
        SEC 
        SBC LOG_TABLE,X
        TAX 
        LDA ab09
        ORA #$02
        BCS b8349
        SBC #$03
        SEC 
b8349   
	SBC ab06
        BVS MATH_LIMIT 
        AND #$FD
        STA ab09
        TAY 
        LDA EXP_TABLE,X
        TAX 
        STA ab08
        RTS 

FPADD ; ($838B entry point)  
	LDA ab18
        LSR 
        BCS b8373
        TXA 
        ADC ab08
        ROR 
        INY 
        INY 
        INY 
        INY 
        TAX 
        STA ab08
        STY ab09
        RTS 

b836C   TYA 
        ASL 
        BCC b83CC
        JMP j8419

b8373   TXA 
        SBC ab08
        BEQ b8383
        BCS b83D5
        LDY ab09
        EOR #$FF
        ADC #$01
        JMP b83D5

b8383   TYA 
        SEC 
        SBC #$24
        BVS b8328
        BVC b832C
s838B   TYA 
        SEC 
        SBC ab09
        BVS b836C
        STA ab18
        ADC #$01
        BVS b836C
        BMI b83F5
        LSR 
        LSR 
        BEQ FPADD
        CMP #$09
        BCS b83CC
        EOR #$0F
        STA ab83AB
        LDA ab08
        SEC 
        ROR 
ab83AB   =*+$01
        BNE b83B3
        NOP 
        NOP 
        NOP 
        NOP 
        NOP 
        NOP 
        NOP 
b83B3   LSR 
        LSR 
        LSR 
        LSR 
        LSR 
        LSR 
        LSR 
        STA ab06
        LDA ab18
        LSR 
        TXA 
        BCS b83D1
b83C2   ADC ab06
        BCC b83CB
        LSR 
        INY 
        INY 
        INY 
        INY 
b83CB   TAX 
b83CC   STX ab08
        STY ab09
        RTS 

b83D1   SBC ab06
        BCS b83CB
b83D5   STY ab06
        LDY #$00
b83D9   ASL 
        DEY 
        BCC b83D9
        TAX 
        TYA 
        ASL 
        ASL 
        CLC 
        ADC ab06
        BVS b83EC
        TAY 
        STX ab08
        STY ab09
        RTS 

b83EC   
	LDX #<p8400
        LDY #>p8400
        STX ab08
        STY ab09
        RTS 

b83F5   
	CMP #$E0
        BCC j8419
        LSR 
        LSR 
        AND #$07
        STA ab8404
p8400   TXA 
        SEC 
        ROR 
ab8404   =*+$01
        BNE b8408
        LSR 
        LSR 
        LSR 
b8408   LSR 
        LSR 
        LSR 
        LSR 
        STA ab06
        LDY ab09
        LDA ab18
        LSR 
        LDA ab08
        BCC b83C2
        BCS b83D1
j8419   LDX ab08
        LDY ab09
        RTS 

; ** CODE BLOCK END **

; ** CODE BLOCK START ** - TAKES IN XY AND LOOKS UP 5B00 AND 5A00 AND RETURNS XY

COS_FP	INY 
SIN_FP	TYA 
	LSR 
	BCC b8429
		TXA 
		EOR #$FF
		TAX 
		TYA 
		LSR 
b8429   
	AND #$01
	ORA SIN_MSB,X
	TAY 
	LDA SIN_LSB,X
	TAX 
	RTS 

; ** CODE BLOCK END **

; ** CODE BLOCK START **

SETCRAFTROTMATRIX ; Math: SetCraftRotMatrix ; BEBE = CraftHeadingSin ; BEBF = CraftHeadingCos
        JSR BSIN
        STA abBEBE
        TYA 
        JSR BCOS
        STA abBEBF
        RTS 

; ** CODE BLOCK END **

; ** CODE BLOCK START **

BCOS    CLC 
        ADC #$10
BSIN    AND #$3F
        TAY 
        AND #$1F
        TAX 
        LDA f8457,X
        CPY #$20
        BCC b8456
        EOR #$FF
        ADC #$00
b8456   RTS 

; ** CODE BLOCK END **

; ** data **

f8457   
	BRK 
        NOP ab2519
        AND (p3C),Y
        SRE ab51
  .BYTE $5A ; NOP 
  .BYTE $62    ;JAM 
        ROR    
	BVS b84D9
  .BYTE $7A ; NOP 
        ADC f7F7E,X
        ROR f7A7D,X
        ADC f70,X
        ROR 
  .BYTE $62    ;JAM
	.BYTE $5A ; NOP
        EOR (p47),Y
  .BYTE $3C,$31,$25,$19,$0C

; ** CODE BLOCK START ** - TAKES IN Y 

FPTO8BIT
	TYA 
	BMI	b849F
	LSR 
        LSR 
        CMP #$07
        BCS b84A6
        STA ab8487
        TXA 
        SEC 
        ROR 
ab8487   =*+$01
        BNE b848C
        LSR 
        LSR 
        LSR 
        LSR 
b848C   LSR 
        LSR 
        LSR 
b848F   ADC #$00
        BMI b84A5
        TAX 
        TYA 
        LSR 
        TXA 
        BCC b849E
        EOR #$FF
        ADC #$00
        CLC 
b849E   RTS 

b849F   CMP #$FC
        LDA #$00
        BEQ b848F
b84A5   SEC 
b84A6   RTS 

; ** CODE BLOCK END **

; ** CODE BLOCK START **

FPTO16BIT
	TYA 
        BMI b8501
        LSR 
        LSR 
        CMP #$0F
        BCS b84A6
        STA ab06
        ASL 
        ADC ab06
        STA ab84C2
        LDA #$00
        STA ab06
        TXA 
        SEC 
        ROR 
        ROR ab06
ab84C2   =*+$01
        BCC b84D2
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
b84D2   LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
b84D9   ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        TAX 
        TYA 
        LDY ab06
        LSR 
        BCC b8500
        TXA 
        EOR #$FF
        TAX 
        TYA 
        EOR #$FF
        TAY 
        CLC 
b8500   RTS 

b8501   TYA 
        LSR 
        BCC b850B
        LDX #$FF
        LDY #$FF
        CLC 
        RTS 

b850B   LDX #$00
        LDY #$00
        RTS 

; ** CODE BLOCK END **

; ** CODE BLOCK START **


BIT24TOFP ; MATH_24BitToFP (FP.SetToObjectSpaceCoordinate24) ; Enter: A =    Coordinate.MSB ;        X =    Coordinate.PSB ;        [07] = Coordinate.LSB ; Usese: [06].b  Temporary store for coordinate MSB ; Exit:  [08].fp Result, also stored in X:A (exp:man)
	STA ab06
        ORA #$00
        BPL b8527
        LDA #$00
        SEC 
        SBC ab07
        STA ab07
        TXA 
        EOR #$FF
        ADC #$00
        TAX 
        LDA #$00
        SBC ab06
b8527   BNE b8538
        TXA 
        BNE b854F
        LDA ab07
        BEQ b8553
        LDX #$00
        STX ab07
        LDX #$08
        BNE b853C
b8538   STX ab07
        LDX #$18
b853C   DEX 
        ASL ab07
        ROL 
        BCC b853C
        STA ab08
        TXA 
        ASL 
        ASL ab06
        ROL 
        TAX 
        STX ab09
        LDA ab08
        RTS 

b854F   LDX #$10
        BNE b853C
b8553   LDA #<pE000
        LDX #>pE000
        STA ab08
        STX ab09
        RTS 

; ** CODE BLOCK END **

pE000 = $E000
ab858E  =$858E

 MAIN_LOOP   
       JSR sA544 ; left right ?
        JSR DRAW_SCREEN
        JSR COLOUR_SETUP_WHITE
        JSR DRAW_OBJECTS
        JSR READ_JOYSTICK_KEYBOARD ; movement?
        JSR sA165 ; movement?
        JMP MAIN_LOOP

STARTUP	; CALL STARTUP BEFORE CALLING MAIN - needs to setup vic pointers?
	SEI

	PHA
	TXA
	PHA
	TYA
	PHA
		
	LDA #$35
	STA $1
	LDA #$70
	STA $D018
	LDA #$3B
	STA $D011
	LDA #$00 
	STA $D021
	LDA #$18
	STA $D016
	LDA #<pBA1E
	STA $FFFE
	LDA #>pBA1E
	STA $FFFF

 LDA #$7F
 STA $DC0D  ; disable timer interrupts which can be generated by the two CIA chips
 STA $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

 LDA $DC0D  ; by reading this two registers we negate any pending CIA irqs.
 LDA $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

  LDA #$01   ; this is how to tell the VICII to generate a raster interrupt
 STA $D01A

;; LDA #<NMI_NOP ; lsb
;; STA $FFFA ; Create a nop, irq handler for NMI that gets called whenever RESTORE is pressed or similar.
;; LDA #>NMI_NOP ; msb
;; STA $FFFB ; We're putting our irq handler directly in the vector that usually points to the kernal's NMI handler since we have kernal banked out.

;; LDA #$00  ; Force an NMI by setting up a timer. This will cause an NMI, that won't be acked. Any subsequent NMI's from RESTORE will be essentially disabled.
;; STA $DD0E       ; Stop timer A
;; STA $DD04       ; Set timer A to 0, NMI will occure immediately after start
;; STA $DD0E

;; LDA #$81
;; STA $DD0D       ; Set timer A as source for NMI

;; LDA #$01
;; STA $DD0E       ; Start timer A -> NMI
	
 LDA #2 ; SCRNBANK
 STA $DD00 ; bank

	
	LDA #$BA
	STA $D012
	LDA #$01
	STA $D019



	LDX #253
ZP_LOOP	LDA ZP,X
	STA 00,X
	DEX 
	CPX #2
	BNE ZP_LOOP
	
	PLA
	TAY
	PLA
	TAX
	PLA
		
	CLI
	JMP MAIN_LOOP

pBA1E   
	PHA 
        TXA 
        PHA 
        TYA 
        PHA 
        LDA #<pB9BB
        STA abFFFE   ;IRQ
        LDA #>pB9BB
        STA abFFFF   ;IRQ
        LDA #$00
        STA $D012    ;Raster Position
        LDA #$01
        STA $D019    ;VIC Interrupt Request Register (IRR)
        LDA #$7E
        LDX #$1B
        LDY #$01
        STA $D018    ;VIC Memory Control Register
        STX $D011    ;VIC Control Register 1
        STY $D021    ;Background Color 0
        LDA #$08
        STA $D016    ;VIC Control Register 2
        LDA abE6
        BEQ bBA54
bBA54   
	LDA ELEVATOR
	JSR sB809
        JSR sB67B
jBA60   
	INC abE2
        LDA abE2
        CMP #$32
        BNE bBA72
        LDA #$00
        STA abE2
        INC abE3
        BNE bBA72
        INC abE4
bBA72   
	PLA 
        TAY 
        PLA 
        TAX 
        PLA 
NMI_NOP
 RTI ; This is the irq handler for the NMI. Just returns without acknowledge. This prevents subsequent NMI's from interfering.


pB9BB  
	PHA
abB9BD   =*+$01	
        LDA abC7
        STA $D018    ;VIC Memory Control Register
abB9C2   =*+$01
        LDA #$3B
        STA $D011    ;VIC Control Register 1
        LDA abA3
        STA $D021    ;Background Color 0
        LDA #$18
        STA $D016    ;VIC Control Register 2
abB9D1   =*+$01
        LDA #<pBA1E
        STA abFFFE   ;IRQ
abB9D6   =*+$01
        LDA #>pBA1E
        STA abFFFF   ;IRQ
abB9DB   =*+$01
        LDA #$BA
        STA $D012    ;Raster Position
        LDA #$01
        STA $D019    ;VIC Interrupt Request Register (IRR)
        PLA 
        RTI 
        
s8A8C  RTS
                
ab8c73 = $8c73
ab8C98 = $8C98
b8d10 = $8d10
ab8d40 = $8d40
 
ab728d = $728d
f60F7 = $60F7
f61EF = $61EF
f62E7 = $62E7
f63df= $63DF
f64d7= $64D7
f65cf= $65CF
f66c7= $66C7
f67bf= $67BF
f68b7= $68B7
f69af= $69AF
f6aa7= $6AA7
f6b9f= $6B9F
f6c97= $6C97
f6d8f= $6D8F
f6e87= $6E87
f6f7f= $6F7F
f7077= $7077
f716f= $716F
f7267= $7267
f735f= $735F
        
s8DA4   =*+$01
        XAA #$A5
        INC abD0
        NOP 
        INC abE0
s8DAA   LDA abE6
        BNE b8DC2
        LDA f20E0,X
        STA ab8E28
        LDA f20A0,X
        STA ab8E27
        LDA #$00
        STA abDE
        STA abDF
        DEC abE6
b8DC2   RTS 

b8E05   LDX abDF
        BEQ b8E1E
ab8E0A   =*+$01
ab8E0B   =*+$02
        LDA f1512,X
        TAX 
        ASL 
        CMP #$14
        ROR 
        STA abFC
        TXA 
        BPL b8E1B
b8E16   LDA #$00
        STA abDF
b8E1A   RTS 

b8E1B   INC abDF
        RTS 

b8E1E   LDA #$A0 ; right edge
        STA abFC
        INC abDE
        LDX abDE
ab8E27   =*+$01
ab8E28   =*+$02
        LDY f167A,X
        BEQ b8E50
        CPY #$EF
        BCC b8E3D
        BEQ b8E16
        CPY #$FF
        BEQ b8E55
        CPY #$F8
        BCS b8E74
        LDA f56E8,Y
        TAY 
b8E3D   LDA f2120,Y
        STA ab8E0A
        LDA f2210,Y
        STA ab8E0B
        INC abDF
        CPY #$08
        BCC b8E05
        RTS 

b8E50   LDY #$01
        STY abE6
        RTS 

b8E55   LDA ab8E27
        STA ab8E0A
        STA ab8E6D
        LDA ab8E28
        STA ab8E0B
        STA ab8E6E
        INX 
        STX abDF
        DEX 
b8E6B   INX 
ab8E6D   =*+$01
ab8E6E   =*+$02
        LDA f0A5C,X
        BPL b8E6B
        STX abDE
        RTS 

b8E74   TYA 
        AND #$07
        ASL 
        ASL 
        TAX 
        ASL 
        TAY 
        ADC #$1F
        STA ab8E0A
        LDA #$77
        ADC #$00
        STA ab8E0B
        LDA #$04
        STA ab06
b8E8C   LDA f7700,X
        AND #$F0
        BNE b8EA5
        LDA f7700,X
        AND #$0F
        BNE b8EB2
        INX 
        DEC ab06
        BNE b8E8C
        BEQ b8EBA
b8EA1   LDA f7700,X
        INY 
b8EA5   LSR 
        LSR 
        LSR 
        LSR 
        STA f7720,Y
        LDA f7700,X
        INY 
        AND #$0F
b8EB2   STA f7720,Y
        INX 
        DEC ab06
        BNE b8EA1
b8EBA   ORA #$80
        STA f7720,Y
        INC abDF
        RTS 

s90BE   
s9374   RTS

b950D   LDA #$FF
        STA abB9
        LDA CURR_Z_HSB
        ORA CURR_X_HSB
        AND #$F0
        BEQ b951D
        LDA #$00
        BEQ b952B
b951D   LDA CURR_Z_HSB
        ASL 
        ASL 
        ASL 
        ASL 
        STA ab06
        LDA CURR_X_HSB
        AND #$0F
        ORA ab06
b952B   STA abB7
        BEQ j9532
        JSR s9575
j9532   LDA CURR_Y_HSB
        STA ab06
        CMP #$20
        BCC b9542
        LDY #$00
        NOP
        NOP
        NOP
        JMP j9560

b9542   LDA CURR_Y_MSB
        LSR ab06
        ROR 
        LSR ab06
        ROR 
        LSR ab06
        ROR 
        LDX ab06
        BEQ b9553
        LDA #$FF
b9553   TAX 
        LDA f2A00,X
        CMP abB9
        BEQ j9560
        STA abB9
        nop
        nop
        nop
j9560   LDA ab89
        STA ab70
        LDA ab8B
        STA ab71
        LDA CURR_X_HSB
        STA ab85
        LDA CURR_Y_HSB
        STA ab86
        LDA CURR_Z_HSB
        STA ab87
s9575
        RTS 

DRAW_OBJECTS
	LDY abB2 ; number of objects to draw
	BEQ b9727 ; exit if none
		STY abB3 ; store temp object count
b971B   	
		LDX OBJECTS_TO_DRAW,Y ; object number
		JSR DRAW_OBJECT
		DEC abB3 ; dec temp object count
		LDY abB3 ; get temp object count
		BNE b971B ; exit y/n
b9727 
	RTS ; exit

DRAW_OBJECT
	STX	abAF	; store object number 
	LDA	OBJECT_SHAPE_PTR_LO,X	; get object pos hi
	STA	ab1D	; store in pointer
	LDA	OBJECT_SHAPE_PTR_HI,X	; get object pos lo
	STA	ab1E		; store in pointer
	JSR	CAMERA_OBJECT_DIFF
	JSR	s97FA 	; draw object
        BCS	b973D
b973C   
	RTS 

b973D   
	LDX	#$00
        STX	ab19
        LDY	#$01
        JSR	s999A
        BCC	b978A
        LDA	DIFF_Y_HSB
        BPL	b9755
        LDY	abB9
        LDX	#$00
        JSR	s999A
        BCS	b973C

b9755 ; object is a point
	LDA	DIFF_X_LSB
        STA	ab07
        LDX	DIFF_X_MSB
        LDA	DIFF_X_HSB
        JSR	BIT24TOFP
        STA	ab52
        STX	ab53
        LDA	DIFF_Y_LSB
        STA	ab07
        LDX	DIFF_Y_MSB
        LDA	DIFF_Y_HSB
        JSR	s9E93
        STA	ab54
        STX	ab55
        LDA	DIFF_Z_LSB
        STA	ab07
        LDX	DIFF_Z_MSB
        LDA	DIFF_Z_HSB
        JSR	BIT24TOFP
        STA	ab56
        STX	ab57
        JSR	PRSPCTV
        LDX	#$00
        JMP	PLOT_POINT 	; PLOT POINT

b978A   
	LDA DIFF_X_MSB
        SEC 
        SBC #$08
        STA DIFF_X_MSB
        BCS b9795
        DEC DIFF_X_HSB
b9795   
	LDA DIFF_Y_MSB
        SEC 
        SBC #$08
        STA DIFF_Y_MSB
        BCS b97A0
        DEC DIFF_Y_HSB
b97A0   
	LDA DIFF_Z_MSB
        SEC 
        SBC #$08
        STA DIFF_Z_MSB
        BCS b97AB
        DEC DIFF_Z_HSB
b97AB   
	LDY #$00
        STY ab19 ; start point count
        LDA (OBJECT_POINTER),Y ; object point count
        STA abB0 ; number of points?
        STY abAD ; store mem pos
b97B5   
	JSR sA61F
        JSR PRSPCTV
        LDA ab19 ; get point count
        INC ab19 ; inc point count
        CMP abB0 ; last point yn
        BNE b97B5  ; no so do next
        INC abAD ; inc mem pos
        LDY abAD ; get mem pos
        LDA (OBJECT_POINTER),Y  ; object line count
        STA ab19  ; number of lines?
        BPL b97E1
b97CD   
	LDY abAD ; get mem pos
        INY  ; inc mem pos
        LDA (OBJECT_POINTER),Y ; get 1st point
        TAX ; 1st point
        INY ; inc mem pos
        LDA (OBJECT_POINTER),Y ; get 2nd point
        STY abAD ; store 2nd point?
        TAY ; 2nd point
        JSR LINE_DRAW ; draw line
        DEC ab19 ; dec line count
        BMI b97CD ; last line y/n
        RTS ; yes

b97E1    ; first and second point are stored in 1 byte as 2 nibbles
	LDY abAD ; get mem pos
        INY  ; inc mem pos
        STY abAD ; store mem pos
        LDA (OBJECT_POINTER),Y ; get point count
        TAX  ; store backup
        AND #$0F ; and with 15 = 1st point
        TAY ; y = first point
        TXA  ; get backup
        LSR  ; /2
        LSR  ; /2
        LSR  ; /2
        LSR  ; /2
        TAX  ; divide by 16 = 2nd point
        JSR LINE_DRAW       ; DRAW LINE
        DEC ab19 ; dec line count
        BPL b97E1 ; last line yn
        RTS  ; yes

s97FA ; draw the object
	LDA abB8 ; object to draw
        CMP #$16
        BNE b984F
        LDX #$01
        LDY #$00
        JSR s999A
        BCS b984D
        LDX abAF
        LDA b29EF
        BMI b9823
        LDA f29C0,X
        AND #$10
        BNE b984D
        LDA ab29DB
        BMI b9823
        LDA f29C0,X
        AND #$20
        BNE b9848
b9823   
	TXA 
        LDX abEB
        INX 
        CPX #$0B
        BCS b984D
        STX abEB
        STA fBEB0,X
        TAX 
        LDA f29C0,X
        ORA #$80
        STA f29C0,X
        JSR s98B1
j983C   
	LDA #$FF
        STA abB8
        STA f2940,X
        NOP 
        NOP 
        NOP 
        CLC 
        RTS 

b9848   LDX #$02
        JSR s8DAA
b984D   SEC 
        RTS 

b984F   CMP #$1C
        BNE b984D
        LDA TRANSPORT_MODE ; GET TRANSPORT MODE 
        BPL b984D 	; FLYING
        LDA abAF 		; WALKING
        CMP #$08
        BCS b984D
        LDX #$02
        LDY #$00
        JSR s999A
        BCS b984D
        LDX abAF
        LDA f29C0,X
        JSR s98B1
        LDX abAF
        LDA OBJ_X_LSB,X
        STA CURR_X_LSB
        LDA OBJ_X_MSB,X
        STA CURR_X_MSB
        LDA OBJ_X_HSB,X
        STA CURR_X_HSB
        LDA OBJ_Z_LSB,X
        STA CURR_Z_LSB
        LDA OBJ_Z_MSB,X
        STA CURR_Z_MSB
        LDA OBJ_Z_HSB,X
        STA CURR_Z_HSB
        LDA f802A,X
        LSR 
        ROR 
        ROR 
        ROR 
        TAY 
        AND #$03
        STA ab2D
        TYA 
        ROR 
        AND #$F0
        STA ab2C
        STX TRANSPORT_MODE
        TXA 
        JSR s9D99
        JSR ROTMTRX
        JSR s9950
        LDX abAF
        JMP j983C

s98B1   AND #$0C
        BEQ b98C3
        LSR 
        LSR 
        LSR 
        BEQ b98BF
        JSR s8DA4
        BCC b98C3
b98BF   TXA 
        JSR s8A8C
b98C3   LDX abAF
	RTS
	NOP
	NOP

j98C8   LDY TRANSPORT_MODE ; GET TRANSPORT MODE
        BPL b98CD 	; FLYING
b98CC   RTS 		; WALKING 

b98CD   LDA ab7F
        BEQ b98CC
        LDA #$00
        STA ab2A
        STA ab28
        STA ab29
        JSR s9950
        LDA #$02
        STA ab2B
        LDA #$80 		; TRANSPORT IS WALKING
        STA TRANSPORT_MODE ; SET TO WALKING
        CPY #$09
        BEQ b98CC
        BCS b991B
        LDA ab2D
        STA ab06
        LDA ab2C
        LSR ab06
        ROR 
        LSR ab06
        ROR 
        LSR 
        LSR 
        STA f802A,Y
        JMP b991B

j98FE   LDA ab29F8
        BMI b9907
        LDA ab7F
        BEQ b98CC
b9907   LDX abEB
        BEQ b98CC
        DEC abEB
        LDY fBEB0,X
        LDA f29C0,Y
        AND #$7F
        STA f29C0,Y
        NOP
        NOP
        NOP
b991B   LDA abCD
        STA f2940,Y
        LDA CURR_X_LSB
        STA OBJ_X_LSB,Y
        LDA CURR_X_MSB
        STA OBJ_X_MSB,Y
        LDA CURR_X_HSB
        STA OBJ_X_HSB,Y
        LDA CURR_Z_LSB
        STA OBJ_Z_LSB,Y
        LDA CURR_Z_MSB
        STA OBJ_Z_MSB,Y
        LDA CURR_Z_HSB
        STA OBJ_Z_HSB,Y
        LDA #$00
        STA OBJ_Y_LSB,Y
        LDA CURR_Y_MSB
        STA OBJ_Y_MSB,Y
        LDA CURR_Y_HSB
        STA OBJ_Y_HSB,Y
        JMP s9374

s9950   LDA #$88
        STA abED
        STA ab27
        RTS 

CAMERA_OBJECT_DIFF ; calc diff between object pos and current pos  
	SEC 
        LDA OBJ_X_LSB,X
        SBC CURR_X_LSB
        STA DIFF_X_LSB
        LDA OBJ_X_MSB,X
        SBC CURR_X_MSB
        STA DIFF_X_MSB
        LDA OBJ_X_HSB,X
        SBC CURR_X_HSB
        STA DIFF_X_HSB
        SEC 
        LDA OBJ_Y_LSB,X
        SBC CURR_Y_LSB
        STA DIFF_Y_LSB
        LDA OBJ_Y_MSB,X
        SBC CURR_Y_MSB
        STA DIFF_Y_MSB
        LDA OBJ_Y_HSB,X
        SBC CURR_Y_HSB
        STA DIFF_Y_HSB
        SEC 
        LDA OBJ_Z_LSB,X
        SBC CURR_Z_LSB
        STA DIFF_Z_LSB
        LDA OBJ_Z_MSB,X
        SBC CURR_Z_MSB
        STA DIFF_Z_MSB
        LDA OBJ_Z_HSB,X
        SBC CURR_Z_HSB
        STA DIFF_Z_HSB
        RTS 

s999A   STX ab08
        STY ab09
        LDA DIFF_X_LSB
        LDX DIFF_X_MSB
        LDY DIFF_X_HSB
        JSR s99BE
        BCS b99BD
        LDA DIFF_Y_LSB
        LDX DIFF_Y_MSB
        LDY DIFF_Y_HSB
        JSR s99BE
        BCS b99BD
        LDA DIFF_Z_LSB
        LDX DIFF_Z_MSB
        LDY DIFF_Z_HSB
        JSR s99BE
b99BD   RTS 

s99BE   BPL b99D5
        EOR #$FF
        PHA 
        TXA 
        EOR #$FF
        TAX 
        TYA 
        EOR #$FF
        TAY 
        PLA 
        CLC 
        ADC #$01
        BCC b99D5
        INX 
        BNE b99D5
        INY 
b99D5   SEC 
        TXA 
        SBC ab08
        TYA 
        SBC ab09
        RTS 
        
LINE_DRAW ; LINE_DRAW_04 - DRAW LINE - x is start index - y is end index
        LDA POINT_CLASSIFICATION,X ; point 1 classification
        BEQ b9A07 ; point onscreen
        BMI b99FB ; point behind
        LDA POINT_CLASSIFICATION,Y ; point 2 classification 
        BEQ b99FB ; point onscreen
        BMI b9A07 ; point behind
        LDA UNKNOWN_POINT_TAB_1,Y 
        EOR #$80
        STA ab06
        LDA UNKNOWN_POINT_TAB_1,X
        EOR #$80
        CMP ab06
        BCS b9A07
b99FB   
	TYA 
        STX ab06
        TAX 
f99FF   
	LDY ab06
        LDA POINT_CLASSIFICATION,X ; point 1 classification
        BPL b9A07 ; point  infront
        RTS 

        
b9A07   
	LDA POINT_CLASSIFICATION,X ; point 1 classification
        STA ab6E
        BMI b9A2C ; point behind 
        LDA PERS_HOR,X
        STA ab6A
        LDA PERS_VER,X
        STA ab6B
        LDA UNKNOWN_POINT_TAB_2,X
        STA ab5E
        LDA UNKNOWN_POINT_TAB_3,X
        STA ab5F
        LDA UNKNOWN_POINT_TAB_4,X
        STA ab60
        LDA UNKNOWN_POINT_TAB_5,X
        STA ab61
b9A2C   
	LDA UNKNOWN_POINT_TAB_6,X
        STA ab52
        LDA UNKNOWN_POINT_TAB_7,X
        STA ab53
        LDA UNKNOWN_POINT_TAB_8,X
        STA ab54
        LDA UNKNOWN_POINT_TAB_9,X
        STA ab55
        LDA UNKNOWN_POINT_TAB_10,X
        STA ab56
        LDA UNKNOWN_POINT_TAB_1,X
        STA ab57
        LDA POINT_CLASSIFICATION,Y
        STA ab6F
        BMI b9A6F
        LDA PERS_HOR,Y
        STA ab6C
        LDA PERS_VER,Y
        STA ab6D
        LDA UNKNOWN_POINT_TAB_2,Y
        STA ab62
        LDA UNKNOWN_POINT_TAB_3,Y
        STA ab63
        LDA UNKNOWN_POINT_TAB_4,Y
        STA ab64
        LDA UNKNOWN_POINT_TAB_5,Y
        STA ab65
b9A6F   
	LDA UNKNOWN_POINT_TAB_6,Y
        STA ab58
        LDA UNKNOWN_POINT_TAB_7,Y
        STA ab59
        LDA UNKNOWN_POINT_TAB_8,Y
        STA ab5A
        LDA UNKNOWN_POINT_TAB_9,Y
        STA ab5B
        LDA UNKNOWN_POINT_TAB_10,Y
        STA ab5C
        LDA UNKNOWN_POINT_TAB_1,Y
        STA ab5D
        LDA ab6F
        BPL b9A94
        JMP j9B2C ; LINE DRAW

b9A94   
	LDX ab5E
        LDA ab5F
        EOR #$01
        STX ab08
        STA ab09
        LDX ab62
        LDY ab63
        JSR s838B
        STX ab0A
        STY ab0B
        TYA 
        ASL 
        AND #$02
        STA ab67
        LDX ab60
        LDA ab61
        EOR #$01
        STX ab08
        STA ab09
        LDX ab64
        LDY ab65
        JSR s838B
        STX ab0C
        STY ab0D
        TYA 
        AND #$01
        ORA ab67
        STA ab67
        LDX ab08
        LDA LOG_TABLE,X
        LDX ab0A
        SEC 
        SBC LOG_TABLE,X
        TAY 
        LDA ab09
        ORA #$02
        BCS b9AE0
        SBC #$03
        SEC 
b9AE0   
	SBC ab0B
        AND #$FD
        STA ab69
        LDX EXP_TABLE,Y
        STX ab68
        TAY 
        BMI b9B14
        LDA ab67
        ORA #$04
        STA ab67
        LDX ab0A
        LDA LOG_TABLE,X
        LDX ab0C
        SEC 
        SBC LOG_TABLE,X
        TAY 
        LDA ab0B
        ORA #$02
        BCS b9B09
        SBC #$03
        SEC 
b9B09   
	SBC ab0D
        AND #$FD
        STA ab09
        LDX EXP_TABLE,Y
        STX ab08
b9B14   
	TAY 
        BMI b9B1E
        LDA #$FF
        STA LINE_INC
        JMP j9C10

b9B1E   CLC 
        ADC #$20
        AND #$FC
        TAY 
        JSR FPTO16BIT
        STY LINE_INC
        JMP j9C10

j9B2C   
	LDX ab5C ; LINE_DRAW_03
        LDA LOG_TABLE,X
        LDX ab56
        SEC 
        SBC LOG_TABLE,X
        TAY 
        LDA ab5D
        ORA #$02
        BCS b9B41
        SBC #$03
        SEC 
b9B41   
	SBC ab57
        AND #$FD
        STA ab0B
        LDX EXP_TABLE,Y
        STX ab0A
        EOR #$01
        STA ab0B
        LDX ab0A
        LDA LOG_TABLE,X
        LDX ab52
        CLC 
        ADC LOG_TABLE,X
        TAY 
        LDA ab0B
        BCC b9B63
        ADC #$03
        CLC 
b9B63   
	ADC ab53
        AND #$FD
        STA ab09
        LDX EXP_TABLE,Y
        STX ab08
        LDX ab58
        LDY ab59
        JSR s838B
        STX ab0C
        STY ab0D
        TYA 
        EOR ab57
        ASL 
        AND #$02
        STA ab67
        LDX ab0A
        LDA LOG_TABLE,X
        LDX ab54
        CLC 
        ADC LOG_TABLE,X
        TAY 
        LDA ab0B
        BCC b9B94
        ADC #$03
        CLC 
b9B94   
	ADC ab55
        AND #$FD
        STA ab09
f9B9A   
	LDX EXP_TABLE,Y
        STX ab08
        LDX ab5A
        LDY ab5B
        JSR s838B
        STX ab0A
        STY ab0B
        TYA 
        EOR ab57
        AND #$01
        ORA ab67
        STA ab67
        LDX ab08
        LDA LOG_TABLE,X
        LDX ab0C
        SEC 
        SBC LOG_TABLE,X
        TAY 
        LDA ab09
        ORA #$02
        BCS b9BC8
        SBC #$03
        SEC 
b9BC8   
	SBC ab0D
        AND #$FD
        STA ab69
        LDX EXP_TABLE,Y
        STX ab68
        TAY 
        BMI b9BFC
        LDA ab67
        ORA #$04
        STA ab67
        LDX ab0C
        LDA LOG_TABLE,X
        LDX ab0A
        SEC 
        SBC LOG_TABLE,X
        TAY 
        LDA ab0D
        ORA #$02
        BCS b9BF1
        SBC #$03
        SEC 
b9BF1   
	SBC ab0B
        AND #$FD
        STA ab09
        LDX EXP_TABLE,Y
        STX ab08
b9BFC   
	TAY 
        BMI b9C05
        LDA #$FF
        STA LINE_INC
        BNE j9C10
b9C05   
	CLC 
        ADC #$20
        AND #$FC
        TAY 
        JSR FPTO16BIT
        STY LINE_INC
j9C10   
	LDX ab67    ; GET LINE TYPE 0-7
        LDY LINE_DRAW_CONV_PTR,X ; CONVERT LINE TYPE TO POINTER TYPE
        STY ab67    ; GET POINTER TO LINE NEEDED
        LDA LINE_DRAW_PTR_LO,Y ; GET POINTER TO CORRECT LINE
        STA ab04    ; STORE AT JUMP TABLE ADDRESS
        LDA LINE_DRAW_PTR_HI,Y ; GET POINTER TO CORRECT LINE
        STA ab05    ; STORE AT JUMP TABLE ADDRESS
        LDA ab6F
        BEQ b9C2F
        LDA fBBD8,Y
        STA ab6C
        LDA fBBE0,Y
        STA ab6D
b9C2F   
	LDA ab6E
        BNE b9C36
        JMP LINE_DRAW_JMP


b9C36   LDA ab61
        ASL 
        ASL 
        AND #$04
        ORA ab6E
        STA ab06
        LDA ab5F
        ASL 
        ASL 
        ASL 
        AND #$08
        ORA ab06
        TAX 
        TYA 
        ORA fBBE8,X
        LSR 
        TAX 
        LDA fBBF8,X
        BNE b9C56
        RTS 

b9C56   STA ab6E
        LDA ab6F
        BMI b9C7C
        LDA ab65
        ASL 
        ASL 
        AND #$04
        ORA ab6F
        STA ab06
        LDA ab63
        ASL 
        ASL 
        ASL 
        AND #$08
        ORA ab06
        TAX 
        TYA 
        ORA fBBE8,X
        LSR 
        TAX 
        LDA fBC18,X
        BNE b9C7C
        RTS 

b9C7C   
	LDA ab6E
        AND #$01
        BEQ b9CC1
        LDX ab92
        LDA ab93
        SEC 
        SBC ab21
        STX ab08
        STA ab09
        LDX ab5E
        LDA ab5F
        EOR #$01
        TAY 
        JSR s838B
        LDX ab68
        LDY ab69
        JSR FPMUL
        LDX ab60
        LDY ab61
        JSR s838B
        TYA 
        CLC 
        ADC ab21
        BVS b9CC1
        TAY 
        JSR FPTO8BIT
        BCS b9CC1
        CLC 
        ADC ab8F
        CMP #$88 ; clip test?
        BCS b9CC1
        STA ab6B
        LDA #$9F ; clip right ?
        STA ab6A ; clip right ?
        JMP LINE_DRAW_JMP

b9CC1   
	LDA ab6E
        AND #$02
        BEQ b9D06
        LDX ab96
        LDA ab97
        SEC 
        SBC ab21
        STX ab08
        STA ab09
        LDX ab60
        LDA ab61
        EOR #$01
        TAY 
        JSR s838B
        LDX ab68
        LDY ab69
        JSR FPDIV
        LDX ab5E
        LDY ab5F
        JSR s838B
        TYA 
        CLC 
        ADC ab21
        BVS b9D06
        TAY 
        JSR FPTO8BIT
        BCS b9D06
        CLC 
        ADC ab8E
        CMP #$A0 ; clip test
        BCS b9D06
        STA ab6A
        LDA #$87 ; clip bottom
        STA ab6B ; clip bottom
        JMP LINE_DRAW_JMP

b9D06   
	LDA ab6E ; LINE DRAW
        AND #$04
        BEQ b9D4B
        LDX ab90
        LDA ab91
        SEC 
        SBC ab21
        STX ab08
        STA ab09
        LDX ab5E
        LDA ab5F
        EOR #$01
        TAY 
        JSR s838B
        LDX ab68
        LDY ab69
        JSR FPMUL
        LDX ab60
        LDY ab61
        JSR s838B
        TYA 
        CLC 
        ADC ab21
        BVS b9D4B
        TAY 
        JSR FPTO8BIT
        BCS b9D4B
        CLC 
        ADC ab8F
        CMP #$88 ; clip test
        BCS b9D4B
        STA ab6B
        LDA #$00 ; clip off top
        STA ab6A ; clip off top 
        JMP LINE_DRAW_JMP

b9D4B   
	LDA ab6E ; LINE DRAW
        AND #$08
        BEQ b9D98
        LDX ab94
        LDA ab95
        SEC 
        SBC ab21
        STX ab08
        STA ab09
        LDX ab60
        LDA ab61
        EOR #$01
        TAY 
        JSR s838B
        LDX ab68
        LDY ab69
        JSR FPDIV
        LDX ab5E
        LDY ab5F
        JSR s838B
        TYA 
        CLC 
        ADC ab21
        BVS b9D98
        TAY 
        JSR FPTO8BIT
        BCS b9D98
        CLC 
        ADC ab8E
        CMP #$A0 ; clip test
        BCS b9D98
        STA ab6A
        LDA #$00 ; clip off right
        STA ab6B ; clip off right

LINE_DRAW_JMP
	LDX ab6A
        LDY ab6B
        LDA #$80
        STA ab08
        JMP (p0004) ; LINE_DRAW_01

fA0AA
s9E93
s9D99
b9D98   RTS 

        STX ab29
jA12B   LDA abF2
        BMI bA13C
        LDA ab99
        CLC 
        ADC abA2
        STA ab99
        LDA ab9A
        ADC #$00
        STA ab9A
sA13D
bA13C   RTS 

sA165  ; MOVEMENT
	LDA abF1
        BEQ bA170
        LDX ab80
        LDA fA17B,X
        STA ab80
bA170   LDA PLANET 	; ON GROUND
        BNE bA18B 	; UNDERGROUND
        LDA TRANSPORT_MODE ; GET TRANSPORT MODE
        BMI bA18B 	; WALKING
        JMP (pBEA0)

fA17B   
	.BYTE $00,$01,$02,$03,$08,$09,$0A,$0B,$04,$05,$06,$07,$0C,$0D,$0E,$0F

bA18B   ; MOVEMENT
        LDA ELEVATOR 	; IN LIFT
        BEQ bA192 	; NO
        JMP jA24A 	; YES

bA192   ; MOVEMENT
        LDA TRANSPORT_MODE 	; GET TRANSPORT MODE
        BPL bA1AC			; FLYING
        LDA #$01                    ; WALKING
        BIT ab80
        BNE bA1A1
        LDA #$01
        JSR sA1ED
bA1A1   LDA #$02
        BIT ab80
        BNE bA1AC
        LDA #$00
        JSR sA1ED
bA1AC   LDA #$04
        BIT ab80
        BNE bA1C1
        LDA ab2C
        CLC 
        ADC abAC
        STA ab2C
        LDA ab2D
        ADC #$00
        AND #$03
        STA ab2D
bA1C1   LDA #$08
        BIT ab80
        BNE bA1D6
        LDA ab2C
        SEC 
        SBC abAC
        STA ab2C
        LDA ab2D
        SBC #$00
        AND #$03
        STA ab2D
bA1D6   LDA abFA
        BEQ bA1EA
        JSR sA13D
        BCC bA1EA
        LDA #$09
        STA TRANSPORT_MODE ; TRANSPORT IS CRAFT $09
        JSR s9D99
        LDA #$00	; PUT ON GROUND
        STA PLANET
bA1EA   JMP jA12B

sA1ED ; MOVEMENT  
	PHA 
        LDX abAA
        EOR abAB
        STX ab08
        STA ab09
        LDX ab3E
        LDY ab3F
        JSR FPMUL
        JSR FPTO16BIT
        TYA 
        CLC 
        ADC CURR_Z_LSB
        STA CURR_Z_LSB
        TXA 
        ADC CURR_Z_MSB
        STA CURR_Z_MSB
        TXA 
        BPL bA212
        LDA #$FF
        BMI bA214
bA212   LDA #$00
bA214   ADC CURR_Z_HSB
        STA CURR_Z_HSB
        PLA 
        LDX abAA
        EOR abAB
        STX ab08
        STA ab09
        LDX ab3C
        LDY ab3D
        JSR FPMUL
        JSR FPTO16BIT
        TYA 
        CLC 
        ADC CURR_X_LSB
        STA CURR_X_LSB
        TXA 
        ADC CURR_X_MSB
        STA CURR_X_MSB
        TXA 
        BPL bA23D
        LDA #$FF
        BMI bA23F
bA23D   LDA #$00
bA23F   ADC CURR_X_HSB
        STA CURR_X_HSB
        LDA abB1
        BEQ bA249
        DEC abB1
bA249   RTS 

jA24A ; MOVEMENT
	LDA abCB
        PHA 
        LDY #$DD
        JSR s82BB
        ASL 
        CLC 
        ADC #$80
        STA CURR_Y_LSB
        LDA abCC
        TAX 
        ADC #$00
        LSR 
        ROR CURR_Y_LSB
        STA CURR_Y_MSB
        PLA 
        CMP abCB
        BNE jA24A
        LDA #$00
        STA CURR_Y_HSB
        LDA CURR_Y_MSB
        CMP #$06
        BCC bA27B
        LDA CURR_Y_MSB
        SBC #$07
        STA CURR_Y_MSB
        BCS bA27B
        DEC CURR_Y_HSB
bA27B   LDA ELEVATOR ; IN LIFT
        BMI bA2BD    ; GOING DOWN
        LDA CURR_Y_LSB
        CLC 
        ADC #$26
        STA CURR_Y_LSB
        BCC bA28E
        INC CURR_Y_MSB
        BNE bA28E
        INC CURR_Y_HSB
bA28E   LDA PLANET
        BEQ bA30A
        CPX #$0C
        BNE bA30A
        LDA #$00
        STA PLANET
        STA CURR_X_LSB
        STA CURR_Z_LSB
        LDA #$71
        STA CURR_X_MSB
        STA CURR_Z_MSB
        LDX abCD
        LDA fB4B6,X
        STA CURR_X_HSB
        LDA fB4BE,X
        STA CURR_Z_HSB
        JSR b950D
        LDA #$00
        STA abCD
        JSR s9374
        RTS
        NOP
        NOP

bA2BD   LDA CURR_Y_LSB
        SEC 
        SBC #$06
        STA CURR_Y_LSB
        BCS bA2D0
        LDA CURR_Y_MSB
        SBC #$00
        STA CURR_Y_MSB
        BCS bA2D0
        DEC CURR_Y_HSB
bA2D0   LDA PLANET
        BNE bA2FA
        CPX #$08
        BNE bA30A
        LDX abCD
        LDY #$07
        STX ab08
        STY ab09
        JSR s90BE
        LDA abC4
        STA abA5
        LDA abC5
        STA abA6
        LDA #$08
        STA CURR_X_MSB
        STA CURR_Z_MSB
        LDA #$01
        STA PLANET
        LDA #$00
        STA abFA
        RTS 

bA2FA   LDA CURR_Y_MSB
        BNE bA309
        LDA CURR_Y_LSB
        BMI bA309
        NOP
        NOP
        NOP
        LDA #$80
        STA CURR_Y_LSB
bA309   RTS 

bA30A   LDA PLANET
        BNE bA309
        LDA abFA
        BEQ bA309
        LDA CURR_Y_MSB
        CLC 
        ADC #$FF
        STA CURR_Y_MSB
        LDA CURR_Y_HSB
        ADC #$40
        STA CURR_Y_HSB
        RTS 

ROTMTRX LDA ELEVATOR ; IN LIFT
        BNE bA329    ; YES
        LDA TRANSPORT_MODE ; GET TRANSPORT MODE
        BPL bA329 	; FLYING
        RTS 		; WALKING

bA329   LDX ab2E ; IN THE LIFT
        LDY ab2F
        STX ab08
        STY ab09
        LDX ab36
        LDY ab37
        JSR FPMUL
        STX ab16
        STY ab17
        LDX ab3C
        LDY ab3D
        JSR FPMUL
        STX ab0A
        STY ab0B
        LDX ab30
        LDY ab31
        STX ab08
        STY ab09
        LDX ab3E
        LDY ab3F
        JSR FPMUL
        LDX ab0A
        LDY ab0B
        JSR s838B
        STX ab40
        TYA 
        EOR abF1
        STA ab41
        LDX ab2E
        LDY ab2F
        STX ab08
        STY ab09
        LDX ab38
        LDY ab39
        JSR FPMUL
        TYA 
        EOR #$01
        EOR abF1
        STX ab42
        STA ab43
        STA ab09
        LDX ab8C
        LDY ab8D
        JSR FPMUL
        TYA 
        EOR #$01
        STA ab09
        JSR FPTO8BIT
        CLC 
        ADC #$50
        STA ab8E
        LDX #$40
        LDY #$19
        JSR s838B
        STX ab90
        STY ab91
        LDX #$3E
        LDY #$1C
        JSR s838B
        STX ab92
        STY ab93
        LDX ab16
        LDY ab17
        STX ab08
        STY ab09
        LDX ab3E
        LDY ab3F
        JSR FPMUL
        STX ab0A
        STY ab0B
        LDX ab30
        LDY ab31
        STX ab08
        STY ab09
        LDX ab3C
        LDA ab3D
        EOR #$01
        TAY 
        JSR FPMUL
        LDX ab0A
        LDY ab0B
        JSR s838B
        STX ab44
        TYA 
        EOR abF1
        STA ab45
        LDX ab30
        LDY ab31
        STX ab08
        STY ab09
        LDX ab36
        LDY ab37
        JSR FPMUL
        STX ab16
        STY ab17
        LDX ab3C
        LDY ab3D
        JSR FPMUL
        TYA 
        EOR #$01
        STX ab0A
        STA ab0B
        LDX ab2E
        LDY ab2F
        STX ab08
        STY ab09
        LDX ab3E
        LDY ab3F
        JSR FPMUL
        LDX ab0A
        LDY ab0B
        JSR s838B
        STX ab46
        STY ab47
        LDX ab30
        LDY ab31
        STX ab08
        STY ab09
        LDX ab38
        LDY ab39
        JSR FPMUL
        STX ab48
        STY ab49
        LDX ab8C
        LDY ab8D
        JSR FPMUL
        TYA 
        EOR #$01
        STA ab09
        JSR FPTO8BIT
        CLC 
        ADC #$44
        STA ab8F
        LDX #$10
        LDY #$19
        JSR s838B
        STX ab94
        STY ab95
        LDX #$0E
        LDY #$1C
        JSR s838B
        STX ab96
        STY ab97
        LDX ab16
        LDY ab17
        STX ab08
        STY ab09
        LDX ab3E
        LDY ab3F
        JSR FPMUL
        STX ab0A
        STY ab0B
        LDX ab2E
        LDY ab2F
        STX ab08
        STY ab09
        LDX ab3C
        LDY ab3D
        JSR FPMUL
        LDX ab0A
        LDY ab0B
        JSR s838B
        TYA 
        EOR #$01
        STX ab4A
        STA ab4B
        LDX ab38
        LDY ab39
        STX ab08
        STY ab09
        LDX ab3C
        LDY ab3D
        JSR FPMUL
        STX ab4C
        STY ab4D
        LDX ab36
        LDY ab37
        STX ab4E
        STY ab4F
        LDX ab38
        LDY ab39
        STX ab08
        STY ab09
        LDX ab3E
        LDY ab3F
        JSR FPMUL
        STX ab50
        STY ab51
        RTS 	; ROTMTRX END ?

        LDY ab9F
        BNE bA4B7
        RTS 

bA4B7   DEY 
        STY ab19
jA4BA   LDY ab19
        LDX f57A0,Y
        LDA f57B0,Y
        STX ab08
        STA ab09
        LDX ab9D
        LDY ab9E
        JSR FPMUL
        STX ab0A
        STY ab0B
        LDY ab19
        LDX f57C0,Y
        LDA f57D0,Y
        EOR #$01
        STX ab08
        STA ab09
        LDX ab9B
        LDY ab9C
        JSR FPMUL
        LDX ab0A
        LDY ab0B
        JSR s838B
        JSR FPTO16BIT
        TYA 
        LDY ab19
        STA f0400,Y
        TXA 
        CLC 
        ADC abA0
        STA ab0440,Y
        LDX f57A0,Y
        LDA f57B0,Y
        STX ab08
        STA ab09
        LDX ab9B
        LDY ab9C
        JSR FPMUL
        STX ab0A
        STY ab0B
        LDY ab19
        LDX f57C0,Y
        LDA f57D0,Y
        STX ab08
        STA ab09
        LDX ab9D
        LDY ab9E
        JSR FPMUL
        LDX ab0A
        LDY ab0B
        JSR s838B
        JSR FPTO16BIT
        TYA 
        LDY ab19
        STA f0500,Y
        TXA 
        CLC 
        ADC abA1
        STA ab0540,Y
        DEC ab19
        BMI bA543
        JMP jA4BA

bA543   RTS 

sA544  
	LDX ab28
        LDY ab29
        JSR COS_FP
        STX ab30
        STY ab31
        LDX ab28
        LDY ab29
        JSR SIN_FP
        STX ab2E
        STY ab2F
        STX ab08
        STY ab09
        LDX ab30
        LDY ab31
        JSR FPDIV
        STX ab32
        STY ab33
        LDX ab30
        LDY ab31
        STX ab08
        STY ab09
        LDX ab2E
        LDY ab2F
        JSR FPDIV
        STX ab34
        STY ab35
        LDX ab2A ; pitch 0-ff
        LDY ab2B ; pitch 0-3
        JSR COS_FP
        STX ab38
        STY ab39
        LDX ab2A
        LDY ab2B
        JSR SIN_FP
        STX ab36
        STY ab37
        STX ab08
        STY ab09
        LDX ab38
        LDY ab39
        JSR FPDIV
        STX ab3A
        STY ab3B
        LDX ab2C
        LDY ab2D
        JSR SIN_FP
        STX ab3C
        STY ab3D
        LDX ab2C
        LDY ab2D
        JSR COS_FP
        STX ab3E
        STY ab3F
        LDX ab99
        LDY ab9A
        JSR SIN_FP
        STX ab9B
        STY ab9C
        LDX ab99
        LDY ab9A
        JSR COS_FP
        STX ab9D
        STY ab9E
        RTS 

sA61F   LDY abAD
        INY 
        LDA (OBJECT_POINTER),Y ; get x
        STA abCF
        INY 
        LDA (OBJECT_POINTER),Y ; get y
        STA abD1
        INY 
        LDA (OBJECT_POINTER),Y ; get z
        STA abD3
        STY abAD
        JSR sA6AD
        LDA DIFF_X_LSB
        CLC  ; clear
        ADC abCF ; x lsb
        STA ab07
        LDA DIFF_X_MSB
        ADC abD0
        TAX 
        LDA DIFF_X_HSB
        ADC #$00
        JSR BIT24TOFP
        STA ab52
        STX ab53
        LDA DIFF_Y_LSB
        CLC 
        ADC abD1 ; y lsb
        STA ab07
        LDA DIFF_Y_MSB
        ADC abD2
        TAX 
        LDA DIFF_Y_HSB
        ADC #$00
        JSR BIT24TOFP
        STA ab54
        STX ab55
        LDA DIFF_Z_LSB
        CLC 
        ADC abD3 ; z lsb
        STA ab07
        LDA DIFF_Z_MSB
        ADC abD4
        TAX 
        LDA DIFF_Z_HSB
        ADC #$00
        JSR BIT24TOFP
        STA ab56
        STX ab57
        RTS 

sA6AD ; ROTATE POINTS ? 
	LDA #$00
        STA abD0
        STA abD2
        STA abD4
        LDA abAF
        CMP #$10
        BCS bA6F1
        LDX abAF
        LDA f802A,X
        BEQ bA6CD
        LDX abD3
        LDY abCF
        JSR sA728
        STX abD3
        STY abCF
bA6CD   LDX abAF
        LDA f801A,X
        BEQ bA6DF
        LDX abD1
        LDY abD3
        JSR sA728
        STX abD1
        STY abD3
bA6DF   LDX abAF
        LDA f800A,X
        BEQ bA6F1
        LDX abCF
        LDY abD1
        JSR sA728
        STX abCF
        STY abD1
bA6F1   LDA abCF
        EOR #$80
        ASL 
        ROL abD0
        ASL 
        ROL abD0
        ASL 
        ROL abD0
        ASL 
        ROL abD0
        STA abCF
        LDA abD1
        EOR #$80
        ASL 
        ROL abD2
        ASL 
        ROL abD2
        ASL 
        ROL abD2
        ASL 
        ROL abD2
        STA abD1
        LDA abD3
        EOR #$80
        ASL 
        ROL abD4
        ASL 
        ROL abD4
        ASL 
        ROL abD4
        ASL 
        ROL abD4
        STA abD3
        RTS 

sA728 ; ROTATE POINT?   
	STX ab0A
        STY ab0B
        JSR SETCRAFTROTMATRIX
        LDA abBEBE
        LDY ab0B
        JSR s82D3
        STA ab0C
        LDA abBEBF
        LDY ab0A
        JSR s82D3
        SEC 
        SBC ab0C
        TAX 
        LDA abBEBE
        LDY ab0A
        JSR s82D3
        STA ab0C
        LDA abBEBF
        LDY ab0B
        JSR s82D3
        CLC 
        ADC ab0C
        TAY 
        RTS 

PRSPCTV LDA PLANET
        BNE bA764
        LDA TRANSPORT_MODE ; GET TRANSPORT MODE
        BPL PRJXFRM          ; FLYING
bA764   JMP jA979          ; WALKING

PRJXFRM rts
fA8A5  rts

jA8E9   STX ab5A
        TYA 
        CLC 
        ADC #$04
        BVS bA8F2
        TAY 

bA8F2   
	STY ab5B
        STY ab09
        LDA ab6E
        BMI bA933
        LDX ab08
        LDA LOG_TABLE,X
        LDX ab5C
        SEC 
        SBC LOG_TABLE,X
        TAY 
        LDA ab09
        ORA #$02
        BCS bA90F
        SBC #$03
        SEC 
bA90F   
	SBC ab5D
        AND #$FD
        STA ab61
        LDX EXP_TABLE,Y
        STX ab60
        CLC 
        ADC ab21
        BVS bA92D
        TAY 
        JSR FPTO8BIT
        BCS bA92D
        ADC ab8F
        STA ab6B
        CMP #$88 ; clip test
        BCC bA933
bA92D   
	LDA ab6E
        ORA #$02
        STA ab6E
bA933   
	LDY ab19
        LDA ab6E
        STA POINT_CLASSIFICATION,Y
        BMI bA95A
        LDA ab5E
        STA UNKNOWN_POINT_TAB_2,Y
        LDA ab5F
        STA UNKNOWN_POINT_TAB_3,Y
        LDA ab60
        STA UNKNOWN_POINT_TAB_4,Y
        LDA ab61
        STA UNKNOWN_POINT_TAB_5,Y
        LDA ab6A ; get perspective ver
abA952  
	STA PERS_HOR,Y ; put perspective ver
        LDA ab6B ; get perspective hor
        STA PERS_VER,Y ; put perspective hor
bA95A   
	LDA ab58
        STA UNKNOWN_POINT_TAB_6,Y
        LDA ab59
        STA UNKNOWN_POINT_TAB_7,Y
        LDA ab5A
        STA UNKNOWN_POINT_TAB_8,Y
        LDA ab5B
        STA UNKNOWN_POINT_TAB_9,Y
        LDA ab5C
        STA UNKNOWN_POINT_TAB_10,Y
        LDA ab5D
        STA UNKNOWN_POINT_TAB_1,Y
        RTS 

jA979   LDX ab52
        LDA LOG_TABLE,X
        LDX ab3C
        CLC 
        ADC LOG_TABLE,X
        TAY 
        LDA ab53
        BCC bA98C
        ADC #$03
        CLC 
bA98C   ADC ab3D
        AND #$FD
        STA ab0B
        LDX EXP_TABLE,Y
        STX ab0A
        LDX ab56
        LDA LOG_TABLE,X
        LDX ab3E
        CLC 
        ADC LOG_TABLE,X
        TAY 
        LDA ab57
        BCC bA9AA
        ADC #$03
        CLC 
bA9AA   ADC ab3F
        AND #$FD
        STA ab09
        LDX EXP_TABLE,Y
        STX ab08
        LDX ab0A
        LDY ab0B
        JSR s838B
        STX ab5C
        TYA 
        EOR #$01
        STA ab5D
        AND #$01
        LSR 
        ROR 
        STA ab6E
        LDX ab52
        LDA LOG_TABLE,X
        LDX ab3E
        CLC 
        ADC LOG_TABLE,X
        TAY 
        LDA ab53
        BCC bA9DC
        ADC #$03
        CLC 
bA9DC   ADC ab3F
        AND #$FD
        STA ab0B
        LDX EXP_TABLE,Y
        STX ab0A
        LDX ab56
        LDA LOG_TABLE,X
        LDX ab3C
        CLC 
        ADC LOG_TABLE,X
        TAY 
        LDA ab57
        BCC bA9FA
        ADC #$03
        CLC 
bA9FA   ADC ab3D
        AND #$FD
        STA ab09
        LDX EXP_TABLE,Y
        STX ab08
        EOR #$01
        STA ab09
        LDX ab0A
        LDY ab0B
        JSR s838B
        STX ab58
        TYA 
        EOR abF1
        STA ab59
        LDY ab6E
        BNE bAA54
        STA ab09
        LDX ab08
        LDA LOG_TABLE,X
        LDX ab5C
        SEC 
        SBC LOG_TABLE,X
        TAY 
        LDA ab09
        ORA #$02
        BCS bAA32
        SBC #$03
        SEC 
bAA32   SBC ab5D
        AND #$FD
        STA ab5F
        LDX EXP_TABLE,Y
        STX ab5E
        CLC 
        ADC ab21
        BVS bAA50
        TAY 
        JSR FPTO8BIT
        BCS bAA50
        ADC ab8E
        STA ab6A
        CMP #$A0 ; clip test
        BCC bAA54
bAA50   LDA #$01
        STA ab6E
bAA54   LDX ab54
        LDA ab55
        EOR #$01
        TAY 
        STX ab08
        STY ab09
        JMP jA8E9

        LDA #$FF
        STA abBEFE
        RTS 

        NOP f3F,X
        JSR ~e0038
        ORA f03,X
        
        PHP 
        .BYTE $99
bAC53   INX 
        LDA ab08
        ADC LINE_INC
        STA ab08
        BCC LINE_DRAW_0
        INY 
        CPY #$88
        BEQ bAC81
LINE_DRAW_0
        LDA VER_POS_LO,Y ; LINE-DRAW-START
        STA SCREEN_POS_LO
        TXA 
        ASL 
        LDA VER_POS_HI,Y
        ADC SCREEN_BANK
        STA SCREEN_POS_HI
        STY ab06
        LDY HOR_SCR_POS,X
        LDA (SCREEN_POS_PTR),Y
abAC78   =*+$02
abAC76  
	AND PIXEL_POS,X
        STA (SCREEN_POS_PTR),Y
        LDY ab06
        CPX ab6C
        BNE bAC53
bAC81   
	RTS 

bAC82   
	INY  ; LINE-DRAW
        LDA ab08
        ADC LINE_INC
        STA ab08
        BCC LINE_DRAW_1
        INX 
        CPX #$A0 ; clip test
        BEQ bACB0
LINE_DRAW_1
        LDA VER_POS_LO,Y ; LINE-DRAW-START
        STA SCREEN_POS_LO
        TXA 
        ASL 
        LDA VER_POS_HI,Y
        ADC SCREEN_BANK
        STA SCREEN_POS_HI
        STY ab06
        LDY HOR_SCR_POS,X
        LDA (SCREEN_POS_PTR),Y
abACA7   =*+$02
abACA5  
		AND PIXEL_POS,X
        STA (SCREEN_POS_PTR),Y
fACAA   
	LDY ab06
abACAC  
	CPY ab6D
        BNE bAC82 ; GOTO LINE-DRAW
bACB0   
	RTS 

bACB1   
	INY  ; LINE-DRAW
        LDA ab08
        ADC LINE_INC
        STA ab08
        BCC LINE_DRAW_2
        DEX 
        CPX #$FF
        BEQ bACDF
LINE_DRAW_2
        LDA VER_POS_LO,Y ; LINE-DRAW-START
        STA SCREEN_POS_LO
        TXA 
        ASL 
        LDA VER_POS_HI,Y
        ADC SCREEN_BANK
        STA SCREEN_POS_HI
        STY ab06
        LDY HOR_SCR_POS,X
        LDA (SCREEN_POS_PTR),Y
abACD6   =*+$02
abACD4  
	AND PIXEL_POS,X
        STA (SCREEN_POS_PTR),Y
        LDY ab06
        CPY ab6D
        BNE bACB1 ; GOTO LINE-DRAW
bACDF   
	RTS 

bACE0   
	DEX ; LINE-DRAW
        LDA ab08
        SBC LINE_INC
        STA ab08
        BCS LINE_DRAW_3
        INY 
        CPY #$88
        BEQ bAD0E
LINE_DRAW_3
        LDA VER_POS_LO,Y ; LINE-DRAW-START
        STA SCREEN_POS_LO
        TXA 
        ASL 
        LDA VER_POS_HI,Y
        ADC SCREEN_BANK
        STA SCREEN_POS_HI
        STY ab06
        LDY HOR_SCR_POS,X
        LDA (SCREEN_POS_PTR),Y
abAD05   =*+$02
abAD03  
	AND PIXEL_POS,X
        STA (SCREEN_POS_PTR),Y
        LDY ab06
        CPX ab6C
        BNE bACE0 ; GOTO LINE-DRAW
bAD0E   
	RTS 

bAD0F   
	DEX  ; LINE-DRAW
        LDA ab08
        SBC LINE_INC
        STA ab08
        BCS LINE_DRAW_4
        DEY 
        CPY #$FF
        BEQ bAD3D
LINE_DRAW_4
        LDA VER_POS_LO,Y ; LINE-DRAW-START
        STA SCREEN_POS_LO
        TXA 
        ASL 
        LDA VER_POS_HI,Y
        ADC SCREEN_BANK
        STA SCREEN_POS_HI
        STY ab06
        LDY HOR_SCR_POS,X
        LDA (SCREEN_POS_PTR),Y
abAD34   =*+$02
abAD32  
	AND PIXEL_POS,X
        STA (SCREEN_POS_PTR),Y
        LDY ab06
        CPX ab6C
        BNE bAD0F ; GOTO LINE-DRAW
bAD3D   
		RTS 

bAD3E   
	DEY  ; LINE-DRAW
        LDA ab08
        ADC LINE_INC
        STA ab08
        BCC LINE_DRAW_5
        DEX 
        CPX #$FF
        BEQ bAD6C
LINE_DRAW_5
        LDA VER_POS_LO,Y ; LINE-DRAW-START
        STA SCREEN_POS_LO
        TXA 
        ASL 
        LDA VER_POS_HI,Y
        ADC SCREEN_BANK
        STA SCREEN_POS_HI
        STY ab06
        LDY HOR_SCR_POS,X
        LDA (SCREEN_POS_PTR),Y
abAD63   =*+$02
abAD61  
	AND PIXEL_POS,X
        STA (SCREEN_POS_PTR),Y
        LDY ab06
        CPY ab6D
        BNE bAD3E ; GOTO LINE-DRAW
bAD6C   
	RTS 

bAD6D   
	DEY  ; LINE-DRAW
        LDA ab08
        SBC LINE_INC
        STA ab08
        BCS LINE_DRAW_6
                INX             ; NEXT VER
                CPX #$A0        ; OFF BOTTOM
                BEQ bAD9B       ; EXIT
LINE_DRAW_6
        LDA VER_POS_LO,Y ; LINE-DRAW-START
        STA SCREEN_POS_LO
        TXA 
        ASL 
        LDA VER_POS_HI,Y
        ADC SCREEN_BANK
        STA SCREEN_POS_HI
        STY ab06
        LDY HOR_SCR_POS,X
        LDA (SCREEN_POS_PTR),Y
abAD92   =*+$02
abAD90  
	AND PIXEL_POS,X
        STA (SCREEN_POS_PTR),Y
        LDY ab06
        CPY ab6D
        BNE bAD6D ; GOTO LINE-DRAW 
bAD9B   
		RTS 

bAD9C   
	INX	; LINE-DRAW
	LDA	ab08
        ADC	LINE_INC
        STA	ab08
        BCC	LINE_DRAW_7
        DEY 
        CPY	#$FF
        BEQ	bADCA
LINE_DRAW_7
        LDA	VER_POS_LO,Y ; LINE-DRAW-START
abADAD  
	STA	SCREEN_POS_LO
	TXA 
	ASL 
	LDA VER_POS_HI,Y
	ADC SCREEN_BANK
	STA SCREEN_POS_HI
	STY ab06
	LDY HOR_SCR_POS,X
	LDA (SCREEN_POS_PTR),Y
abADC1   =*+$02
abADBF  
	AND PIXEL_POS,X
	STA (SCREEN_POS_PTR),Y
	LDY ab06
	CPX ab6C
	BNE bAD9C ; GOTO LINE DRAW
bADCA   
	RTS 

PLOT_POINT	; PLOT_POINT
        LDA	POINT_CLASSIFICATION,X	; GET POINT FROM PLOT POINT TABLE ?
        BNE	bADEE	; EXIT IF ITS not ZERO - this being set to not zero plots a point - what sets it to 0?
		LDY	PERS_VER,X	; GET VER POS
		LDA	VER_POS_LO,Y 
		STA	SCREEN_POS_LO
		LDA	PERS_HOR,X	; GET HOR POS
		TAX 	
		ASL 
		LDA	VER_POS_HI,Y
		ADC	SCREEN_BANK
		STA	SCREEN_POS_HI
		LDY	HOR_SCR_POS,X
		LDA	(SCREEN_POS_PTR),Y	; GET SCREEN BYTE
		AND	PIXEL_POS,X			; AND PIXEL
		STA	(SCREEN_POS_PTR),Y	; PUT SCREEN BYTE
bADEE   
	RTS 

sADEF   LDA abE8
        ROR 
        ROR 
        ROR 
        EOR abE8
        ROR 
        ROR abF3
        ROR abE8
        RTS 

COLOUR_SETUP_WHITE
        LDA #$77
        LDX #$3D
        BNE COLOUR_SETUP
COLOUR_SETUP_BLACK
	LDA #$56
        LDX #$1D
COLOUR_SETUP   
	STA abAC78
        STA abACA7
        STA abACD6
        STA abAD05
        STA abAD34
        STA abAD63
        STA abAD92
        STA abADC1
        STX abAC76
        STX abACA5
        STX abACD4
        STX abAD03
        STX abAD32
        STX abAD61
        STX abAD90
        STX abADBF
        RTS 


sAE37   LDA #$F6
        STA abB9BD
        LDA #$C7
        STA abB9FA
        LDA #$1B
        STA abB9C2
        LDA #$3B
        STA abB9FF
jAE4B   CPY #$85
        BCS bAE67
        TYA 
        CLC 
        ADC #$32
        STA abB9DB
        AND #$07
        CMP #$03
        BEQ bAE8B
        LDA #$E6
        STA abB9D1
        LDA #$B9
        STA abB9D6
        RTS 

bAE67   LDA #$1E
        STA abB9D1
        LDA #$BA
        STA abB9D6
        LDA #$BA
        STA abB9DB
sAE76   LDA #$C7
        STA abB9BD
        LDA #$F6
        STA abB9FA
        LDA #$3B
        STA abB9C2
        LDA #$1B
        STA abB9FF
        RTS 

bAE8B   LDA #$F8
        STA abB9D1
        LDA #$B9
        STA abB9D6
        RTS 

sAEF3   LDA abA5
        STA abA3
        LDA abC2
        STA abC6
        LDA abC4
        STA abA5
        LDA abC5
        STA abA6
        LDY #$84
        STY ab19
        JSR sAE37
        NOP
        NOP
        NOP
        JSR sAF3E
        JMP jAF17

bAF13   TAY 
        JSR sAE37
jAF17   LDA abE2
bAF19   CMP abE2
        BEQ bAF19
        LDA ab19
        SEC 
        SBC #$04
        STA ab19
        BCS bAF13
        LDA abC2
        STA abA3
        JSR sAF3A
        LDA #$00
        STA abE2
bAF31   LDA abE2
        CMP #$16
        BCC bAF31
        JMP jAED3

sAF3A   LDY #$1B
        BNE bAF40
sAF3E   LDY #$0D
bAF40   LDX #$0D
bAF42   LDA fAF52,Y
        STA $D400,X  ;Voice 1: Frequency Control - Low-Byte
        DEY 
        DEX 
        BNE bAF42
        LDA #$15
        STA $D40B    ;Voice 2: Control Register
        RTS 

fAF52

DRAW_SCREEN
	LDA #$78
        STA ab1A
        LDA #$00
        STA SCREEN_POS_LO

WAIT_RASTER
        LDA	$D012
        CMP	#$E0
        BNE WAIT_RASTER

        LDA	abC8
        BPL	bAF84
        JSR	sAE96
bAF84   
	INC	SCREEN_FLIP	; INCREMENT SCREEN FLIP
        LDA	SCREEN_FLIP	; GET SCREEN FLIP
        LSR 				; SHIFT BIT0 INTO CARRY
        BCS	bAF97		; CARRY SET ?
		LDA	#$40			; SCREEN 1 OFFSET
		STA	SCREEN_BANK		; SCREEN 1 OFFSET
		STA	SCREEN_POS_HI
		LDA	#$78
		STA	abC7
		BNE	bAFA1
bAF97  
	LDA	#$60			; SCREEN 2 OFFSET
        STA	SCREEN_BANK		; SCREEN 2 OFFSET
        STA	SCREEN_POS_HI
        LDA	#$70
        STA	abC7
bAFA1   
	LDA abC8
        BEQ bAFA8
        JSR sAEF3
bAFA8   
		LDA abF0
        BEQ bAFBD
        DEC abF0
abAFAE  
		BNE bAFB7
        LDA abC4
        STA abA5
        JMP bAFBD

bAFB7  
	TAX 
        LDA fBB7E,X
        STA abA5
bAFBD
        JMP jB197

jB197   LDA #$AA
        LDX #$F8
        LDY ab25
        CPY #$60
        BEQ bB1E7
bB1A1   STA f3FFF,X
        STA f40F7,X
        STA f41EF,X
        STA f42E7,X
        STA f43DF,X
        STA f44D7,X
        STA f45CF,X
        STA f46C7,X
        STA f47BF,X
        STA f48B7,X
        STA f49AF,X
        STA f4AA7,X
        STA f4B9F,X
        STA f4C97,X
        STA f4D8F,X
        STA f4E87,X
        STA f4F7F,X
        STA f5077,X
        STA f516F,X
        STA f5267,X
        STA f535F,X
        STA f5447,X
        DEX 
        BNE bB1A1
        RTS 

bB1E7   STA f5FFF,X
        STA f60F7,X
        STA f61EF,X
        STA f62E7,X
        STA f63DF,X
        STA f64D7,X
        STA f65CF,X
        STA f66C7,X
        STA f67BF,X
        STA f68B7,X
        STA f69AF,X
        STA f6AA7,X
        STA f6B9F,X
        STA f6C97,X
        STA f6D8F,X
        STA f6E87,X
        STA f6F7F,X
        STA f7077,X
        STA f716F,X
        STA f7267,X
        STA f735F,X
        STA f7447,X
        DEX 
        BNE bB1E7
        RTS 
	
sB281   LDA #$FF
        STA $DC02    ;CIA1: Data Direction Register A
        LDA #$00
        STA ab07
abB28C   =*+$02
        STA $DC03    ;CIA1: Data Direction Register B
        TAX 
        STA $DC00    ;CIA1: Data Port Register A
        LDY $DC01    ;CIA1: Data Port Register B
        CPY #$FF
        BEQ bB2F8
        LDA #$FE
bB29A   STA $DC00    ;CIA1: Data Port Register A
        LDY $DC01    ;CIA1: Data Port Register B
        CPY #$FF
        BEQ bB2E0
        PHA 
        TYA 
        LDY #$08
bB2A8   DEY 
        BMI bB2DF
        ASL 
        BCS bB2A8
        PHA 
        TXA 
        ASL 
        ASL 
        ASL 
        STY ab06
        ORA ab06
        STA ab06
        CMP #$3A
        BEQ bB2D1
        CMP #$0F
        BEQ bB2D8
        CMP #$34
        BEQ bB2D8
        LDA ab07
        AND #$C0
        ORA ab06
jB2CB   STA ab07
        PLA 
        JMP bB2A8

bB2D1   LDA ab07
        ORA #$80
        JMP jB2CB

bB2D8   LDA ab07
        ORA #$40
        JMP jB2CB

bB2DF   PLA 
bB2E0   INX 
        SEC 
        ROL 
        BCS bB29A
        LDY ab07
        TYA 
        AND #$3F
        BEQ bB2F8
        EOR abEA
        AND #$3F
        BEQ bB2F4
        STY abE9
bB2F4   STY abEA
        CLC 
        RTS 

bB2F8   LDY #$FF
        STY abEA
        SEC 
        RTS 

READ_JOYSTICK_KEYBOARD
        LDA #$00
        STA $DC02    ;CIA1: Data Direction Register A
        LDA $DC00    ;CIA1: Data Port Register A
        TAX 
        AND #$0F
        STA ab80 ; JOYSTICK MOVEMENT
        TXA 
        LSR 
        LSR 
        LSR 
        LSR 
        AND #$01
        STA ab81 ; FIRE BUTTON
        TXA 
        AND #$1F
        CMP #$1F
        BEQ bB324
        LDA #$80
        ORA abBEC0
        STA abBEC0
bB323   
	RTS 
	
bB324   JSR sB281
        BCS bB323
        LDA #$80
        ORA abBEC0
        STA abBEC0
jB331   LDY abE9
        LDX abEA
        CPY #$81
        BNE bB33F
        JSR sB281
        JMP jB331

bB33F   CPY #$12
        BNE bB349
        JSR sB4B2
        JMP j98FE

bB349   CPY #$2A
        BNE bB356
        JSR sB4B2
        JMP j98C8
        NOP
        NOP
        NOP

bB356   CPX #$2B
        BNE bB361
        LDX #$F8
        LDY #$FC
        JMP jB499

bB361   CPX #$28
        BNE bB36C
        LDX #$08
        LDY #$00
        JMP jB499

bB36C   CPY #$8D
        BNE bB377
        STY ab825F
        LDX #$3B
        BNE bB382
bB377   CPY #$AA
        BNE bB3E4
        LDA #$00
        STA ab825F
        LDX #$3A
bB382  
	NOP
	NOP
	NOP
        JSR sB4B2
        JSR sB3D6
bB38B   JSR sB281
        LDA abE9
        CMP #$04
        BEQ bB38B
        AND #$3F
        TAX 
        LDA fBC50,X
        BEQ bB3D1
        LSR 
        SEC 
        SBC #$04
        CMP #$0A
        BNE bB3A7
        LDA #$00
        CLC 
bB3A7   BCS bB3D1
        ORA #$30
        STA ab825E
        JSR sB4B2
        NOP
        NOP
        NOP
        LDX #$38
        JSR sB3D6
        LDA #$05
        STA ab01
bB3BD   JSR sB281
        LDA abE9
        CMP #$04
        BEQ bB3BD
        LDX #$35
        STX ab01
        CMP #$01
        BNE bB3D1
        JMP j819E

bB3D1   LDX #$32
        JMP sB3D6

sB3D6   LDA abE6
        BNE sB3D6
        JSR s8DAA
bB3DD   LDA abE0
        CMP #$1E
        BCC bB3DD
        RTS 

bB3E4   NOP 
        CPY #$BE
        BNE bB3F6
        NOP
        NOP
        NOP
        JSR sB4B2
        LDX #$FF
        TXS 
        CLD 
        JMP j80E8

bB3F6   CPY #$0E
        BEQ bB3FD
        JMP jB47E

bB3FD   JSR sB4B2
        LDA ELEVATOR ; IN LIFT
        BNE bB42F    ; YES
        LDA PLANET   ; NO
        BNE bB455
        LDA ab7F
        BEQ bB42F
        LDA CURR_X_MSB
        LSR 
        LSR 
        CMP #$1C
        BNE bB42F
        LDA CURR_Z_MSB
        LSR 
        LSR 
        CMP #$1C
        BNE bB42F
        LDX #$08
bB41E   LDA fB4B6,X
        CMP CURR_X_HSB
        BNE bB42C
        LDA fB4BE,X
        CMP CURR_Z_HSB
        BEQ bB430
bB42C   DEX 
        BNE bB41E
bB42F   RTS 

bB430   CPX #$05
        BNE bB43E
        LDA ab29EE
        BMI bB43E
        LDX #$39
        JMP s8DAA

bB43E   NOP
	NOP
	NOP
        STX abCD
        LDA abBBCF
        STA abC6
        LDA abBBCE
        STA abC2
        LDA #$0D
        LDX #$83
        LDY #$80
        BMI bB470
bB455   LDX #$00
        LDA #$08
        CMP abCD
        BCC bB42F
        BNE bB460
        DEX 
bB460   STX abFA
        NOP
        NOP
        NOP
        LDA abBBCA
        STA abC2
        LDA #$00
        LDX #$42
        LDY #$01
bB470   STA abCC
        STX abCB
        STY ELEVATOR ; LIFT GOING UP
        LDA #$30
        NOP
        NOP
        NOP
        JMP s9950

jB47E   TYA 
        AND #$3F
        TAX 
        LDA fBC50,X
        BEQ bB42F
        TAX 
        TYA 
        ROL 
        ROL 
        TXA 
        ROL 
        STA abED
        LDA #$00
        STA abEC
        NOP
        NOP
        NOP
        JMP sB4B2

jB499   STX ab08
        STY ab09
        LDX abEC
        LDY abED
        JSR FPMUL
        TYA 
        AND #$FC
        CMP #$3C
        BEQ sB4B2
        STX abEC
        STY abED
        NOP
        NOP
        NOP
sB4B2   LDA #$04
        STA abE9
fB4B6   RTS 

        ORA #$09
        SLO (p0B,X)
        SLO (p51,X)
        DEY 
fB4BE   PHP 
        ASL ab05
        BRK 
        ORA ab230F
        DEY 
        PHP 
sB4C7   STA abB4D3
        LDX #$17
bB4CC   STA fDB77,X
        DEX 
        BNE bB4CC
        RTS 

abB4D3  .BYTE $02    ;JAM 
sB4D4   STA abDAFA
        STA abDAFB
        STA abDB22
        STA abDB23
        STA abDB4A
        STA abDB4B
        STA abDB72
        STA abDB73
        RTS 

sB4ED   STA abDB42
        STA abDB43
        STA abDB44
        STA abDB45
        STA abDB6A
        STA abDB6B
        STA abDB6C
        STA abDB6D
        RTS 

        LDX #$A0
        LDA #$00
bB50A   STA fDAA7,X
        STA fDB47,X
        DEX 
        BNE bB50A
        LDA abBBC2
        JSR sB4C7
        LDA abBBC3
        JSR sB4D4
        LDA abBBC7
        JSR sB4ED
        LDX #$04
bB527   LDA abBBC4
        STA fDB00,X
        LDA abBBC5
        STA fDB09,X
        LDA abBBC6
        STA fDB12,X
        DEX 
        BPL bB527
        RTS 

sB67B   LDA ab2A
        LSR 
        LSR 
        LSR 
        ADC ab2A
        ROR 
        SEC 
        SBC abBA
        TAX 
        LDA ab2B
        SBC abBB
        AND #$03
        BNE bB694
        CPX #$00
        BNE bB694
        RTS 

bB694   AND #$02
        BEQ bB69B
        JMP jB75B

bB69B   LDY abBA
        CPY #$8F
        BNE bB6B0
        LDA #$FF
        STA abBA
        INC abBB
        JSR sB749
        BCS bB6B0
        LDA #$00
        STA abBC
bB6B0   INC abBA
        TYA 
        EOR #$07
        AND #$0F
        TAY 
        BNE bB6CD
        LDA #$FF
        STA ab7FE0
        STA ab7FF0
        LDA #$00
        STA ab7FEF
        STA ab7FFF
        JMP jB6DD

bB6CD   LDA #$FF
        STA ab7FE0,Y
        STA ab7FF0,Y
        LDA #$00
        STA f7FDF,Y
        STA ab7FEF,Y
jB6DD   TYA 
        CLC 
        ADC #$05
        AND #$0F
        TAY 
        LDA f7FE1,Y
        STA ab7FE0,Y
        LDA f7FE2,Y
        STA f7FE1,Y
        LDA f7FE3,Y
        STA f7FE2,Y
        LDA f7FE4,Y
        STA f7FE3,Y
        LDA f7FE5,Y
        STA f7FE4,Y
        LDA #$FF
        STA f7FE5,Y
        LDX #$05
bB709   CPY #$0F
        BEQ bB726
        LDA f7FF1,Y
        STA ab7FF0,Y
        LDA f76E8,X
        STA f7FD0,Y
        INY 
        DEX 
        BNE bB709
        LDA #$FF
        STA ab7FF0,Y
        STA f7FD0,Y
        RTS 

bB726   LDA f7FD0
        STA f7FDF
        LDY #$00
bB72E   LDA f7FE1,Y
        STA ab7FE0,Y
        LDA f7FD1,Y
        STA f7FD0,Y
        INY 
        DEX 
        BNE bB72E
        INC abBC
        LDY abBC
        LDA f768B,Y
        STA ab7FFF
        RTS 

sB749   LDA abBB
        AND #$03
        TAX 
        LDA fB757,X
        JSR sB4D4
        TXA 
        LSR 
        RTS 

fB757   ASL ab06
        ORA ab05
jB75B   LDY abBA
        BNE bB76E
        LDA #$90
        STA abBA
        DEC abBB
        JSR sB749
        BCC bB76E
        LDA #$5B
        STA abBC
bB76E   DEC abBA
        TYA 
        EOR #$07
        AND #$0F
        TAY 
        CMP #$0F
        BNE bB78D
        LDA #$FF
        STA ab7FEF
        STA ab7FFF
        LDA #$00
        STA ab7FE0
        STA ab7FF0
        JMP jB79D

bB78D   LDA #$FF
        STA ab7FE0,Y
        STA ab7FF0,Y
        LDA #$00
        STA f7FE1,Y
        STA f7FF1,Y
jB79D   TYA 
        CLC 
        ADC #$0B
        AND #$0F
        TAY 
        LDA ab7FEF,Y
        STA ab7FF0,Y
        LDA f7FEE,Y
        STA ab7FEF,Y
        LDA f7FED,Y
        STA f7FEE,Y
        LDA f7FEC,Y
        STA f7FED,Y
        LDA f7FEB,Y
        STA f7FEC,Y
        LDA #$FF
        STA f7FEB,Y
        LDX #$05
bB7C9   CPY #$00
        BEQ bB7E6
        LDA f7FDF,Y
        STA ab7FE0,Y
        LDA f76E8,X
        STA f7FD0,Y
        DEY 
        DEX 
        BNE bB7C9
        LDA #$FF
        STA ab7FE0,Y
        STA f7FD0,Y
        RTS 

bB7E6   LDA f7FDF
        STA f7FD0
        LDY #$0F
bB7EE   LDA ab7FEF,Y
        STA ab7FF0,Y
        LDA f7FCF,Y
        STA f7FD0,Y
        DEY 
        DEX 
        BNE bB7EE
        DEC abBC
        LDY abBC
        LDA f7682,Y
        STA ab7FE0
        RTS 

sB809   LDA ab2C
        LSR 
        LSR 
        LSR 
        ADC ab2C
        ROR 
        SEC 
        SBC abBE
        TAX 
        LDA ab2D
        SBC abBF
        AND #$03
        BNE bB822
        CPX #$00
        BNE bB822
        RTS 

bB822   AND #$02
        BNE bB829
        JMP jB899

bB829   LDY abBE
        BNE bB83C
        LDA #$90
        STA abBE
        DEC abBF
        NOP
        NOP
        NOP
        BCC bB83C
        LDA #$B4
        STA abC0
bB83C   DEC abBE
        LDX #$05
bB840   LSR f7ED8,X
        ROR f7EE0,X
        ROR f7EE8,X
        ROR f7EF0,X
        ROR f7EF8,X
        ROR f7F00,X
        DEX 
        BNE bB840
        TYA 
        SEC 
        SBC #$02
        AND #$07
        ORA #$F0

JB899   RTS 

abB985  BRK 
fB987   =*+$01
abB986  ORA (p59,X)
fB989   =*+$01
fB988   ORA #$09
fB98A   EOR (p09,X)
        ASL ab810A
        .BYTE $12    ;JAM 
        ORA #$09
        STA (p06,X)
        ANC #$0B
        STA (p16,X)
        ANC #$0B
        STA (p04,X)
        ORA #$09
        STA (p0E,X)
        ANC #$0B
        STA (p0E,X)
        DEX 
        ASL 
        EOR (p0F,X)
        DEX 
        ASL 
abB9AB   =*+$01
        EOR (p08,X)
        BRK 
abB9AD  BRK 
        STA (p50,X)
        DCP f80AC,X
        BMI bB9F4
        SLO ~ab0080
        BRK 
        RTI 

bB9F4
        PHA 
abB9FA   =*+$01
        LDA abF6
        STA $D018    ;VIC Memory Control Register
abB9FF   =*+$01
        LDA #$1B
        STA $D011    ;VIC Control Register 1
        LDA abC6
        STA $D021    ;Background Color 0
        LDA #<pBA1E
        STA abFFFE   ;IRQ
        LDA #>pBA1E
        STA abFFFF   ;IRQ
        LDA #$BA
        STA $D012    ;Raster Position
        LDA #$01
        STA $D019    ;VIC Interrupt Request Register (IRR)
        PLA 
        RTI 

fBB7E   .BYTE $00,$0B,$0C,$0F,$01,$01,$01,$0F
  .BYTE $0C,$0B,$00,$02,$04,$08,$08,$08
  .BYTE $08,$08,$08,$08,$08,$08,$08,$08
  .BYTE $08,$08,$08,$08,$08,$08,$08,$08
  .BYTE $08,$08,$08,$05,$03,$02,$01,$02
  .BYTE $02,$02,$02,$03,$03,$03,$03,$04
  .BYTE $04
  .BYTE $04,$04,$04,$05,$05,$05,$05,$05
  .BYTE $05,$05,$05,$05
   .BYTE $05,$05,$05,$04,$03,$02,$00,$02
  .BYTE $06,$09,$04,$05,$02,$02,$08
abBBCA  .BYTE $0B,$00,$09,$00
abBBCE  .BYTE $0B
abBBCF  .BYTE $00
LINE_DRAW_CONV_PTR      .BYTE $00,$07,$03,$04,$01,$06,$02,$05
fBBD8   .BYTE $9F,$9F,$00,$00,$00,$00,$9F,$9F
fBBE0   .BYTE $87,$87,$87,$87,$00,$00,$00,$00
fBBE8   .BYTE $40,$38,$08,$00,$40,$38,$28,$30
  .BYTE $40,$18,$08,$10,$40,$18,$28,$20
fBBF8   .BYTE $00,$00,$03,$00,$00,$00,$02,$02
  .BYTE $00
  .BYTE $00,$00,$06,$04,$00,$00,$04,$0C
  .BYTE $00,$00,$00,$08,$08,$00,$00,$00
  .BYTE $09,$00,$00,$00,$01,$01,$00
fBC18   .BYTE $01,$00,$00,$00,$01,$01,$00,$00
  .BYTE $00,$01,$00,$00,$00,$01,$01,$00
  .BYTE $00,$00,$01,$00,$00,$00,$01,$01
  .BYTE $00,$00,$00,$01,$01
  .BYTE $00,$00,$01

LINE_DRAW_PTR_LO   .BYTE <LINE_DRAW_0,<LINE_DRAW_1,<LINE_DRAW_2,<LINE_DRAW_3,<LINE_DRAW_4,<LINE_DRAW_5,<LINE_DRAW_6,<LINE_DRAW_7 
LINE_DRAW_PTR_HI   .BYTE >LINE_DRAW_0,>LINE_DRAW_1,>LINE_DRAW_2,>LINE_DRAW_3,>LINE_DRAW_4,>LINE_DRAW_5,>LINE_DRAW_6,>LINE_DRAW_7 

fBC50   .FILL 165,0
        
        .BYTE $00
pBEA0   .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
fBEB0   .BYTE $00
fBEB1   .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00
abBEBE  .BYTE $00
abBEBF  .BYTE $00
abBEC0  .BYTE $80,$00

abBEFE .BYTE 0,0

