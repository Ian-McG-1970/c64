*= $1000 

BANK_HI_LO = 2
BANK_HI_HI = BANK_HI_LO +1
BANK_LO_LO = BANK_HI_HI +1
BANK_LO_HI = BANK_LO_LO +1

SCR_LO = BANK_LO_HI+1
SCR_HI = SCR_LO+1
SCR = SCR_LO

BANK = SCR_HI+1

LINE_FRAC = BANK+1
LINE_INC = LINE_FRAC+1
LINE_VER = LINE_INC+1
LINE_END = LINE_VER+1
H_ST = LINE_END+1
H_EN = H_ST+1
V_ST = H_EN+1
V_EN = V_ST+1

INCP = LINE_INC
PNT = LINE_VER
LIMIT = LINE_END

X_PNT_LO = V_EN+1
X_PNT_HI = X_PNT_LO+1
Y_PNT_LO = X_PNT_HI+1
Y_PNT_HI = Y_PNT_LO+1
Z_PNT_LO = Y_PNT_HI+1
Z_PNT_HI = Z_PNT_LO+1
X_OFF_LO = Z_PNT_HI+1
X_OFF_HI = X_OFF_LO+1
Y_OFF_LO = X_OFF_HI+1
Y_OFF_HI = Y_OFF_LO+1
Z_OFF_LO = Y_OFF_HI+1
Z_OFF_HI = Z_OFF_LO+1
CC = Z_OFF_HI+1
PNT_CNT = CC+1

X_PNT = X_PNT_LO
Y_PNT = Y_PNT_LO
Z_PNT = Z_PNT_LO
X_OFF = X_OFF_LO
Y_OFF = Y_OFF_LO
Z_OFF = Z_OFF_LO
LINE_CNT = PNT_CNT +1

DIVIDEND = LINE_CNT +1 ; 3 BYTES
DIVISOR = DIVIDEND +3 ; 3 BYTES
RESULT = DIVISOR +3 ; 3 BYTES?
REMAINDER = RESULT +3 ; 3 BYTES?

CC_OR = REMAINDER +3
CC_AND = CC_OR +1
X_CLIP_STT = CC_AND +1
X_CLIP_END = X_CLIP_STT +2
Y_CLIP_STT = X_CLIP_END +2
Y_CLIP_END = Y_CLIP_STT +2
Z_CLIP_STT = Y_CLIP_END +2
Z_CLIP_END = Z_CLIP_STT +2
X_CLIP_MID = Y_CLIP_END +2
Y_CLIP_MID = X_CLIP_MID +2
Z_CLIP_MID = Y_CLIP_MID +2
CLIP_MID = Z_CLIP_MID +2

P_SQR_LO=CLIP_MID +2
P_SQR_HI=P_SQR_LO +2
P_INVSQR_LO=P_SQR_HI +2
P_INVSQR_HI=P_INVSQR_LO +2
X0=P_INVSQR_HI +2
X1=X0 +1
Y0=X1 +1
Y1=Y0 +1
Z0=Y1 +1
Z1=Z0 +1
Z2=Z1 +1
Z3=Z2 +1

X_CLIP_S_PNT_LO = Z3 +1
X_CLIP_S_PNT_HI = X_CLIP_S_PNT_LO +1
Y_CLIP_S_PNT_LO = X_CLIP_S_PNT_HI +1
Y_CLIP_S_PNT_HI = Y_CLIP_S_PNT_LO +1
Z_CLIP_S_PNT_LO = Y_CLIP_S_PNT_HI +1
Z_CLIP_S_PNT_HI = Z_CLIP_S_PNT_LO +1
X_CLIP_E_PNT_LO = Z_CLIP_S_PNT_HI +1
X_CLIP_E_PNT_HI = X_CLIP_E_PNT_LO +1
Y_CLIP_E_PNT_LO = X_CLIP_E_PNT_HI +1
Y_CLIP_E_PNT_HI = Y_CLIP_E_PNT_LO +1
Z_CLIP_E_PNT_LO = Y_CLIP_E_PNT_HI +1
Z_CLIP_E_PNT_HI = Z_CLIP_E_PNT_LO +1
X_CLIP_S_PER_LO = Z_CLIP_E_PNT_HI +1
X_CLIP_S_PER_HI = X_CLIP_S_PER_LO +1
Y_CLIP_S_PER_LO = X_CLIP_S_PER_HI +1
Y_CLIP_S_PER_HI = Y_CLIP_S_PER_LO +1

X_CLIP_E_PER_LO = Y_CLIP_S_PER_HI +1
X_CLIP_E_PER_HI = X_CLIP_E_PER_LO +1
Y_CLIP_E_PER_LO = X_CLIP_E_PER_HI +1
Y_CLIP_E_PER_HI = Y_CLIP_E_PER_LO +1

CC_S = Y_CLIP_E_PER_HI +1
CC_E = CC_S +1

X_ROT = CC_E +1
Y_ROT = X_ROT +1
Z_ROT = Y_ROT +1
YC_TEMP = Z_ROT +1
YS_TEMP = YC_TEMP +2
ZC_TEMP = YS_TEMP +2
ZS_TEMP = ZC_TEMP +2
XC_TEMP = ZS_TEMP +2
XS_TEMP = XC_TEMP +2
T2 = XS_TEMP +2
T8 = T2 +1
T6 = T8 +1
T1 = T6 +1
T4 = T1 +1
T9 = T4 +1
T3 = T9 +1
T5 = T3 +1
T7 = T5 +1
T10 = T7 +1
tmp1 = T10 +1
tmp2 = tmp1 +1
tmp3 = tmp2 +1
XSINTMP = tmp3 +1
XCOSTMP = XSINTMP +1
YSINTMP = XCOSTMP +1
YCOSTMP = YSINTMP +1
ZSINTMP = YCOSTMP +1
ZCOSTMP = ZSINTMP +1

CLIP_OFFSET = 16384
MAX_PNT = 128
       
RXL = 512
RXH = RXL+MAX_PNT
RYL = RXH+MAX_PNT
RYH = RYL+MAX_PNT
RZL = RYH+MAX_PNT
RZH = RZL+MAX_PNT
PXL = RZH+MAX_PNT
PXH = PXL+MAX_PNT
PYL = PXH+MAX_PNT
PYH = PYL+MAX_PNT
PCC = PYH+MAX_PNT

SCNX = 128/2
SCNY = 128/2

CC_TOP = 1
CC_BOTTOM = 2
CC_LEFT = 4
CC_RIGHT = 8
CC_BEHIND = 16
CC_ALL = 255

CLIP_TOP_POS = CLIP_OFFSET
CLIP_BOTTOM_POS = CLIP_TOP_POS +127
CLIP_LEFT_POS = CLIP_TOP_POS
CLIP_RIGHT_POS = CLIP_BOTTOM_POS

SEI        ; disable maskable IRQs

 LDA #$7F
 STA $DC0D  ; disable timer interrupts which can be generated by the two CIA chips
 STA $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

 LDA $DC0D  ; by reading this two registers we negate any pending CIA irqs.
 LDA $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

 LDA #$01   ; this is how to tell the VICII to generate a raster interrupt
 STA $D01A

 LDA #$F0   ; this is how to tell at which rasterline we want the irq to be triggered
 STA $D012

 LDA #$1B   ; as there are more than 256 rasterlines, the topmost bit of $d011 serves as
 STA $D011  ; the 9th bit for the rasterline we want our irq to be triggered. here we simply set up a character screen, leaving the topmost bit 0.

 LDA #$35   ; we turn off the BASIC and KERNAL rom here
 STA $01    ; the cpu now sees RAM everywhere except at $d000-$e000, where still the registers of SID/VICII/etc are visible

 ldA #<BM_IRQ  ; this is how we set up
 STA $FFFE     ; the address of our interrupt code
 LDA #>BM_IRQ
 STA $FFFF
  
 LDA #<NMI_NOP ; lsb
 STA $FFFA ; Create a nop, irq handler for NMI that gets called whenever RESTORE is pressed or similar.
 LDA #>NMI_NOP ; msb
 STA $FFFB ; We're putting our irq handler directly in the vector that usually points to the kernal's NMI handler since we have kernal banked out.

 LDA #$00  ; Force an NMI by setting up a timer. This will cause an NMI, that won't be acked. Any subsequent NMI's from RESTORE will be essentially disabled.
 STA $DD0E       ; Stop timer A
 STA $DD04       ; Set timer A to 0, NMI will occure immediately after start
 STA $DD0E

 LDA #$81
 STA $DD0D       ; Set timer A as source for NMI

 LDA #$01
 STA $DD0E       ; Start timer A -> NMI

 LDA #$02
 STA $DD00 ; bank
    
 LDA #$02 ; $00
 STA $D021

 LDA   #>sqrlo
 STA   P_SQR_LO+1
 LDA   #>sqrhi
 STA   P_SQR_HI+1
 LDA   #>negsqrlo
 STA   P_INVSQR_LO+1
 LDA   #>negsqrhi
 STA   P_INVSQR_HI+1
 
 LDA #$01 ; $01 ; colour 11 
 LDX #<$D800
 LDY #>$D800
 STX SCR+0
 STY SCR+1
 LDX #>1000 
 LDY #<1000
 JSR MEM_CLR

 LDA #$47 ;$65 ; colour 01 (0000????) and colour 10 (????0000) - bank 1
 LDX #<($4000+$1c00)
 LDY #>($4000+$1c00)
 STX SCR+0
 STY SCR+1
 LDX #>1000 
 LDY #<1000
 JSR MEM_CLR

 LDA #$47 ;%65 ; colour 01 (0000????) and colour 10 (????0000) - bank 2
 LDX #<($6000+$1c00)
 LDY #>($6000+$1c00)
 STX SCR+0
 STY SCR+1
 LDX #>1000 
 LDY #<1000
 JSR MEM_CLR
 
 LDX #$58
 LDY #$3D
 LDA #$60
; STA DIVIDEND

 stx X_ROT
 sty Y_ROT
 sta Z_ROT

 LDA  #<10
 STA  Y_OFF_LO
 LDA  #>10
 STA  Y_OFF_HI

 LDA #<-10
 STA  X_OFF_LO
 LDA #>-10
 STA  X_OFF_HI

 LDA  #<1900
 STA  Z_OFF_LO
 LDA  #>1900
 STA  Z_OFF_HI
 
CLI ; enable maskable interrupts again

MLOOP:
;       LDA $D012
;        CMP #$E0
;        BNE MLOOP
        
 JSR  SWAP_BANK
 JSR  SETUP_LINE_PLOT_POINTERS
; jsr DISPLAY_LINES
 JSR  DRAW_OBJ
 JSR  KEYBOARD

JMP MLOOP ; we better don't RTS, the ROMS are now switched off, there's no way back to the system

PX1: !BYTE 30
PY1: !BYTE 20
IX1: !BYTE 1
IY1: !BYTE -1

MOVEPNT:
 STA LIMIT
 STX PNT
 STY INCP
 CLC 
 LDA PNT
 ADC INCP
 STA PNT
; CMP #00
 BEQ FLIPPNT
 CMP LIMIT
 BEQ FLIPPNT
 LDX PNT
 LDY INCP
 RTS
FLIPPNT:
 SEC 
 LDA #0
 SBC INCP
 STA INCP
 LDX PNT
 LDY INCP
 RTS 
 
DISPLAY_LINES:
 LDX PX1
 LDY IX1
 LDA #127
 JSR MOVEPNT
 STX PX1 
 STY IX1

 LDX PY1
 LDY IY1
 LDA #127
 JSR MOVEPNT
 STX PY1 
 STY IY1

 JSR SETUP_COLOUR_AND
 LDA PX1
 STA H_ST
 LDA PY1 
 STA V_ST
 LDA #0
 STA H_EN
 LDA #0
 STA V_EN
 JSR LINE00
 
 LDA PX1
 STA H_ST
 LDA PY1 
 STA V_ST
 LDA #0
 STA H_EN
 LDA #127
 STA V_EN
 JSR LINE00
 
 LDA PX1
 STA H_ST
 LDA PY1 
 STA V_ST
 LDA #127
 STA H_EN
 LDA #0
 STA V_EN
 JSR LINE00
 
 LDA PX1
 STA H_ST
 LDA PY1 
 STA V_ST
 LDA #127
 STA H_EN
 LDA #127
 STA V_EN
 JSR LINE00
 
 JSR SETUP_COLOUR_OR
 LDX PX1
 LDY PY1
 JSR PLOT

 JSR SETUP_COLOUR_OR
RTS



;+----+----------------------+-------------------------------------------------------------------------------------------------------+
;|    |                      |                                Peek from $dc01 (code in paranthesis):                                 |
;|row:| $dc00:               +------------+------------+------------+------------+------------+------------+------------+------------+
;|    |                      |   BIT 7    |   BIT 6    |   BIT 5    |   BIT 4    |   BIT 3    |   BIT 2    |   BIT 1    |   BIT 0    |
;+----+----------------------+------------+------------+------------+------------+------------+------------+------------+------------+
;|1.  | #%11111110 (254/$fe) | DOWN  ($  )|   F5  ($  )|   F3  ($  )|   F1  ($  )|   F7  ($  )| RIGHT ($  )| RETURN($  )|DELETE ($  )|
;|2.  | #%11111101 (253/$fd) |LEFT-SH($  )|   e   ($05)|   s   ($13)|   z   ($1a)|   4   ($34)|   a   ($01)|   w   ($17)|   3   ($33)|
;|3.  | #%11111011 (251/$fb) |   x   ($18)|   t   ($14)|   f   ($06)|   c   ($03)|   6   ($36)|   d   ($04)|   r   ($12)|   5   ($35)|
;|4.  | #%11110111 (247/$f7) |   v   ($16)|   u   ($15)|   h   ($08)|   b   ($02)|   8   ($38)|   g   ($07)|   y   ($19)|   7   ($37)|
;|5.  | #%11101111 (239/$ef) |   n   ($0e)|   o   ($0f)|   k   ($0b)|   m   ($0d)|   0   ($30)|   j   ($0a)|   i   ($09)|   9   ($39)|
;|6.  | #%11011111 (223/$df) |   ,   ($2c)|   @   ($00)|   :   ($3a)|   .   ($2e)|   -   ($2d)|   l   ($0c)|   p   ($10)|   +   ($2b)|
;|7.  | #%10111111 (191/$bf) |   /   ($2f)|   ^   ($1e)|   =   ($3d)|RGHT-SH($  )|  HOME ($  )|   ;   ($3b)|   *   ($2a)|   Â£   ($1c)|
;|8.  | #%01111111 (127/$7f) | STOP  ($  )|   q   ($11)|COMMODR($  )| SPACE ($20)|   2   ($32)|CONTROL($  )|  <-   ($1f)|   1   ($31)|
;+----+----------------------+------------+------------+------------+------------+------------+------------+------------+------------+

!ZONE KEYBOARD
.s  SEC
    LDA   Z_OFF_LO
    SBC   #1
    STA   Z_OFF_LO
    LDA   Z_OFF_HI
    SBC   #0
    STA   Z_OFF_HI
    rts
    
.w  CLC
    LDA   Z_OFF_LO
    ADC   #1
    STA   Z_OFF_LO
    LDA   Z_OFF_HI
    ADC   #0
    STA   Z_OFF_HI
    rts
    
.a  SEC
    LDA   X_OFF_LO
    SBC   #1
    STA   X_OFF_LO
    LDA   X_OFF_HI
    SBC   #0
    STA   X_OFF_HI
    rts
    
.d  LDA   X_OFF_LO
    ADC   #1
    STA   X_OFF_LO
    LDA   X_OFF_HI
    ADC   #0
    STA   X_OFF_HI
    rts
    
.q  SEC
    LDA   Y_OFF_LO
    SBC   #1
    STA   Y_OFF_LO
    LDA   Y_OFF_HI
    SBC   #0
    STA   Y_OFF_HI
    rts
    
.z  LDA   Y_OFF_LO
    ADC   #1
    STA   Y_OFF_LO
    LDA   Y_OFF_HI
    ADC   #0
    STA   Y_OFF_HI
    rts

KEYBOARD:
      lda #$ff         ; write on port A
      sta $dc02
      lda #$00         ; read on port B
      sta $dc03
  
      lda #%11111101   ; s is in row 2 (the diagram on the wiki is transposed.)
      sta $dc00         ; instruct keyboard
      lda $dc01         ; read value from keyboard
      and #%00100000   ; s is in column 5 (mask it out)
      beq .s
      lda $dc01
      and #%00000100  ; a is in row 2 and column 3
      beq .a
      lda $dc01
      and #%00000010  ; w is in row 2 and column 2
      beq .w
      lda $dc01
      and #%00010000  ; z is in row 2 column 4
      beq .z
      
      lda #%11111011  ; d is in row 3
      sta $dc00
      lda $dc01
      and #%00000100  ; d is in colum 3
      beq .d
      
      lda #%01111111   ; q is in row 8
      sta $dc00
      lda $dc01
      and #%01000000  ; q is in column 5
      beq .q

      lda #%11011111
      sta $dc00         ; instruct keyboard
      lda $dc01
      and #%00000010 ; p is in row 6 and column 2
      beq .p
      lda $dc01
      and #%00000100  ; l is in row 6 and column 2
      beq .l
      
      lda #%11101111
      sta $dc00         ; instruct keyboard
      lda $dc01
      and #%01000000 ; p is in row 6 and column 2
      beq .o
      lda $dc01
      and #%00100000  ; l is in row 6 and column 2
      beq .k
       
      lda $dc01
      and #%00000010 ; p is in row 6 and column 2
      beq .i
      lda $dc01
      and #%00000100  ; l is in row 6 and column 2
      beq .j
 ;     lda #%11111101   ; z is in row 2
 ;     sta $dc00
 ;     lda $dc01
 ;     and #%00010000  ; z is in column 4
 ;     beq .z

 rts      
.p  inc X_ROT
rts
.l  dec X_ROT
rts
.o inc Y_ROT
rts
.k dec Y_ROT
rts
.i  inc Z_ROT
rts
.j dec Z_ROT     
      
      rts

SETUP_LINE_PLOT_POINTERS:
 LDX BANK_HI_LO
 LDY BANK_HI_HI
 STX PLOT_BANK_HI+1
 STY PLOT_BANK_HI+2
 STX DRAW_BANK_HI_1+1
 STY DRAW_BANK_HI_1+2
 STX DRAW_BANK_HI_2+1
 STY DRAW_BANK_HI_2+2
 STX DRAW_BANK_HI_3+1
 STY DRAW_BANK_HI_3+2
 STX DRAW_BANK_HI_4+1
 STY DRAW_BANK_HI_4+2
 
 LDX BANK_LO_LO
 LDY BANK_LO_HI
 STX PLOT_BANK_LO+1
 STY PLOT_BANK_LO+2
 STX DRAW_BANK_LO_1+1
 STY DRAW_BANK_LO_1+2
 STX DRAW_BANK_LO_2+1
 STY DRAW_BANK_LO_2+2
 STX DRAW_BANK_LO_3+1
 STY DRAW_BANK_LO_3+2
 STX DRAW_BANK_LO_4+1
 STY DRAW_BANK_LO_4+2
RTS


SETUP_COLOUR_AND:
 LDX #<SCR_AND_TAB
 LDY #>SCR_AND_TAB
 LDA #$3D
JMP SETUP_COLOUR

SETUP_COLOUR_OR:
 LDX #<SCR_OR_TAB
 LDY #>SCR_OR_TAB
 LDA #$1D
SETUP_COLOUR:
 STA PLOT_AND_OR_TAB
 STX PLOT_AND_OR_TAB+1
 STY PLOT_AND_OR_TAB+2
 STA DRAW_AND_OR_TAB_1
 STX DRAW_AND_OR_TAB_1+1
 STY DRAW_AND_OR_TAB_1+2
 STA DRAW_AND_OR_TAB_2
 STX DRAW_AND_OR_TAB_2+1
 STY DRAW_AND_OR_TAB_2+2
 STA DRAW_AND_OR_TAB_3
 STX DRAW_AND_OR_TAB_3+1
 STY DRAW_AND_OR_TAB_3+2
 STA DRAW_AND_OR_TAB_4
 STX DRAW_AND_OR_TAB_4+1
 STY DRAW_AND_OR_TAB_4+2
RTS


SWAP_BANK:
 LDA BANK
 CMP #$70
 BEQ BANK_0
  LDA #$70
  STA BANK
  LDX #<SCR_TAB_BANK_2_HI
  LDY #>SCR_TAB_BANK_2_HI
  STX BANK_HI_LO
  STY BANK_HI_HI
  LDX #<SCR_TAB_BANK_2_LO
  LDY #>SCR_TAB_BANK_2_LO
  STX BANK_LO_LO
  STY BANK_LO_HI
  JSR SCREEN_CLEAR_BANK_01
RTS

BANK_0: 
 LDA #$78
 STA BANK
 LDX #<SCR_TAB_BANK_1_HI
 LDY #>SCR_TAB_BANK_1_HI
 STX BANK_HI_LO
 STY BANK_HI_HI
 LDX #<SCR_TAB_BANK_1_LO
 LDY #>SCR_TAB_BANK_1_LO
 STX BANK_LO_LO
 STY BANK_LO_HI
 JSR SCREEN_CLEAR_BANK_00
RTS

!ZONE LINE00
LINE_H_SAME:      LDA   V_EN
                  CMP   V_ST
                  BNE   LINE_NOT_PLOT
  RTS
;LDX H_ST
;LDY V_ST

PLOT:
PLOT_BANK_LO:     LDA   SCR_TAB_BANK_1_LO,Y
                  STA   SCR_LO 
PLOT_BANK_HI:     LDA   SCR_TAB_BANK_1_HI,Y 
                  STA   SCR_HI 
                  LDY   SCR_TAB3,X
                  LDA   (SCR),Y
PLOT_AND_OR_TAB:  ORA   SCR_OR_TAB,X
                  STA   (SCR),Y 
                  RTS
                  
LINE00:           
                  LDA   #0 
                  STA   LINE_FRAC
                  
                  LDA   H_ST
                  CMP   H_EN
                  BEQ   LINE_H_SAME
                  BCC   LINE_NOSWAP
                    LDY   H_EN
                    STY   H_ST
                    STA   H_EN
                    LDX   V_EN
                    LDY   V_ST
                    STX   V_ST
                    STY   V_EN

LINE_NOSWAP:      LDA   V_EN
                  CMP   V_ST
LINE_NOT_PLOT:    BCC   LINE_BLTR

LINE_TLBR:        SEC 
                  LDA   H_EN
                  SBC   H_ST
                  STA   SCR
                  SEC
                  LDA   V_EN
                  SBC   V_ST
                  CMP   SCR ; Accumulator less than location SCR ?
                  BCC   CALC_INC_FRAC_VER_INC_WHOLE_HOR

CALC_INC_FRAC_HOR_INC_WHOLE_VER:  SEC
                                  LDA   V_EN
                                  STA   LINE_IXIY_END+1 
                                  SBC   V_ST
                                  TAX ; divisor
                                  SEC
                                  LDA   H_EN ; calc x diff
                                  SBC   H_ST  ; dividend
                                  JSR   DIVMUL_1608 ; a=divisor
                                  STA   LINE_IXIY_INC+1
                                  LDX   H_ST
                                  LDY   V_ST

LINE_INC_FRAC_HOR_INC_WHOLE_VER:  STY   LINE_VER
DRAW_BANK_LO_1:                   LDA   SCR_TAB_BANK_1_LO,Y
                                  STA   SCR_LO 
DRAW_BANK_HI_1:                   LDA   SCR_TAB_BANK_1_HI,Y
                                  STA   SCR_HI
                                  LDY   SCR_TAB3,X
                                  LDA   (SCR),Y
DRAW_AND_OR_TAB_1:                AND   SCR_AND_TAB,X
                                  STA   (SCR),Y 
                                  LDA   LINE_FRAC
LINE_IXIY_INC:                    ADC   #0
                                  STA   LINE_FRAC
                                  BCC   LINE_IXIY_CONT
                                    INX
LINE_IXIY_CONT:                   LDY   LINE_VER
                                  INY
LINE_IXIY_END:                    CPY   #0
                                  BNE   LINE_INC_FRAC_HOR_INC_WHOLE_VER
                                  RTS

CALC_INC_FRAC_VER_INC_WHOLE_HOR:  SEC
                                  LDA   H_EN
                                  STA   LINE_IYIX_END+1 
                                  SBC   H_ST
                                  TAX         ; divisor
                                  SEC
                                  LDA   V_EN ; calc x diff
                                  SBC   V_ST ; dividend
                                  JSR   DIVMUL_1608
                                  STA   LINE_IYIX_INC+1
                                  LDX   H_ST
                                  LDY   V_ST
                                  JMP   LINE_INC_FRAC_VER_INC_WHOLE_HOR 
LINE_BLTR:        SEC
                  LDA   H_EN
                  SBC   H_ST
                  STA   SCR
                  SEC
                  LDA   V_ST
                  SBC   V_EN
                  CMP   SCR ; Accumulator less than location SCR ?
                  BCC   CALC_DEC_FRAC_VER_INC_WHOLE_HOR

CALC_INC_FRAC_HOR_DEC_WHOLE_VER:  LDA   V_EN
                                  STA   LINE_DXDY_END+1 
                                  SEC
                                  LDA   V_ST
                                  SBC   V_EN
                                  TAX
                                  SEC
                                  LDA   H_EN
                                  SBC   H_ST
                                  JSR   DIVMUL_1608
                                  STA   LINE_DXDY_INC+1
                                  LDX   H_ST
                                  LDY   V_ST
 
LINE_INC_FRAC_HOR_DEC_WHOLE_VER:  STY   LINE_VER
DRAW_BANK_LO_3:                   LDA   SCR_TAB_BANK_1_LO,Y
                                  STA   SCR_LO 
DRAW_BANK_HI_3:                   LDA   SCR_TAB_BANK_1_HI,Y
                                  STA   SCR_HI  
                                  LDY   SCR_TAB3,X
                                  LDA   (SCR),Y
DRAW_AND_OR_TAB_3:                AND   SCR_AND_TAB,X
                                  STA   (SCR),Y   
                                  LDA   LINE_FRAC
LINE_DXDY_INC:                    ADC   #0
                                  STA   LINE_FRAC
                                  BCC   LINE_DXDY_CONT
                                    INX
LINE_DXDY_CONT:                   LDY   LINE_VER
                                  DEY
LINE_DXDY_END:                    CPY   #0
                                  BNE   LINE_INC_FRAC_HOR_DEC_WHOLE_VER
                                  RTS
                                  
LINE_IYIX_LOOP:                   LDA   LINE_FRAC
LINE_IYIX_INC:                    ADC   #0
                                  STA   LINE_FRAC
                                  BCC   LINE_IYIX_CONT
                                    LDY   LINE_VER
                                    INY
LINE_INC_FRAC_VER_INC_WHOLE_HOR:    STY   LINE_VER
DRAW_BANK_LO_2:                     LDA   SCR_TAB_BANK_1_LO,Y
                                    STA   SCR_LO 
DRAW_BANK_HI_2:                     LDA   SCR_TAB_BANK_1_HI,Y 
                                    STA   SCR_HI 
LINE_IYIX_CONT:                   LDY   SCR_TAB3,X
                                  LDA   (SCR),Y
DRAW_AND_OR_TAB_2:                AND   SCR_AND_TAB,X
                                  STA   (SCR),Y 
                                  INX
LINE_IYIX_END:                    CPX   #0
                                  BNE   LINE_IYIX_LOOP
                                  RTS 


 
CALC_DEC_FRAC_VER_INC_WHOLE_HOR:  SEC
                                  LDA   H_EN
                                  STA   LINE_DYDX_END+1 
                                  SBC   H_ST
                                  TAX ; divisor
                                  LDA   V_ST ; calc x diff
                                  SBC   V_EN ; dividend
                                  JSR   DIVMUL_1608
                                  STA   LINE_DYDX_INC+1
                                  LDX   H_ST
                                  LDY   V_ST
                                  JMP   LINE_DEC_FRAC_VER_INC_WHOLE_HOR
 
LINE_DYDX_LOOP:                   LDA   LINE_FRAC
LINE_DYDX_INC:                    ADC   #0
                                  STA   LINE_FRAC
                                  BCC   LINE_DYDX_CONT
                                    LDY   LINE_VER
                                    DEY
LINE_DEC_FRAC_VER_INC_WHOLE_HOR:    STY   LINE_VER
DRAW_BANK_LO_4:                     LDA   SCR_TAB_BANK_1_LO,Y
                                    STA   SCR_LO 
DRAW_BANK_HI_4:                     LDA   SCR_TAB_BANK_1_HI,Y 
                                    STA   SCR_HI 
LINE_DYDX_CONT:                   LDY SCR_TAB3,X
                                  LDA (SCR),Y
DRAW_AND_OR_TAB_4:                AND SCR_AND_TAB,X
                                  STA (SCR),Y 
                                  INX
LINE_DYDX_END:                    CPX #0
                                  BNE LINE_DYDX_LOOP
                                  RTS
                                 

                 
!ZONE CLIP_CODE_H
!MACRO CLIP_CODE_H {
  BMI   .OFF_LEFT       ; -VE = OFF LEFT
    BNE   .OFF_RIGHT    ; !0 = OFF RIGHT
      TYA               ; LO
      BPL   .EXIT       ; +VE = ON SCREEN
; and #127
; beq .exit ; a holds 0
.OFF_RIGHT              ; -VE = OFF RIGHT
    LDX   #CC_RIGHT     ; OFF RIGHT EDGE
    JMP   .EXIT
.OFF_LEFT 
    LDX   #CC_LEFT      ; OFF LEFT EDGE
.EXIT
 }

!ZONE CLIP_CODE_V
!MACRO CLIP_CODE_V {
  BMI   .OFF_TOP        ; -VE = OFF LEFT
    BNE   .OFF_BOTTOM   ; !0 = OFF RIGHT
      TYA               ; LO
      BPL   .EXIT       ; +VE = ON SCREEN
.OFF_BOTTOM             ; -VE = OFF RIGHT
    LDX   #CC_BOTTOM    ; OFF RIGHT EDGE
    JMP   .EXIT
.OFF_TOP 
    LDX   #CC_TOP       ; OFF LEFT EDGE
.EXIT
 }

!ZONE CLIP_CODE ; X_LO, X_HI, Y_LO, Y_HI, TEMP_CC
!MACRO CLIP_CODE {
.CLIP_CODE ; A = CC
 LDX   #0
 LDY   X_PNT_LO
 LDA   X_PNT_HI
 +CLIP_CODE_H
 STX   CC

 LDX   #0
 LDY   Y_PNT_LO
 LDA   Y_PNT_HI
 +CLIP_CODE_V
 TXA
 ORA   CC
} 

!ZONE DRAW_OBJ
DRAW_OBJ:
  LDX #7 ;5 ;#7 ;0
  LDY #11 ;3; 11
; get object number,y
; get point adr hi,y
; get point adr lo,y
; get point count,y
; get line adr hi,y
; get line adr lo,y
; get line count,y
 
  STX   PNT_CNT
  STY   LINE_CNT

  LDX   #CC_ALL
  STX   CC_AND ; FF
  INX
  STX   CC_OR ; 0
  
.POINT_LOOP
      LDY   PNT_CNT
.XPL: LDA   SHAPE_XL,Y
      STA   X_PNT_LO
.XPH: LDA   SHAPE_XH,Y
      STA   X_PNT_HI
.YPL: LDA   SHAPE_YL,Y
      STA   Y_PNT_LO
.YPH: LDA   SHAPE_YH,Y
      STA   Y_PNT_HI
.ZPL: LDA   SHAPE_ZL,Y
      STA   Z_PNT_LO
.ZPH: LDA   SHAPE_ZH,Y
      STA   Z_PNT_HI

      JSR   ROTATE_POINT
      LDY   PNT_CNT

      CLC
      LDA   X_PNT_LO  ; X_POS + X_OFFSET
      ADC   X_OFF_LO
      STA   X_PNT_LO
      STA   RXL,Y
      LDA   X_PNT_HI
      ADC   X_OFF_HI
      STA   X_PNT_HI
      STA   RXH,Y

      CLC
      LDA   Y_PNT_LO  ; Y_POS + Y_OFFSET
      ADC   Y_OFF_LO
      STA   Y_PNT_LO
      STA   RYL,Y
      LDA   Y_PNT_HI
      ADC   Y_OFF_HI
      STA   Y_PNT_HI
      STA   RYH,Y

      LDX   #CC_BEHIND
      
      CLC
      LDA   Z_PNT_LO  ; Z_POS + Z_OFFSET
      ADC   Z_OFF_LO
      STA   Z_PNT_LO
      STA   RZL,Y
      LDA   Z_PNT_HI
      ADC   Z_OFF_HI
      STA   RZH,Y
      
      BMI   .BEHIND  ; if negative then behind so ignore perspective - how to set CC = behind?
      STA   Z_PNT_HI
      
      JSR   PERSPECTIVE_POINT
      
      LDY   PNT_CNT
      LDA   X_PNT_LO
      STA   PXL,Y
      LDA   X_PNT_HI
      STA   PXH,Y
      LDA   Y_PNT_LO
      STA   PYL,Y
      LDA   Y_PNT_HI
      STA   PYH,Y
      
       LDX   #0       ; CLIP CODE
       LDY   X_PNT_LO
       LDA   X_PNT_HI
       +CLIP_CODE_H
       STX   CC
       LDX   #0
       LDY   Y_PNT_LO
       LDA   Y_PNT_HI
       +CLIP_CODE_V
       TXA
       ORA   CC       ; CLIP CODE
       TAX

.BEHIND:
      STX   CC
      TXA
      LDY   PNT_CNT
      STA   PCC,Y
         
;      LDA   CC
      AND   CC_AND
      STA   CC_AND
      LDA   CC
      ORA   CC_OR
      STA   CC_OR
      
      DEC PNT_CNT
      BMI .POINT_EXIT
      JMP .POINT_LOOP
 
.POINT_EXIT
      LDA   CC_AND
      BNE   .OBJECT_EXIT  ; all points are off same side
      
      LDA   CC_OR
      BNE   .CLIP_LINE_LOOP ; any point is off
      
.LINE_LOOP
      LDY   LINE_CNT
.SPS: LDX   SHAPE_PS,Y  ; point start      
      LDA   PXL,X
      STA   H_ST
      LDA   PYL,X
      STA   V_ST
.SPE: LDX   SHAPE_PE,Y  ; point end
      LDA   PXL,X
      STA   H_EN
      LDA   PYL,X
      STA   V_EN
      JSR   LINE00

      DEC LINE_CNT
      BPL .LINE_LOOP
.OBJECT_EXIT:
RTS

.CLIP_LINE_LOOP
      LDY   LINE_CNT
.SPSC:LDX   SHAPE_PS,Y   ; point start
      STX   .CLIP_SSI+1  ; shape start index
      LDA   PCC,X        ; start point clip code
      STA   CC
      
      LDA   PXL,X
      STA   H_ST
      LDA   PYL,X
      STA   V_ST
.SPEC:LDX   SHAPE_PE,Y  ; point end

      LDA   PCC,X        ; end point clip code
      AND   CC          ;
      BNE   .LINE_OFF   ; both off same side

      LDA   PCC,X        ; end point clip code
      ORA   CC          ;
      BNE   .CLIP_LINE   ; any are off same side - temp

      LDA   PXL,X
      STA   H_EN
      LDA   PYL,X
      STA   V_EN
.LINE_DRAW
      JSR   LINE00
.LINE_OFF
      DEC LINE_CNT
      BPL .CLIP_LINE_LOOP
RTS

.CLIP_LINE:
.CLIP_SSI:  LDY #0      ; Y holds shape start index / X already holds point end index

;            CLC
;            LDA   RXL,Y ; start object +16384
;            ADC   #<CLIP_OFFSET
;            STA   X_CLIP_S_PNT_LO
;            LDA   RXH,Y ; start object
;            ADC   #>CLIP_OFFSET
;            STA   X_CLIP_S_PNT_HI

;            CLC
;            LDA   RYL,Y 
;            ADC   #<CLIP_OFFSET
;            STA   Y_CLIP_S_PNT_LO
;            LDA   RYH,Y 
;            ADC   #>CLIP_OFFSET
;            STA   Y_CLIP_S_PNT_HI
            
;            CLC
;            LDA   RZL,Y 
;           ADC   #<CLIP_OFFSET
;           STA   Z_CLIP_S_PNT_LO
;           LDA   RZH,Y 
;           ADC   #>CLIP_OFFSET
;           STA   Z_CLIP_S_PNT_HI

;            CLC
;            LDA   RXL,X ; end object +16384
;            ADC   #<CLIP_OFFSET
;            STA   X_CLIP_E_PNT_LO
;            LDA   RXH,X 
;            ADC   #>CLIP_OFFSET
;            STA   X_CLIP_E_PNT_HI

;            CLC
;            LDA   RYL,X
;            ADC   #<CLIP_OFFSET
;            STA   Y_CLIP_E_PNT_LO
;            LDA   RYH,X 
;            ADC   #>CLIP_OFFSET
;            STA   Y_CLIP_E_PNT_HI
            
;            CLC
;            LDA   RZL,X 
;            ADC   #<CLIP_OFFSET
;            STA   Z_CLIP_E_PNT_LO
;            LDA   RZH,X 
;            ADC   #>CLIP_OFFSET
;            STA   Z_CLIP_E_PNT_HI
          
            LDA   PXL,Y ; start object +16384
            STA   X_CLIP_S_PER_LO
            CLC
            LDA   PXH,Y 
            ADC   #>CLIP_OFFSET
            STA   X_CLIP_S_PER_HI

            LDA   PYL,Y
            STA   Y_CLIP_S_PER_LO
            CLC
            LDA   PYH,Y 
            ADC   #>CLIP_OFFSET
            STA   Y_CLIP_S_PER_HI

            LDA   PXL,X ; end object +16384
            STA   X_CLIP_E_PER_LO
            CLC
            LDA   PXH,X 
            ADC   #>CLIP_OFFSET
            STA   X_CLIP_E_PER_HI

            LDA   PYL,X
            STA   Y_CLIP_E_PER_LO
            CLC
            LDA   PYH,X 
            ADC   #>CLIP_OFFSET
            STA   Y_CLIP_E_PER_HI
            
            LDA   PCC,Y ; start clip codes
            STA   CC_S
            LDA   PCC,X ; end clip codes
            STA   CC_E
            ORA   CC_S
            STA   CC    ; combined clip codes
            
.CLIP_TEST_BEHIND:
            LDA   CC   
            AND   #CC_BEHIND
            BEQ   .CLIP_TEST_LEFT
              JSR   CLIP_BEHIND
              JMP   .LINE_OFF ; both off same side
.CLIP_TEST_LEFT:
            LDA   CC   
            AND   #CC_LEFT
            BEQ   .CLIP_TEST_RIGHT
              JSR CLIP_LEFT
              ; check cc for offscreen
              LDA   CC_E
              and   CC_S
              BNE   .LINE_OFF ; both off same side
              LDA   CC_E
              ora   CC_S
              STA   CC
.CLIP_TEST_RIGHT:
            LDA   CC   
            AND   #CC_RIGHT
            BEQ   .CLIP_TEST_TOP
              JSR CLIP_RIGHT
              LDA   CC_E
              And   CC_S
              BNE   .LINE_OFF ; both off same side
              LDA   CC_E
              ora   CC_S
              STA   CC
.CLIP_TEST_TOP:
            LDA   CC   
            AND   #CC_TOP
            BEQ   .CLIP_TEST_BOTTOM
              JSR CLIP_TOP
              LDA   CC_E
              And   CC_S
              BNE   .LINE_CLIP_OFF ; both off same side
              LDA   CC_E
              ora   CC_S
              STA   CC
.CLIP_TEST_BOTTOM:
            LDA   CC   
            AND   #CC_BOTTOM
            BEQ   .CLIP_TEST_END
              JSR CLIP_BOTTOM
              LDA   CC_E
              And   CC_S
              BNE   .LINE_CLIP_OFF ; both off same side
              LDA   CC_E
              ora   CC_S
              STA   CC
.CLIP_TEST_END:
  LDA   X_CLIP_S_PER_LO ; set line start using start point 
  STA   H_ST
  LDA   Y_CLIP_S_PER_LO
  STA   V_ST
  LDA   X_CLIP_E_PER_LO ; set line start using start point 
  STA   H_EN
  LDA   Y_CLIP_E_PER_LO
  STA   V_EN
  JSR   LINE00

.LINE_CLIP_OFF:   JMP .LINE_OFF ; temp

!ZONE CLIP_BEHIND
CLIP_BEHIND:
  RTS

!ZONE CLIP_LEFT
CLIP_LEFT:
  LDA   CC_S   
  AND   #CC_LEFT
  BEQ   .START_ON_END_OFF

.START_OFF_END_ON
  LDA   X_CLIP_S_PER_LO
  STA   X_CLIP_STT
  LDA   X_CLIP_S_PER_HI
  STA   X_CLIP_STT+1

  LDA   Y_CLIP_S_PER_LO
  STA   Y_CLIP_STT
  LDA   Y_CLIP_S_PER_HI
  STA   Y_CLIP_STT+1
  
  LDA   X_CLIP_E_PER_LO
  STA   X_CLIP_END
  LDA   X_CLIP_E_PER_HI
  STA   X_CLIP_END+1

  LDA   Y_CLIP_E_PER_LO
  STA   Y_CLIP_END
  LDA   Y_CLIP_E_PER_HI
  STA   Y_CLIP_END+1
  
  JSR   MIDPOINT_TOP_LEFT  ; do clip
  
  LDA   #<CLIP_OFFSET
  sta   X_CLIP_S_PER_LO
  LDA   #>CLIP_OFFSET
  sta   X_CLIP_S_PER_HI

  LDA   Y_CLIP_MID
  sta   Y_CLIP_S_PER_LO
  LDA   Y_CLIP_MID+1
  sta   Y_CLIP_S_PER_HI

       LDX   #0       ; CLIP CODE
       LDY   X_CLIP_S_PER_LO
       SEC
       LDA   X_CLIP_S_PER_HI 
       SBC   #>CLIP_OFFSET
       +CLIP_CODE_H
       STX   CC

       LDX   #0
       LDY   Y_CLIP_S_PER_LO
       SEC
       LDA   Y_CLIP_S_PER_HI 
       SBC   #>CLIP_OFFSET
       STA   Y_PNT_HI
       +CLIP_CODE_V
       TXA
       ORA   CC       ; CLIP CODE

  STA CC_S
  RTS
  
.START_ON_END_OFF
  LDA   X_CLIP_E_PER_LO
  STA   X_CLIP_STT
  LDA   X_CLIP_E_PER_HI
  STA   X_CLIP_STT+1

  LDA   Y_CLIP_E_PER_LO
  STA   Y_CLIP_STT
  LDA   Y_CLIP_E_PER_HI
  STA   Y_CLIP_STT+1
  
  LDA   X_CLIP_S_PER_LO
  STA   X_CLIP_END
  LDA   X_CLIP_S_PER_HI
  STA   X_CLIP_END+1

  LDA   Y_CLIP_S_PER_LO
  STA   Y_CLIP_END
  LDA   Y_CLIP_S_PER_HI
  STA   Y_CLIP_END+1
  
  JSR   MIDPOINT_TOP_LEFT  ; do clip

  LDA   #<CLIP_OFFSET
  sta   X_CLIP_E_PER_LO
  LDA   #>CLIP_OFFSET
  sta   X_CLIP_E_PER_HI

  LDA   Y_CLIP_MID
  sta   Y_CLIP_E_PER_LO
  LDA   Y_CLIP_MID+1
  sta   Y_CLIP_E_PER_HI
    
       LDX   #0       ; CLIP CODE
       LDY   X_CLIP_E_PER_LO
       SEC
       LDA   X_CLIP_E_PER_HI 
       SBC   #>CLIP_OFFSET
       +CLIP_CODE_H
       STX   CC

       LDX   #0
       LDY   Y_CLIP_E_PER_LO
       SEC
       LDA   Y_CLIP_E_PER_HI 
       SBC   #>CLIP_OFFSET
       STA   Y_PNT_HI
       +CLIP_CODE_V
       TXA
       ORA   CC       ; CLIP CODE

  STA   CC_E
  RTS

!ZONE CLIP_RIGHT
CLIP_RIGHT:
  LDA   CC_S   
  AND   #CC_RIGHT
  BEQ   .START_ON_END_OFF

.START_OFF_END_ON
  LDA   X_CLIP_E_PER_LO
  STA   X_CLIP_STT
  LDA   X_CLIP_E_PER_HI
  STA   X_CLIP_STT+1

  LDA   Y_CLIP_E_PER_LO
  STA   Y_CLIP_STT
  LDA   Y_CLIP_E_PER_HI
  STA   Y_CLIP_STT+1
  
  LDA   X_CLIP_S_PER_LO
  STA   X_CLIP_END
  LDA   X_CLIP_S_PER_HI
  STA   X_CLIP_END+1

  LDA   Y_CLIP_S_PER_LO
  STA   Y_CLIP_END
  LDA   Y_CLIP_S_PER_HI
  STA   Y_CLIP_END+1
  
  JSR   MIDPOINT_BOTTOM_RIGHT  ; do clip
  
  LDA   #<(CLIP_OFFSET +127)
  sta   X_CLIP_S_PER_LO
  LDA   #>(CLIP_OFFSET +127)
  sta   X_CLIP_S_PER_HI

  LDA   Y_CLIP_MID
  sta   Y_CLIP_S_PER_LO
  LDA   Y_CLIP_MID+1
  sta   Y_CLIP_S_PER_HI

       LDX   #0       ; CLIP CODE
       LDY   X_CLIP_S_PER_LO
       SEC
       LDA   X_CLIP_S_PER_HI 
       SBC   #>CLIP_OFFSET
       +CLIP_CODE_H
       STX   CC

       LDX   #0
       LDY   Y_CLIP_S_PER_LO
       SEC
       LDA   Y_CLIP_S_PER_HI 
       SBC   #>CLIP_OFFSET
       STA   Y_PNT_HI
       +CLIP_CODE_V
       TXA
       ORA   CC       ; CLIP CODE
  
  STA CC_S
  RTS
  
.START_ON_END_OFF
  LDA   X_CLIP_S_PER_LO
  STA   X_CLIP_STT
  LDA   X_CLIP_S_PER_HI
  STA   X_CLIP_STT+1

  LDA   Y_CLIP_S_PER_LO
  STA   Y_CLIP_STT
  LDA   Y_CLIP_S_PER_HI
  STA   Y_CLIP_STT+1
    
  LDA   X_CLIP_E_PER_LO
  STA   X_CLIP_END
  LDA   X_CLIP_E_PER_HI
  STA   X_CLIP_END+1

  LDA   Y_CLIP_E_PER_LO
  STA   Y_CLIP_END
  LDA   Y_CLIP_E_PER_HI
  STA   Y_CLIP_END+1
  
  JSR   MIDPOINT_BOTTOM_RIGHT  ; do clip
  
  LDA   #<(CLIP_OFFSET +127)
  sta   X_CLIP_E_PER_LO
  LDA   #>(CLIP_OFFSET +127)
  sta   X_CLIP_E_PER_HI

  LDA   Y_CLIP_MID
  sta   Y_CLIP_E_PER_LO
  LDA   Y_CLIP_MID+1
  sta   Y_CLIP_E_PER_HI

       LDX   #0       ; CLIP CODE
       LDY   X_CLIP_E_PER_LO
       SEC
       LDA   X_CLIP_E_PER_HI 
       SBC   #>CLIP_OFFSET
       +CLIP_CODE_H
       STX   CC

       LDX   #0
       LDY   Y_CLIP_E_PER_LO
       SEC
       LDA   Y_CLIP_E_PER_HI 
       SBC   #>CLIP_OFFSET
       STA   Y_PNT_HI
       +CLIP_CODE_V
       TXA
       ORA   CC       ; CLIP CODE

  STA CC_E
  RTS
      
!ZONE CLIP_TOP
CLIP_TOP:
  LDA   CC_S   
  AND   #CC_TOP
  BEQ   .START_ON_END_OFF
.START_OFF_END_ON
  LDA   X_CLIP_S_PER_LO
  STA   Y_CLIP_STT
  LDA   X_CLIP_S_PER_HI
  STA   Y_CLIP_STT+1

  LDA   Y_CLIP_S_PER_LO
  STA   X_CLIP_STT
  LDA   Y_CLIP_S_PER_HI
  STA   X_CLIP_STT+1
  
  LDA   X_CLIP_E_PER_LO
  STA   Y_CLIP_END
  LDA   X_CLIP_E_PER_HI
  STA   Y_CLIP_END+1

  LDA   Y_CLIP_E_PER_LO
  STA   X_CLIP_END
  LDA   Y_CLIP_E_PER_HI
  STA   X_CLIP_END+1
  
  JSR   MIDPOINT_TOP_LEFT  ; do clip
  
  LDA   #<CLIP_OFFSET
  sta   Y_CLIP_S_PER_LO
  LDA   #>CLIP_OFFSET
  sta   Y_CLIP_S_PER_HI

  LDA   Y_CLIP_MID
  sta   X_CLIP_S_PER_LO
  LDA   Y_CLIP_MID+1
  sta   X_CLIP_S_PER_HI
  
       LDX   #0       ; CLIP CODE
       LDY   X_CLIP_S_PER_LO
       SEC
       LDA   X_CLIP_S_PER_HI 
       SBC   #>CLIP_OFFSET
       +CLIP_CODE_H
       STX   CC

       LDX   #0
       LDY   Y_CLIP_S_PER_LO
       SEC
       LDA   Y_CLIP_S_PER_HI 
       SBC   #>CLIP_OFFSET
       STA   Y_PNT_HI
       +CLIP_CODE_V
       TXA
       ORA   CC       ; CLIP CODE

  STA CC_S
  RTS
  
.START_ON_END_OFF
  LDA   X_CLIP_E_PER_LO
  STA   Y_CLIP_STT
  LDA   X_CLIP_E_PER_HI
  STA   Y_CLIP_STT+1

  LDA   Y_CLIP_E_PER_LO
  STA   X_CLIP_STT
  LDA   Y_CLIP_E_PER_HI
  STA   X_CLIP_STT+1
  
  LDA   X_CLIP_S_PER_LO
  STA   Y_CLIP_END
  LDA   X_CLIP_S_PER_HI
  STA   Y_CLIP_END+1

  LDA   Y_CLIP_S_PER_LO
  STA   X_CLIP_END
  LDA   Y_CLIP_S_PER_HI
  STA   X_CLIP_END+1
  
  JSR   MIDPOINT_TOP_LEFT  ; do clip
  
  LDA   #<CLIP_OFFSET
  sta   Y_CLIP_E_PER_LO
  LDA   #>CLIP_OFFSET
  sta   Y_CLIP_E_PER_HI

  LDA   Y_CLIP_MID
  sta   X_CLIP_E_PER_LO
  LDA   Y_CLIP_MID+1
  sta   X_CLIP_E_PER_HI

       LDX   #0       ; CLIP CODE
       LDY   X_CLIP_E_PER_LO
       SEC
       LDA   X_CLIP_E_PER_HI 
       SBC   #>CLIP_OFFSET
       +CLIP_CODE_H
       STX   CC

       LDX   #0
       LDY   Y_CLIP_E_PER_LO
       SEC
       LDA   Y_CLIP_E_PER_HI 
       SBC   #>CLIP_OFFSET
       STA   Y_PNT_HI
       +CLIP_CODE_V
       TXA
       ORA   CC       ; CLIP CODE

  STA CC_E
  RTS


!ZONE CLIP_BOTTOM
CLIP_BOTTOM:
  LDA   CC_S   
  AND   #CC_BOTTOM
  BEQ   .START_ON_END_OFF

.START_OFF_END_ON
  LDA   X_CLIP_E_PER_LO
  STA   Y_CLIP_STT
  LDA   X_CLIP_E_PER_HI
  STA   Y_CLIP_STT+1

  LDA   Y_CLIP_E_PER_LO
  STA   X_CLIP_STT
  LDA   Y_CLIP_E_PER_HI
  STA   X_CLIP_STT+1
  
  LDA   X_CLIP_S_PER_LO
  STA   Y_CLIP_END
  LDA   X_CLIP_S_PER_HI
  STA   Y_CLIP_END+1

  LDA   Y_CLIP_S_PER_LO
  STA   X_CLIP_END
  LDA   Y_CLIP_S_PER_HI
  STA   X_CLIP_END+1
  
  JSR   MIDPOINT_BOTTOM_RIGHT  ; do clip

  LDA   #<(CLIP_OFFSET +127)
  sta   Y_CLIP_S_PER_LO
  LDA   #>(CLIP_OFFSET +127)
  sta   Y_CLIP_S_PER_HI

  LDA   Y_CLIP_MID
  sta   X_CLIP_S_PER_LO
  LDA   Y_CLIP_MID+1
  sta   X_CLIP_S_PER_HI

       LDX   #0       ; CLIP CODE
       LDY   X_CLIP_S_PER_LO
       SEC
       LDA   X_CLIP_S_PER_HI 
       SBC   #>CLIP_OFFSET
       +CLIP_CODE_H
       STX   CC

       LDX   #0
       LDY   Y_CLIP_S_PER_LO
       SEC
       LDA   Y_CLIP_S_PER_HI 
       SBC   #>CLIP_OFFSET
       STA   Y_PNT_HI
       +CLIP_CODE_V
       TXA
       ORA   CC       ; CLIP CODE

  STA CC_S
  RTS
  
.START_ON_END_OFF
  LDA   X_CLIP_S_PER_LO
  STA   Y_CLIP_STT
  LDA   X_CLIP_S_PER_HI
  STA   Y_CLIP_STT+1

  LDA   Y_CLIP_S_PER_LO
  STA   X_CLIP_STT
  LDA   Y_CLIP_S_PER_HI
  STA   X_CLIP_STT+1
    
  LDA   X_CLIP_E_PER_LO
  STA   Y_CLIP_END
  LDA   X_CLIP_E_PER_HI
  STA   Y_CLIP_END+1

  LDA   Y_CLIP_E_PER_LO
  STA   X_CLIP_END
  LDA   Y_CLIP_E_PER_HI
  STA   X_CLIP_END+1
  
  JSR   MIDPOINT_BOTTOM_RIGHT  ; do clip
  
  LDA   #<(CLIP_OFFSET +127)
  sta   Y_CLIP_E_PER_LO
  LDA   #>(CLIP_OFFSET +127)
  sta   Y_CLIP_E_PER_HI

  LDA   Y_CLIP_MID
  sta   X_CLIP_E_PER_LO
  LDA   Y_CLIP_MID+1
  sta   X_CLIP_E_PER_HI

       LDX   #0       ; CLIP CODE
       LDY   X_CLIP_E_PER_LO
       SEC
       LDA   X_CLIP_E_PER_HI 
       SBC   #>CLIP_OFFSET
       +CLIP_CODE_H
       STX   CC

       LDX   #0
       LDY   Y_CLIP_E_PER_LO
       SEC
       LDA   Y_CLIP_E_PER_HI 
       SBC   #>CLIP_OFFSET
       STA   Y_PNT_HI
       +CLIP_CODE_V
       TXA
       ORA   CC       ; CLIP CODE

  STA CC_E 
  RTS

!ZONE NEG16
!MACRO NEG16  NUM {
  SEC       ;Ensure carry is set                      #2
  LDA #0    ;Load constant zero                       #2
  SBC NUM   ;... subtract the least significant byte  #3
  STA NUM   ;... and store the result                 #3
  LDA #0    ;Load constant zero again                 #2
  SBC NUM+1 ;... subtract the most significant byte   #3
  STA NUM+1 ;... and store the result                 #3
 }
       
MEM_CLR:
 STY BANK
 CPX #$00
 BEQ MC_LOOP_2

 LDY #$00
MC_LOOP_X:
MC_LOOP_Y:
   STA (SCR),Y
   DEY 
   BNE MC_LOOP_Y

  INC SCR+1
  DEX
  BNE MC_LOOP_X

MC_LOOP_2:
  LDY BANK
  CPY #$00
  BEQ MC_LOOP_END

MC_LOOP_3:
 STA (SCR),y
 DEY 
 BNE MC_LOOP_3
 
MC_LOOP_END:
RTS

 !ZONE MID_16
!MACRO MID_16 NUM1, NUM2, RC {
  CLC           ; clear carry
  LDA NUM1
  ADC NUM2
  STA RC     ; store sum of LSBs
  LDA NUM1+1
  ADC NUM2+1   ; add the MSBs using carry from the previous calculation
  STA RC+1
  LSR RC+1     ; half MSB
  ROR RC     ; half LSB add carry
}

!ZONE CMP_16
!MACRO CMP_16 NUM1, NUM2 {
; Does exactly the same as CMP of two values (effectively its a A - M) and sets the flags as follows:
;  If A = M : Carry =  SET   Zero =  SET   Negative = CLEAR
;  If A > M : Carry =  SET   Zero = CLEAR  Negative = CLEAR
;  If A < M : Carry = CLEAR  Zero = CLEAR  Negative =  SET

  LDA NUM1+1
  CMP NUM2+1
  BNE .DIFF
    LDA NUM1
    CMP NUM2
.DIFF
; Status register sorted, from here you can branch as you like as you would after a CMP opc.
}

  
!ZONE MIDPOINT_TOP_LEFT
.MIDPOINT_MORE:
  LSR   X_CLIP_MID+1     ; half MSB
  ROR   X_CLIP_MID     ; half LSB add carry

  LDA   X_CLIP_MID   
  STA   X_CLIP_END
  LDA   X_CLIP_MID+1
  STA   X_CLIP_END+1

  LSR   Y_CLIP_MID+1     ; half MSB
  ROR   Y_CLIP_MID     ; half LSB add carry

  LDA   Y_CLIP_MID   
  STA   Y_CLIP_END
  LDA   Y_CLIP_MID+1
  STA   Y_CLIP_END+1

MIDPOINT_TOP_LEFT:
  CLC           ; clear carry
  LDA   Y_CLIP_STT
  ADC Y_CLIP_END
  STA Y_CLIP_MID     ; store sum of LSBs
  LDA Y_CLIP_STT+1
  ADC Y_CLIP_END+1   ; add the MSBs using carry from the previous calculation
  STA Y_CLIP_MID+1

  CLC           ; clear carry
  LDA X_CLIP_STT
  ADC X_CLIP_END
  STA X_CLIP_MID     ; store sum of LSBs
  LDA X_CLIP_STT+1
  ADC X_CLIP_END+1   ; add the MSBs using carry from the previous calculation
  STA X_CLIP_MID+1
  
  LDA   X_CLIP_MID+1
  CMP   #>(CLIP_OFFSET *2)
  BNE   .MIDPOINT_DIFF
    LDA   X_CLIP_MID
    CMP   #<(CLIP_OFFSET *2)
    BEQ   .MIDPOINT_FOUND

.MIDPOINT_DIFF
  BCS   .MIDPOINT_MORE

.MIDPOINT_LESS:
  LSR   X_CLIP_MID+1     ; half MSB
  ROR   X_CLIP_MID     ; half LSB add carry
  LDA   X_CLIP_MID
  CLC 
  ADC   #1
  STA   X_CLIP_STT
  LDA   X_CLIP_MID+1
  ADC   #0
  STA   X_CLIP_STT+1

  LSR   Y_CLIP_MID+1     ; half MSB
  ROR   Y_CLIP_MID     ; half LSB add carry
  LDA   Y_CLIP_MID
  STA   Y_CLIP_STT
  LDA   Y_CLIP_MID+1
  STA   Y_CLIP_STT+1
  JMP   MIDPOINT_TOP_LEFT

.MIDPOINT_FOUND  
  LSR   X_CLIP_MID+1   ; half MSB
  ROR   X_CLIP_MID     ; half LSB add carry
  LSR   Y_CLIP_MID+1   ; half MSB
  ROR   Y_CLIP_MID     ; half LSB add carry
  RTS


!ZONE MIDPOINT_BOTTOM_RIGHT
.MIDPOINT_MORE:
  LSR   X_CLIP_MID+1     ; half MSB
  ROR   X_CLIP_MID     ; half LSB add carry

  LDA   X_CLIP_MID   
  STA   X_CLIP_END
  LDA   X_CLIP_MID+1
  STA   X_CLIP_END+1

  LSR   Y_CLIP_MID+1     ; half MSB
  ROR   Y_CLIP_MID     ; half LSB add carry

  LDA   Y_CLIP_MID   
  STA   Y_CLIP_END
  LDA   Y_CLIP_MID+1
  STA   Y_CLIP_END+1

MIDPOINT_BOTTOM_RIGHT:
  CLC           ; clear carry
  LDA   Y_CLIP_STT
  ADC Y_CLIP_END
  STA Y_CLIP_MID     ; store sum of LSBs
  LDA Y_CLIP_STT+1
  ADC Y_CLIP_END+1   ; add the MSBs using carry from the previous calculation
  STA Y_CLIP_MID+1

  CLC           ; clear carry
  LDA X_CLIP_STT
  ADC X_CLIP_END
  STA X_CLIP_MID     ; store sum of LSBs
  LDA X_CLIP_STT+1
  ADC X_CLIP_END+1   ; add the MSBs using carry from the previous calculation
  STA X_CLIP_MID+1

  LDA   X_CLIP_MID+1
  CMP   #>((CLIP_OFFSET +127) *2)
  BNE   .MIDPOINT_DIFF
    LDA   X_CLIP_MID
    CMP   #<((CLIP_OFFSET +127) *2)
    BEQ   .MIDPOINT_FOUND

.MIDPOINT_DIFF
  BCS   .MIDPOINT_MORE

.MIDPOINT_LESS:
  LSR   X_CLIP_MID+1     ; half MSB
  ROR   X_CLIP_MID     ; half LSB add carry
  LDA   X_CLIP_MID
  CLC 
  ADC   #1
  STA   X_CLIP_STT
  LDA   X_CLIP_MID+1
  ADC   #0
  STA   X_CLIP_STT+1

  LSR   Y_CLIP_MID+1     ; half MSB
  ROR   Y_CLIP_MID     ; half LSB add carry
  LDA   Y_CLIP_MID
  STA   Y_CLIP_STT
  LDA   Y_CLIP_MID+1
  STA   Y_CLIP_STT+1
  JMP   MIDPOINT_BOTTOM_RIGHT

.MIDPOINT_FOUND  
  LSR   X_CLIP_MID+1   ; half MSB
  ROR   X_CLIP_MID     ; half LSB add carry
  LSR   Y_CLIP_MID+1   ; half MSB
  ROR   Y_CLIP_MID     ; half LSB add carry
  RTS

!ZONE NEG32
!MACRO NEG32  NUM {
  SEC       ;Ensure carry is set
  LDA #0    ;Load constant zero
  SBC NUM   ;... subtract the least significant byte
  STA NUM   ;... and store the result
  LDA #0    ;Load constant zero again
  SBC NUM+1 ;... subtract the most significant byte
  STA NUM+1 ;... and store the result   
  LDA #0    ;Load constant zero again
  SBC NUM+2 ;... subtract the most significant byte
  STA NUM+2 ;... and store the result   
  LDA #0    ;Load constant zero again
  SBC NUM+3 ;... subtract the most significant byte
  STA NUM+3 ;... and store the result   
 }

!ZONE DIV_MUL_U16U08
!MACRO DIV_MUL_U16U08 {
  sta   P_SQR_LO  ; DIV_MUL_U16U08 ; set multiplier as x0
  sta   P_SQR_HI
  eor   #$ff
  sta   P_INVSQR_LO
  sta   P_INVSQR_HI ;17

  sec
  lda   (P_SQR_LO),Y
  sbc   (P_INVSQR_LO),Y ; note these two lines taken as 11 total ;  sta   Z0              ; x0*y0l
  lda   (P_SQR_HI),Y
  sbc   (P_INVSQR_HI),Y
  sta   .c1a+1           ; x0*y0h;31 ;c1a means column 1, row a (partial product to be added later)

  ldy   Y1  ;sec not needed ;notice that the high byte of sub above is always +ve
  lda   (P_SQR_LO),y
  sbc   (P_INVSQR_LO),y

      clc               ; add the first two numbers of column 1
.c1a: adc   #0
}

!ZONE DIV_MUL_U16U16
!MACRO DIV_MUL_U16U16 {
  lda   X0              ; set multiplier as x0
  sta   P_SQR_LO
  sta   P_SQR_HI
  eor   #$ff
  sta   P_INVSQR_LO
  sta   P_INVSQR_HI ;17

  ldy   Y0
  sec
  lda   (P_SQR_HI),Y
  sbc   (P_INVSQR_HI),Y
  sta   .c1a+1           ; x0*y0h;31 ;c1a means column 1, row a (partial product to be added later)

  ldy   Y1  ;sec  ;notice that the high byte of sub above is always +ve
  lda   (P_SQR_LO),y
  sbc   (P_INVSQR_LO),y
  sta   .c1b+1           ; x0*y1l
  lda   (P_SQR_HI),y
  sbc   (P_INVSQR_HI),y
  sta   .c2a+1           ; x0*y1h;31

  lda   X1              ; set multiplier as x1
  sta   P_SQR_LO
  sta   P_SQR_HI
  eor   #$ff
  sta   P_INVSQR_LO
  sta   P_INVSQR_HI ;17

  ldy   Y0  ;sec
  lda   (P_SQR_LO),y
  sbc   (P_INVSQR_LO),y
  sta   .c1c+1           ; x1*y0l
  lda   (P_SQR_HI),y
  sbc   (P_INVSQR_HI),y
  sta   .c2b+1           ; x1*y1h;31

  ldy   Y1  ;sec
  lda   (P_SQR_LO),y
  sbc   (P_INVSQR_LO),y
  sta   .c2c+1           ; x1*y1l

      clc               ; add the first two numbers of column 1
.c1a: lda   #0
.c1b: adc   #0
      sta   Z1  ;9

.c2a: lda   #0          ; continue to first two numbers of column 2
.c2b: adc   #0
      tax               ; X=z2, 6 cycles
      clc

.c1c: lda   #0          ; add last number of column 1
      adc   Z1
      sta   Z1  ;8

      txa               ; A=z2
.c2c: adc   #0          ; add last number of column 2
      sta   Z2          ; X=z2
}

!ZONE MUL_U16U16
!MACRO MUL_U16U16 {
  lda   X0              ; set multiplier as x0
  sta   P_SQR_LO
  sta   P_SQR_HI
  eor   #$ff
  sta   P_INVSQR_LO
  sta   P_INVSQR_HI ;17

  ldy   Y0
  sec
  lda   (P_SQR_LO),Y
  sbc   (P_INVSQR_LO),Y ; note these two lines taken as 11 total
  sta   Z0              ; x0*y0l
  lda   (P_SQR_HI),Y
  sbc   (P_INVSQR_HI),Y
  sta   .c1a+1           ; x0*y0h;31 ;c1a means column 1, row a (partial product to be added later)

  ldy   Y1
;sec  ;notice that the high byte of sub above is always +ve
  lda   (P_SQR_LO),y
  sbc   (P_INVSQR_LO),y
  sta   .c1b+1           ; x0*y1l
  lda   (P_SQR_HI),y
  sbc   (P_INVSQR_HI),y
  sta   .c2a+1           ; x0*y1h;31

  lda   X1              ; set multiplier as x1
  sta   P_SQR_LO
  sta   P_SQR_HI
  eor   #$ff
  sta   P_INVSQR_LO
  sta   P_INVSQR_HI ;17

  ldy   Y0
;sec
  lda   (P_SQR_LO),y
  sbc   (P_INVSQR_LO),y
  sta   .c1c+1           ; x1*y0l
  lda   (P_SQR_HI),y
  sbc   (P_INVSQR_HI),y
  sta   .c2b+1           ; x1*y1h;31

  ldy   Y1
;sec
  lda   (P_SQR_LO),y
  sbc   (P_INVSQR_LO),y
  sta   .c2c+1           ; x1*y1l
  lda   (P_SQR_HI),y
  sbc   (P_INVSQR_HI),y
  tay                   ; x1*y1h;Y=z3, 30 cycles
;17+33+31+17+31+30=159 cycles for main multiply part

;jmp do_adds; can put do_adds in zp for a slight speed increase
;do_adds:
      clc               ; add the first two numbers of column 1
.c1a: lda   #0
.c1b: adc   #0
      sta   Z1  ;9

.c2a: lda   #0          ; continue to first two numbers of column 2
.c2b: adc   #0
      tax               ; X=z2, 6 cycles
      bcc .c1c  ;3/6 avg 4.5
        iny             ; z3++
      clc

.c1c: lda   #0          ; add last number of column 1
      adc   Z1
      sta   Z1  ;8

      txa               ; A=z2
.c2c: adc   #0          ; add last number of column 2
      tax               ; X=z2, 6
      bcc .fin;3/4 avg 3.5
        iny             ; z3++
  
.fin: stx   Z2          ; X=z2
      sty   Z3          ; Y=z3
}

!ZONE MULU16U16
MULU16U16
 +MUL_U16U16
  RTS

!ZONE MULS16S16
MULS16S16
  LDY   #0      ; reset sign count
  LDA   X0+1    ; get x hi
  BPL   .cont1
    INY         ; inc count
    +NEG16  X0  ; negate x
.cont1:
  LDA   Y0+1    ; get y hi
  BPL   .cont2
    INY         ; inc count
    +NEG16  Y0  ; negate y
.cont2:
  STY   .count+1  ;  TYA           ; store count  PHA           ; push on stack
 +MUL_U16U16
.count:
  LDA   #0      ; PLA           ; get stack
  LSR           ; AND #1
  BCC   .cont3  ;  BEQ   .cont3
    +NEG32  Z0
.cont3:
  RTS


; convert x to unsigned and set a flag shift x down until z is less than 256 multiply by recipricol
!ZONE DIV_SHIFT_16
!MACRO DIV_SHIFT_16 NUM1, NUM2, NUM3 {
  LSR ; 16 bit divide by 2
  ROR   NUM1 
  LSR   NUM2+1
  ROR   NUM2
  LSR   NUM3+1
  ROR   NUM3
}

 
!ZONE DIVMUL_1608
DIVMUL_1608
  clc
;;;;  adc #1 ; to fix
  
  STA   P_SQR_LO  ; DIV_MUL_U16U08 ; set multiplier as x0
  STA   P_SQR_HI
  EOR   #$ff
  STA   P_INVSQR_LO
  STA   P_INVSQR_HI ;17

;;;;  dey ; iny ; to fix
  
  LDY   REC16LO,X ; Y=divisor
  LDA   REC16HI,X
  TAX

  SEC
  LDA   (P_SQR_LO),Y
  SBC   (P_INVSQR_LO),Y ; note these two lines taken as 11 total ;  sta   Z0              ; x0*y0l
  LDA   (P_SQR_HI),Y
  SBC   (P_INVSQR_HI),Y
  STA   .C1A+1           ; x0*y0h;31 ;c1a means column 1, row a (partial product to be added later)

  TXA
  TAY
  LDA   (P_SQR_LO),y
  SBC   (P_INVSQR_LO),y

      CLC               ; add the first two numbers of column 1
.C1A: ADC   #0

  RTS

!ZONE PERSPECTIVE_POINT
PERSPECTIVE_POINT

          LDY   #0            ; positive
          LDA   X_PNT_HI      ; get x hi
          BPL   .X_POS
            INY               ; negative
            +NEG16  X_PNT_LO  ; negate x
.X_POS:   STY   .X_MINUS+1

          LDY   #0            ; positive
          LDA   Y_PNT_HI      ; get y hi
          BPL   .Y_POS
            INY               ; negative
            +NEG16  Y_PNT_LO  ; negate y
.Y_POS:   STY   .Y_MINUS+1

          LDA   Z_PNT_HI      ; shift x/x/z down until z is less than 255
          BEQ   .SHIFT_EXIT   ; z hi eq 0
          +DIV_SHIFT_16 Z_PNT_LO, X_PNT_LO, Y_PNT_LO
          TAX
          BEQ   .SHIFT_EXIT
          +DIV_SHIFT_16 Z_PNT_LO, X_PNT_LO, Y_PNT_LO
          TAX
          BEQ   .SHIFT_EXIT
          +DIV_SHIFT_16 Z_PNT_LO, X_PNT_LO, Y_PNT_LO
          TAX
          BEQ   .SHIFT_EXIT
          +DIV_SHIFT_16 Z_PNT_LO, X_PNT_LO, Y_PNT_LO
          TAX
          BEQ   .SHIFT_EXIT
          +DIV_SHIFT_16 Z_PNT_LO, X_PNT_LO, Y_PNT_LO
          TAX
          BEQ   .SHIFT_EXIT
          +DIV_SHIFT_16 Z_PNT_LO, X_PNT_LO, Y_PNT_LO
          TAX
          BEQ   .SHIFT_EXIT
          +DIV_SHIFT_16 Z_PNT_LO, X_PNT_LO, Y_PNT_LO
          TAX
          BEQ   .SHIFT_EXIT
          +DIV_SHIFT_16 Z_PNT_LO, X_PNT_LO, Y_PNT_LO
.SHIFT_EXIT:

          LDA   X_PNT_LO  ; divide shifted x
          STA   Y0
          LDA   X_PNT_HI
          STA   Y1
          LDX   Z_PNT_LO  ; by reciptical of shifted z
          LDA   REC16LO,X
          STA   X0
          LDA   REC16HI,X
          STA   X1
          +DIV_MUL_U16U16 ; doesnt need z0 ot z3?

.X_MINUS: LDA   #0        ; negative?
          BEQ   .X_PLUS   ; no
            +NEG16  Z1    ; yes
.X_PLUS:  LDA   Z1        ; pers x + screen middle
          LDX   Z2
          CLC
          ADC   #<SCNX
          BCC   .X_PS_PLS
            INX
.X_PS_PLS:STA   X_PNT_LO
          STX   X_PNT_HI
           
          LDA   Y_PNT_LO  ; divide shifted z
          STA   Y0
          LDA   Y_PNT_HI
          STA   Y1
          LDX   Z_PNT_LO  ; by reciptical of shifted z
          LDA   REC16LO,X
          STA   X0
          LDA   REC16HI,X
          STA   X1
          +DIV_MUL_U16U16 ; doesnt need z0 ot z3?

.Y_MINUS: LDA   #0        ; negative
          BEQ   .Y_PLUS   ; no
            +NEG16  Z1    ; yes
.Y_PLUS:  LDA   Z1        ; pers x + screen middle
          LDY   Z2
          CLC
          ADC   #<SCNY
          BCC   .Y_PS_PLS
            INY
.Y_PS_PLS:STA   Y_PNT_LO 
          STY   Y_PNT_HI
 RTS

!MACRO CLR_SCN B0 ,L0 {
  STA B0+(L0*320)+0,Y
  STA B0+(L0*320)+1,Y
  STA B0+(L0*320)+2,Y
  STA B0+(L0*320)+3,Y
  STA B0+(L0*320)+4,Y
  STA B0+(L0*320)+5,Y
  STA B0+(L0*320)+6,Y
  STA B0+(L0*320)+7,Y

;  STA B0+128+(L0*320)+0,Y
;  STA B0+128+(L0*320)+1,Y
;  STA B0+128+(L0*320)+2,Y
;  STA B0+128+(L0*320)+3,Y
;  STA B0+128+(L0*320)+4,Y
;  STA B0+128+(L0*320)+5,Y
;  STA B0+128+(L0*320)+6,Y
;  STA B0+128+(L0*320)+7,Y
}

!ZONE SCREEN_CLEAR_BANK_00:
SCREEN_CLEAR_BANK_00:
 LDA #$A5
 LDX #32 ;15
.LOOP:
  LDY CLEAR_TAB-1,X
 +CLR_SCN $4000, 0
 +CLR_SCN $4000, 1
 +CLR_SCN $4000, 2
 +CLR_SCN $4000, 3
 +CLR_SCN $4000, 4
 +CLR_SCN $4000, 5
 +CLR_SCN $4000, 6
 +CLR_SCN $4000, 7
 +CLR_SCN $4000, 8
 +CLR_SCN $4000, 9
 +CLR_SCN $4000, 10
 +CLR_SCN $4000, 11
 +CLR_SCN $4000, 12
 +CLR_SCN $4000, 13
 +CLR_SCN $4000, 14
 +CLR_SCN $4000, 15
  DEX
  BEQ .EXIT
  JMP .LOOP
.EXIT
RTS

!ZONE SCREEN_CLEAR_BANK_01:
SCREEN_CLEAR_BANK_01:
 LDA #$A5
 LDX #32 ;15
.LOOP:
  LDY CLEAR_TAB-1,X
 +CLR_SCN $6000, 0
 +CLR_SCN $6000, 1
 +CLR_SCN $6000, 2
 +CLR_SCN $6000, 3
 +CLR_SCN $6000, 4
 +CLR_SCN $6000, 5
 +CLR_SCN $6000, 6
 +CLR_SCN $6000, 7
 +CLR_SCN $6000, 8
 +CLR_SCN $6000, 9
 +CLR_SCN $6000, 10
 +CLR_SCN $6000, 11
 +CLR_SCN $6000, 12
 +CLR_SCN $6000, 13
 +CLR_SCN $6000, 14
 +CLR_SCN $6000, 15
  DEX
  BEQ .EXIT
  JMP .LOOP
.EXIT
RTS


!ZONE ROT_U16U16
!MACRO ROT_U16U16 {
  lda   X0              ; set multiplier as x0
  sta   P_SQR_LO
  sta   P_SQR_HI
  eor   #$ff
  sta   P_INVSQR_LO
  sta   P_INVSQR_HI ;17

  sec
  lda   (P_SQR_HI),Y
  sbc   (P_INVSQR_HI),Y
  sta   .c1a+1           ; x0*y0h;31 ;c1a means column 1, row a (partial product to be added later)

  lda   X1              ; set multiplier as x1
  sta   P_SQR_LO
  sta   P_SQR_HI
  eor   #$ff
  sta   P_INVSQR_LO
  sta   P_INVSQR_HI ;17

  sec
  lda   (P_SQR_HI),y
  sbc   (P_INVSQR_HI),y
  tax ; z2

  sec
  lda   (P_SQR_LO),y
  sbc   (P_INVSQR_LO),y

  clc
.c1a: adc   #0
      tay ; z1
}

!ZONE ROTS16S08
ROTS16S08 ; return z1/z2 in x/y
  LDX   #0      ; reset sign count
  
  ASL
  BCC .cont1
    INX         ; inc count
    CLC       ; negate #2
    EOR #$ff  ; negate #2
    ADC #1    ; negate #2
.cont1:
  TAY
  
  LDA   X0+1    ; get x hi
  BPL   .cont2
    INX         ; inc count
    +NEG16  X0  ; negate x
.cont2:

  STX   .count+1  ;  TYA           ; store count  PHA           ; push on stack
 +ROT_U16U16
.count:
  LDA   #0      ; PLA           ; get stack
  LSR           ; AND #1
  BCC   .cont3  ;  BEQ   .cont3
    TYA
    CLC       ; negate #2
    EOR #$ff  ; negate #2
    ADC #1    ; negate #2
    TAY
    
    stx Z2
    LDA #0    ;Load constant zero again                 #2
    SBC Z1+1 ;... subtract the most significant byte   #3
;    tax

;    TXA
;    CLC       ; negate #2
;    EOR #$ff  ; negate #2
;    ADC #1    ; negate #2
    TAX
.cont3:
  RTS

  
!MACRO ROTATE_X {
;rotate around x-axis:
; y'' = y'*cos(C) + z'*sin(C)
; z'' = y'*sin(C) - z'*cos(C)
  LDX   Y_PNT_LO
  LDY   Y_PNT_HI
  STX   X0
  STY   X1
  LDA XCOSTMP
  JSR   ROTS16S08
  STY   YC_TEMP 
  STX   YC_TEMP+1

  LDX   Y_PNT_LO
  LDY   Y_PNT_HI
  STX   X0
  STY   X1
  LDA XSINTMP
  JSR   ROTS16S08
  STY   YS_TEMP
  STX   YS_TEMP+1
  
  LDX   Z_PNT_LO
  LDY   Z_PNT_HI
  STX   X0
  STY   X1
  LDA XCOSTMP
  JSR   ROTS16S08
  STY   ZC_TEMP
  STX   ZC_TEMP+1

  LDX   Z_PNT_LO
  LDY   Z_PNT_HI
  STX   X0
  STY   X1
  LDA XSINTMP
  JSR   ROTS16S08
  STY   ZS_TEMP
  STX   ZS_TEMP+1
   
  CLC
  LDA   YC_TEMP
  ADC   ZS_TEMP
  STA   Y_PNT_LO
  LDA   YC_TEMP+1
  ADC   ZS_TEMP+1
  STA   Y_PNT_HI
    
  SEC
  LDA   YS_TEMP
  SBC   ZC_TEMP
  STA   Z_PNT_LO
  LDA   YS_TEMP+1
  SBC   ZC_TEMP+1
  STA   Z_PNT_HI
}

!MACRO ROTATE_Y {
; rotate around y-axis:
; x'' = x'*cos(B) + z*sin(B)
; z'  = x'*sin(B) - z*cos(B)
  LDX   X_PNT_LO
  LDY   X_PNT_HI
  STX   X0
  STY   X1
  LDA YCOSTMP
  JSR   ROTS16S08
  STY   XC_TEMP
  STX   XC_TEMP+1

  LDX   Z_PNT_LO
  LDY   Z_PNT_HI
  STX   X0
  STY   X1
  LDA YSINTMP
  JSR   ROTS16S08
  STY   ZS_TEMP
  STX   ZS_TEMP+1
  
  LDX   X_PNT_LO
  LDY   X_PNT_HI
  STX   X0
  STY   X1
  LDA YSINTMP
  JSR   ROTS16S08
  STY   XS_TEMP
  STX   XS_TEMP+1

  LDX   Z_PNT_LO
  LDY   Z_PNT_HI
  STX   X0
  STY   X1
  LDA YCOSTMP
  JSR   ROTS16S08
  STY   ZC_TEMP
  STX   ZC_TEMP+1
   
  CLC
  LDA   XC_TEMP
  ADC   ZS_TEMP
  STA   X_PNT_LO
  LDA   XC_TEMP+1
  ADC   ZS_TEMP+1
  STA   X_PNT_HI
    
  SEC
  LDA   XS_TEMP
  SBC   ZC_TEMP
  STA   Z_PNT_LO
  LDA   XS_TEMP+1
  SBC   ZC_TEMP+1
  STA   Z_PNT_HI
}

!MACRO ROTATE_Z {
;rotate around z-axis:
; x'  = x*cos(A) + y*sin(A)
; y'  = x*sin(A) - y*cos(A)
  LDX   X_PNT_LO
  LDY   X_PNT_HI
  STX   X0
  STY   X1
  LDA ZCOSTMP
  JSR   ROTS16S08
  STY   XC_TEMP
  STX   XC_TEMP+1

  LDX   Y_PNT_LO
  LDY   Y_PNT_HI
  STX   X0
  STY   X1
  LDA ZSINTMP
  JSR   ROTS16S08
  STY   YS_TEMP
  STX   YS_TEMP+1
  
  LDX   X_PNT_LO
  LDY   X_PNT_HI
  STX   X0
  STY   X1
  LDA ZSINTMP
  JSR   ROTS16S08
  STY   XS_TEMP
  STX   XS_TEMP+1

  LDX   Y_PNT_LO
  LDY   Y_PNT_HI
  STX   X0
  STY   X1
  LDA ZCOSTMP
  JSR   ROTS16S08
  STY   YC_TEMP
  STX   YC_TEMP+1
   
  CLC
  LDA   XC_TEMP
  ADC   YS_TEMP
  STA   X_PNT_LO
  LDA   XC_TEMP+1
  ADC   YS_TEMP+1
  STA   X_PNT_HI
    
  SEC
  LDA   XS_TEMP
  SBC   YC_TEMP
  STA   Y_PNT_LO
  LDA   XS_TEMP+1
  SBC   YC_TEMP+1
  STA   Y_PNT_HI
}

!ZONE ROTATE_POINT
ROTATE_POINT

  LDX   X_ROT
  LDA   COSTAB,X
  STA   XCOSTMP
  LDA   SINTAB,X
  STA   XSINTMP
  
  LDX   Y_ROT
  LDA   COSTAB,X
  STA   YCOSTMP
  LDA   SINTAB,X
  STA   YSINTMP

  LDX   Z_ROT
  LDA   COSTAB,X
  STA   ZCOSTMP
  LDA   SINTAB,X
  STA   ZSINTMP

 +ROTATE_Z  
 +ROTATE_X  
 +ROTATE_Y  

RTS



 



;This leads to the following algorithm for doing signed multiplications:

;  multiply x and y as normal with some routine
;  if x<0 then subtract y from the high bytes of the result
;  if y<0 then subtract x from the high bytes

;And that's all there is to it!  Note that x and y are "backwards",
;i.e. subtract y, and not x, when x<0.  Some examples:

;  x=-1, y=16  Computer: x=$FF y=$10  (N=8)
;        x*y = $0FF0
;        Result is less than 256, so ignore high byte
;          Answer = $F0 = -16
;        OR: subtract y from high byte, 
;      Answer = $FFF0 = -16

;  x=2112 y=-365 Computer: x=$0840 y=$FE93   (N=16)
;        x*y = $08343CC0
;        y<0 so subtract x from high bytes (x*2^16), 
;      Answer = $F43CC0 = -770880

;  x=-31 y=-41 Computer: x=$E1 y=$D7
;        x*y = $BCF7
;        x<0 so subtract $D700 -> $E5F7
;        y<0 so subtract $E100 -> $04F7 = 1271 = correct!
 
;So, in summary, signed multiplies can be done with the same fast 
;multiply routine along with some _very simple_ post-processing.
;And if we know something about the result ahead of time (like if
;it's less than 256 or whatever) then it takes _no_ additional 
;processing!
 





; macros

;arithmetic shift right
!macro asr {
;;!ifdef USE_ILLEGALS {
;;         anc #$fe
;;         ror
;;} else {
;;         ;copy bit 7 to carry
         cmp #$80
;;         ;rotate right -> if negative, bit 7 is set again, else it is cleared -> arithmetic shift right
         ror
;;         clc
}
;;}
 
;adds two angles
!macro adda .a, .b {
 clc
 adc .a
;;         ;>255 -> in any case do a subtract
;;         bcs ++
;;         cmp #180
;;         ;>180 and < 256 -> so subtract
;;         bcc +
;;++
;;         sbc #180
;;         clc
;;+
 sta .b
}
 
;subtracts two angles
!macro suba .a, .b {
 sec
 sbc .a
;;         bcs +
;;         adc #180
;;+
         sta .b
}
 
;negates value
!macro neg {
         eor #$ff
         clc
         adc #$01
}
 
;sets up value and -value for fast multiply
!macro store .a, .nega {
         sta .a+1
         +neg
         sta .nega+1
}

; matrix
!ZONE MATRIX
MATRIX
         ;check rotation angles for overflow
         ldx X_ROT
;;         LDA Z_ROT
         lda Y_ROT
         tay
         +adda Z_ROT, T2
;;         sec
         +suba X_ROT, T8
 
         ;t9 = sy-sx
         ;t1 = sy-sz
         tya
         +suba X_ROT, T9
         tya
         +suba Z_ROT, T1
 
         ;t4 = sx-sz
         ;t6 = sx-sy+sz = sx-t1
         txa
         +suba Z_ROT, T4
         txa
         +suba T1, T6
 
         ;t3 = sx+sz
         ;t5 = sx+sy+sz = sx+t2
         ;t7 = sx+sy-sz = sx+t1
         ;t10= sy+sx
;;         clc
         txa
         +adda Z_ROT, T3
         txa
         +adda T2, T5
         txa
         +adda T1, T7
         txa
         +adda Y_ROT, T10
 
         ;---------------------------------
         ;now do the easy stuff
         ;C = sin(sy)
         ;A = (cos(t1) + cos(t2)) / 2
         ;B = (sin(t1) - sin(t2)) / 2
         ;F = (sin(t9) - sin(t10)) / 2
 
         ;and the ugly stuff ... so we better cut this into small pieces ...
         ;D = ( sin(t3) - sin(t4)) / 2 + (-cos(t5) + cos(t6) + cos(t8) - cos(t7)) / 4
         ;H = ( sin(t3) + sin(t4)) / 2 + (-cos(t5) + cos(t6) - cos(t8) + cos(t7)) / 4
         ;E = ( cos(t3) + cos(t4)) / 2 + ( sin(t5) - sin(t6) - sin(t8) - sin(t7)) / 4
         ;G = (-cos(t3) + cos(t4)) / 2 + (-sin(t5) + sin(t6) - sin(t8) - sin(t7)) / 4
 
         ;for that we calc for the left part:
         ;D_ = sin(t3) - sin(t4)
         ;H_ = sin(t3) + sin(t4)
         ;E_ = cos(t3) + cos(t4)
         ;G_ = cos(t4) - cos(t3) = -cos(t3) + cos(t4)
 
         ;for the right part:
         ;tmp4 = -cos(t5) + cos(t6)
         ;tmp1 =  sin(t5) - sin(t6)
         ;tmp3 = -sin(t7) - sin(t8)
         ;tmp2 = -cos(t7) + cos(t8)
 
         ;finally sum all up and divide by two
         ;D = D_ + (tmp4 + tmp2) / 4
         ;H = H_ + (tmp4 - tmp2) / 4
         ;E = E_ + (tmp1 + tmp3) / 4
         ;G = G_ + (tmp3 - tmp1) / 4
         ;---------------------------------
 
         ;NOTE: values for sin and cos are already / 2, so one asr is enough for those terms divided by 4. Term 
         ;C has to be multiplied by two. All terms divided by 2 are divided are no more divided.
 
         ;---------------------------------
         ;calc the easy stuff
         ;---------------------------------
 
         ;sin(y) * 2
         lda SINTAB,y
         clc
         adc SINTAB,y
         +store C1, C2
 
         ldx T1
         ldy T2
 
         ;cos(t1) + cos(t2)
         lda COSTAB,x
         clc
         adc COSTAB,y
         +store A1, A2
 
         ;sin(t1) - sin(t2)
         lda SINTAB,x
         sec
         sbc SINTAB,y
         +store B1, B2
 
         ldx T9
         ldy T10
 
         ;sin(t9) - sin(t10)
         lda SINTAB,x
         sec
         sbc SINTAB,y
         +store F1, F2
 
         ;cos(t9) + cos(t10)
         lda COSTAB,x
         clc
         adc COSTAB,y
         +store I1, I2
 
         ;---------------------------------
         ;calc left part of terms
         ;---------------------------------
 
         ldx T3
         ldy T4
 
         ;sin(t3) - sin(t4)
         lda SINTAB,x
         sec
         sbc SINTAB,y
         sta D+1
 
         ;sin(t3) + sin(t4)
         lda SINTAB,x
         clc
         adc SINTAB,y
         sta H+1
 
         ;cos(t3) + cos(t4)
         lda COSTAB,x
         clc
         adc COSTAB,y
         sta E+1
 
         ;-cos(t3) + cos(t4) = cos(t4) - cos(t3)
         lda COSTAB,y
         sec
         sbc COSTAB,x
         sta G+1
 
         ;---------------------------------
         ;calc first and second halfs of right part
         ;---------------------------------
 
         ldx T7
         ldy T8
 
         ;tmp2 = - cos(t7) + cos(t8)
         lda COSTAB,y
         sec
         sbc COSTAB,x
         sta tmp2
 
         ;tmp3 = -sin(t7) - sin(t8)
         lda #$00
         sec
         sbc SINTAB,x
         sec
         sbc SINTAB,y
         sta tmp3
 
         ldx T5
         ldy T6
 
         ;tmp1 = sin(t5) - sin(t6)
         lda SINTAB,x
         sec
         sbc SINTAB,y
         sta tmp1
 
         ;tmp4 = -cos(t5) + cos(t6)
         lda COSTAB,y
         sec
         sbc COSTAB,x
         sta tmp4+1
 
         ;---------------------------------
         ;sum all up and divide by two
         ;---------------------------------
 
         ;H = (tmp4 + tmp2) / 2 + D_
         clc
         adc tmp2
         +asr
D:       adc #$00
         +store D1, D2

         ;H = (tmp4 - tmp2) / 2 + H_
tmp4     lda #$00
         sec
         sbc tmp2
         +asr

H:       adc #$00
         +store H1, H2
 
         ;E = (tmp3 + tmp1) / 2 + E_
         lda tmp1
         clc
         adc tmp3
         +asr
E:       adc #$00

         +store E1, E2
 
         ;G = (tmp3 - tmp1) / 2 + G_
         lda tmp3
         sec
         sbc tmp1
         +asr
G:       adc #$00

         +store G1, G2


tmath1  !byte 0
tmath1_80 !byte 0

; rotate
ROTATE
;;!macro project_z_cached ~.vertx, ~.verty, ~.vertz, ~.vertc, ~.A1, ~.B1, ~.C1, ~.D1, ~.E1, ~.F1, ~.G1, ~.H1,
;;~.I1, ~.A2, ~.B2, ~.C2, ~.D2, ~.E2, ~.F2, ~.G2, ~.H2, ~.I2 {
;;.start
;;         sec
;;         ;update index value for next change in Z
;;.vertc   lda $1000,x
;;         sta .next+1
 
         ;update values for Z
;;.vertz   ldy $1000,x
 
         ;as long as vert_z is the same, the value for its multiplication is the same, as the other multiplicand 
         ;only changes per rotation
G1      lda tmath1_80,y
G2      sbc tmath1,y
         sta zr1+1
 
A1      lda tmath1_80,y
A2      sbc tmath1,y
         sta zr2+1
 
D1      lda tmath1_80,y
D2      sbc tmath1,y
         sta zr3+1
         ;carry is always set
         ;sec

         ;backup x
;;         stx tmp1
         ;load registers with x and y coordinates
;;.verty   ldy $1000,x
;;.vertx   lda $1000,x        ;meh, can't we use lax somehow?
;;         tax                ;13
 
         ;now we load the first value with $80 added beforehand, as we now add and subtract 2 values that are 
         ;all below $40 we will neither overflow nor underflow thus the carry for the next addition/subtraction 
         ;is predictable, and even if it is set when adding and cleared when subtracting, this is no problem.
         ;as a + 1 - b - 1 = a - b
 
         ;z' = (G * vz + H * vx + I * vy) + $80
 
zr1      lda #$00
H1      adc tmath1,x
H2      sbc tmath1,x
I1      adc tmath1,y
I2      sbc tmath1,y
 
         ;now we would need to subtract $80 again by doing an eor #$80 to avoid clobbering of the carry
         ;however we can calculate that offset into the fact_z-table (perspective correction)
         ;also we have added the offset of $80 again to the values, that saves us the eor #$80 before the 
         ;multiplications that result in the final x/y-position
 
         ;set index in perspective-table without clobbering y or x
 
;;         sta .persp+1       ;22
;;.persp   lda fact_z
;;         sta z1
;;         eor #$ff
;;         sta z2             ;12
 
         ;x' = (A * vz + B * vx + C * vy) + $80
zr2      lda #$00
B1      adc tmath1,x
B2      sbc tmath1,x
C1      adc tmath1,y
C2      sbc tmath1,y
         ;set index without clobbering y or x
;;         sta tmp2           ;21
 
         ;y' = (D * vz + E * vx + F * vy) + $80
zr3      lda #$00
E1      adc tmath1,x
E2      sbc tmath1,x
F1      adc tmath1,y
F2      sbc tmath1,y
;;         tay                ;20
         ;restore X
;;         ldx tmp1
         ;calc perspective y'
         ;yp = y' * fact_z[z' - $80] + $40 (-> unsigned)
         ;z1 points to tmath1_40, a square-table with an added offset of $40
         ;z2 points to tmath2, a square-table with an index-offset of 1 (as clc adc #$01 is omitted on negation)
;;         lda (z1),y
         ;carry is still set and upcoming sbc does not underflow
;;         sbc (z2),y
;;         sta vertices_y,x   ;18
 
         ;restore x'
;;         ldy tmp2
         ;calc perspective x'
         ;xp = x' * fact_z[z' - $80] + $40 (-> unsigned)
;;         lda (z1),y
         ;carry still set
;;         sbc (z2),y
;;         sta vertices_x,x   ;18
;;         dex
;;.next    cpx #$00
;;         bpl -              ;7   branch as long as we don't underrun. In that case also carry is always set for free \o/
;---------------------------;131 cycles per simple loop
;;         +lbcc .start       ;    if negative and carry clear then x got below 0
;;}








BM_IRQ:
  dec $d020
 PHA
 TXA 
 PHA
 TYA 
 PHA 
 INC $D019    ;VIC Interrupt Request Register (IRR)

 LDA BANK
 STA $D018    ;VIC Memory Control Register
 
 LDA #$3B ; bitmap mode? - finding
 STA $D011    ;VIC Control Register 1

; LDA #$18
 LDA #%00011000 ; 0-2=SCRL 3=40/38 4=MCM 5-7=UNUSED
 STA $D016    ;VIC Control Register 2

 LDA #<TM_IRQ  ; raster interrupt setup - finding
 STA $fffe    ;IRQ
 LDA #>TM_IRQ  ; raster interrupt setup - finding
 STA $ffff    ;IRQ
  
 LDA #$E0     ; change screen to text at pos ba - finding
 STA $D012    ;Raster Position
 PLA 
 TAY
 PLA 
 TAX
 PLA
  inc $d020
NMI_NOP:
RTI ; This is the irq handler for the NMI. Just returns without acknowledge. This prevents subsequent NMI's from interfering.

TM_IRQ: 
  inc $d020
 PHA
 TXA 
 PHA
 TYA 
 PHA 
 INC $D019    ;VIC Interrupt Request Register (IRR)

 LDA #$7E
 STA $D018    ;VIC Memory Control Register

 LDA #$1B ; text mode? - finding 
 STA $D011    ;VIC Control Register 1

 LDA #$08
 STA $D016    ;VIC Control Register 2

 LDA #<BM_IRQ  ; raster interrupt setup - finding
 STA $FFFE    ;IRQ
 LDA #>BM_IRQ  ; raster interrupt setup - finding
 STA $FFFF    ;IRQ

 LDA #$FF     ; change screen to bitmap at pos 00 - finding
 STA $D012    ;Raster Position
 PLA 
 TAY
 PLA 
 TAX
 PLA  
  dec $d020
RTI

SHAPE_XL2: !BYTE <0,    <150, <0  ,<-150,<0   ,<0
SHAPE_XH2: !BYTE >0,    >150, >0  ,>-150,>0   ,>0
SHAPE_YL2: !BYTE <-250, <0,   <250,<0   ,<0   ,<0
SHAPE_YH2: !BYTE >-250, >0,   >250,>0   ,>0   ,>0
SHAPE_ZL2: !BYTE <0,    <0,   <0  ,<0   ,<-150,<150
SHAPE_ZH2: !BYTE >0,    >0,   >0  ,>0   ,>-150,>150

SHAPE_PS2: !BYTE 0,1,2,3, 4,4,4,4 ,5,5,5,5
SHAPE_PE2: !BYTE 1,2,3,0, 0,1,2,3 ,0,1,2,3

;    0,-1,0
;        0,0,-1
;-1,0,0     +1,0,0
;  0,0,+1
;
;    0,+1,0
    
SHAPE_XL: !BYTE <150,<-150,<150,<-150,<150,<-150,<150,<-150
SHAPE_XH: !BYTE >150,>-150,>150,>-150,>150,>-150,>150,>-150
SHAPE_YL: !BYTE <150,<150,<-150,<-150,<150,<150,<-150,<-150
SHAPE_YH: !BYTE >150,>150,>-150,>-150,>150,>150,>-150,>-150
SHAPE_ZL: !BYTE <150,<150,<150,<150,<-150,<-150,<-150,<-150
SHAPE_ZH: !BYTE >150,>150,>150,>150,>-150,>-150,>-150,>-150

SHAPE_PS: !BYTE 0,1,3,2, 4,5,7,6 ,0,1,2,3
SHAPE_PE: !BYTE 1,3,2,0, 5,7,6,4 ,4,5,6,7

!ALIGN 255,0
REC16LO                                                         
!BYTE 255,000,085,000,051,170,146,000,113,153,069,085,177,073,017,000
!BYTE 015,056,121,204,048,162,033,170,061,216,123,036,211,136,066,000
!BYTE 193,135,080,028,235,188,144,102,062,024,244,209,176,144,114,085
!BYTE 057,030,005,236,212,189,167,146,125,105,086,068,050,033,016,000
!BYTE 240,224,210,195,181,168,155,142,129,117,105,094,083,072,061,051
!BYTE 041,031,021,012,003,250,241,232,224,216,208,200,192,185,177,170
!BYTE 163,156,149,143,136,130,124,118,112,106,100,094,089,083,078,073
!BYTE 067,062,057,052,048,043,038,034,029,025,020,016,012,008,004,000
!BYTE 252,248,244,240,236,233,229,225,222,218,215,212,208,205,202,199
!BYTE 195,192,189,186,183,180,178,175,172,169,166,164,161,158,156,153
!BYTE 151,148,146,143,141,138,136,134,131,129,127,125,122,120,118,116
!BYTE 114,112,110,108,106,104,102,100,098,096,094,092,090,088,087,085
!BYTE 083,081,080,078,076,074,073,071,070,068,066,065,063,062,060,059
!BYTE 057,056,054,053,051,050,048,047,046,044,043,041,040,039,037,036
!BYTE 035,033,032,031,030,028,027,026,025,024,022,021,020,019,018,017
!BYTE 015,014,013,012,011,010,009,008,007,006,005,004,003,002,001,000

REC16HI                                                         
!BYTE 255,128,085,064,051,042,036,032,028,025,023,021,019,018,017,016
!BYTE 015,014,013,012,012,011,011,010,010,009,009,009,008,008,008,008
!BYTE 007,007,007,007,006,006,006,006,006,006,005,005,005,005,005,005
!BYTE 005,005,005,004,004,004,004,004,004,004,004,004,004,004,004,004
!BYTE 003,003,003,003,003,003,003,003,003,003,003,003,003,003,003,003
!BYTE 003,003,003,003,003,002,002,002,002,002,002,002,002,002,002,002
!BYTE 002,002,002,002,002,002,002,002,002,002,002,002,002,002,002,002
!BYTE 002,002,002,002,002,002,002,002,002,002,002,002,002,002,002,002
!BYTE 001,001,001,001,001,001,001,001,001,001,001,001,001,001,001,001
!BYTE 001,001,001,001,001,001,001,001,001,001,001,001,001,001,001,001
!BYTE 001,001,001,001,001,001,001,001,001,001,001,001,001,001,001,001
!BYTE 001,001,001,001,001,001,001,001,001,001,001,001,001,001,001,001
!BYTE 001,001,001,001,001,001,001,001,001,001,001,001,001,001,001,001
!BYTE 001,001,001,001,001,001,001,001,001,001,001,001,001,001,001,001
!BYTE 001,001,001,001,001,001,001,001,001,001,001,001,001,001,001,001
!BYTE 001,001,001,001,001,001,001,001,001,001,001,001,001,001,001,001

!ALIGN 255,0
sqrlo:                                                           
!BYTE 000,000,001,002,004,006,009,012,016,020,025,030,036,042,049,056
!BYTE 064,072,081,090,100,110,121,132,144,156,169,182,196,210,225,240
!BYTE 000,016,033,050,068,086,105,124,144,164,185,206,228,250,017,040
!BYTE 064,088,113,138,164,190,217,244,016,044,073,102,132,162,193,224
!BYTE 000,032,065,098,132,166,201,236,016,052,089,126,164,202,241,024
!BYTE 064,104,145,186,228,014,057,100,144,188,233,022,068,114,161,208
!BYTE 000,048,097,146,196,246,041,092,144,196,249,046,100,154,209,008
!BYTE 064,120,177,234,036,094,153,212,016,076,137,198,004,066,129,192
!BYTE 000,064,129,194,004,070,137,204,016,084,153,222,036,106,177,248
!BYTE 064,136,209,026,100,174,249,068,144,220,041,118,196,018,097,176
!BYTE 000,080,161,242,068,150,233,060,144,228,057,142,228,058,145,232
!BYTE 064,152,241,074,164,254,089,180,016,108,201,038,132,226,065,160
!BYTE 000,096,193,034,132,230,073,172,016,116,217,062,164,010,113,216
!BYTE 064,168,017,122,228,078,185,036,144,252,105,214,068,178,033,144
!BYTE 000,112,225,082,196,054,169,028,144,004,121,238,100,218,081,200
!BYTE 064,184,049,170,036,158,025,148,016,140,009,134,004,130,001,128
!BYTE 000,128,001,130,004,134,009,140,016,148,025,158,036,170,049,184
!BYTE 064,200,081,218,100,238,121,004,144,028,169,054,196,082,225,112
!BYTE 000,144,033,178,068,214,105,252,144,036,185,078,228,122,017,168
!BYTE 064,216,113,010,164,062,217,116,016,172,073,230,132,034,193,096
!BYTE 000,160,065,226,132,038,201,108,016,180,089,254,164,074,241,152 
!BYTE 064,232,145,058,228,142,057,228,144,060,233,150,068,242,161,080 
!BYTE 000,176,097,018,196,118,041,220,144,068,249,174,100,026,209,136 
!BYTE 064,248,177,106,036,222,153,084,016,204,137,070,004,194,129,064 
!BYTE 000,192,129,066,004,198,137,076,016,212,153,094,036,234,177,120 
!BYTE 064,008,209,154,100,046,249,196,144,092,041,246,196,146,097,048 
!BYTE 000,208,161,114,068,022,233,188,144,100,057,014,228,186,145,104 
!BYTE 064,024,241,202,164,126,089,052,016,236,201,166,132,098,065,032 
!BYTE 000,224,193,162,132,102,073,044,016,244,217,190,164,138,113,088 
!BYTE 064,040,017,250,228,206,185,164,144,124,105,086,068,050,033,016 
!BYTE 000,240,225,210,196,182,169,156,144,132,121,110,100,090,081,072 
!BYTE 064,056,049,042,036,030,025,020,016,012,009,006,004,002,001,000 

!ALIGN 255,0
sqrhi:                                                          
!BYTE 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
!BYTE 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
!BYTE 001,001,001,001,001,001,001,001,001,001,001,001,001,001,002,002
!BYTE 002,002,002,002,002,002,002,002,003,003,003,003,003,003,003,003
!BYTE 004,004,004,004,004,004,004,004,005,005,005,005,005,005,005,006
!BYTE 006,006,006,006,006,007,007,007,007,007,007,008,008,008,008,008
!BYTE 009,009,009,009,009,009,010,010,010,010,010,011,011,011,011,012
!BYTE 012,012,012,012,013,013,013,013,014,014,014,014,015,015,015,015
!BYTE 016,016,016,016,017,017,017,017,018,018,018,018,019,019,019,019
!BYTE 020,020,020,021,021,021,021,022,022,022,023,023,023,024,024,024
!BYTE 025,025,025,025,026,026,026,027,027,027,028,028,028,029,029,029
!BYTE 030,030,030,031,031,031,032,032,033,033,033,034,034,034,035,035
!BYTE 036,036,036,037,037,037,038,038,039,039,039,040,040,041,041,041
!BYTE 042,042,043,043,043,044,044,045,045,045,046,046,047,047,048,048
!BYTE 049,049,049,050,050,051,051,052,052,053,053,053,054,054,055,055
!BYTE 056,056,057,057,058,058,059,059,060,060,061,061,062,062,063,063
!BYTE 064,064,065,065,066,066,067,067,068,068,069,069,070,070,071,071
!BYTE 072,072,073,073,074,074,075,076,076,077,077,078,078,079,079,080
!BYTE 081,081,082,082,083,083,084,084,085,086,086,087,087,088,089,089
!BYTE 090,090,091,092,092,093,093,094,095,095,096,096,097,098,098,099
!BYTE 100,100,101,101,102,103,103,104,105,105,106,106,107,108,108,109
!BYTE 110,110,111,112,112,113,114,114,115,116,116,117,118,118,119,120
!BYTE 121,121,122,123,123,124,125,125,126,127,127,128,129,130,130,131
!BYTE 132,132,133,134,135,135,136,137,138,138,139,140,141,141,142,143
!BYTE 144,144,145,146,147,147,148,149,150,150,151,152,153,153,154,155
!BYTE 156,157,157,158,159,160,160,161,162,163,164,164,165,166,167,168
!BYTE 169,169,170,171,172,173,173,174,175,176,177,178,178,179,180,181
!BYTE 182,183,183,184,185,186,187,188,189,189,190,191,192,193,194,195
!BYTE 196,196,197,198,199,200,201,202,203,203,204,205,206,207,208,209
!BYTE 210,211,212,212,213,214,215,216,217,218,219,220,221,222,223,224
!BYTE 225,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239
!BYTE 240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255

!ALIGN 255,0
negsqrlo:                                                          
!BYTE 128,001,130,004,134,009,140,016,148,025,158,036,170,049,184,064
!BYTE 200,081,218,100,238,121,004,144,028,169,054,196,082,225,112,000
!BYTE 144,033,178,068,214,105,252,144,036,185,078,228,122,017,168,064
!BYTE 216,113,010,164,062,217,116,016,172,073,230,132,034,193,096,000
!BYTE 160,065,226,132,038,201,108,016,180,089,254,164,074,241,152,064
!BYTE 232,145,058,228,142,057,228,144,060,233,150,068,242,161,080,000
!BYTE 176,097,018,196,118,041,220,144,068,249,174,100,026,209,136,064
!BYTE 248,177,106,036,222,153,084,016,204,137,070,004,194,129,064,000
!BYTE 192,129,066,004,198,137,076,016,212,153,094,036,234,177,120,064
!BYTE 008,209,154,100,046,249,196,144,092,041,246,196,146,097,048,000
!BYTE 208,161,114,068,022,233,188,144,100,057,014,228,186,145,104,064
!BYTE 024,241,202,164,126,089,052,016,236,201,166,132,098,065,032,000
!BYTE 224,193,162,132,102,073,044,016,244,217,190,164,138,113,088,064
!BYTE 040,017,250,228,206,185,164,144,124,105,086,068,050,033,016,000
!BYTE 240,225,210,196,182,169,156,144,132,121,110,100,090,081,072,064
!BYTE 056,049,042,036,030,025,020,016,012,009,006,004,002,001,000,000
!BYTE 000,001,002,004,006,009,012,016,020,025,030,036,042,049,056,064
!BYTE 072,081,090,100,110,121,132,144,156,169,182,196,210,225,240,000
!BYTE 016,033,050,068,086,105,124,144,164,185,206,228,250,017,040,064
!BYTE 088,113,138,164,190,217,244,016,044,073,102,132,162,193,224,000
!BYTE 032,065,098,132,166,201,236,016,052,089,126,164,202,241,024,064
!BYTE 104,145,186,228,014,057,100,144,188,233,022,068,114,161,208,000
!BYTE 048,097,146,196,246,041,092,144,196,249,046,100,154,209,008,064
!BYTE 120,177,234,036,094,153,212,016,076,137,198,004,066,129,192,000
!BYTE 064,129,194,004,070,137,204,016,084,153,222,036,106,177,248,064
!BYTE 136,209,026,100,174,249,068,144,220,041,118,196,018,097,176,000
!BYTE 080,161,242,068,150,233,060,144,228,057,142,228,058,145,232,064
!BYTE 152,241,074,164,254,089,180,016,108,201,038,132,226,065,160,000
!BYTE 096,193,034,132,230,073,172,016,116,217,062,164,010,113,216,064
!BYTE 168,017,122,228,078,185,036,144,252,105,214,068,178,033,144,000
!BYTE 112,225,082,196,054,169,028,144,004,121,238,100,218,081,200,064
!BYTE 184,049,170,036,158,025,148,016,140,009,134,004,130,001,128,000

!ALIGN 255,0
negsqrhi:
!BYTE 063,063,062,062,061,061,060,060,059,059,058,058,057,057,056,056
!BYTE 055,055,054,054,053,053,053,052,052,051,051,050,050,049,049,049
!BYTE 048,048,047,047,046,046,045,045,045,044,044,043,043,043,042,042
!BYTE 041,041,041,040,040,039,039,039,038,038,037,037,037,036,036,036
!BYTE 035,035,034,034,034,033,033,033,032,032,031,031,031,030,030,030
!BYTE 029,029,029,028,028,028,027,027,027,026,026,026,025,025,025,025
!BYTE 024,024,024,023,023,023,022,022,022,021,021,021,021,020,020,020
!BYTE 019,019,019,019,018,018,018,018,017,017,017,017,016,016,016,016
!BYTE 015,015,015,015,014,014,014,014,013,013,013,013,012,012,012,012
!BYTE 012,011,011,011,011,010,010,010,010,010,009,009,009,009,009,009
!BYTE 008,008,008,008,008,007,007,007,007,007,007,006,006,006,006,006
!BYTE 006,005,005,005,005,005,005,005,004,004,004,004,004,004,004,004
!BYTE 003,003,003,003,003,003,003,003,002,002,002,002,002,002,002,002
!BYTE 002,002,001,001,001,001,001,001,001,001,001,001,001,001,001,001
!BYTE 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
!BYTE 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
!BYTE 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
!BYTE 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,001
!BYTE 001,001,001,001,001,001,001,001,001,001,001,001,001,002,002,002
!BYTE 002,002,002,002,002,002,002,003,003,003,003,003,003,003,003,004
!BYTE 004,004,004,004,004,004,004,005,005,005,005,005,005,005,006,006
!BYTE 006,006,006,006,007,007,007,007,007,007,008,008,008,008,008,009
!BYTE 009,009,009,009,009,010,010,010,010,010,011,011,011,011,012,012
!BYTE 012,012,012,013,013,013,013,014,014,014,014,015,015,015,015,016
!BYTE 016,016,016,017,017,017,017,018,018,018,018,019,019,019,019,020
!BYTE 020,020,021,021,021,021,022,022,022,023,023,023,024,024,024,025
!BYTE 025,025,025,026,026,026,027,027,027,028,028,028,029,029,029,030
!BYTE 030,030,031,031,031,032,032,033,033,033,034,034,034,035,035,036
!BYTE 036,036,037,037,037,038,038,039,039,039,040,040,041,041,041,042
!BYTE 042,043,043,043,044,044,045,045,045,046,046,047,047,048,048,049
!BYTE 049,049,050,050,051,051,052,052,053,053,053,054,054,055,055,056
!BYTE 056,057,057,058,058,059,059,060,060,061,061,062,062,063,063,064


!ALIGN 255,0
SCR_TAB3:
!BYTE $00,$00,$00,$00,$08,$08,$08,$08
!BYTE $10,$10,$10,$10,$18,$18,$18,$18
!BYTE $20,$20,$20,$20,$28,$28,$28,$28
!BYTE $30,$30,$30,$30,$38,$38,$38,$38
!BYTE $40,$40,$40,$40,$48,$48,$48,$48
!BYTE $50,$50,$50,$50,$58,$58,$58,$58
!BYTE $60,$60,$60,$60,$68,$68,$68,$68
!BYTE $70,$70,$70,$70,$78,$78,$78,$78
!BYTE $80,$80,$80,$80,$88,$88,$88,$88
!BYTE $90,$90,$90,$90,$98,$98,$98,$98
!BYTE $A0,$A0,$A0,$A0,$A8,$A8,$A8,$A8
!BYTE $B0,$B0,$B0,$B0,$B8,$B8,$B8,$B8
!BYTE $C0,$C0,$C0,$C0,$C8,$C8,$C8,$C8
!BYTE $D0,$D0,$D0,$D0,$D8,$D8,$D8,$D8
!BYTE $E0,$E0,$E0,$E0,$E8,$E8,$E8,$E8
!BYTE $F0,$F0,$F0,$F0,$F8,$F8,$F8,$F8
!BYTE $00,$00,$00,$00,$08,$08,$08,$08
!BYTE $10,$10,$10,$10,$18,$18,$18,$18
!BYTE $20,$20,$20,$20,$28,$28,$28,$28
!BYTE $30,$30,$30,$30,$38,$38,$38,$38
!BYTE $40,$40,$40,$40,$48,$48,$48,$48
!BYTE $50,$50,$50,$50,$58,$58,$58,$58
!BYTE $60,$60,$60,$60,$68,$68,$68,$68
!BYTE $70,$70,$70,$70,$78,$78,$78,$78
!BYTE $80,$80,$80,$80,$88,$88,$88,$88
!BYTE $90,$90,$90,$90,$98,$98,$98,$98
!BYTE $A0,$A0,$A0,$A0,$A8,$A8,$A8,$A8
!BYTE $B0,$B0,$B0,$B0,$B8,$B8,$B8,$B8
!BYTE $C0,$C0,$C0,$C0,$C8,$C8,$C8,$C8
!BYTE $D0,$D0,$D0,$D0,$D8,$D8,$D8,$D8
!BYTE $E0,$E0,$E0,$E0,$E8,$E8,$E8,$E8
!BYTE $F0,$F0,$F0,$F0,$F8,$F8,$F8,$F8

!ALIGN 255,0
SCR_AND_TAB:
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

!ALIGN 255,0
SCR_OR_TAB:
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03

!ALIGN 255,0
SCR_TAB_BANK_1_HI:
!BYTE >($4000+(00*320)+0),>($4000+(00*320)+1),>($4000+(00*320)+2),>($4000+(00*320)+3),>($4000+(00*320)+4),>($4000+(00*320)+5),>($4000+(00*320)+6),>($4000+(00*320)+7)
!BYTE >($4000+(01*320)+0),>($4000+(01*320)+1),>($4000+(01*320)+2),>($4000+(01*320)+3),>($4000+(01*320)+4),>($4000+(01*320)+5),>($4000+(01*320)+6),>($4000+(01*320)+7)
!BYTE >($4000+(02*320)+0),>($4000+(02*320)+1),>($4000+(02*320)+2),>($4000+(02*320)+3),>($4000+(02*320)+4),>($4000+(02*320)+5),>($4000+(02*320)+6),>($4000+(02*320)+7)
!BYTE >($4000+(03*320)+0),>($4000+(03*320)+1),>($4000+(03*320)+2),>($4000+(03*320)+3),>($4000+(03*320)+4),>($4000+(03*320)+5),>($4000+(03*320)+6),>($4000+(03*320)+7)
!BYTE >($4000+(04*320)+0),>($4000+(04*320)+1),>($4000+(04*320)+2),>($4000+(04*320)+3),>($4000+(04*320)+4),>($4000+(04*320)+5),>($4000+(04*320)+6),>($4000+(04*320)+7)
!BYTE >($4000+(05*320)+0),>($4000+(05*320)+1),>($4000+(05*320)+2),>($4000+(05*320)+3),>($4000+(05*320)+4),>($4000+(05*320)+5),>($4000+(05*320)+6),>($4000+(05*320)+7)
!BYTE >($4000+(06*320)+0),>($4000+(06*320)+1),>($4000+(06*320)+2),>($4000+(06*320)+3),>($4000+(06*320)+4),>($4000+(06*320)+5),>($4000+(06*320)+6),>($4000+(06*320)+7)
!BYTE >($4000+(07*320)+0),>($4000+(07*320)+1),>($4000+(07*320)+2),>($4000+(07*320)+3),>($4000+(07*320)+4),>($4000+(07*320)+5),>($4000+(07*320)+6),>($4000+(07*320)+7)
!BYTE >($4000+(08*320)+0),>($4000+(08*320)+1),>($4000+(08*320)+2),>($4000+(08*320)+3),>($4000+(08*320)+4),>($4000+(08*320)+5),>($4000+(08*320)+6),>($4000+(08*320)+7)
!BYTE >($4000+(09*320)+0),>($4000+(09*320)+1),>($4000+(09*320)+2),>($4000+(09*320)+3),>($4000+(09*320)+4),>($4000+(09*320)+5),>($4000+(09*320)+6),>($4000+(09*320)+7)
!BYTE >($4000+(10*320)+0),>($4000+(10*320)+1),>($4000+(10*320)+2),>($4000+(10*320)+3),>($4000+(10*320)+4),>($4000+(10*320)+5),>($4000+(10*320)+6),>($4000+(10*320)+7)
!BYTE >($4000+(11*320)+0),>($4000+(11*320)+1),>($4000+(11*320)+2),>($4000+(11*320)+3),>($4000+(11*320)+4),>($4000+(11*320)+5),>($4000+(11*320)+6),>($4000+(11*320)+7)
!BYTE >($4000+(12*320)+0),>($4000+(12*320)+1),>($4000+(12*320)+2),>($4000+(12*320)+3),>($4000+(12*320)+4),>($4000+(12*320)+5),>($4000+(12*320)+6),>($4000+(12*320)+7)
!BYTE >($4000+(13*320)+0),>($4000+(13*320)+1),>($4000+(13*320)+2),>($4000+(13*320)+3),>($4000+(13*320)+4),>($4000+(13*320)+5),>($4000+(13*320)+6),>($4000+(13*320)+7)
!BYTE >($4000+(14*320)+0),>($4000+(14*320)+1),>($4000+(14*320)+2),>($4000+(14*320)+3),>($4000+(14*320)+4),>($4000+(14*320)+5),>($4000+(14*320)+6),>($4000+(14*320)+7)
!BYTE >($4000+(15*320)+0),>($4000+(15*320)+1),>($4000+(15*320)+2),>($4000+(15*320)+3),>($4000+(15*320)+4),>($4000+(15*320)+5),>($4000+(15*320)+6),>($4000+(15*320)+7)
!BYTE >($4000+(16*320)+0),>($4000+(16*320)+1),>($4000+(16*320)+2),>($4000+(16*320)+3),>($4000+(16*320)+4),>($4000+(16*320)+5),>($4000+(16*320)+6),>($4000+(16*320)+7)
!BYTE >($4000+(17*320)+0),>($4000+(17*320)+1),>($4000+(17*320)+2),>($4000+(17*320)+3),>($4000+(17*320)+4),>($4000+(17*320)+5),>($4000+(17*320)+6),>($4000+(17*320)+7)
!BYTE >($4000+(18*320)+0),>($4000+(18*320)+1),>($4000+(18*320)+2),>($4000+(18*320)+3),>($4000+(18*320)+4),>($4000+(18*320)+5),>($4000+(18*320)+6),>($4000+(18*320)+7)
!BYTE >($4000+(19*320)+0),>($4000+(19*320)+1),>($4000+(19*320)+2),>($4000+(19*320)+3),>($4000+(19*320)+4),>($4000+(19*320)+5),>($4000+(19*320)+6),>($4000+(19*320)+7)
!BYTE >($4000+(20*320)+0),>($4000+(20*320)+1),>($4000+(20*320)+2),>($4000+(20*320)+3),>($4000+(20*320)+4),>($4000+(20*320)+5),>($4000+(20*320)+6),>($4000+(20*320)+7)
!BYTE >($4000+(21*320)+0),>($4000+(21*320)+1),>($4000+(21*320)+2),>($4000+(21*320)+3),>($4000+(21*320)+4),>($4000+(21*320)+5),>($4000+(21*320)+6),>($4000+(21*320)+7)
!BYTE >($4000+(22*320)+0),>($4000+(22*320)+1),>($4000+(22*320)+2),>($4000+(22*320)+3),>($4000+(22*320)+4),>($4000+(22*320)+5),>($4000+(22*320)+6),>($4000+(22*320)+7)
!BYTE >($4000+(23*320)+0),>($4000+(23*320)+1),>($4000+(23*320)+2),>($4000+(23*320)+3),>($4000+(23*320)+4),>($4000+(23*320)+5),>($4000+(23*320)+6),>($4000+(23*320)+7)
!BYTE >($4000+(24*320)+0),>($4000+(24*320)+1),>($4000+(24*320)+2),>($4000+(24*320)+3),>($4000+(24*320)+4),>($4000+(24*320)+5),>($4000+(24*320)+6),>($4000+(24*320)+7)
!BYTE >($4000+(25*320)+0),>($4000+(25*320)+1),>($4000+(25*320)+2),>($4000+(25*320)+3),>($4000+(25*320)+4),>($4000+(25*320)+5),>($4000+(25*320)+6),>($4000+(25*320)+7)

!ALIGN 255,0
SCR_TAB_BANK_1_LO:
!BYTE <($4000+(00*320)+0),<($4000+(00*320)+1),<($4000+(00*320)+2),<($4000+(00*320)+3),<($4000+(00*320)+4),<($4000+(00*320)+5),<($4000+(00*320)+6),<($4000+(00*320)+7)
!BYTE <($4000+(01*320)+0),<($4000+(01*320)+1),<($4000+(01*320)+2),<($4000+(01*320)+3),<($4000+(01*320)+4),<($4000+(01*320)+5),<($4000+(01*320)+6),<($4000+(01*320)+7)
!BYTE <($4000+(02*320)+0),<($4000+(02*320)+1),<($4000+(02*320)+2),<($4000+(02*320)+3),<($4000+(02*320)+4),<($4000+(02*320)+5),<($4000+(02*320)+6),<($4000+(02*320)+7)
!BYTE <($4000+(03*320)+0),<($4000+(03*320)+1),<($4000+(03*320)+2),<($4000+(03*320)+3),<($4000+(03*320)+4),<($4000+(03*320)+5),<($4000+(03*320)+6),<($4000+(03*320)+7)
!BYTE <($4000+(04*320)+0),<($4000+(04*320)+1),<($4000+(04*320)+2),<($4000+(04*320)+3),<($4000+(04*320)+4),<($4000+(04*320)+5),<($4000+(04*320)+6),<($4000+(04*320)+7)
!BYTE <($4000+(05*320)+0),<($4000+(05*320)+1),<($4000+(05*320)+2),<($4000+(05*320)+3),<($4000+(05*320)+4),<($4000+(05*320)+5),<($4000+(05*320)+6),<($4000+(05*320)+7)
!BYTE <($4000+(06*320)+0),<($4000+(06*320)+1),<($4000+(06*320)+2),<($4000+(06*320)+3),<($4000+(06*320)+4),<($4000+(06*320)+5),<($4000+(06*320)+6),<($4000+(06*320)+7)
!BYTE <($4000+(07*320)+0),<($4000+(07*320)+1),<($4000+(07*320)+2),<($4000+(07*320)+3),<($4000+(07*320)+4),<($4000+(07*320)+5),<($4000+(07*320)+6),<($4000+(07*320)+7)
!BYTE <($4000+(08*320)+0),<($4000+(08*320)+1),<($4000+(08*320)+2),<($4000+(08*320)+3),<($4000+(08*320)+4),<($4000+(08*320)+5),<($4000+(08*320)+6),<($4000+(08*320)+7)
!BYTE <($4000+(09*320)+0),<($4000+(09*320)+1),<($4000+(09*320)+2),<($4000+(09*320)+3),<($4000+(09*320)+4),<($4000+(09*320)+5),<($4000+(09*320)+6),<($4000+(09*320)+7)
!BYTE <($4000+(10*320)+0),<($4000+(10*320)+1),<($4000+(10*320)+2),<($4000+(10*320)+3),<($4000+(10*320)+4),<($4000+(10*320)+5),<($4000+(10*320)+6),<($4000+(10*320)+7)
!BYTE <($4000+(11*320)+0),<($4000+(11*320)+1),<($4000+(11*320)+2),<($4000+(11*320)+3),<($4000+(11*320)+4),<($4000+(11*320)+5),<($4000+(11*320)+6),<($4000+(11*320)+7)
!BYTE <($4000+(12*320)+0),<($4000+(12*320)+1),<($4000+(12*320)+2),<($4000+(12*320)+3),<($4000+(12*320)+4),<($4000+(12*320)+5),<($4000+(12*320)+6),<($4000+(12*320)+7)
!BYTE <($4000+(13*320)+0),<($4000+(13*320)+1),<($4000+(13*320)+2),<($4000+(13*320)+3),<($4000+(13*320)+4),<($4000+(13*320)+5),<($4000+(13*320)+6),<($4000+(13*320)+7)
!BYTE <($4000+(14*320)+0),<($4000+(14*320)+1),<($4000+(14*320)+2),<($4000+(14*320)+3),<($4000+(14*320)+4),<($4000+(14*320)+5),<($4000+(14*320)+6),<($4000+(14*320)+7)
!BYTE <($4000+(15*320)+0),<($4000+(15*320)+1),<($4000+(15*320)+2),<($4000+(15*320)+3),<($4000+(15*320)+4),<($4000+(15*320)+5),<($4000+(15*320)+6),<($4000+(15*320)+7)
!BYTE <($4000+(16*320)+0),<($4000+(16*320)+1),<($4000+(16*320)+2),<($4000+(16*320)+3),<($4000+(16*320)+4),<($4000+(16*320)+5),<($4000+(16*320)+6),<($4000+(16*320)+7)
!BYTE <($4000+(17*320)+0),<($4000+(17*320)+1),<($4000+(17*320)+2),<($4000+(17*320)+3),<($4000+(17*320)+4),<($4000+(17*320)+5),<($4000+(17*320)+6),<($4000+(17*320)+7)
!BYTE <($4000+(18*320)+0),<($4000+(18*320)+1),<($4000+(18*320)+2),<($4000+(18*320)+3),<($4000+(18*320)+4),<($4000+(18*320)+5),<($4000+(18*320)+6),<($4000+(18*320)+7)
!BYTE <($4000+(19*320)+0),<($4000+(19*320)+1),<($4000+(19*320)+2),<($4000+(19*320)+3),<($4000+(19*320)+4),<($4000+(19*320)+5),<($4000+(19*320)+6),<($4000+(19*320)+7)
!BYTE <($4000+(20*320)+0),<($4000+(20*320)+1),<($4000+(20*320)+2),<($4000+(20*320)+3),<($4000+(20*320)+4),<($4000+(20*320)+5),<($4000+(20*320)+6),<($4000+(20*320)+7)
!BYTE <($4000+(21*320)+0),<($4000+(21*320)+1),<($4000+(21*320)+2),<($4000+(21*320)+3),<($4000+(21*320)+4),<($4000+(21*320)+5),<($4000+(21*320)+6),<($4000+(21*320)+7)
!BYTE <($4000+(22*320)+0),<($4000+(22*320)+1),<($4000+(22*320)+2),<($4000+(22*320)+3),<($4000+(22*320)+4),<($4000+(22*320)+5),<($4000+(22*320)+6),<($4000+(22*320)+7)
!BYTE <($4000+(23*320)+0),<($4000+(23*320)+1),<($4000+(23*320)+2),<($4000+(23*320)+3),<($4000+(23*320)+4),<($4000+(23*320)+5),<($4000+(23*320)+6),<($4000+(23*320)+7)
!BYTE <($4000+(24*320)+0),<($4000+(24*320)+1),<($4000+(24*320)+2),<($4000+(24*320)+3),<($4000+(24*320)+4),<($4000+(24*320)+5),<($4000+(24*320)+6),<($4000+(24*320)+7)
!BYTE <($4000+(25*320)+0),<($4000+(25*320)+1),<($4000+(25*320)+2),<($4000+(25*320)+3),<($4000+(25*320)+4),<($4000+(25*320)+5),<($4000+(25*320)+6),<($4000+(25*320)+7)

!ALIGN 255,0
SCR_TAB_BANK_2_HI:
!BYTE >($6000+(00*320)+0),>($6000+(00*320)+1),>($6000+(00*320)+2),>($6000+(00*320)+3),>($6000+(00*320)+4),>($6000+(00*320)+5),>($6000+(00*320)+6),>($6000+(00*320)+7)
!BYTE >($6000+(01*320)+0),>($6000+(01*320)+1),>($6000+(01*320)+2),>($6000+(01*320)+3),>($6000+(01*320)+4),>($6000+(01*320)+5),>($6000+(01*320)+6),>($6000+(01*320)+7)
!BYTE >($6000+(02*320)+0),>($6000+(02*320)+1),>($6000+(02*320)+2),>($6000+(02*320)+3),>($6000+(02*320)+4),>($6000+(02*320)+5),>($6000+(02*320)+6),>($6000+(02*320)+7)
!BYTE >($6000+(03*320)+0),>($6000+(03*320)+1),>($6000+(03*320)+2),>($6000+(03*320)+3),>($6000+(03*320)+4),>($6000+(03*320)+5),>($6000+(03*320)+6),>($6000+(03*320)+7)
!BYTE >($6000+(04*320)+0),>($6000+(04*320)+1),>($6000+(04*320)+2),>($6000+(04*320)+3),>($6000+(04*320)+4),>($6000+(04*320)+5),>($6000+(04*320)+6),>($6000+(04*320)+7)
!BYTE >($6000+(05*320)+0),>($6000+(05*320)+1),>($6000+(05*320)+2),>($6000+(05*320)+3),>($6000+(05*320)+4),>($6000+(05*320)+5),>($6000+(05*320)+6),>($6000+(05*320)+7)
!BYTE >($6000+(06*320)+0),>($6000+(06*320)+1),>($6000+(06*320)+2),>($6000+(06*320)+3),>($6000+(06*320)+4),>($6000+(06*320)+5),>($6000+(06*320)+6),>($6000+(06*320)+7)
!BYTE >($6000+(07*320)+0),>($6000+(07*320)+1),>($6000+(07*320)+2),>($6000+(07*320)+3),>($6000+(07*320)+4),>($6000+(07*320)+5),>($6000+(07*320)+6),>($6000+(07*320)+7)
!BYTE >($6000+(08*320)+0),>($6000+(08*320)+1),>($6000+(08*320)+2),>($6000+(08*320)+3),>($6000+(08*320)+4),>($6000+(08*320)+5),>($6000+(08*320)+6),>($6000+(08*320)+7)
!BYTE >($6000+(09*320)+0),>($6000+(09*320)+1),>($6000+(09*320)+2),>($6000+(09*320)+3),>($6000+(09*320)+4),>($6000+(09*320)+5),>($6000+(09*320)+6),>($6000+(09*320)+7)
!BYTE >($6000+(10*320)+0),>($6000+(10*320)+1),>($6000+(10*320)+2),>($6000+(10*320)+3),>($6000+(10*320)+4),>($6000+(10*320)+5),>($6000+(10*320)+6),>($6000+(10*320)+7)
!BYTE >($6000+(11*320)+0),>($6000+(11*320)+1),>($6000+(11*320)+2),>($6000+(11*320)+3),>($6000+(11*320)+4),>($6000+(11*320)+5),>($6000+(11*320)+6),>($6000+(11*320)+7)
!BYTE >($6000+(12*320)+0),>($6000+(12*320)+1),>($6000+(12*320)+2),>($6000+(12*320)+3),>($6000+(12*320)+4),>($6000+(12*320)+5),>($6000+(12*320)+6),>($6000+(12*320)+7)
!BYTE >($6000+(13*320)+0),>($6000+(13*320)+1),>($6000+(13*320)+2),>($6000+(13*320)+3),>($6000+(13*320)+4),>($6000+(13*320)+5),>($6000+(13*320)+6),>($6000+(13*320)+7)
!BYTE >($6000+(14*320)+0),>($6000+(14*320)+1),>($6000+(14*320)+2),>($6000+(14*320)+3),>($6000+(14*320)+4),>($6000+(14*320)+5),>($6000+(14*320)+6),>($6000+(14*320)+7)
!BYTE >($6000+(15*320)+0),>($6000+(15*320)+1),>($6000+(15*320)+2),>($6000+(15*320)+3),>($6000+(15*320)+4),>($6000+(15*320)+5),>($6000+(15*320)+6),>($6000+(15*320)+7)
!BYTE >($6000+(16*320)+0),>($6000+(16*320)+1),>($6000+(16*320)+2),>($6000+(16*320)+3),>($6000+(16*320)+4),>($6000+(16*320)+5),>($6000+(16*320)+6),>($6000+(16*320)+7)
!BYTE >($6000+(17*320)+0),>($6000+(17*320)+1),>($6000+(17*320)+2),>($6000+(17*320)+3),>($6000+(17*320)+4),>($6000+(17*320)+5),>($6000+(17*320)+6),>($6000+(17*320)+7)
!BYTE >($6000+(18*320)+0),>($6000+(18*320)+1),>($6000+(18*320)+2),>($6000+(18*320)+3),>($6000+(18*320)+4),>($6000+(18*320)+5),>($6000+(18*320)+6),>($6000+(18*320)+7)
!BYTE >($6000+(19*320)+0),>($6000+(19*320)+1),>($6000+(19*320)+2),>($6000+(19*320)+3),>($6000+(19*320)+4),>($6000+(19*320)+5),>($6000+(19*320)+6),>($6000+(19*320)+7)
!BYTE >($6000+(20*320)+0),>($6000+(20*320)+1),>($6000+(20*320)+2),>($6000+(20*320)+3),>($6000+(20*320)+4),>($6000+(20*320)+5),>($6000+(20*320)+6),>($6000+(20*320)+7)
!BYTE >($6000+(21*320)+0),>($6000+(21*320)+1),>($6000+(21*320)+2),>($6000+(21*320)+3),>($6000+(21*320)+4),>($6000+(21*320)+5),>($6000+(21*320)+6),>($6000+(21*320)+7)
!BYTE >($6000+(22*320)+0),>($6000+(22*320)+1),>($6000+(22*320)+2),>($6000+(22*320)+3),>($6000+(22*320)+4),>($6000+(22*320)+5),>($6000+(22*320)+6),>($6000+(22*320)+7)
!BYTE >($6000+(23*320)+0),>($6000+(23*320)+1),>($6000+(23*320)+2),>($6000+(23*320)+3),>($6000+(23*320)+4),>($6000+(23*320)+5),>($6000+(23*320)+6),>($6000+(23*320)+7)
!BYTE >($6000+(24*320)+0),>($6000+(24*320)+1),>($6000+(24*320)+2),>($6000+(24*320)+3),>($6000+(24*320)+4),>($6000+(24*320)+5),>($6000+(24*320)+6),>($6000+(24*320)+7)
!BYTE >($6000+(25*320)+0),>($6000+(25*320)+1),>($6000+(25*320)+2),>($6000+(25*320)+3),>($6000+(25*320)+4),>($6000+(25*320)+5),>($6000+(25*320)+6),>($6000+(25*320)+7)

!ALIGN 255,0
SCR_TAB_BANK_2_LO:
!BYTE <($6000+(00*320)+0),<($6000+(00*320)+1),<($6000+(00*320)+2),<($6000+(00*320)+3),<($6000+(00*320)+4),<($6000+(00*320)+5),<($6000+(00*320)+6),<($6000+(00*320)+7)
!BYTE <($6000+(01*320)+0),<($6000+(01*320)+1),<($6000+(01*320)+2),<($6000+(01*320)+3),<($6000+(01*320)+4),<($6000+(01*320)+5),<($6000+(01*320)+6),<($6000+(01*320)+7)
!BYTE <($6000+(02*320)+0),<($6000+(02*320)+1),<($6000+(02*320)+2),<($6000+(02*320)+3),<($6000+(02*320)+4),<($6000+(02*320)+5),<($6000+(02*320)+6),<($6000+(02*320)+7)
!BYTE <($6000+(03*320)+0),<($6000+(03*320)+1),<($6000+(03*320)+2),<($6000+(03*320)+3),<($6000+(03*320)+4),<($6000+(03*320)+5),<($6000+(03*320)+6),<($6000+(03*320)+7)
!BYTE <($6000+(04*320)+0),<($6000+(04*320)+1),<($6000+(04*320)+2),<($6000+(04*320)+3),<($6000+(04*320)+4),<($6000+(04*320)+5),<($6000+(04*320)+6),<($6000+(04*320)+7)
!BYTE <($6000+(05*320)+0),<($6000+(05*320)+1),<($6000+(05*320)+2),<($6000+(05*320)+3),<($6000+(05*320)+4),<($6000+(05*320)+5),<($6000+(05*320)+6),<($6000+(05*320)+7)
!BYTE <($6000+(06*320)+0),<($6000+(06*320)+1),<($6000+(06*320)+2),<($6000+(06*320)+3),<($6000+(06*320)+4),<($6000+(06*320)+5),<($6000+(06*320)+6),<($6000+(06*320)+7)
!BYTE <($6000+(07*320)+0),<($6000+(07*320)+1),<($6000+(07*320)+2),<($6000+(07*320)+3),<($6000+(07*320)+4),<($6000+(07*320)+5),<($6000+(07*320)+6),<($6000+(07*320)+7)
!BYTE <($6000+(08*320)+0),<($6000+(08*320)+1),<($6000+(08*320)+2),<($6000+(08*320)+3),<($6000+(08*320)+4),<($6000+(08*320)+5),<($6000+(08*320)+6),<($6000+(08*320)+7)
!BYTE <($6000+(09*320)+0),<($6000+(09*320)+1),<($6000+(09*320)+2),<($6000+(09*320)+3),<($6000+(09*320)+4),<($6000+(09*320)+5),<($6000+(09*320)+6),<($6000+(09*320)+7)
!BYTE <($6000+(10*320)+0),<($6000+(10*320)+1),<($6000+(10*320)+2),<($6000+(10*320)+3),<($6000+(10*320)+4),<($6000+(10*320)+5),<($6000+(10*320)+6),<($6000+(10*320)+7)
!BYTE <($6000+(11*320)+0),<($6000+(11*320)+1),<($6000+(11*320)+2),<($6000+(11*320)+3),<($6000+(11*320)+4),<($6000+(11*320)+5),<($6000+(11*320)+6),<($6000+(11*320)+7)
!BYTE <($6000+(12*320)+0),<($6000+(12*320)+1),<($6000+(12*320)+2),<($6000+(12*320)+3),<($6000+(12*320)+4),<($6000+(12*320)+5),<($6000+(12*320)+6),<($6000+(12*320)+7)
!BYTE <($6000+(13*320)+0),<($6000+(13*320)+1),<($6000+(13*320)+2),<($6000+(13*320)+3),<($6000+(13*320)+4),<($6000+(13*320)+5),<($6000+(13*320)+6),<($6000+(13*320)+7)
!BYTE <($6000+(14*320)+0),<($6000+(14*320)+1),<($6000+(14*320)+2),<($6000+(14*320)+3),<($6000+(14*320)+4),<($6000+(14*320)+5),<($6000+(14*320)+6),<($6000+(14*320)+7)
!BYTE <($6000+(15*320)+0),<($6000+(15*320)+1),<($6000+(15*320)+2),<($6000+(15*320)+3),<($6000+(15*320)+4),<($6000+(15*320)+5),<($6000+(15*320)+6),<($6000+(15*320)+7)
!BYTE <($6000+(16*320)+0),<($6000+(16*320)+1),<($6000+(16*320)+2),<($6000+(16*320)+3),<($6000+(16*320)+4),<($6000+(16*320)+5),<($6000+(16*320)+6),<($6000+(16*320)+7)
!BYTE <($6000+(17*320)+0),<($6000+(17*320)+1),<($6000+(17*320)+2),<($6000+(17*320)+3),<($6000+(17*320)+4),<($6000+(17*320)+5),<($6000+(17*320)+6),<($6000+(17*320)+7)
!BYTE <($6000+(18*320)+0),<($6000+(18*320)+1),<($6000+(18*320)+2),<($6000+(18*320)+3),<($6000+(18*320)+4),<($6000+(18*320)+5),<($6000+(18*320)+6),<($6000+(18*320)+7)
!BYTE <($6000+(19*320)+0),<($6000+(19*320)+1),<($6000+(19*320)+2),<($6000+(19*320)+3),<($6000+(19*320)+4),<($6000+(19*320)+5),<($6000+(19*320)+6),<($6000+(19*320)+7)
!BYTE <($6000+(20*320)+0),<($6000+(20*320)+1),<($6000+(20*320)+2),<($6000+(20*320)+3),<($6000+(20*320)+4),<($6000+(20*320)+5),<($6000+(20*320)+6),<($6000+(20*320)+7)
!BYTE <($6000+(21*320)+0),<($6000+(21*320)+1),<($6000+(21*320)+2),<($6000+(21*320)+3),<($6000+(21*320)+4),<($6000+(21*320)+5),<($6000+(21*320)+6),<($6000+(21*320)+7)
!BYTE <($6000+(22*320)+0),<($6000+(22*320)+1),<($6000+(22*320)+2),<($6000+(22*320)+3),<($6000+(22*320)+4),<($6000+(22*320)+5),<($6000+(22*320)+6),<($6000+(22*320)+7)
!BYTE <($6000+(23*320)+0),<($6000+(23*320)+1),<($6000+(23*320)+2),<($6000+(23*320)+3),<($6000+(23*320)+4),<($6000+(23*320)+5),<($6000+(23*320)+6),<($6000+(23*320)+7)
!BYTE <($6000+(24*320)+0),<($6000+(24*320)+1),<($6000+(24*320)+2),<($6000+(24*320)+3),<($6000+(24*320)+4),<($6000+(24*320)+5),<($6000+(24*320)+6),<($6000+(24*320)+7)
!BYTE <($6000+(25*320)+0),<($6000+(25*320)+1),<($6000+(25*320)+2),<($6000+(25*320)+3),<($6000+(25*320)+4),<($6000+(25*320)+5),<($6000+(25*320)+6),<($6000+(25*320)+7)

CLEAR_TAB:
!BYTE 00*8,01*8,02*8,03*8,04*8,05*8,06*8,07*8,08*8,09*8,10*8,11*8,12*8,13*8,14*8,15*8,16*8,17*8,18*8,19*8,20*8,21*8,22*8,23*8,24*8,25*8,26*8,27*8,28*8,29*8,30*8,31*8


!ALIGN 255,0
SINTAB:
 !BYTE 0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 34, 37, 40, 42, 45, 48, 51, 54, 57, 60, 62, 65, 68, 70, 73, 75, 78, 80, 83, 85, 87
 !BYTE 90, 92, 94, 96, 98, 100, 102, 104, 105, 107, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 124, 125, 125, 126, 126, 126, 126, 126
 !BYTE 126, 126, 126, 126, 126, 125, 125, 124, 124, 123, 122, 122, 121, 120, 119, 118, 116, 115, 114, 112, 111, 109, 108, 106, 104, 103, 101, 99, 97, 95, 93, 91
 !BYTE 88, 86, 84, 81, 79, 77, 74, 71, 69, 66, 64, 61, 58, 55, 52, 50, 47, 44, 41, 38, 35, 32, 29, 26, 23, 20, 17, 13, 10, 7, 4, 1
 !BYTE -1, -4, -7, -11, -14, -17, -20, -23, -26, -29, -32, -35, -38, -41, -44, -47, -50, -53, -56, -58, -61, -64, -67, -69, -72, -74, -77, -79, -82, -84, -86, -89
 !BYTE -91, -93, -95, -97, -99, -101, -103, -105, -106, -108, -110, -111, -113, -114, -115, -117, -118, -119, -120, -121, -122, -123, -123, -124, -125, -125, -125, -126, -126, -126, -126, -126
 !BYTE -126, -126, -126, -126, -126, -125, -125, -124, -124, -123, -122, -121, -120, -119, -118, -117, -116, -114, -113, -112, -110, -109, -107, -105, -103, -102, -100, -98, -96, -94, -92, -89
 !BYTE -87, -85, -83, -80, -78, -75, -73, -70, -67, -65, -62, -59, -57, -54, -51, -48, -45, -42, -39, -36, -33, -30, -27, -24, -21, -18, -15, -12, -9, -5, -2, 0
 
!ALIGN 255,0
COSTAB:
 !BYTE 127, 126, 126, 126, 126, 126, 125, 125, 124, 123, 123, 122, 121, 120, 119, 118, 117, 116, 114, 113, 111, 110, 108, 107, 105, 103, 101, 99, 97, 95, 93, 91
 !BYTE 89, 87, 84, 82, 80, 77, 75, 72, 70, 67, 64, 62, 59, 56, 53, 50, 48, 45, 42, 39, 36, 33, 30, 27, 24, 20, 17, 14, 11, 8, 5, 2
 !BYTE 0, -3, -7 , -10, -13, -16, -19, -22, -25, -28, -31, -34, -37, -40, -43, -46, -49, -52, -55, -58, -60, -63, -66, -68, -71, -74, -76, -79, -81, -83, -86, -88
 !BYTE -90, -92, -94, -97, -99, -100, -102, -104, -106, -108, -109, -111, -112, -114, -115, -116, -117, -119, -120, -121, -121, -122, -123, -124, -124, -125, -125, -126, -126, -126, -126, -126
 !BYTE -126, -126, -126, -126, -126, -125, -125, -124, -124, -123, -122, -121, -120, -119, -118, -117, -116, -115, -113, -112, -111, -109, -107, -106, -104, -102, -100, -98, -96, -94, -92, -90
 !BYTE -88, -85, -83, -81, -78, -76, -73, -71, -68, -66, -63, -60, -57, -55, -52, -49, -46, -43, -40, -37, -34, -31, -28, -25, -22, -19, -16, -13, -9, -6, -3, 0
 !BYTE 2, 5, 8, 11, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 56, 59, 62, 65, 67, 70, 72, 75, 77, 80, 82, 85, 87, 89
 !BYTE 91, 94, 96, 98, 100, 101, 103, 105, 107, 108, 110, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 123, 124, 125, 125, 126, 126, 126, 126, 126, 126

 
 
;SIGN_EXTEND
; ASL       ; sign bit into carry
; LDA #0    ; 
; ADC #$FF  ; C set = $FF + C = $00 / C clear = $FF + C = $ff
; EOR #$FF  ; flip bits to match carry
; RTS
