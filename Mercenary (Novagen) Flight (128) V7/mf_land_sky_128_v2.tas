
OVERFLOW = $E000 ; overflow?

ab01 = $01
SCREEN_POS_LO = $02
SCREEN_POS_HI = $03
ab06 = $06
ab07 = $07
ab08 = $08
ab09 = $09
ab0A = $0A
ab0B = $0B

FP_MULTIPLY_LO = $0E
FP_MULTIPLY_HI = $0F
FP_DIVIDE_LO = FP_MULTIPLY_LO
FP_DIVIDE_HI = FP_MULTIPLY_HI

PITCH_SIN_DIV_COS_X128_LO = $16
PITCH_SIN_DIV_COS_X128_HI = $17
ab18 = $18
SCREEN_LINE = $1A
ab22 = $22
ab23 = $23
SCREEN_FLIP = $24
SCREEN_BANK = $25
ab26 = $26
ab27 = $27
ROLL_LO = $28
ROLL_HI = $29 
PITCH_LO = $2A
PITCH_HI = $2B
YAW_LO = $2C
YAW_HI = $2D
ROLL_SIN_FP_LO = $2E
ROLL_SIN_FP_HI = $2F
ROLL_COS_FP_LO = $30
ROLL_COS_FP_HI = $31
ROLL_SIN_DIV_COS_LO = $32
ROLL_SIN_DIV_COS_HI = $33
ROLL_COS_DIV_SIN_LO = $34
ROLL_COS_DIV_SIN_HI = $35
PITCH_SIN_FP_LO = $36
PITCH_SIN_FP_HI = $37
PITCH_COS_FP_LO = $38
PITCH_COS_FP_HI = $39
PITCH_SIN_DIV_COS_LO = $3A
PITCH_SIN_DIV_COS_HI = $3B
YAW_SIN_FP_LO = $3C
YAW_SIN_FP_HI = $3D
YAW_COS_FP_LO = $3E
YAW_COS_FP_HI = $3F
CURR_X_LSB = $72
CURR_X_MSB = $73
CURR_X_HSB = $74
CURR_Y_LSB = $75
CURR_Y_MSB = $76
CURR_Y_HSB = $77
CURR_Z_LSB = $78
CURR_Z_MSB = $79
CURR_Z_HSB = $7A
HORIZON_SLOPE_FRACTION = $7B
HORIZON_SLOPE_WHOLE = $7C
HORIZON_SIGN = $7D
ab7F = $7F
ab80 = $80
SCREEN_TOP_COL = $82
SCREEN_BOT_COL = $83
REGA = $85
REGX = $86
REGY = $87

abBEC0_JOYSTICK = $C1

VIC_SCREEN_BANK = $C7
abEC = $EC
abED = $ED
abFA = $FA

SCREEN_POS_PTR = $02

fFFFE = $FFFE
fFFFF = $FFFF
b29DC = $29dc
HOR_SCREEN_EDGE_FP = $1900 ; $1800 ; $1c00 ; $1904 ; $140c
VER_SCREEN_EDGE_FP = $193c
f0200 = $0200

SCREEN_VER_BOTTOM = $88
SCREEN_VER_HALF = $44

SCREEN_HOR_RIGHT = 128 ; $A0
SCREEN_HOR_HALF = 64 ; $50

HORIZON_SLOPE_FRAC_VAL = ab08
HORIZON_SLOPE_WHOLE_VAL = ab09

	* = $801
	SEI
	CLV
	CLD

 LDA #$00
 STA $D020
 LDA #$01 ; $00
 STA $D021
 LDA #$0B ; $00
 STA $D022
 LDA #$0C ; $00
 STA $D023
 
  LDA #$00 ; $01 ; colour 11 
 LDX #<$D800
 LDY #>$D800
 STX SCREEN_POS_LO+0
 STY SCREEN_POS_LO+1
 LDX #>1000 
 LDY #<1000
 JSR MEMSET

 LDA #$BC ;$65 ; colour 01 (0000????) and colour 10 (????0000) - bank 1
 LDX #<(SCREEN_COLOUR)
 LDY #>(SCREEN_COLOUR)
 STX SCREEN_POS_LO+0
 STY SCREEN_POS_LO+1
 LDX #>1000 
 LDY #<1000
 JSR MEMSET

	LDA #$35
	STA $1
	LDA #$70
	STA $D018
	LDA #$3B
	STA $D011
	LDA #$18
	STA $D016
	LDA #<IRQ1
	STA $FFFE
	LDA #>IRQ1
	STA $FFFF

 ldx #2
zp_loop lda zp,x
		sta 0,x
		inx
		cpx #128
		bne zp_loop

 LDA #$7F
 STA $DC0D  ; disable timer interrupts which can be generated by the two CIA chips
 STA $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

 LDA $DC0D  ; by reading this two registers we negate any pending CIA irqs.
 LDA $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

  LDA #$01   ; this is how to tell the VICII to generate a raster interrupt
 STA $D01A
	
 LDA #2 ; SCRNBANK
 STA $DD00 ; bank
	
	LDA #$BA
	STA $D012
	LDA #$01
	STA $D019
		
	LDA	#0
	STA	SCREEN_FLIP
	
	CLI

MAIN_LOOP
        JSR GET_ROT
        JSR DRAW_SCREEN
        JSR READ_JOYSTICK_KEYBOARD
        JSR MOVMENT

	LDX CURR_X_MSB
	LDA CURR_X_HSB
	LDY	#0
	JSR	HEX16
	LDA CURR_X_LSB
	LDX #32
	LDY	#0
	JSR	HEX8

	LDX CURR_Y_MSB
	LDA CURR_Y_HSB
	LDY	#6
	JSR	HEX16
	LDA CURR_Y_LSB
	LDX #32
	LDY	#6
	JSR	HEX8

	LDX CURR_Z_MSB
	LDA CURR_Z_HSB
	LDY	#12
	JSR	HEX16
	LDA CURR_Z_LSB
	LDX #32
	LDY	#12
	JSR	HEX8

	LDa PITCH_HI
	LDx PITCH_LO
	LDY	#24
	JSR	HEX16

	LDa ROLL_HI
	LDx ROLL_LO
	LDY	#30
	JSR	HEX16

	LDY #>HOR_SCREEN_EDGE_FP
	LDX #<HOR_SCREEN_EDGE_FP
	JSR FPTO16BIT
	TYA
	LDY	#36
	JSR	HEX16

ab90_VAL = $04	; -80
ab91_VAL = $19 	; -80

			LDY	#255-63 ; #64 ; #128 ; LSB
			LDX	#$ff ; 0   ; MSB
			LDA	#$ff ; 0   ; HSB
			JSR	BIT24TOFP
			STY	TEST_HI
			STA	TEST_LO
			LDX	TEST_HI
			LDA TEST_LO
			LDY	#42
			JSR	HEX16

;	LDY #>$140c ; ab90_VAL
;	LDX #<$140c ; ab91_VAL
;	JSR FPTO16BIT
;	TYA
;	LDY	#42
;	JSR	HEX16


;	LDA temp1
;	LDX #0
;	LDY	#36
;	JSR	HEX8

;	LDA temp2
;	LDX #0
;	LDY	#42
;	JSR	HEX8

;	LDA temp3
;	LDX #0
;	LDY	#30
;	JSR	HEX8

;	LDA temp4
;	LDX #16
;	LDY	#30
;	JSR	HEX8
	
        JMP MAIN_LOOP

TEST_HI .byte 0
TEST_LO .byte 0
   
zp
 .byte $2f, $35, $81, $51, $7b, $ad, $01, $00
 .byte $00, $81, $37, $40, $ea, $55, $a0, $40
 .byte $a7, $54, $00, $00, $00, $00, $5d, $10
 .byte $00, $00, $00, $34, $30, $88, $28, $81
 .byte $0a, $18, $4d, $f9, $7e, $40, $76, $84
 .byte $fe, $ff, $35, $02, $3c, $df, $2e, $e5
 .byte $00, $00, $2e, $e5, $b2, $19, $4a, $f9
 .byte $e5, $fd, $5d, $f8, $dd, $fd, $73, $f8
 .byte $71, $f8, $1e, $e5, $dd, $fc, $37, $f9
 .byte $e5, $fd, $bb, $f0, $c4, $fc, $4a, $f9
 .byte $5f, $f9, $00, $49, $03, $58, $47, $49
 .byte $b0, $49, $e5, $59, $6a, $51, $5f, $49
 .byte $84, $fc, $51, $f9, $76, $fc, $80, $06
 .byte $00, $05, $3a, $73, $3b, $71, $80, $00
 .byte $1b, $20, $7d, $71, $0c, $2c, $0e, $00
 .byte $49, $8c, $0d, $40, $36, $00, $00, $00
 .byte $0f, $01, $55, $aa, $00, $0c, $00, $0d
 .byte $1b, $1b, $20, $20, $38, $04, $50, $42
 .byte $40, $19, $3c, $18, $07, $19, $16, $18
 .byte $0b, $a8, $de, $8d, $fd, $44, $fd, $00
 .byte $74, $8f, $18, $01, $06, $05, $0b, $a9
 .byte $00, $01, $40, $18, $10, $49, $00, $3f
 .byte $0f, $00, $08, $00, $3f, $35, $06, $dc
 .byte $04, $02, $03, $f6, $03, $00, $87, $df
 .byte $af, $80, $01, $06, $05, $0b, $00, $78
 .byte $00, $00, $00, $00, $0e, $00, $06, $70
 .byte $08, $00, $08, $40, $07, $83, $fe, $fb
 .byte $93, $ee, $40, $b6, $e3, $fa, $02, $00
 .byte $00, $7d, $14, $59, $2a, $02, $00, $03
 .byte $70, $04, $ff, $00, $00, $84, $ff, $00
 .byte $00, $00, $0c, $f9, $00, $00, $7e, $09
 .byte $00, $00, $00, $00, $a0, $60, $21, $7d

.ALIGN $100
LOG_TABLE
  .BYTE $00,$01,$03,$04,$06,$07,$09,$0A
  .BYTE $0B,$0D,$0E,$10,$11,$12,$14,$15
  .BYTE $16,$18,$19,$1A,$1C,$1D,$1E,$20
  .BYTE $21,$22,$24,$25,$26,$28,$29,$2A
  .BYTE $2C,$2D,$2E,$2F,$31,$32,$33,$34
  .BYTE $36,$37,$38,$39,$3B,$3C,$3D,$3E
  .BYTE $3F,$41,$42,$43,$44,$45,$47,$48
  .BYTE $49,$4A,$4B,$4D,$4E,$4F,$50,$51
  .BYTE $52,$54,$55,$56,$57,$58,$59,$5A
  .BYTE $5C,$5D,$5E,$5F,$60,$61,$62,$63
  .BYTE $64,$66,$67,$68,$69,$6A,$6B,$6C
  .BYTE $6D,$6E,$6F,$70,$71,$72,$74,$75
  .BYTE $76,$77,$78,$79,$7A,$7B,$7C,$7D
  .BYTE $7E,$7F,$80,$81,$82,$83,$84,$85
  .BYTE $86,$87,$88,$89,$8A,$8B,$8C,$8D
  .BYTE $8E,$8F,$90,$91,$92,$93,$94,$95
  .BYTE $96,$97,$98,$99,$9A,$9B,$9B,$9C
  .BYTE $9D,$9E,$9F,$A0,$A1,$A2,$A3,$A4
  .BYTE $A5,$A6,$A7,$A8,$A9,$A9,$AA,$AB
  .BYTE $AC,$AD,$AE,$AF,$B0,$B1,$B2,$B2
  .BYTE $B3,$B4,$B5,$B6,$B7,$B8,$B9,$B9
  .BYTE $BA,$BB,$BC,$BD,$BE,$BF,$C0,$C0
  .BYTE $C1,$C2,$C3,$C4,$C5,$C6,$C6,$C7
  .BYTE $C8,$C9,$CA,$CB,$CB,$CC,$CD,$CE
  .BYTE $CF,$D0,$D0,$D1,$D2,$D3,$D4,$D4
  .BYTE $D5,$D6,$D7,$D8,$D8,$D9,$DA,$DB
  .BYTE $DC,$DC,$DD,$DE,$DF,$E0,$E0,$E1
  .BYTE $E2,$E3,$E4,$E4,$E5,$E6,$E7,$E7
  .BYTE $E8,$E9,$EA,$EA,$EB,$EC,$ED,$EE
  .BYTE $EE,$EF,$F0,$F1,$F1,$F2,$F3,$F4
  .BYTE $F4,$F5,$F6,$F7,$F7,$F8,$F9,$F9
  .BYTE $FA,$FB,$FC,$FC,$FD,$FE,$FF,$FF

EXP_TABLE
  .BYTE $00,$01,$01,$02,$03,$03,$04,$05
  .BYTE $06,$06,$07,$08,$08,$09,$0A,$0B
  .BYTE $0B,$0C,$0D,$0E,$0E,$0F,$10,$10
  .BYTE $11,$12,$13,$13,$14,$15,$16,$16
  .BYTE $17,$18,$19,$19,$1A,$1B,$1C,$1D
  .BYTE $1D,$1E,$1F,$20,$20,$21,$22,$23
  .BYTE $24,$24,$25,$26,$27,$28,$28,$29
  .BYTE $2A,$2B,$2C,$2C,$2D,$2E,$2F,$30
  .BYTE $30,$31,$32,$33,$34,$35,$35,$36
  .BYTE $37,$38,$39,$3A,$3A,$3B,$3C,$3D
  .BYTE $3E,$3F,$40,$41,$41,$42,$43,$44
  .BYTE $45,$46,$47,$48,$48,$49,$4A,$4B
  .BYTE $4C,$4D,$4E,$4F,$50,$51,$51,$52
  .BYTE $53,$54,$55,$56,$57,$58,$59,$5A
  .BYTE $5B,$5C,$5D,$5E,$5E,$5F,$60,$61
  .BYTE $62,$63,$64,$65,$66,$67,$68,$69
  .BYTE $6A,$6B,$6C,$6D,$6E,$6F,$70,$71
  .BYTE $72,$73,$74,$75,$76,$77,$78,$79
  .BYTE $7A,$7B,$7C,$7D,$7E,$7F,$80,$81
  .BYTE $82,$83,$84,$85,$87,$88,$89,$8A
  .BYTE $8B,$8C,$8D,$8E,$8F,$90,$91,$92
  .BYTE $93,$95,$96,$97,$98,$99,$9A,$9B
  .BYTE $9C,$9D,$9F,$A0,$A1,$A2,$A3,$A4
  .BYTE $A5,$A6,$A8,$A9,$AA,$AB,$AC,$AD
  .BYTE $AF,$B0,$B1,$B2,$B3,$B4,$B6,$B7
  .BYTE $B8,$B9,$BA,$BC,$BD,$BE,$BF,$C0
  .BYTE $C2,$C3,$C4,$C5,$C6,$C8,$C9,$CA
  .BYTE $CB,$CD,$CE,$CF,$D0,$D2,$D3,$D4
  .BYTE $D6,$D7,$D8,$D9,$DB,$DC,$DD,$DE
  .BYTE $E0,$E1,$E2,$E4,$E5,$E6,$E8,$E9
  .BYTE $EA,$EC,$ED,$EE,$F0,$F1,$F2,$F4
  .BYTE $F5,$F6,$F8,$F9,$FA,$FC,$FD,$FF
 
SIN_LSB 
  .BYTE $92,$2E,$F7,$60,$C4,$14,$47,$79
  .BYTE $AB,$DD,$08,$21,$3A,$53,$6C,$85
  .BYTE $9E,$B7,$D0,$E9,$01,$0D,$1A,$26
  .BYTE $33,$3F,$4C,$58,$64,$71,$7D,$89
  .BYTE $96,$A2,$AE,$BB,$C7,$D3,$DF,$EC
  .BYTE $F8,$02,$08,$0E,$14,$1A,$20,$26
  .BYTE $2C,$32,$38,$3E,$44,$4A,$50,$56
  .BYTE $5C,$62,$68,$6E,$73,$79,$7F,$85
  .BYTE $8B,$91,$96,$9C,$A2,$A8,$AD,$B3
  .BYTE $B9,$BE,$C4,$CA,$CF,$D5,$DA,$E0
  .BYTE $E5,$EB,$F1,$F6,$FB,$00,$03,$06
  .BYTE $09,$0B,$0E,$11,$13,$16,$19,$1B
  .BYTE $1E,$20,$23,$26,$28,$2B,$2D,$30
  .BYTE $32,$35,$37,$3A,$3C,$3F,$41,$44
  .BYTE $46,$48,$4B,$4D,$50,$52,$54,$57
  .BYTE $59,$5B,$5E,$60,$62,$64,$67,$69
  .BYTE $6B,$6D,$70,$72,$74,$76,$78,$7A
  .BYTE $7C,$7F,$81,$83,$85,$87,$89,$8B
  .BYTE $8D,$8F,$91,$93,$95,$97,$98,$9A
  .BYTE $9C,$9E,$A0,$A2,$A4,$A5,$A7,$A9
  .BYTE $AB,$AC,$AE,$B0,$B1,$B3,$B5,$B6
  .BYTE $B8,$BA,$BB,$BD,$BE,$C0,$C1,$C3
  .BYTE $C4,$C6,$C7,$C9,$CA,$CB,$CD,$CE
  .BYTE $D0,$D1,$D2,$D3,$D5,$D6,$D7,$D8
  .BYTE $DA,$DB,$DC,$DD,$DE,$DF,$E0,$E2
  .BYTE $E3,$E4,$E5,$E6,$E7,$E8,$E9,$E9
  .BYTE $EA,$EB,$EC,$ED,$EE,$EF,$EF,$F0
  .BYTE $F1,$F2,$F3,$F3,$F4,$F5,$F5,$F6
  .BYTE $F6,$F7,$F8,$F8,$F9,$F9,$FA,$FA
  .BYTE $FB,$FB,$FC,$FC,$FC,$FD,$FD,$FD
  .BYTE $FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF
  .BYTE $FF,$00,$00,$00,$00,$00,$00,$00
  
SIN_MSB 
  .BYTE $DC,$E4,$E4,$E8,$E8,$EC,$EC,$EC
  .BYTE $EC,$EC,$F0,$F0,$F0,$F0,$F0,$F0
  .BYTE $F0,$F0,$F0,$F0,$F4,$F4,$F4,$F4
  .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4
  .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4
  .BYTE $F4,$F8,$F8,$F8,$F8,$F8,$F8,$F8
  .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8
  .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8
  .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8
  .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8
  .BYTE $F8,$F8,$F8,$F8,$F8,$FC,$FC,$FC
  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
  .BYTE $FC,$00,$00,$00,$00,$00,$00,$00

HORIZON_COLUMNS_HI ; LO?
  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA 
  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
VER_POS_HI
  .BYTE $00,$00,$00,$00,$00,$00,$00,$00
  .BYTE $01,$01,$01,$01,$01,$01,$01,$01
  .BYTE $02,$02,$02,$02,$02,$02,$02,$02
HORIZON_COLUMNS_LO ; HI?
  .BYTE $03,$03,$03,$03,$03,$03,$03,$03
  .BYTE $05,$05,$05,$05,$05,$05,$05,$05
  .BYTE $06,$06,$06,$06,$06,$06,$06,$06
  .BYTE $07,$07,$07,$07,$07,$07,$07,$07
  .BYTE $08,$08,$08,$08,$08,$08,$08,$08
  .BYTE $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A
  .BYTE $0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B
  .BYTE $0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C
  .BYTE $0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D
  .BYTE $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F
  .BYTE $10,$10,$10,$10,$10,$10,$10,$10
  .BYTE $11,$11,$11,$11,$11,$11,$11,$11
  .BYTE $12,$12,$12,$12,$12,$12,$12,$12
  .BYTE $14,$14,$14,$14,$14,$14,$14,$14
  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
VER_POS_LO
  .BYTE $00,$01,$02,$03,$04,$05,$06,$07
  .BYTE $40,$41,$42,$43,$44,$45,$46,$47
  .BYTE $80,$81,$82,$83,$84,$85,$86,$87
  .BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7
  .BYTE $00,$01,$02,$03,$04,$05,$06,$07
  .BYTE $40,$41,$42,$43,$44,$45,$46,$47
  .BYTE $80,$81,$82,$83,$84,$85,$86,$87
  .BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7
  .BYTE $00,$01,$02,$03,$04,$05,$06,$07
  .BYTE $40,$41,$42,$43,$44,$45,$46,$47
  .BYTE $80,$81,$82,$83,$84,$85,$86,$87
  .BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7
  .BYTE $00,$01,$02,$03,$04,$05,$06,$07
  .BYTE $40,$41,$42,$43,$44,$45,$46,$47
  .BYTE $80,$81,$82,$83,$84,$85,$86,$87
  .BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7
  .BYTE $00,$01,$02,$03,$04,$05,$06,$07
  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

FP_DIVIDE	STA		FP_DIVIDE_HI	; inputs = X-(LO) + Y-(HI) + A (HI) + FP_MULTILPLY_LO - outputs = AY
			LDA 	LOG_TABLE,Y
			LDY 	FP_DIVIDE_LO
			SEC 
			SBC 	LOG_TABLE,Y
			TAY
			TXA
			LDX 	EXP_TABLE,Y
			ORA 	#$02
			BCS 	_FP_DIV_CNT
					SBC 	#$03	; subtract 4?
					SEC 
_FP_DIV_CNT SBC 	FP_DIVIDE_HI
			AND 	#$FD
			RTS

FP_MULTIPLY	STA		FP_MULTIPLY_HI	; inputs = X-(LO) + Y-(HI) + A (HI) + FP_MULTILPLY_LO - outputs = AY
			LDA 	LOG_TABLE,X		
			LDX 	FP_MULTIPLY_LO
			CLC 
			ADC 	LOG_TABLE,X
			TAX 
			TYA 
			LDY 	EXP_TABLE,X
			BCC 	_FP_MUL_CNT
					ADC 	#$03	; add 4?
					CLC 
_FP_MUL_CNT	ADC 	FP_MULTIPLY_HI
			AND 	#$FD
			RTS 

FPMUL   LDA LOG_TABLE,X	; fpMul - ; Input:  [08] = fp multiplier ;         XY   = fp multiplicand ; Output: [08] and XY = result   
        LDX ab08
        CLC 
ab8300  ADC LOG_TABLE,X
        TAX 
        TYA 
        BCC b830A
			ADC #$03
			CLC 
b830A	ADC ab09
        BVS MATH_LIMIT
        AND #$FD
        STA ab09
        TAY 
        LDA EXP_TABLE,X
        TAX 
        STA ab08
        RTS 

MATH_LIMIT	BPL b8328
			AND #$01
			ORA #$78
			TAY 
			LDX #$00
			STX ab08
			STY ab09
			RTS 

b8328		AND #$01
			ORA #$84

b832C   	TAY 
			LDX #$00
			STX ab08
			STY ab09
			RTS 

FPDIV 		STY		ab06	; fpDiv - Input:  [08] = fp divisor - XY   = fp dividend - Output: [08] and XY = result
			LDY 	ab08
			LDA 	LOG_TABLE,Y
			SEC 
			SBC 	LOG_TABLE,X
			TAX 
			LDA 	ab09
			ORA	#$02
			BCS 	b8349
				SBC 	#$03
				SEC 
b8349  		SBC 	ab06
			BVS 	MATH_LIMIT
			AND 	#$FD
			STA 	ab09
			TAY
			LDA 	EXP_TABLE,X
			TAX
			STA 	ab08
			RTS 

FPADD_CONT	LDA ab18	 ; ($838B entry point)   
			LSR 
			BCS b8373
			TXA 
			ADC ab08
			ROR 
			INY 
			INY 
			INY 
			INY 
			TAX 
			STA ab08
			STY ab09
			RTS 

b836C   TYA 
        ASL 
        BCC b83CC
        JMP j8419

b8373   TXA 
        SBC ab08
        BEQ b8383
        BCS b83D5
        LDY ab09
        EOR #$FF
        ADC #$01
        JMP b83D5

b8383   TYA 
        SEC 
        SBC #$24
        BVS b8328
        BVC b832C

FP_ADD	TYA 
        SEC 
        SBC ab09
        BVS b836C
        STA ab18
        ADC #$01
        BVS b836C
        BMI b83F5
        LSR 
        LSR 
        BEQ FPADD_CONT
        CMP #$09
        BCS b83CC
        EOR #$0F
        STA ab83AB
        LDA ab08
        SEC 
        ROR 
ab83AB   =*+$01
        BNE b83B3
        NOP 
        NOP 
        NOP 
        NOP 
        NOP 
        NOP 
        NOP 
b83B3   LSR 
        LSR 
        LSR 
        LSR 
        LSR 
        LSR 
        LSR 
        STA ab06
        LDA ab18
        LSR 
        TXA 
        BCS b83D1
b83C2   ADC ab06
        BCC b83CB
        LSR 
        INY 
        INY 
        INY 
        INY 
b83CB   TAX 
b83CC   STX ab08
        STY ab09
        RTS 

b83D1   SBC ab06
        BCS b83CB
b83D5   STY ab06
        LDY #$00
b83D9   ASL 
        DEY 
        BCC b83D9
        TAX 
        TYA 
        ASL 
        ASL 
        CLC 
        ADC ab06
        BVS b83EC
        TAY 
        STX ab08
        STY ab09
        RTS 

b83EC   LDX #<p8400
        LDY #>p8400
        STX ab08
f83F2   STY ab09
        RTS 

b83F5   CMP #$E0
        BCC j8419
        LSR 
        LSR 
        AND #$07
        STA ab8404
p8400   TXA 
        SEC 
        ROR 
ab8404   =*+$01
        BNE b8405
b8405  	LSR 
        LSR 
        LSR 
        LSR 
        LSR 
        LSR 
        LSR 
        STA ab06
        LDY ab09
        LDA ab18
        LSR 
        LDA ab08
        BCC b83C2
        BCS b83D1
j8419  	LDX ab08
        LDY ab09
        RTS 

FPTO8BIT  
	TYA 
	BMI	b849F
	LSR 
ab847B  
	LSR 
	CMP 	#$07
	BCS 	b84A6
	STA 	ab8487
ab8483  
	TXA 
	SEC 
	ROR 
ab8487   =*+$01
	BNE	b848E
	LSR 
	LSR 
	LSR 
	LSR 
	LSR 
	LSR 
b848E  
	LSR 
b848F   
	ADC	#$00
	BMI	b84A5
	TAX 
	TYA 
	LSR 
	TXA 
	BCC	b849E
	EOR	#$FF
	ADC	#$00
	CLC 
b849E   
	RTS 

b849F   
	CMP	#$FC
	LDA	#$00
	BEQ	b848F
b84A5  
	SEC 
b84A6  
	RTS 

s84A7
FPTO16BIT  
	TYA 
	BMI	b8501
	LSR 
	LSR 
	CMP	#$0F
	BCS	b84A6
	STA	ab06
	ASL 
	ADC	ab06
	STA	ab84C2
	LDA	#$00
	STA	ab06
	TXA 
	SEC 
	ROR 
	ROR	ab06
ab84C2   =*+$01
	BCC	b84ED
	LSR 
j84C4   
	ROR	ab06
	LSR 
	ROR	ab06
	LSR 
	ROR	ab06
	LSR 
	ROR	ab06
	LSR 
	ROR	ab06
	LSR 
	ROR	ab06
	LSR 
	ROR	ab06
	LSR 
b84D9   
	ROR	ab06
	LSR 
	ROR	ab06
	LSR 
	ROR	ab06
	LSR 
	ROR	ab06
	LSR 
	ROR	ab06
	LSR 
	ROR	ab06
	LSR 
	ROR	ab06
b84ED  
	LSR 
	ROR	ab06
	TAX 
	TYA 
	LDY	ab06
	LSR 
	BCC	b8500
	TXA 
	EOR	#$FF
	TAX 
	TYA 
	EOR	#$FF
	TAY 
	CLC 
b8500  
	RTS 

b8501   
	TYA 
	LSR 
	BCC	b850B
	LDX	#$FF
	LDY	#$FF
	CLC 
	RTS 

b850B   
	LDX	#$00
        LDY	#$00
        RTS 

IRQ2	PHA 
        LDA #$7E
        STA $D018    ;VIC Memory Control Register
        LDA #$1B
        STA $D011    ;VIC Control Register 1
        LDA #$08
        STA $D016    ;VIC Control Register 2
        LDA #<IRQ1
        STA fFFFE    ;IRQ
        LDA #>IRQ1
        STA fFFFF    ;IRQ
        LDA #$00
        STA $D012    ;Raster Position
        LDA #$01
        STA $D019    ;VIC Interrupt Request Register (IRR)
		PLA 
        RTI 

.ALIGN $100
HORIZON_DETAIL_RIGHT_WAY_UP	
	.BYTE %01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010
	.BYTE %01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010
	.BYTE %01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010
	.BYTE %01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010
	.BYTE %01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010
	.BYTE %01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010
	.BYTE %01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010
	.BYTE %01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010
	.BYTE %01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010
	.BYTE %01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010

HORIZON_DETAIL_UPSIDE_DOWN	
	.BYTE %10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101
	.BYTE %10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101
	.BYTE %10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101
	.BYTE %10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101
	.BYTE %10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101
	.BYTE %10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101
	.BYTE %10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101
	.BYTE %10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101
	.BYTE %10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101
	.BYTE %10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101

READ_JOYSTICK_KEYBOARD
        LDA $DC00    ;CIA1: Data Port Register A
        AND #$0F
        STA ab80 ; JOYSTICK MOVEMENT
		RTS
		
GET_ROT	LDX 	ROLL_LO
        LDY 	ROLL_HI
        JSR 	COS_FP
        STX 	ROLL_COS_FP_LO
        STY 	ROLL_COS_FP_HI

        LDX 	ROLL_LO
        LDY 	ROLL_HI
        JSR 	SIN_FP
        STX 	ROLL_SIN_FP_LO
        STY 	ROLL_SIN_FP_HI

        STX 	ab08
        STY 	ab09
        LDX 	ROLL_COS_FP_LO
        LDY 	ROLL_COS_FP_HI
        JSR 	FPDIV
        STX 	ROLL_SIN_DIV_COS_LO		; SLOPE?
        STY 	ROLL_SIN_DIV_COS_HI

        LDX 	ROLL_COS_FP_LO
        LDY 	ROLL_COS_FP_HI
        STX 	ab08
        STY 	ab09
        LDX 	ROLL_SIN_FP_LO
        LDY 	ROLL_SIN_FP_HI
        JSR 	FPDIV 
        STX 	ROLL_COS_DIV_SIN_LO 	; SLOPE?
        STY 	ROLL_COS_DIV_SIN_HI

        LDX 	PITCH_LO
        LDY 	PITCH_HI
        JSR 	COS_FP
        STX 	PITCH_COS_FP_LO
        STY 	PITCH_COS_FP_HI

        LDX 	PITCH_LO
        LDY 	PITCH_HI
        JSR 	SIN_FP
        STX 	PITCH_SIN_FP_LO
        STY 	PITCH_SIN_FP_HI

        STX 	ab08
        STY 	ab09
        LDX 	PITCH_COS_FP_LO
        LDY 	PITCH_COS_FP_HI
        JSR 	FPDIV 
        STX 	PITCH_SIN_DIV_COS_LO 	; SLOPE?
        STY 	PITCH_SIN_DIV_COS_HI

        LDX 	YAW_LO
        LDY 	YAW_HI
        JSR 	SIN_FP
        STX 	YAW_SIN_FP_LO
        STY 	YAW_SIN_FP_HI
	
        LDX 	YAW_LO
        LDY 	YAW_HI
        JSR 	COS_FP
        STX 	YAW_COS_FP_LO
        STY 	YAW_COS_FP_HI

        RTS 

.ALIGN $100
DRAW_SCREEN_COLUMN_BACKWARDS
;        LDY #$30
;        STA (SCREEN_POS_PTR),Y
;		LDY #$28
;        STA (SCREEN_POS_PTR),Y
;        LDY #$20
;        STA (SCREEN_POS_PTR),Y
;        LDY #$18
;        STA (SCREEN_POS_PTR),Y
;        LDY #$10
;        STA (SCREEN_POS_PTR),Y
;        LDY #$08
;        STA (SCREEN_POS_PTR),Y
;        LDY #$00
;        STA (SCREEN_POS_PTR),Y
        LDY #$F8
 ;       DEC SCREEN_POS_HI
        STA (SCREEN_POS_PTR),Y
        LDY #$F0
        STA (SCREEN_POS_PTR),Y
        LDY #$E8
        STA (SCREEN_POS_PTR),Y
        LDY #$E0
        STA (SCREEN_POS_PTR),Y
        LDY #$D8
        STA (SCREEN_POS_PTR),Y
        LDY #$D0
        STA (SCREEN_POS_PTR),Y
        LDY #$C8
        STA (SCREEN_POS_PTR),Y
        LDY #$C0
        STA (SCREEN_POS_PTR),Y
        LDY #$B8
        STA (SCREEN_POS_PTR),Y
        LDY #$B0
        STA (SCREEN_POS_PTR),Y
        LDY #$A8
        STA (SCREEN_POS_PTR),Y
        LDY #$A0
        STA (SCREEN_POS_PTR),Y
        LDY #$98
        STA (SCREEN_POS_PTR),Y
        LDY #$90
        STA (SCREEN_POS_PTR),Y
        LDY #$88
        STA (SCREEN_POS_PTR),Y
        LDY #$80
        STA (SCREEN_POS_PTR),Y
        LDY #$78
        STA (SCREEN_POS_PTR),Y
        LDY #$70
        STA (SCREEN_POS_PTR),Y
        LDY #$68
        STA (SCREEN_POS_PTR),Y
        LDY #$60
        STA (SCREEN_POS_PTR),Y
        LDY #$58
        STA (SCREEN_POS_PTR),Y
        LDY #$50
        STA (SCREEN_POS_PTR),Y
        LDY #$48
        STA (SCREEN_POS_PTR),Y
        LDY #$40
        STA (SCREEN_POS_PTR),Y
        LDY #$38
        STA (SCREEN_POS_PTR),Y
        LDY #$30
        STA (SCREEN_POS_PTR),Y
        LDY #$28
        STA (SCREEN_POS_PTR),Y
        LDY #$20
        STA (SCREEN_POS_PTR),Y
        LDY #$18
        STA (SCREEN_POS_PTR),Y
        LDY #$10
        STA (SCREEN_POS_PTR),Y
        LDY #$08
        STA (SCREEN_POS_PTR),Y
        LDY #$00
        STA (SCREEN_POS_PTR),Y
        RTS 

MEMSET       STY    LSB_ONLY+1 ; store LSB count
             CPX    #0          ; MSB?     
             BEQ    LSB_ONLY   ; no
             LDY    #0          ; yes so reset LSB
MSB_LOOP  
LSB_LOOP      STA    (SCREEN_POS_LO),Y   ; clear whole MSB
               DEY 
               BNE    LSB_LOOP
              INC    SCREEN_POS_LO+1      ; inc MSB
              DEX               ; dec MSB count
              BNE    MSB_LOOP
LSB_ONLY    LDY    #0          ; LSB count 
             BEQ    MS_END
LAST_LSB_LOOP STA   (SCREEN_POS_LO),Y
               DEY 
               BNE   LAST_LSB_LOOP               
              STA   (SCREEN_POS_LO),Y     ; clear last Y (0)
MS_END      RTS

COS_FP	INY 
SIN_FP	TYA 
		LSR 
		BCC 	SIN_CNT
				TXA 
				EOR #$FF
				TAX 
				TYA 
				LSR 
SIN_CNT AND 	#$01
		ORA 	SIN_MSB,X
		TAY 
		LDA 	SIN_LSB,X
		TAX 
		RTS 
	
IRQ1	PHA 
        LDA VIC_SCREEN_BANK
        STA $D018    ;VIC Memory Control Register
        LDA #$3B
        STA $D011    ;VIC Control Register 1
        LDA #$18
        STA $D016    ;VIC Control Register 2
        LDA #<IRQ2
        STA fFFFE    ;IRQ
        LDA #>IRQ2
        STA fFFFF    ;IRQ
        LDA #$BA
        STA $D012    ;Raster Position
        LDA #$01
        STA $D019    ;VIC Interrupt Request Register (IRR)
        PLA 
        RTI 
		
.ALIGN $100
DRAW_SCREEN_COLUMN_FORWARDS
        LDY #$00
        STA (SCREEN_POS_PTR),Y
        LDY #$08
        STA (SCREEN_POS_PTR),Y
        LDY #$10
        STA (SCREEN_POS_PTR),Y
        LDY #$18
        STA (SCREEN_POS_PTR),Y
        LDY #$20
        STA (SCREEN_POS_PTR),Y
        LDY #$28
        STA (SCREEN_POS_PTR),Y
        LDY #$30
        STA (SCREEN_POS_PTR),Y
        LDY #$38
        STA (SCREEN_POS_PTR),Y
        LDY #$40
        STA (SCREEN_POS_PTR),Y
        LDY #$48
        STA (SCREEN_POS_PTR),Y
        LDY #$50
        STA (SCREEN_POS_PTR),Y
        LDY #$58
        STA (SCREEN_POS_PTR),Y
        LDY #$60
        STA (SCREEN_POS_PTR),Y
        LDY #$68
        STA (SCREEN_POS_PTR),Y
        LDY #$70
        STA (SCREEN_POS_PTR),Y
        LDY #$78
        STA (SCREEN_POS_PTR),Y
        LDY #$80
        STA (SCREEN_POS_PTR),Y
        LDY #$88
        STA (SCREEN_POS_PTR),Y
        LDY #$90
        STA (SCREEN_POS_PTR),Y
        LDY #$98
        STA (SCREEN_POS_PTR),Y
        LDY #$A0
        STA (SCREEN_POS_PTR),Y
        LDY #$A8
        STA (SCREEN_POS_PTR),Y
        LDY #$B0
        STA (SCREEN_POS_PTR),Y
        LDY #$B8
        STA (SCREEN_POS_PTR),Y
        LDY #$C0
        STA (SCREEN_POS_PTR),Y
        LDY #$C8
        STA (SCREEN_POS_PTR),Y
        LDY #$D0
        STA (SCREEN_POS_PTR),Y
        LDY #$D8
        STA (SCREEN_POS_PTR),Y
        LDY #$E0
        STA (SCREEN_POS_PTR),Y
        LDY #$E8
        STA (SCREEN_POS_PTR),Y
        LDY #$F0
        STA (SCREEN_POS_PTR),Y
        LDY #$F8
        STA (SCREEN_POS_PTR),Y
;        LDY #$00
;        INC SCREEN_POS_HI
;        STA (SCREEN_POS_PTR),Y
;        LDY #$08
;        STA (SCREEN_POS_PTR),Y
;        LDY #$10
;        STA (SCREEN_POS_PTR),Y
;        LDY #$18
;        STA (SCREEN_POS_PTR),Y
;        LDY #$20
;        STA (SCREEN_POS_PTR),Y
;        LDY #$28
;        STA (SCREEN_POS_PTR),Y
;        LDY #$30
;        STA (SCREEN_POS_PTR),Y
;		LDY #$38
;        STA (SCREEN_POS_PTR),Y
        RTS

DRAW_SCREEN	LDA		#$E0
WAIT_RASTER		CMP 	$D012
				BNE 	WAIT_RASTER

			LDA 	#$78 			; 120 = 256-136?
			STA 	SCREEN_LINE		; screen positon count
			LDA 	#0
			STA 	SCREEN_POS_LO

			LDA		SCREEN_FLIP		; GET SCREEN FLIP
			EOR		#255			; FLIP FIRST BIT
			STA		SCREEN_FLIP		; GET SCREEN FLIP
			BEQ		SCREEN1			; CARRY SET ?
				LDA		#$40			; SCREEN 0
				LDX		#$78			; VIC BANK 0
				BNE		SCREEN_SET		; jump
		
SCREEN1  	LDA		#$60			; SCREEN 1
			LDX		#$70			; VIC BANK 1

SCREEN_SET	STA		SCREEN_BANK
			STA		SCREEN_POS_HI
			STX		VIC_SCREEN_BANK

			LDX 	PITCH_HI	; get pitch?
			INX					; add 1 which flips sign? and reverses bit 1 into bit 2? or adds 256?
			TXA
			EOR 	ROLL_HI		; eor roll?
			LSR 				; shift to remove sign?

			LDX #$55			; ground colour
			LDY #$AA			; sky colour

			LSR
			BCC 	RIGHT_WAY_UP
				LDA 	#<HORIZON_DETAIL_UPSIDE_DOWN 	; upside down
				STY 	SCREEN_TOP_COL					; ground colour
				STX 	SCREEN_BOT_COL					; sky colour
				BNE 	SLOPE_CALC		 				; jmp?

RIGHT_WAY_UP LDA 	#<HORIZON_DETAIL_RIGHT_WAY_UP
			STX 	SCREEN_TOP_COL						; sky colour
			STY 	SCREEN_BOT_COL						; ground colour

SLOPE_CALC	STA 	HOR_DIRECTION +1
			LDA 	ROLL_COS_DIV_SIN_HI
			EOR 	#$01			; swap sign
			TAY 	
			AND 	#$01			; keep sign
			STA 	HORIZON_SIGN	; slope direction
			TYA 	
			AND 	#$FC			; remove sign from fp
			CLC 	
			ADC 	#$18			; *64?
			TAY
			LDX 	ROLL_COS_DIV_SIN_LO
			JSR 	FPTO16BIT	; get slope value?
			BCC 	FOUND_SLOPE
SLOPE_OVERFLOW	LDX 	#$FF
				LDY 	#$FF

FOUND_SLOPE TYA 								; get 16 bit lo
			ASL 								; *2 into carry
			STA 	HORIZON_SLOPE_FRACTION		; slope pixel fraction?
;	sta temp1
			TXA 								; get 16 bit hi
			ROL 								; *2 from carry
			STA 	HORIZON_SLOPE_WHOLE			; slope pixel whole?
;	sta temp2
	
			LDX 	PITCH_SIN_DIV_COS_LO
			LDA 	PITCH_SIN_DIV_COS_HI
			CLC 
			ADC 	#$18		; *64?
			STX 	PITCH_SIN_DIV_COS_X128_LO
			STA 	PITCH_SIN_DIV_COS_X128_HI	; (pitch sin/pitch cos) *128?
			EOR 	#$01						; -(pitch sin/pitch cos) *128
			STX 	ab08
			STA 	ab09
			LDX 	ROLL_SIN_FP_LO
			LDY 	ROLL_SIN_FP_HI
			JSR 	FPDIV						; roll sin / -((pitch sin/ pitch cos) *128)
			STX 	ab0A
			STY 	ab0B

			LDX 	#<HOR_SCREEN_EDGE_FP 		; hor screen edge fp?
			LDY 	#>HOR_SCREEN_EDGE_FP
;ab90_VAL = $04	; -80
;ab91_VAL = $19 	; -80

			STX 	ab08
			STY 	ab09
			LDX 	ROLL_SIN_DIV_COS_LO
			LDY 	ROLL_SIN_DIV_COS_HI
			JSR 	FPDIV						; hor screen edge / (roll sin / roll cos)

			LDX 	ab0A						
			LDY 	ab0B
			JSR 	FP_ADD						; (roll sin / -((pitch sin/ pitch cos) *128) ) + (hor screen edge / (roll sin / roll cos))
			JSR 	FPTO8BIT
			BCS 	CLIP_EDGE_TO_TOP_BOTTOM_bB06A
				ADC 	#SCREEN_HOR_HALF
				CMP 	#SCREEN_HOR_RIGHT
				BCS 	CLIP_EDGE_TO_TOP_BOTTOM_bB06A								; edge is off top/bottom so needs clipped to top/bottom
					STA 	HORIZON_SLOPE_WHOLE_VAL		; edge start value?
					JMP 	DRAW_SCREEN_SLOPE			; does not need clipped

CLIP_EDGE_TO_TOP_BOTTOM_bB06A	
			LDX 	PITCH_SIN_DIV_COS_X128_LO
			LDY 	PITCH_SIN_DIV_COS_X128_HI
			STX 	ab08
			STY 	ab09
			LDX 	ROLL_COS_FP_LO
			LDY 	ROLL_COS_FP_HI
			JSR 	FPDIV							; ( (pitch sin/pitch cos) *128) / roll cos 
			STX 	ab0A
			STY 	ab0B

			LDX 	#<VER_SCREEN_EDGE_FP			; #$3C	; ver screen edge fp?
			LDA 	#>VER_SCREEN_EDGE_FP			; #$19
			EOR 	HORIZON_SIGN					; possibly swap sign?
			STX 	ab08
			STA 	ab09
			LDX 	ROLL_SIN_DIV_COS_LO
			LDY 	ROLL_SIN_DIV_COS_HI
			JSR 	FPMUL							; (roll sin / roll cos) * ver screen edge

			LDX 	ab0A
			LDY 	ab0B
			JSR 	FP_ADD							; ( ( (pitch sin/pitch cos) *128) / roll cos ) + ( (roll sin / roll cos) * ver screen edge)
			TYA 
			CLC 
			ADC 	#$04
			BVS 	FILL_FULL_SCRN
			TAY 
			JSR 	FPTO8BIT
			BCS 	FILL_FULL_SCRN
				ADC 	#SCREEN_VER_HALF 	; add ver screen half
				CMP 	#SCREEN_VER_BOTTOM 	; ver clip test
				BCC 	PARTIAL_SCN			; on screen

FILL_FULL_SCRN 	LDA 	PITCH_HI	; fill full screen?
				EOR 	HORIZON_SIGN

				STA 	ab06
				LDA 	ROLL_HI
				CLC 
				ADC 	#$03
				LSR 
				EOR 	ab06
				AND 	#$01
				BEQ 	FULLSCN_TOP_COL
					LDA 	SCREEN_BOT_COL
					BNE 	FULLSCN_BOT_COL		; jmp?

FULLSCN_TOP_COL LDA 	SCREEN_TOP_COL

FULLSCN_BOT_COL	LDX 	#SCREEN_VER_BOTTOM			; fill whole screen from bottom of screen
				JMP 	DRAW_SCREEN_BLOCK_COLOUR

PARTIAL_SCN		EOR 	#$FF						; negate ; fill from the top to the bottom from the lef or right edge depending on the slope direction
				ADC 	#SCREEN_VER_BOTTOM 			; add number of screen lines?
				TAX 
				LDA 	HORIZON_SIGN
				BEQ 	LEFT_EDGE
					LDA 	#$7F ; 9F 					; start hor pos at right edge and adding
					STA 	HORIZON_SLOPE_WHOLE_VAL
					LDA 	SCREEN_BOT_COL
					BNE 	FILL_BLOCK_VAL_X		; jmp

LEFT_EDGE   	LDA 	#$01 							; start hor pos at left edge and subtracting
				STA 	HORIZON_SLOPE_WHOLE_VAL
				LDA 	SCREEN_TOP_COL

FILL_BLOCK_VAL_X	JSR 	DRAW_SCREEN_BLOCK_COLOUR	; fill a block of the screen using value in X ?

DRAW_SCREEN_SLOPE	LDA 	#$00					; reset slope fraction?	
					STA 	HORIZON_SLOPE_FRAC_VAL

					LDA 	HORIZON_SLOPE_WHOLE_VAL
DRAW_SLOPE_LOOP 		AND 	#$FC				; clear the 4 bits that make up char pixel to leave only chars?
						STA 	ab06
						EOR 	#$FF
						SEC 
						ADC 	#SCREEN_HOR_RIGHT		; screen right edge?
						TAX 
;						CMP 	#$84					; past +256 y/n (84/2?)
;						BCC 	SCREEN_LO_bB0F9			; no
;							ADC 	#$01				; yes so add 2 extract to offset?
;							INC 	SCREEN_POS_HI 		; and inc hi pos
SCREEN_LO_bB0F9   		STA 	FILL_FORWARD +1			; store offset
						LDA 	SCREEN_BOT_COL			; get colour
FILL_FORWARD			JSR 	DRAW_SCREEN_COLUMN_FORWARDS		; fill start of line with bottom
						LDA 	ab06
;						CMP 	#$20 					; is hor gt 32 chars across?
;						BCC 	SCREEN_LO_bB10B 		; no
;							ADC 	#$01 				; yes so addd 2 to offset?
;							DEC 	SCREEN_POS_HI		; and inc hi pos
SCREEN_LO_bB10B   		STA 	FILL_BACKWARD +1		; store offset
						LDA 	SCREEN_TOP_COL			; get colour
FILL_BACKWARD			JSR 	DRAW_SCREEN_COLUMN_BACKWARDS	; fill end of line with top
						TXA
						SEC
						SBC 	#$04
						ASL										; set carry if over 256 byte boundary
						TAY										; this is the ver pos?
;						BCC 	DRAW_HORIZON_DETAIL				; not over 256 byte boundary
;							INC		SCREEN_POS_HI				; yes over 256 byte boundary

DRAW_HORIZON_DETAIL		LDX 	HORIZON_SLOPE_WHOLE_VAL			; get horizontal position
HOR_DIRECTION			LDA 	HORIZON_DETAIL_RIGHT_WAY_UP,X	; get character of horizon pixels 
						STA 	(SCREEN_POS_PTR),Y				; update screen char
						INC 	SCREEN_LINE						; increment screen positon count
						BEQ 	DRAW_SCREEN_EXIT				; if finished exit
						LDX 	SCREEN_LINE
						LDA 	HORIZON_COLUMNS_LO,X ; VER_POS_LO,X ; HORIZON_COLUMNS_LO,X
						STA 	SCREEN_POS_LO
						LDA 	HORIZON_COLUMNS_HI,X ; VER_POS_HI,X ; HORIZON_COLUMNS_HI,X
						ORA 	SCREEN_BANK
						STA 	SCREEN_POS_HI

						LDA 	HORIZON_SIGN
						BNE 	SLOPE_DOWN
							LDA 	HORIZON_SLOPE_FRAC_VAL		; slope up from left to right? - get fraction pixel pos
							CLC 
							ADC 	HORIZON_SLOPE_FRACTION		; add fraction pixel pos slope
							STA 	HORIZON_SLOPE_FRAC_VAL		; store fraction pixel pos
							LDA 	HORIZON_SLOPE_WHOLE_VAL		; get whole pixel pos
							ADC 	HORIZON_SLOPE_WHOLE			; add with fraction carry the horizon slope
							BCS 	DRAW_SCREEN_BLOCK			; if wrap around then fill rest of screen as a block
								CMP 	#SCREEN_HOR_RIGHT 		; check if off screen right edge
								BCS 	DRAW_SCREEN_BLOCK 		; if off right screen edge fill rest of screen as a block
							STA 	HORIZON_SLOPE_WHOLE_VAL		; if not store whole pixel pos
							JMP 	DRAW_SLOPE_LOOP				; and goto loop start

SLOPE_DOWN   				LDA 	HORIZON_SLOPE_FRAC_VAL		; slope down from right to left? - get fraction pixel pos
							SEC 
							SBC 	HORIZON_SLOPE_FRACTION		; subtract fraction pixel pos slope
							STA 	HORIZON_SLOPE_FRAC_VAL		; store fraction pixel pos
							LDA 	HORIZON_SLOPE_WHOLE_VAL		; get whole pxel pos
							SBC 	HORIZON_SLOPE_WHOLE			; subtract with fraction carry the horizon slope
							BCC 	DRAW_SCREEN_BLOCK 			; if off left edge so draw rest aa a block?
							STA 	HORIZON_SLOPE_WHOLE_VAL		; if not store whole pixel pos 
							JMP 	DRAW_SLOPE_LOOP				; and goto loop start

DRAW_SCREEN_EXIT   		RTS 

DRAW_SCREEN_BLOCK		LDA 	#0 								; draw screen block?
						SEC 
						SBC 	SCREEN_LINE
						TAX 									; screen line count
						LDA 	HORIZON_SIGN					; check sign
						BEQ 	DRAW_SCREEN_BLOCK_BOTTOM 		; draw bottom 
							LDA 	SCREEN_TOP_COL		 		; draw top
							BNE 	DRAW_SCREEN_BLOCK_COLOUR	; jmp
DRAW_SCREEN_BLOCK_BOTTOM	LDA 	SCREEN_BOT_COL
DRAW_SCREEN_BLOCK_COLOUR	STA 	ab06						; colour to fill block
							CPX 	#0							; last screen line?
							BEQ 	DSCF_EXIT					; yes
DSCF_LOOP						JSR 	DRAW_SCREEN_COLUMN_FORWARDS	; fill whole line
								INC 	SCREEN_LINE					; next line down
								LDY 	SCREEN_LINE					; get line
								LDA 	HORIZON_COLUMNS_LO,Y ; VER_POS_LO,Y ; HORIZON_COLUMNS_LO,Y
								STA 	SCREEN_POS_LO
								LDA 	HORIZON_COLUMNS_HI,Y ; VER_POS_HI,Y ; HORIZON_COLUMNS_HI,Y
								ORA 	SCREEN_BANK
								STA 	SCREEN_POS_HI
								LDA 	ab06						; colour to fill
								DEX 								; dec screen line count
								BNE 	DSCF_LOOP					; last screen line?
DSCF_EXIT				RTS 


; A = exponent = value of (first bit position set *4?) with sign in bit 0
; Y = mantissa = value of next 8 bits of the rest of the 8/16/24 bit number

BIT24TOFP 	STY		ab07 	; store lsb	; MATH_24BitToFP (FP.SetToObjectSpaceCoordinate24) ; Enter: A = Coordinate.MSB X = Coordinate.PSB Y = Coordinate.LSB ; Usese: [06].b  Temporary store for coordinate MSB ; Exit:  [08].fp Result, also stored in X:A (exp:man)
			STA 	ab06 	; store msb
			BPL 	_BIT24FP_POS	 ; positive ?

				LDA 	#0	 	; negative so 
				SEC 
				SBC 	ab07 	; negate lsb
				STA 	ab07
				TXA 			; negate psb
				EOR 	#$FF
				ADC 	#0
				TAX 
				LDA 	#0
				SBC 	ab06	; negate msb

_BIT24FP_POS	BNE 	_BIT24			; if msb not 0 - jump to set loop counter to 24 ($18)?
				TXA 				; move psb to a
				BNE 	_BIT16			; if psb not 0 - jump to set loop counter to 16 ($10)?

					LDA 	ab07			; get lsb
					BEQ 	_BIT00 			; if lsb is 0 - jump to overflow and exit

						LDX 	#0
						STX 	ab07
						LDX 	#8			; set loop counter to 8?
						BNE 	_EXP_LOOP 		; jump?

_BIT24   	STX 	ab07	; store psb?
			LDX 	#24		; set loop counter to 24?

_EXP_LOOP     	DEX 			; find exponent - start from whatever x is passed in and reduce until x a bit set found 
				ASL 	ab07 	; shift lsb up into carry
				ROL 	 		; shift msb up with carry - mantisa?
				BCC 	_EXP_LOOP	; as soon as first bit is set then exit

			TAY					; store mantisa?
			TXA 				; x is exponent?
			ASL 				; exponent *2?
			ASL 	ab06		; shift msb putting sign into carry 
			ROL 				; rotate carry into first bit of exponent - bit 0 is sign
			RTS

_BIT16   	LDX 	#16		; set loop counter to 16?
			BNE 	_EXP_LOOP 	; jump?
		
_BIT00    	LDY 	#<OVERFLOW ; overflow?
			LDA 	#>OVERFLOW
			RTS 

;temp1 .byte 0
;temp2 .byte 0
;temp3 .byte 0
;temp4 .byte 0
;temp5 .byte 0
;temp6 .byte 0
;temp7 .byte 0
;temp8 .byte 0

MOVMENT	LDX ab22
        LDY ab23
        STX ab08
        STY ab09
        LDX abBEA2
        LDY abBEA3
        JSR FPMUL
        STX ab22
        STY ab23
JOY_LFT LDA #$04
        BIT ab80
        BNE JOY_RGT
                LDX abBEA4
                LDY abBEA5
                JSR FP_ADD
                STX ab22
                STY ab23
JOY_RGT	LDA #$08 
        BIT ab80
        BNE JOY_UP
                LDX abBEA4
                LDY abBEA5
                INY 
                JSR FP_ADD
                STX ab22
                STY ab23
JOY_UP	LDA #$01
        BIT ab80
        BNE JOY_DWN
                LDA PITCH_LO
                CLC 
                ADC abBEA6
                STA PITCH_LO
                LDA PITCH_HI
                ADC #$00
                AND #$03
                STA PITCH_HI
JOY_DWN LDA #$02
        BIT ab80
        BNE MOVE
                SEC
                LDA PITCH_LO
                SBC abBEA6
                STA PITCH_LO
                LDA PITCH_HI
				SBC #$00
				AND #$03
				STA PITCH_HI

MOVE 	LDX abEC
        LDA abED
        LDY b29DC
        BPL b9F98
				CLC 
				ADC #$04
b9F98   STX ab08
        STA ab09

        LDX abBEAE
		LDY abBEAF
        JSR FPMUL
        LDX ab26
        LDY ab27
        JSR FP_ADD

        LDY abBEAB
        LDX abBEAA
        JSR FPMUL
        STX ab26
        STY ab27

        LDX PITCH_COS_FP_LO
        LDY PITCH_COS_FP_HI
        STX ab08
        STY ab09

		LDX YAW_COS_FP_LO
		LDY YAW_COS_FP_HI
        JSR FPMUL

        LDX ab26
        LDY ab27
        JSR FPMUL
		JSR FPTO16BIT
        TYA 
        CLC 
        ADC CURR_Z_LSB
        STA CURR_Z_LSB
        LDY #$00
        TXA 
        BPL b9FDF
			LDY #$FF
b9FDF   ADC CURR_Z_MSB
        STA CURR_Z_MSB
        TYA 
        ADC CURR_Z_HSB
        STA CURR_Z_HSB

        LDX PITCH_COS_FP_LO
        LDY PITCH_COS_FP_HI
        STX ab08
        STY ab09

        LDX YAW_SIN_FP_LO
        LDY YAW_SIN_FP_HI
        JSR FPMUL

        LDX ab26
        LDY ab27
        JSR FPMUL
        JSR FPTO16BIT
        TYA 
        CLC 
        ADC CURR_X_LSB
        STA CURR_X_LSB
        LDY #$00
        TXA 
        BPL bA00E
			LDY #$FF
bA00E   ADC CURR_X_MSB
        STA CURR_X_MSB
        TYA 
        ADC CURR_X_HSB
        STA CURR_X_HSB

        LDA ab7F
        BEQ bA037
			LDA abFA
			BEQ bA024
				BCS bA037
bA024   	LDA ab27
			EOR #$80
			CMP #$9C
			BCS bA037
				LDA #<f0200
				STA PITCH_LO
				LDA #>f0200
				STA PITCH_HI
				JMP jA102

bA037   LDX PITCH_SIN_FP_LO
        LDY PITCH_SIN_FP_HI
        STX ab08
        STY ab09

        LDX ab26
        LDY ab27
        JSR FPMUL
        TYA 
        LDY abBEA9
        LSR 
        BCS bA06B
			LDA abBEAD
			LDX b29DC
			BPL bA05D
					LDA #$5A
bA05D   SEC 
        SBC CURR_Y_HSB
        BPL bA06B
			ASL 
			BPL bA069
			ASL 
			TAY 
			BMI bA06B
bA069   	LDY #$88
bA06B   LDX abBEA8
        JSR FPMUL
        JSR FPTO16BIT
        TYA 
        CLC 
        ADC CURR_Y_LSB
        STA CURR_Y_LSB
        TXA 
        ADC CURR_Y_MSB
        STA CURR_Y_MSB
fA07F   TXA 
        BPL bA086
			LDA #$FF
			BMI bA088
bA086   LDA #$00
bA088   ADC CURR_Y_HSB
        STA CURR_Y_HSB

bA0F7   LDA #$00
        STA ab7F
        STA abFA

jA102   LDX ab22
        LDY ab23
        JSR FPTO16BIT
        TXA 
        ASL 
        TYA 
        ADC YAW_LO
        STA YAW_LO
        TXA 
        ADC YAW_HI
        STA YAW_HI
        LDA ab7F
        BNE jA12B
			LDX ab22
			LDA abBEA7
        BMI bA123
			CLC 
			ADC ab23
bA123   TAY 
        JSR FPTO16BIT
        STY ROLL_LO
        STX ROLL_HI
jA12B 	RTS 

abBEA2  .BYTE $E0
abBEA3  .BYTE $FC
abBEA4  .BYTE $00
abBEA5  .BYTE $00
abBEA6  .BYTE $08
abBEA7  .BYTE $08
abBEA8  .BYTE $00
abBEA9  .BYTE $FC
abBEAA  .BYTE $00
abBEAB  .BYTE $FC,$10
abBEAD  .BYTE $0A
abBEAE  .BYTE $90
abBEAF  .BYTE $F8
 
HEXCHAR		LDA		HEX0,Y
HEX_NUMBER0	STA		$ABCD,X
			LDA		HEX1,Y
HEX_NUMBER1	STA		$ABCD,X
			LDA		HEX2,Y
HEX_NUMBER2	STA		$ABCD,X
			LDA		HEX3,Y
HEX_NUMBER3	STA		$ABCD,X
			LDA		HEX4,Y
HEX_NUMBER4	STA		$ABCD,X
			RTS

HEX16		STY		REGY	; Y = YPOS / A = HI / X = LO
			STX		REGX		
			LDX		#0
			JSR		HEX8
			LDA		REGX
			LDY		REGY
			LDX		#16
			JSR		HEX8
			RTS

HEX8		CLC		; A = NUM / Y = YPOS / X = XPOS

			STA		REGA
			LDA		VER_POS_LO+0,Y
			STA		HEX_NUMBER0+1
			
			LDA		VER_POS_HI+0,Y
			CLC
			ADC	SCREEN_BANK
			STA		HEX_NUMBER0+2

			LDA		VER_POS_LO+1,Y
			STA		HEX_NUMBER1+1
			
			LDA		VER_POS_HI+1,Y 
			CLC
			ADC	SCREEN_BANK
			STA		HEX_NUMBER1+2

			LDA		VER_POS_LO+2,Y
			STA		HEX_NUMBER2+1
			
			LDA		VER_POS_HI+2,Y 
			CLC
			ADC	SCREEN_BANK
			STA		HEX_NUMBER2+2

			LDA		VER_POS_LO+3,Y
			STA		HEX_NUMBER3+1
			
			LDA		VER_POS_HI+3,Y 
			CLC
			ADC	SCREEN_BANK
			STA		HEX_NUMBER3+2

			LDA		VER_POS_LO+4,Y
			STA		HEX_NUMBER4+1
			
			LDA		VER_POS_HI+4,Y 
			CLC
			ADC	SCREEN_BANK
			STA		HEX_NUMBER4+2

			LDA		REGA
			LSR
			LSR
			LSR
			LSR
			TAY
			JSR		HEXCHAR

			TXA
			CLC
			ADC 	#8
			TAX

			LDA		REGA
			AND		#15
			TAY
			JSR		HEXCHAR

			RTS

HEX0	.BYTE %10000000,%10100010,%10000000,%10000000,%10001000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000010,%10000000,%10000000 
HEX1	.BYTE %10001000,%10000010,%10101000,%10101000,%10001000,%10001010,%10001010,%10101000,%10001000,%10001000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010 
HEX2	.BYTE %10001000,%10100010,%10000000,%10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10000000,%10000010,%10001010,%10001000,%10000000,%10000000
HEX3	.BYTE %10001000,%10100010,%10001010,%10101000,%10101000,%10101000,%10001000,%10101000,%10001000,%10101000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010
HEX4	.BYTE %10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10101000,%10000000,%10000000,%10001000,%10000000,%10100000,%10000010,%10000000,%10001010

f4000 = $4000
SCREEN_COLOUR = $5C00
f6000 = $6000
