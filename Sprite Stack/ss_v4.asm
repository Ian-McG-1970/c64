; map of 32x32 tiles converted to 128x128 chars
; eah tiles is either wall (neg) or floor (pos)
; each floor tiles has a 4 bit point pointing to which direction objects can move in on this tile? (4 bits for up/down/left/right)

; next is to convert 32x32 tiles into 128x128 chars

; screen = 18k to 19k
; charset = 16k to 18k
; sprites = 19k to 32k

*= 2049
!byte $0c,$08,$0a,$00,$9e   ; Line 10 SYS
!tx "2070"            ; Address for sys start in text 4096+11

SCR = 2
MEM_FROM = SCR +2
MEM_TO = MEM_FROM +2

REGA = MEM_TO +2
REGX = REGA +1
REGY = REGX +1

PLAYER_V_HI = REGY +1
PLAYER_V_LO = PLAYER_V_HI +1
PLAYER_H_HI = PLAYER_V_LO +1
PLAYER_H_LO = PLAYER_H_HI +1

SPR2_V_LO = PLAYER_H_LO +1 
SPR2_V_HI = SPR2_V_LO +1
SPR2_H_LO = SPR2_V_HI +1
SPR2_H_HI = SPR2_H_LO +1

SPR3_V_LO = SPR2_H_HI +1
SPR3_V_HI = SPR3_V_LO +1
SPR3_H_LO = SPR3_V_HI +1
SPR3_H_HI = SPR3_H_LO +1

SPR4_V_LO = SPR3_H_HI +1
SPR4_V_HI = SPR4_V_LO +1
SPR4_H_LO = SPR4_V_HI +1
SPR4_H_HI = SPR4_H_LO +1

SPR5_V_LO = SPR4_H_HI +1
SPR5_V_HI = SPR5_V_LO +1
SPR5_H_LO = SPR5_V_HI +1
SPR5_H_HI = SPR5_H_LO +1

SPR6_V_LO = SPR5_H_HI +1
SPR6_V_HI = SPR6_V_LO +1
SPR6_H_LO = SPR6_V_HI +1
SPR6_H_HI = SPR6_H_LO +1

SPR7_V_LO = SPR6_H_HI +1
SPR7_V_HI = SPR7_V_LO +1
SPR7_H_LO = SPR7_V_HI +1
SPR7_H_HI = SPR7_H_LO +1

SPR2V = SPR7_H_HI +1
SPR2H = SPR2V +1
SPR2S = SPR2H +1 ; shape
SPR2C = SPR2S +1 ; colour

SPR3V = SPR2C +1
SPR3H = SPR3V +1
SPR3S = SPR3H +1
SPR3C = SPR3S +1

SPR4V = SPR3C +1
SPR4H = SPR4V +1
SPR4S = SPR4H +1
SPR4C = SPR4S +1

SPR5V = SPR4C +1
SPR5H = SPR5V +1
SPR5S = SPR5H +1
SPR5C = SPR5S +1

SPR6V = SPR5C +1
SPR6H = SPR6V +1
SPR6S = SPR6H +1
SPR6C = SPR6S +1

SPR7V = SPR6C +1
SPR7H = SPR7V +1
SPR7S = SPR7H +1
SPR7C = SPR7S +1

BDR = $D020
SCR0 = $D021
SCR1 = $D022
SCR2 = $D023
SCR3 = $D024
SPC1 = $D025
SPC2 = $D026

MULCOLSPR = $D01C

SPRENBL = 53248+21
SPRXPX = 53248+29 
SPRXPY = 53248+23

S0X = 53248+0
S0Y = 53248+1
S0C = $D027
S0P = VIC_SCN+$03f8
HW_SPRITE_0 = (512/64)+0

S1X = 53248+2
S1Y = 53248+3
S1C = $D028
S1P = VIC_SCN+$03f9
HW_SPRITE_1 = (512/64)+1

S2X = 53248+4
S2Y = 53248+5
S2C = $D029
S2P = VIC_SCN+$03fa
HW_SPRITE_2 = (512/64)+2

S3X = 53248+6
S3Y = 53248+7
S3C = $D02A
S3P = VIC_SCN+$03fb
HW_SPRITE_3 = (512/64)+3

S4X = 53248+8
S4Y = 53248+9
S4C = $D02B
S4P = VIC_SCN+$03fc
HW_SPRITE_4 = (512/64)+4

S5X = 53248+10
S5Y = 53248+11
S5C = $D02C
S5P = VIC_SCN+$03fd
HW_SPRITE_5 = (512/64)+5

S6X = 53248+12
S6Y = 53248+13
S6C = $D02D
S6P = VIC_SCN+$03fe
HW_SPRITE_6 = (512/64)+6

S7X = 53248+14
S7Y = 53248+15
S7C = $D02E
S7P = VIC_SCN+$03ff
HW_SPRITE_7 = (512/64)+7

SPRXMSB = 53248+16

MP_RASTER_POS = 246-12
IRQ_042 = 84
IRQ_042 = 140

VIC_BANK = 16384
VIC_CHAR = VIC_BANK
VIC_SCN = VIC_CHAR +2048

VIC_BNK = %00000010 ; 16384

*= 2070

  SEI        ; disable maskable IRQs
  CLV
  CLD
  LDX   #$FF   ; reset stack
  TXS
 
  LDA   #$7F
  STA   $DC0D  ; disable timer interrupts which can be generated by the two CIA chips
  STA   $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

  LDA   $DC0D  ; by reading this two registers we negate any pending CIA irqs.
  LDA   $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

  LDA   #$01   ; this is how to tell the VICII to generate a raster interrupt
  STA   $D01A

  LDA   #$10
  STA   $D011 ; #7: Read: Current raster line (bit #8) / #6: 1 = Extended background mode on / #5: 0 = Text mode; 1 = Bitmap mode / #4: 0 = Screen off, complete screen is covered by border; 1 = Screen on, normal screen contents are visible / #3: Screen height; 0 = 24 rows; 1 = 25 rows / #0-#2: Vertical raster scroll.
  LDA   #$10
  STA   $D016 ; #4: 1 = Multicolor mode on / #3: Screen width; 0 = 38 columns; 1 = 40 columns / #0-#2: Horizontal raster scroll.

  LDA   #$35   ; we turn off the BASIC and KERNAL rom here
  STA   $01    ; the cpu now sees RAM everywhere except at $d000-$e000, where still the registers of SID/VICII/etc are visible

  LDA   #<IRQ_10 ;IRQ_242  ; this is how we set up
  STA   $FFFE     ; the address of our interrupt code
  LDA   #>IRQ_10 ;IRQ_242
  STA   $FFFF
  LDA   #71 ; RASTER_242 ; this is how to tell at which rasterline we want the irq to be triggered
  STA   $D012
  
  LDA   #<NMI_NOP ; lsb
  STA   $FFFA ; Create a nop, irq handler for NMI that gets called whenever RESTORE is pressed or similar.
  LDA   #>NMI_NOP ; msb
  STA   $FFFB ; We're putting our irq handler directly in the vector that usually points to the kernal's NMI handler since we have kernal banked out.

  LDA   #$00  ; Force an NMI by setting up a timer. This will cause an NMI, that won't be acked. Any subsequent NMI's from RESTORE will be essentially disabled.
  STA   $DD0E       ; Stop timer A
  STA   $DD04       ; Set timer A to 0, NMI will occure immediately after start
  STA   $DD0E

  LDA   #$81
  STA   $DD0D       ; Set timer A as source for NMI

  LDA   #$01
  STA   $DD0E       ; Start timer A -> NMI

  LDA   #VIC_BNK
  STA   $DD00

  LDA   #%00100000 ; charset at 16*1024 / screen at 18*1024
  STA   $D018

  LDA   #0
  STA   BDR
  LDA   #1
  STA   SCR0
  LDA   #2
  STA   SCR1
  LDA   #3
  STA   SCR2

  LDA   #4
  STA   SPC1
  LDA   #5
  STA   SPC2

  LDA   #255
  STA   SPRENBL
  STA   MULCOLSPR

  LDA   #0
  STA   SPRXPX
  STA   SPRXPY

  LDA   #60
  STA   S0X
  STA   S0Y
 
  LDA   #70
  STA   S1X
  STA   S1Y

  LDA   #80
  STA   S2X
  STA   S2Y
  
  LDA   #90
  STA   S3X
  STA   S3Y

  LDA   #100
  STA   S4X
  STA   S4Y

  LDA   #110
  STA   S5X
  STA   S5Y

  LDA   #120
  STA   S6X
  STA   S6Y

  LDA   #130
  STA   S7X
  STA   S7Y

  LDA   #2
  STA   S0C
  LDA   #3
  STA   S1C
  LDA   #4
  STA   S2C
  LDA   #5
  STA   S3C
  LDA   #6
  STA   S4C
  LDA   #7
  STA   S5C
  LDA   #8
  STA   S6C
  LDA   #9
  STA   S7C

  
  LDA #HW_SPRITE_0
  STA S0P
  LDA #HW_SPRITE_1
  STA S1P

  LDA #$01
  LDX #<$D800
  LDY #>$D800
  STX SCR+0
  STY SCR+1
  LDX #>1000 
  LDY #<1000
;  JSR MEMSET

  LDX #<800
  LDY #>800
  STX MEM_FROM+0
  STY MEM_FROM+1
  LDX #<VIC_SCN
  LDY #>VIC_SCN
  STX MEM_TO+0
  STY MEM_TO+1
  LDY #<1024
  LDX #>1024
;  JSR MEMCPY

  LDX #<800
  LDY #>800
  STX MEM_FROM+0
  STY MEM_FROM+1
  LDX #<VIC_CHAR
  LDY #>VIC_CHAR
  STX MEM_TO+0
  STY MEM_TO+1
  LDY #<2048
  LDX #>2048
;  JSR MEMCPY

  CLI

MLOOP:  JMP   MLOOP ; we better don't RTS, the ROMS are now switched off, there's no way back to the system

;move memory down
;
; FROM = source start address
;   TO = destination start address
; SIZE = number of bytes to move
  
!ZONE MEMCPY
MEMCPY
    STY .LSB +1
    LDY #0
    TXA
    BEQ .LSB
.LOOPHI LDA (MEM_FROM),Y ; move a page at a time
        STA (MEM_TO),Y
        INY
        BNE .LOOPHI
      INC MEM_FROM+1
      INC MEM_TO+1
      DEX
      BNE .LOOPHI
.LSB    LDX #0
        BEQ .EXIT
.LOOPLO   LDA (MEM_FROM),Y ; move the remaining bytes
          STA (MEM_TO),Y
          INY
          DEX
          BNE .LOOPLO
.EXIT  RTS

!ZONE MEMSET        
MEMSET       STY    .LSB_ONLY+1 ; store LSB count
             CPX    #0          ; MSB?     
             BEQ    .LSB_ONLY   ; no

             LDY    #0          ; yes so reset LSB
.MSB_LOOP  
.LSB_LOOP      STA    (MEM_TO),Y   ; clear whole MSB
               DEY 
               BNE    .LSB_LOOP

              INC    MEM_TO+1      ; inc MSB
              DEX               ; dec MSB count
              BNE    .MSB_LOOP

.LSB_ONLY    LDY    #0          ; LSB count 
             BEQ    .MS_END     ; not needed

.LAST_LSB_LOOP STA   (MEM_TO),Y
               DEY 
               BNE   .LAST_LSB_LOOP
                
              STA   (MEM_TO),Y     ; clear last Y (0)
 
.MS_END      RTS
        
NMI_NOP: RTI ; This is the irq handler for the NMI. Just returns without acknowledge. This prevents subsequent NMI's from interfering.

SP000 = 48
SP001 = 49
SP002 = 50
SP003 = 51
SP004 = 52
SP005 = 53
SP006 = 54
SP007 = 55
SP008 = 56
SP009 = 57
SP010 = 58
SP011 = 59
SP012 = 60

!ZONE JOYSTICK
JOYSTICK1 LDA $DC01     ; PORT 1
          JMP .JOYSTICK
JOYSTICK2 LDA $DC00     ; PORT 2
.JOYSTICK LDX #0
          LDY #0
.UP       LSR
          BCS   .DOWN
            DEY
.DOWN     LSR
          BCS   .LEFT
            INY
.LEFT     LSR
          BCS   .RIGHT
            DEX
.RIGHT    LSR
          BCS   .FIRE
            INX
.FIRE     EOR   #255
          AND   #1
;          STA   JOYF
;          STX   JOYX
;          STY   JOYY
          LSR
          RTS

!ZONE MOVE_PLAYER
MOVE_PLAYER
    TXA
    BEQ   .VER
    BPL   .RIGHT
.LEFT   LDA   PLAYER_H_LO
    BNE   .L_TST
      DEC   PLAYER_H_HI
.L_TST  DEC   PLAYER_H_LO
    JMP   .VER
.RIGHT INC   PLAYER_H_LO
    BNE   .VER
      INC   PLAYER_H_HI
.VER    TYA
    BEQ   .EXIT
    BPL   .DOWN
.UP     LDA   PLAYER_V_LO
    BNE   .U_TST
      DEC   PLAYER_V_HI
.U_TST  DEC   PLAYER_V_LO
    RTS
.DOWN   INC   PLAYER_V_LO
    BNE   .EXIT
      INC   PLAYER_V_HI
.EXIT   RTS

!ZONE IRQ_SETUP_LO
!MACRO IRQ_SETUP_LO SPRITE_VER_POS, SPRITE_VER_POS_REG, SPRITE_SHAPE, SPRITE_SHAPE_REG, RASTER_POS, NEXT_IRQ_ADDR {
    STA .AREG +1      ;4 3
    LDA #SPRITE_VER_POS +2  ;2 3
    STA SPRITE_VER_POS_REG  ;4 2
    LDA #SPRITE_SHAPE   ;2 2
    STA SPRITE_SHAPE_REG  ;4 3
    LDA #RASTER_POS     ;2 2
    STA $D012           ;4 3
    LDA #<NEXT_IRQ_ADDR   ;2 2
    STA $FFFE       ;4 3
.AREG LDA #0        ;2 2
    INC $D019       ;6 3
;    RTI          ;6 
}

!ZONE IRQ_SETUP_HILO
!MACRO IRQ_SETUP_HILO SPRITE_VER_POS, SPRITE_SHAPE, RASTER_POS, NEXT_IRQ_ADDR {
    STX .XREG +1      ;4 3
    LDX #SPRITE_VER_POS +1  ;2 3
    STX S0Y
    STX S1Y
    STX S2Y
    STX S3Y
    STX S4Y
    STX S5Y
    STX S6Y
    STX S7Y
    LDX #SPRITE_SHAPE   ;2 2
    STX S0P
    INX
    STX S1P
    INX
    STX S2P
    INX
    STX S3P
    INX
    STX S4P
    INX
    STX S5P
    INX
    STX S6P
    INX
    STX S7P
    LDX #RASTER_POS     ;2 2
    STX $D012           ;4 3
    LDX #<NEXT_IRQ_ADDR   ;2 2
    STX $FFFE       ;4 3
    LDX #>NEXT_IRQ_ADDR   ;2 2
    STX $FFFF       ;4 3
.XREG LDX #0        ;2 2
    INC $D019       ;6 3
    RTI          ;6 
}

SP00_RASTER_IRQ = 52

SP10_RASTER_IRQ = SP00_RASTER_IRQ +21

SP20_RASTER_IRQ = SP10_RASTER_IRQ +21

SP30_RASTER_IRQ = SP20_RASTER_IRQ +21

SP40_RASTER_IRQ = SP30_RASTER_IRQ +21

SP50_RASTER_IRQ = SP40_RASTER_IRQ +21

SP60_RASTER_IRQ = SP50_RASTER_IRQ +21

SP70_RASTER_IRQ = SP60_RASTER_IRQ +21

SP80_RASTER_IRQ = SP70_RASTER_IRQ +21

SP90_RASTER_IRQ = SP80_RASTER_IRQ +21

!ALIGN 255,0
IRQ_00
  +IRQ_SETUP_HILO SP00_RASTER_IRQ, 48, SP10_RASTER_IRQ, IRQ_10

IRQ_10
  +IRQ_SETUP_HILO SP10_RASTER_IRQ, 49, SP20_RASTER_IRQ, IRQ_20

IRQ_20
  +IRQ_SETUP_HILO SP20_RASTER_IRQ, 50, SP30_RASTER_IRQ, IRQ_30

IRQ_30
  +IRQ_SETUP_HILO SP30_RASTER_IRQ, 51, SP40_RASTER_IRQ, IRQ_40

IRQ_40
  +IRQ_SETUP_HILO SP40_RASTER_IRQ, 52, SP50_RASTER_IRQ, IRQ_50

IRQ_50
  +IRQ_SETUP_HILO SP50_RASTER_IRQ, 53, SP60_RASTER_IRQ, IRQ_60

IRQ_60
  +IRQ_SETUP_HILO SP60_RASTER_IRQ, 54, SP70_RASTER_IRQ, IRQ_70

IRQ_70
  +IRQ_SETUP_HILO SP70_RASTER_IRQ, 55, SP80_RASTER_IRQ, IRQ_80

IRQ_80
  +IRQ_SETUP_HILO SP80_RASTER_IRQ, 56, SP90_RASTER_IRQ, IRQ_90

IRQ_90
  +IRQ_SETUP_HILO SP90_RASTER_IRQ, 57, SP00_RASTER_IRQ, IRQ_00

;int_??
;    sta areg        ;3
;  lda #vpos         ;2
;  sta sprite_vpos_reg   ;4
;  lda #number       ;2
;  sta sprite_shape_reg  ;4
;    lda #raster_pos     ;2
;    sta raster_pos_reg    ;4
;  lda #<next_irq      ;2
;  stx fffe        ;4
;  lda #>next_irq      ;2
;  stx ffff        ;4
;    lda areg        ;3
;  inc $d019         ;6
;    reti          ;6

*= 19*1024
sprites
;48
!byte %11111111,%11111111,%11111111
!byte %11000000,%00000000,%00000011
!byte %11000000,%00000000,%00000011
!byte %11000000,%00000000,%00000011
!byte %11000000,%00000000,%00000011
!byte %11000000,%00000000,%00000011
!byte %11000000,%00000000,%00000011
!byte %11000000,%00000000,%00000011
!byte %11000000,%00000000,%00000011
!byte %11000000,%00000000,%00000011
!byte %11000000,%00000000,%00000011
!byte %11000000,%00000000,%00000011
!byte %11000000,%00000000,%00000011
!byte %11000000,%00000000,%00000011
!byte %11000000,%00000000,%00000011
!byte %11000000,%00000000,%00000011
!byte %11000000,%00000000,%00000011
!byte %11000000,%00000000,%00000011
!byte %11000000,%00000000,%00000011
!byte %11000000,%00000000,%00000011
!byte %11111111,%11111111,%11111111
!byte 0
;49
!byte %11111111,%11111111,%11111111
!byte %11000000,%00000000,%00000011
!byte %11001111,%11111111,%11110011
!byte %11001100,%00000000,%00110011
!byte %11001100,%00000000,%00110011
!byte %11001100,%00000000,%00110011
!byte %11001100,%00000000,%00110011
!byte %11001100,%00000000,%00110011
!byte %11001100,%00000000,%00110011
!byte %11001100,%00000000,%00110011
!byte %11001100,%00000000,%00110011
!byte %11001100,%00000000,%00110011
!byte %11001100,%00000000,%00110011
!byte %11001100,%00000000,%00110011
!byte %11001100,%00000000,%00110011
!byte %11001100,%00000000,%00110011
!byte %11001100,%00000000,%00110011
!byte %11001100,%00000000,%00110011
!byte %11001111,%11111111,%11110011
!byte %11000000,%00000000,%00000011
!byte %11111111,%11111111,%11111111
!byte 0
;50
!byte %11111111,%11111111,%11111111
!byte %11000000,%00000000,%00000011
!byte %11001111,%11111111,%11110011
!byte %11001100,%00000000,%00110011
!byte %11001100,%11111111,%00110011
!byte %11001100,%11000011,%00110011
!byte %11001100,%11000011,%00110011
!byte %11001100,%11000011,%00110011
!byte %11001100,%11000011,%00110011
!byte %11001100,%11000011,%00110011
!byte %11001100,%11000011,%00110011
!byte %11001100,%11000011,%00110011
!byte %11001100,%11000011,%00110011
!byte %11001100,%11000011,%00110011
!byte %11001100,%11000011,%00110011
!byte %11001100,%11000011,%00110011
!byte %11001100,%11111111,%00110011
!byte %11001100,%00000000,%00110011
!byte %11001111,%11111111,%11110011
!byte %11000000,%00000000,%00000011
!byte %11111111,%11111111,%11111111
!byte 0
;51
!byte %01010101,%01010101,%01010101
!byte %01000000,%00000000,%00000001
!byte %01000000,%00000000,%00000001
!byte %01000000,%00000000,%00000001
!byte %01000000,%00000000,%00000001
!byte %01000000,%00000000,%00000001
!byte %01000000,%00000000,%00000001
!byte %01000000,%00000000,%00000001
!byte %01000000,%00000000,%00000001
!byte %01000000,%00000000,%00000001
!byte %01000000,%00000000,%00000001
!byte %01000000,%00000000,%00000001
!byte %01000000,%00000000,%00000001
!byte %01000000,%00000000,%00000001
!byte %01000000,%00000000,%00000001
!byte %01000000,%00000000,%00000001
!byte %01000000,%00000000,%00000001
!byte %01000000,%00000000,%00000001
!byte %01000000,%00000000,%00000001
!byte %01000000,%00000000,%00000001
!byte %01010101,%01010101,%01010101
!byte 0
;52
!byte %01010101,%01010101,%01010101
!byte %01000000,%00000000,%00000001
!byte %01000101,%01010101,%01010001
!byte %01000100,%00000000,%00010001
!byte %01000100,%00000000,%00010001
!byte %01000100,%00000000,%00010001
!byte %01000100,%00000000,%00010001
!byte %01000100,%00000000,%00010001
!byte %01000100,%00000000,%00010001
!byte %01000100,%00000000,%00010001
!byte %01000100,%00000000,%00010001
!byte %01000100,%00000000,%00010001
!byte %01000100,%00000000,%00010001
!byte %01000100,%00000000,%00010001
!byte %01000100,%00000000,%00010001
!byte %01000100,%00000000,%00010001
!byte %01000100,%00000000,%00010001
!byte %01000100,%00000000,%00010001
!byte %01000101,%01010101,%01010001
!byte %01000000,%00000000,%00000001
!byte %01010101,%01010101,%01010101
!byte 0
;53
!byte %01010101,%01010101,%01010101
!byte %01000000,%00000000,%00000001
!byte %01000101,%01010101,%01010001
!byte %01000100,%00000000,%00010001
!byte %01000100,%11111111,%00010001
!byte %01000100,%11000011,%00010001
!byte %01000100,%11000011,%00010001
!byte %01000100,%11000011,%00010001
!byte %01000100,%11000011,%00010001
!byte %01000100,%11000011,%00010001
!byte %01000100,%11000011,%00010001
!byte %01000100,%11000011,%00010001
!byte %01000100,%11000011,%00010001
!byte %01000100,%11000011,%00010001
!byte %01000100,%11000011,%00010001
!byte %01000100,%11000011,%00010001
!byte %01000100,%11111111,%00010001
!byte %01000100,%00000000,%00010001
!byte %01000101,%01010101,%01010001
!byte %01000000,%00000000,%00000001
!byte %01010101,%01010101,%01010101
!byte 0
;54
!byte %10101010,%10101010,%10101010
!byte %10000000,%00000000,%00000010
!byte %10000000,%00000000,%00000010
!byte %10000000,%00000000,%00000010
!byte %10000000,%00000000,%00000010
!byte %10000000,%00000000,%00000010
!byte %10000000,%00000000,%00000010
!byte %10000000,%00000000,%00000010
!byte %10000000,%00000000,%00000010
!byte %10000000,%00000000,%00000010
!byte %10000000,%00000000,%00000010
!byte %10000000,%00000000,%00000010
!byte %10000000,%00000000,%00000010
!byte %10000000,%00000000,%00000010
!byte %10000000,%00000000,%00000010
!byte %10000000,%00000000,%00000010
!byte %10000000,%00000000,%00000010
!byte %10000000,%00000000,%00000010
!byte %10000000,%00000000,%00000010
!byte %10000000,%00000000,%00000010
!byte %10101010,%10101010,%10101010
!byte 0
;55
!byte %10101010,%10101010,%10101010
!byte %10000000,%00000000,%00000010
!byte %10001010,%10101010,%10100010
!byte %10001000,%00000000,%00100010
!byte %10001000,%00000000,%00100010
!byte %10001000,%00000000,%00100010
!byte %10001000,%00000000,%00100010
!byte %10001000,%00000000,%00100010
!byte %10001000,%00000000,%00100010
!byte %10001000,%00000000,%00100010
!byte %10001000,%00000000,%00100010
!byte %10001000,%00000000,%00100010
!byte %10001000,%00000000,%00100010
!byte %10001000,%00000000,%00100010
!byte %10001000,%00000000,%00100010
!byte %10001000,%00000000,%00100010
!byte %10001000,%00000000,%00100010
!byte %10001000,%00000000,%00100010
!byte %10001010,%10101010,%10100010
!byte %10000000,%00000000,%00000010
!byte %10101010,%10101010,%10101010
!byte 0
;56
!byte %10101010,%10101010,%10101010
!byte %10000000,%00000000,%00000010
!byte %10001010,%10101010,%10100010
!byte %10001000,%00000000,%00100010
!byte %10001000,%11111110,%00100010
!byte %10001000,%10000110,%00100010
!byte %10001000,%10000110,%00100010
!byte %10001000,%10000110,%00100010
!byte %10001000,%10000110,%00100010
!byte %10001000,%10000110,%00100010
!byte %10001000,%10000110,%00100010
!byte %10001000,%10000110,%00100010
!byte %10001000,%10000110,%00100010
!byte %10001000,%10000110,%00100010
!byte %10001000,%10000110,%00100010
!byte %10001000,%10000110,%00100010
!byte %10001000,%11111110,%00100010
!byte %10001000,%00000000,%00100010
!byte %10001010,%10101010,%10100010
!byte %10000000,%00000000,%00000010
!byte %10101010,%10101010,%10101010
!byte 0
;57
!for I = 0 TO 20
!byte %11011101,%01110111,%11101110
!end
!byte 0
;58
!for I = 0 TO 20
!byte %10101010,%10101010,%11111111
!end
!byte 0
;59
!for I = 0 TO 20
!byte %11111111,%01010101,%01010101
!end
!byte 0
;60
!for I = 0 TO 20
!byte %10111110,%11111111,%10111110
!end
!byte 0
