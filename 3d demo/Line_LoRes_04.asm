*= $1000 

; todo - create 4 separate line draw routines for each of the 4 colours
; todo - 3d line drawing routine 

BANK_HI_LO = 2
BANK_HI_HI = BANK_HI_LO +1
BANK_LO_LO = BANK_HI_HI +1
BANK_LO_HI = BANK_LO_LO +1

SCR_LO = BANK_LO_HI+1
SCR_HI = SCR_LO+1
SCR = SCR_LO

BANK = SCR_HI+1

LINE_FRAC = BANK+1
LINE_INC = LINE_FRAC+1
LINE_VER = LINE_INC+1
LINE_END = LINE_VER+1
H_ST = LINE_END+1
H_EN = H_ST+1
V_ST = H_EN+1
V_EN = V_ST+1

INCP = LINE_INC
PNT = LINE_VER
LIMIT = LINE_END

X_PNT_LO = V_EN+1
X_PNT_HI = X_PNT_LO+1
Y_PNT_LO = X_PNT_HI+1
Y_PNT_HI = Y_PNT_LO+1
Z_PNT_LO = Y_PNT_HI+1
Z_PNT_HI = Z_PNT_LO+1
X_OFF_LO = Z_PNT_HI+1
X_OFF_HI = X_OFF_LO+1
Y_OFF_LO = X_OFF_HI+1
Y_OFF_HI = Y_OFF_LO+1
Z_OFF_LO = Y_OFF_HI+1
Z_OFF_HI = Z_OFF_LO+1
CC = Z_OFF_HI+1
PNT_CNT = CC+1

X_PNT = X_PNT_LO
Y_PNT = Y_PNT_LO
Z_PNT = Z_PNT_LO
X_OFF = X_OFF_LO
Y_OFF = Y_OFF_LO
Z_OFF = Z_OFF_LO
LINE_CNT = PNT_CNT +1

DIVIDEND = LINE_CNT +1 ; 3 BYTES
DIVISOR = DIVIDEND +3 ; 3 BYTES
RESULT = DIVISOR +3 ; 3 BYTES?
REMAINDER = RESULT +3 ; 3 BYTES?
PZTEMP = LINE_FRAC


MAX_PNT = 128
       
RXL = 512
RXH = RXL+MAX_PNT
RYL = RXH+MAX_PNT
RYH = RYL+MAX_PNT
RZL = RYH+MAX_PNT
RZH = RZL+MAX_PNT
PXL = RZH+MAX_PNT
PXH = PXL+MAX_PNT
PYL = PXH+MAX_PNT
PYH = PYL+MAX_PNT
PCC = PYH+MAX_PNT

SCNX = 128/2
SCNY = 128/2

SEI        ; disable maskable IRQs

 LDA #$7F
 STA $DC0D  ; disable timer interrupts which can be generated by the two CIA chips
 STA $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

 LDA $DC0D  ; by reading this two registers we negate any pending CIA irqs.
 LDA $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

 LDA #$01   ; this is how to tell the VICII to generate a raster interrupt
 STA $D01A

 LDA #$F0   ; this is how to tell at which rasterline we want the irq to be triggered
 STA $D012

 LDA #$1B   ; as there are more than 256 rasterlines, the topmost bit of $d011 serves as
 STA $D011  ; the 9th bit for the rasterline we want our irq to be triggered. here we simply set up a character screen, leaving the topmost bit 0.

 LDA #$35   ; we turn off the BASIC and KERNAL rom here
 STA $01    ; the cpu now sees RAM everywhere except at $d000-$e000, where still the registers of SID/VICII/etc are visible

 ldA #<BM_IRQ  ; this is how we set up
 STA $FFFE     ; the address of our interrupt code
 LDA #>BM_IRQ
 STA $FFFF
  
 LDA #<NMI_NOP ; lsb
 STA $FFFA ; Create a nop, irq handler for NMI that gets called whenever RESTORE is pressed or similar.
 LDA #>NMI_NOP ; msb
 STA $FFFB ; We're putting our irq handler directly in the vector that usually points to the kernal's NMI handler since we have kernal banked out.

 LDA #$00  ; Force an NMI by setting up a timer. This will cause an NMI, that won't be acked. Any subsequent NMI's from RESTORE will be essentially disabled.
 STA $DD0E       ; Stop timer A
 STA $DD04       ; Set timer A to 0, NMI will occure immediately after start
 STA $DD0E

 LDA #$81
 STA $DD0D       ; Set timer A as source for NMI

 LDA #$01
 STA $DD0E       ; Start timer A -> NMI

 LDA #$02
 STA $DD00 ; bank
    
 LDA #$00
 STA $D021

 LDA #$01 ; colour 11 
 LDX #<$D800
 LDY #>$D800
 STX SCR+0
 STY SCR+1
 LDX #>1000 
 LDY #<1000
 JSR MEM_CLR

 LDA #$65 ; colour 01 (0000????) and colour 10 (????0000) - bank 1
 LDX #<($4000+$1c00)
 LDY #>($4000+$1c00)
 STX SCR+0
 STY SCR+1
 LDX #>1000 
 LDY #<1000
 JSR MEM_CLR

 LDA #$65 ; colour 01 (0000????) and colour 10 (????0000) - bank 2
 LDX #<($6000+$1c00)
 LDY #>($6000+$1c00)
 STX SCR+0
 STY SCR+1
 LDX #>1000 
 LDY #<1000
 JSR MEM_CLR
 
 LDA #0
 STA DIVIDEND

 LDA  #<2500
 STA  Y_OFF_LO
 LDA  #>2500
 STA  Y_OFF_HI

 LDA #0
 STA  X_OFF_LO
 STA  X_OFF_HI

 LDA  #<25700
 STA  Z_OFF_LO
 LDA  #>25700
 STA  Z_OFF_HI
 
CLI ; enable maskable interrupts again


MLOOP:
 JSR  SWAP_BANK
 JSR  SETUP_LINE_PLOT_POINTERS
 JSR  DRAW_OBJ
 JSR  KEYBOARD

JMP MLOOP ; we better don't RTS, the ROMS are now switched off, there's no way back to the system

!ZONE KEYBOARD
KEYBOARD:
      lda #$ff         ; write on port A
      sta $dc02
      lda #$00         ; read on port B
      sta $dc03
  
      lda #%11111101   ; s is in row 2 (the diagram on the wiki is transposed.)
      sta $dc00         ; instruct keyboard
      lda $dc01         ; read value from keyboard
      and #%00100000   ; s is in column 5 (mask it out)
      beq .s
      lda $dc01
      and #%00000100  ; a is in row 2 and column 3
      beq .a
      lda $dc01
      and #%00000010  ; w is in row 2 and column 2
      beq .w
      lda #%11111011  ; d is in row 3
      sta $dc00
      lda $dc01
      and #%00000100  ; d is in colum 3
      beq .d
      lda #%01111111   ; q is in row 8
      sta $dc00
      lda $dc01
      and #%01000000  ; q is in column 5
      beq .q
      lda #%11111101   ; z is in row 2
      sta $dc00
      lda $dc01
      and #%00010000  ; z is in column 4
      beq .z
      rts
.s  SEC
    LDA   Z_OFF_LO
    SBC   #50
    STA   Z_OFF_LO
    LDA   Z_OFF_HI
    SBC   #0
    STA   Z_OFF_HI
    rts
    
.w  CLC
    LDA   Z_OFF_LO
    ADC   #50
    STA   Z_OFF_LO
    LDA   Z_OFF_HI
    ADC   #0
    STA   Z_OFF_HI
    rts
    
.a  SEC
    LDA   X_OFF_LO
    SBC   #50
    STA   X_OFF_LO
    LDA   X_OFF_HI
    SBC   #0
    STA   X_OFF_HI
    rts
    
.d  LDA   X_OFF_LO
    ADC   #50
    STA   X_OFF_LO
    LDA   X_OFF_HI
    ADC   #0
    STA   X_OFF_HI
    rts
    
.q  SEC
    LDA   Y_OFF_LO
    SBC   #50
    STA   Y_OFF_LO
    LDA   Y_OFF_HI
    SBC   #0
    STA   Y_OFF_HI
    rts
    
.z  LDA   Y_OFF_LO
    ADC   #50
    STA   Y_OFF_LO
    LDA   Y_OFF_HI
    ADC   #0
    STA   Y_OFF_HI
    rts

SETUP_LINE_PLOT_POINTERS:
 LDX BANK_HI_LO
 LDY BANK_HI_HI
 STX PLOT_BANK_HI+1
 STY PLOT_BANK_HI+2
 STX DRAW_BANK_HI_1+1
 STY DRAW_BANK_HI_1+2
 STX DRAW_BANK_HI_2+1
 STY DRAW_BANK_HI_2+2
 STX DRAW_BANK_HI_3+1
 STY DRAW_BANK_HI_3+2
 STX DRAW_BANK_HI_4+1
 STY DRAW_BANK_HI_4+2
 
 LDX BANK_LO_LO
 LDY BANK_LO_HI
 STX PLOT_BANK_LO+1
 STY PLOT_BANK_LO+2
 STX DRAW_BANK_LO_1+1
 STY DRAW_BANK_LO_1+2
 STX DRAW_BANK_LO_2+1
 STY DRAW_BANK_LO_2+2
 STX DRAW_BANK_LO_3+1
 STY DRAW_BANK_LO_3+2
 STX DRAW_BANK_LO_4+1
 STY DRAW_BANK_LO_4+2
RTS


SETUP_COLOUR_AND:
 LDX #<SCR_AND_TAB
 LDY #>SCR_AND_TAB
 LDA #$3D
JMP SETUP_COLOUR

SETUP_COLOUR_OR:
 LDX #<SCR_OR_TAB
 LDY #>SCR_OR_TAB
 LDA #$1D
SETUP_COLOUR:
 STA PLOT_AND_OR_TAB
 STX PLOT_AND_OR_TAB+1
 STY PLOT_AND_OR_TAB+2
 STA DRAW_AND_OR_TAB_1
 STX DRAW_AND_OR_TAB_1+1
 STY DRAW_AND_OR_TAB_1+2
 STA DRAW_AND_OR_TAB_2
 STX DRAW_AND_OR_TAB_2+1
 STY DRAW_AND_OR_TAB_2+2
 STA DRAW_AND_OR_TAB_3
 STX DRAW_AND_OR_TAB_3+1
 STY DRAW_AND_OR_TAB_3+2
 STA DRAW_AND_OR_TAB_4
 STX DRAW_AND_OR_TAB_4+1
 STY DRAW_AND_OR_TAB_4+2
RTS


SWAP_BANK:
 LDA BANK
 CMP #$70
 BEQ BANK_0
  LDA #$70
  STA BANK
  LDX #<SCR_TAB_BANK_2_HI
  LDY #>SCR_TAB_BANK_2_HI
  STX BANK_HI_LO
  STY BANK_HI_HI
  LDX #<SCR_TAB_BANK_2_LO
  LDY #>SCR_TAB_BANK_2_LO
  STX BANK_LO_LO
  STY BANK_LO_HI
  JSR SCREEN_CLEAR_BANK_01
RTS

BANK_0: 
 LDA #$78
 STA BANK
 LDX #<SCR_TAB_BANK_1_HI
 LDY #>SCR_TAB_BANK_1_HI
 STX BANK_HI_LO
 STY BANK_HI_HI
 LDX #<SCR_TAB_BANK_1_LO
 LDY #>SCR_TAB_BANK_1_LO
 STX BANK_LO_LO
 STY BANK_LO_HI
 JSR SCREEN_CLEAR_BANK_00
RTS

!ZONE LINE00
LINE00:
 LDA H_ST
 CMP H_EN
 BCC .LINE_NOSWAP
  LDY H_EN
  STY H_ST
  STA H_EN
  LDX V_EN
  LDY V_ST
  STX V_ST
  STY V_EN

.LINE_NOSWAP:
 LDA V_EN
 CMP V_ST
 BCC .LINE_BLTR

.LINE_TLBR:
 SEC 
 LDA H_EN
 SBC H_ST
 STA SCR
 SEC
 LDA V_EN
 SBC V_ST
 CMP SCR ; Accumulator less than location SCR ?
 BCC .LINE_TLBR_XY ; yes
.LINE_TLBR_YX: ; no
  JMP CALC_INC_FRAC_HOR_INC_WHOLE_VER
.LINE_TLBR_XY: ; yes
 JMP CALC_INC_FRAC_VER_INC_WHOLE_HOR
 
.LINE_BLTR:
 SEC 
 LDA H_EN
 SBC H_ST
 STA SCR
 SEC
 LDA V_ST
 SBC V_EN
 CMP SCR ; Accumulator less than location SCR ?
 BCC .LINE_BLTR_XY ; yes
.LINE_BLTR_YX: ; no
  JMP CALC_INC_FRAC_HOR_DEC_WHOLE_VER
.LINE_BLTR_XY: ; yes
 JMP CALC_DEC_FRAC_VER_INC_WHOLE_HOR

CALC_INC_FRAC_HOR_INC_WHOLE_VER:
 SEC
 LDA H_EN ; calc x diff
 SBC H_ST
;;  lsr
 STA DIVIDEND+1
 SEC
 LDA V_EN
 STA LINE_END 
 SBC V_ST
;;  lsr
 STA DIVISOR
 JSR DIVIDE_1608
 LDA RESULT
 STA LINE_INC
 LDX H_ST
 LDY V_ST

LINE_INC_FRAC_HOR_INC_WHOLE_VER:  STY   LINE_VER
DRAW_BANK_LO_1:                   LDA   SCR_TAB_BANK_1_LO,Y
                                  STA   SCR_LO 
DRAW_BANK_HI_1:                   LDA   SCR_TAB_BANK_1_HI,Y
                                  STA   SCR_HI
                                  LDY   SCR_TAB3,X
                                  LDA   (SCR),Y
DRAW_AND_OR_TAB_1:                AND   SCR_AND_TAB,X
                                  STA   (SCR),Y 
                                  LDA   LINE_FRAC
                                  ADC   LINE_INC
                                  STA   LINE_FRAC
                                  BCC   LINE_IXIY_CONT
                                    INX
LINE_IXIY_CONT:                   LDY   LINE_VER
                                  INY
                                  CPY   LINE_END
                                  BNE   LINE_INC_FRAC_HOR_INC_WHOLE_VER
                                  RTS

CALC_INC_FRAC_VER_INC_WHOLE_HOR:
 SEC
 LDA V_EN ; calc x diff
 SBC V_ST
;;  lsr
 STA DIVIDEND+1
 SEC
 LDA H_EN
 STA LINE_END 
 SBC H_ST
;;  lsr
 STA DIVISOR
 JSR DIVIDE_1608
 LDA RESULT
 STA LINE_INC
 LDX H_ST
 LDY V_ST
 JMP LINE_INC_FRAC_VER_INC_WHOLE_HOR
                                  
LINE_IYIX_LOOP:                   LDA   LINE_FRAC
                                  ADC   LINE_INC
                                  STA   LINE_FRAC
                                  BCC   LINE_IYIX_CONT
                                    LDY   LINE_VER
                                    INY
LINE_INC_FRAC_VER_INC_WHOLE_HOR:    STY   LINE_VER
DRAW_BANK_LO_2:                     LDA   SCR_TAB_BANK_1_LO,Y
                                    STA   SCR_LO 
DRAW_BANK_HI_2:                     LDA   SCR_TAB_BANK_1_HI,Y 
                                    STA   SCR_HI 
LINE_IYIX_CONT:                   LDY   SCR_TAB3,X
                                  LDA   (SCR),Y
DRAW_AND_OR_TAB_2:                AND   SCR_AND_TAB,X
                                  STA   (SCR),Y 
                                  INX
                                  CPX   LINE_END
                                  BNE   LINE_IYIX_LOOP
                                  RTS 

CALC_INC_FRAC_HOR_DEC_WHOLE_VER:
 LDA V_EN
 STA LINE_END 
 SEC
 LDA H_EN
 SBC H_ST
;;  lsr
 STA DIVIDEND+1
 SEC
 LDA V_ST
 SBC V_EN
;;  lsr
 STA DIVISOR
 JSR DIVIDE_1608
 LDA RESULT
 STA LINE_INC
 LDX H_ST
 LDY V_ST
 
LINE_INC_FRAC_HOR_DEC_WHOLE_VER:  STY   LINE_VER
DRAW_BANK_LO_3:                   LDA   SCR_TAB_BANK_1_LO,Y
                                  STA   SCR_LO 
DRAW_BANK_HI_3:                   LDA   SCR_TAB_BANK_1_HI,Y
                                  STA   SCR_HI  
                                  LDY   SCR_TAB3,X
                                  LDA   (SCR),Y
DRAW_AND_OR_TAB_3:                AND   SCR_AND_TAB,X
                                  STA   (SCR),Y   
                                  LDA   LINE_FRAC
                                  ADC   LINE_INC
                                  STA   LINE_FRAC
                                  BCC   LINE_DXDY_CONT
                                    INX
LINE_DXDY_CONT:                   LDY   LINE_VER
                                  DEY
                                  CPY   LINE_END
                                  BNE   LINE_INC_FRAC_HOR_DEC_WHOLE_VER
                                  RTS
 
CALC_DEC_FRAC_VER_INC_WHOLE_HOR:
 SEC
 LDA V_ST ; calc x diff
 SBC V_EN
;;  lsr
 STA DIVIDEND+1
 SEC
 LDA H_EN
 STA LINE_END 
 SBC H_ST
;;  lsr
 STA DIVISOR
 JSR DIVIDE_1608
 LDA RESULT
 STA LINE_INC
 LDX H_ST
 LDY V_ST
 JMP LINE_DEC_FRAC_VER_INC_WHOLE_HOR
 
LINE_DYDX_LOOP:                   LDA   LINE_FRAC
                                  ADC   LINE_INC
                                  STA   LINE_FRAC
                                  BCC   LINE_DYDX_CONT
                                    LDY   LINE_VER
                                    DEY
LINE_DEC_FRAC_VER_INC_WHOLE_HOR:    STY   LINE_VER
DRAW_BANK_LO_4:                     LDA   SCR_TAB_BANK_1_LO,Y
                                    STA   SCR_LO 
DRAW_BANK_HI_4:                     LDA   SCR_TAB_BANK_1_HI,Y 
                                    STA   SCR_HI 
LINE_DYDX_CONT:                   LDY SCR_TAB3,X
                                  LDA (SCR),Y
DRAW_AND_OR_TAB_4:                AND SCR_AND_TAB,X
                                  STA (SCR),Y 
                                  INX
                                  CPX LINE_END
                                  BNE LINE_DYDX_LOOP
                                  RTS
                                  
PLOT:
PLOT_BANK_LO:     LDA   SCR_TAB_BANK_1_LO,Y
                  STA   SCR_LO 
PLOT_BANK_HI:     LDA   SCR_TAB_BANK_1_HI,Y 
                  STA   SCR_HI 
                  LDY   SCR_TAB3,X
                  LDA   (SCR),Y
PLOT_AND_OR_TAB:  ORA   SCR_OR_TAB,X
                  STA   (SCR),Y 
                  RTS
                 
!ZONE DRAW_OBJ
DRAW_OBJ:
  LDX #7 ;0
  LDY #11
; get object number,y
; get point adr hi,y
; get point adr lo,y
; get point count,y
; get line adr hi,y
; get line adr lo,y
; get line count,y
 
  STX   PNT_CNT
  STY   LINE_CNT

.POINT_LOOP
      LDY   PNT_CNT
.XPL: LDA   SHAPE_XL,Y
      STA   X_PNT_LO
.XPH: LDA   SHAPE_XH,Y
      STA   X_PNT_HI
.YPL: LDA   SHAPE_YL,Y
      STA   Y_PNT_LO
.YPH: LDA   SHAPE_YH,Y
      STA   Y_PNT_HI
.ZPL: LDA   SHAPE_ZL,Y
      STA   Z_PNT_LO
.ZPH: LDA   SHAPE_ZH,Y
      STA   Z_PNT_HI

      JSR   ROTATE_POINT
      LDY   PNT_CNT

      CLC
      LDA   X_PNT_LO  ; X_POS + X_OFFSET
      ADC   X_OFF_LO
      STA   X_PNT_LO
      STA   RXL,Y
      LDA   X_PNT_HI
      ADC   X_OFF_HI
      STA   X_PNT_HI
      STA   RXH,Y

      CLC
      LDA   Y_PNT_LO  ; Y_POS + Y_OFFSET
      ADC   Y_OFF_LO
      STA   Y_PNT_LO
      STA   RYL,Y
      LDA   Y_PNT_HI
      ADC   Y_OFF_HI
      STA   Y_PNT_HI
      STA   RYH,Y

      CLC
      LDA   Z_PNT_LO  ; Z_POS + Z_OFFSET
      ADC   Z_OFF_LO
      STA   Z_PNT_LO
      STA   RZL,Y
      LDA   Z_PNT_HI
      ADC   Z_OFF_HI
      STA   Z_PNT_HI
      STA   RZH,Y
     
      JSR   PERSPECTIVE_POINT
      LDY   PNT_CNT
      LDA   X_PNT_LO
      STA   PXL,Y
      LDA   X_PNT_HI
      STA   PXH,Y
      LDA   Y_PNT_LO
      STA   PYL,Y
      LDA   X_PNT_HI
      STA   PYH,Y
      
      JSR   CLIP_CODE
      LDY   PNT_CNT
      STA   PCC,Y
      STA   CC
         
      DEC PNT_CNT
      BMI .POINT_EXIT
      JMP .POINT_LOOP
 
.POINT_EXIT
.LINE_LOOP
      LDY   LINE_CNT
.SPS: LDX   SHAPE_PS,Y  ; point start
      LDA   PXL,X
      STA   H_ST
      LDA   PYL,X
      STA   V_ST
.SPE: LDX   SHAPE_PE,Y  ; point end
      LDA   PXL,X
      STA   H_EN
      LDA   PYL,X
      STA   V_EN
      JSR   LINE00
      DEC LINE_CNT
      BPL .LINE_LOOP
RTS

!ZONE ROTATE_POINT
ROTATE_POINT
RTS

!ZONE PERSPECTIVE_POINT
PERSPECTIVE_POINT
 
 LDA #0
 STA DIVIDEND
 LDA   X_PNT_LO
 STA   DIVIDEND+1
 LDA   X_PNT_HI
 STA   DIVIDEND+2 ; *256
 LDA   Z_PNT_LO
 STA   DIVISOR
 LDX   Z_PNT_HI
 INX               ; +256
 STX   DIVISOR+1
 LDA #0
 STA DIVISOR+2
 JSR   DIVS24S24

 LDA   DIVIDEND
 STA   X_PNT_LO
 LDA   DIVIDEND+1
 STA   X_PNT_HI
 
 LDA #0
 STA DIVIDEND
 LDA   Y_PNT_LO
 STA   DIVIDEND+1
 LDA   Y_PNT_HI
 STA   DIVIDEND+2 ; *256
 LDA   Z_PNT_LO
 STA   DIVISOR
 LDX   Z_PNT_HI
 INX             ; +256
 STX   DIVISOR+1
 LDA #0
 STA DIVISOR+2
 JSR   DIVS24S24
  
 LDA   DIVIDEND
 STA   Y_PNT_LO
 LDA   DIVIDEND+1
 STA   Y_PNT_HI

 CLC
 LDA   X_PNT_LO  ; ADD SCREEN X MIDDLE
 ADC   #<SCNX
 STA   X_PNT_LO
 LDA   X_PNT_HI ; ; faster to use bcc cont / inc X_PNT_HI
 ADC   #>SCNX
 STA   X_PNT_HI

 CLC
 LDA   Y_PNT_LO  ; ADD SCREEN Y MIDDLE
 ADC   #<SCNY
 STA   Y_PNT_LO 
 LDA   Y_PNT_HI ; faster to use bcc cont / inc Y_PNT_HI
 ADC   #>SCNY
 STA   Y_PNT_HI

 RTS

!ZONE CLIP_CODE
CLIP_CODE
RTS

!ZONE NEG24
!MACRO NEG24  NUM {
  SEC       ;Ensure carry is set
  LDA #0    ;Load constant zero
  SBC NUM   ;... subtract the least significant byte
  STA NUM   ;... and store the result
  LDA #0    ;Load constant zero again
  SBC NUM+1 ;... subtract the most significant byte
  STA NUM+1 ;... and store the result   
  LDA #0    ;Load constant zero again
  SBC NUM+2 ;... subtract the most significant byte
  STA NUM+2 ;... and store the result   
 }

!ZONE NEG16
!MACRO NEG16  NUM {
  SEC       ;Ensure carry is set
  LDA #0    ;Load constant zero
  SBC NUM   ;... subtract the least significant byte
  STA NUM   ;... and store the result
  LDA #0    ;Load constant zero again
  SBC NUM+1 ;... subtract the most significant byte
  STA NUM+1 ;... and store the result   
 }

!ZONE DIV24
!MACRO DIV24 {

  ASL   DIVIDEND  ;dividend lb & hb*2, msb -> Carry
  ROL   DIVIDEND+1  
  ROL   DIVIDEND+2
  ROL   REMAINDER       ;remainder lb & hb * 2 + msb from carry
  ROL   REMAINDER+1
  ROL   REMAINDER+2
  
  LDA   REMAINDER
  SEC
  SBC   DIVISOR         ;substract divisor to see if it fits in
  TAY                 ;lb result -> Y, for we may need it later
  LDA   REMAINDER+1
  SBC   DIVISOR+1
  TAX                 ;lb result -> X, for we may need it later ; sta in pztemp+1 and use lda #0 ?
  LDA   REMAINDER+2
  SBC   DIVISOR+2
  BCC   .SKIP            ;if carry=0 then divisor didn't fit in yet
    STA   REMAINDER+2   ;else save substraction result as new remainder,
    STX   REMAINDER+1
    STY   REMAINDER 
    INC   DIVIDEND      ;and INCrement result cause divisor fit in 1 times
.SKIP  
 }

!ZONE DIV_U24U24
!MACRO DIV_U24U24 {
  lda   #0          ;preset remainder to 0
  sta   REMAINDER
  sta   REMAINDER+1
  sta   REMAINDER+2

  +DIV24
  +DIV24
  +DIV24
  +DIV24
  +DIV24
  +DIV24
  +DIV24
  +DIV24
  +DIV24
  +DIV24
  +DIV24
  +DIV24
  +DIV24
  +DIV24
  +DIV24
  +DIV24
  +DIV24
  +DIV24
  +DIV24
  +DIV24
  +DIV24
  +DIV24
  +DIV24
  +DIV24
 }

!ZONE DIVU24U24
DIVU24U24
 +DIV_U24U24
  RTS

!ZONE DIVS24S24
DIVS24S24
  LDY   #0      ; reset sign count
  LDA   DIVIDEND+2    ; get x hi
  BPL   .POS1
    INY         ; inc count
    +NEG24  DIVIDEND  ; negate x
.POS1:
  STY   .COUNT+1  ;  TYA           ; store count  PHA           ; push on stack
 +DIV_U24U24
.COUNT:
  LDA   #0      ; PLA           ; get stack
  LSR           ; AND #1
  BCC   .POS2   ;  BEQ   .cont3
    +NEG16  DIVIDEND
.POS2:
  RTS
                                                   
MEM_CLR:
 STY BANK
 CPX #$00
 BEQ MC_LOOP_2

 LDY #$00
MC_LOOP_X:
MC_LOOP_Y:
   STA (SCR),Y
   DEY 
   BNE MC_LOOP_Y

  INC SCR+1
  DEX
  BNE MC_LOOP_X

MC_LOOP_2:
  LDY BANK
  CPY #$00
  BEQ MC_LOOP_END

MC_LOOP_3:
 STA (SCR),y
 DEY 
 BNE MC_LOOP_3
 
MC_LOOP_END:
RTS

!ZONE DIV_16
!MACRO DIV_16 {
        ASL DIVIDEND        ; Shift numerator low byte left 1 bit.                #5 asl #2 ; ASL = multiply *2
        ROL DIVIDEND+1      ; shift numerator high byte left 1 bit adding carry.  #5 
        LDA DIVIDEND+1      ; Load accumulator high byte.                         #3
        BCC .LABEL          ; Test carry produced by ROL                          #2
          SBC DIVISOR       ; if set subtract denominator and                     #3
          STA DIVIDEND+1    ; store in numerator high byte.                       #3
          SEC               ; Set carry prior to shifting into result             #2
          BCS .SHIFT        ; Jump to Shift.                                      #2
.LABEL  SEC                 ; Set carry prior to subtraction.                     #2
        SBC DIVISOR         ; Subtract denominator                                #3
        BCC .SHIFT          ; and test carry.                                     #2
          STA DIVIDEND+1    ; Store in numerator high byte.                       #3
.SHIFT  ROL RESULT          ; Shift either 0 or 1 into result.                    #5 ; ROL = multiply *2
}

!ZONE DIVIDE_1608
DIVIDE_1608
 LDA #0
 STA RESULT
 +DIV_16
 +DIV_16
 +DIV_16
 +DIV_16
 +DIV_16
 +DIV_16
 +DIV_16
 +DIV_16
 RTS  


!MACRO CLR_SCN B0 ,L0 {
  STA B0+(L0*320)+0,Y
  STA B0+(L0*320)+1,Y
  STA B0+(L0*320)+2,Y
  STA B0+(L0*320)+3,Y
  STA B0+(L0*320)+4,Y
  STA B0+(L0*320)+5,Y
  STA B0+(L0*320)+6,Y
  STA B0+(L0*320)+7,Y
}

!ZONE SCREEN_CLEAR_BANK_00:
SCREEN_CLEAR_BANK_00:
 LDA #$A5
 LDX #32
.LOOP:
  LDY CLEAR_TAB-1,X
 +CLR_SCN $4000, 0
 +CLR_SCN $4000, 1
 +CLR_SCN $4000, 2
 +CLR_SCN $4000, 3
 +CLR_SCN $4000, 4
 +CLR_SCN $4000, 5
 +CLR_SCN $4000, 6
 +CLR_SCN $4000, 7
 +CLR_SCN $4000, 8
 +CLR_SCN $4000, 9
 +CLR_SCN $4000, 10
 +CLR_SCN $4000, 11
 +CLR_SCN $4000, 12
 +CLR_SCN $4000, 13
 +CLR_SCN $4000, 14
 +CLR_SCN $4000, 15
  DEX
  BEQ .EXIT
  JMP .LOOP
.EXIT
RTS

!ZONE SCREEN_CLEAR_BANK_01:
SCREEN_CLEAR_BANK_01:
 LDA #$A5
 LDX #32
.LOOP:
  LDY CLEAR_TAB-1,X
 +CLR_SCN $6000, 0
 +CLR_SCN $6000, 1
 +CLR_SCN $6000, 2
 +CLR_SCN $6000, 3
 +CLR_SCN $6000, 4
 +CLR_SCN $6000, 5
 +CLR_SCN $6000, 6
 +CLR_SCN $6000, 7
 +CLR_SCN $6000, 8
 +CLR_SCN $6000, 9
 +CLR_SCN $6000, 10
 +CLR_SCN $6000, 11
 +CLR_SCN $6000, 12
 +CLR_SCN $6000, 13
 +CLR_SCN $6000, 14
 +CLR_SCN $6000, 15
  DEX
  BEQ .EXIT
  JMP .LOOP
.EXIT
RTS
  
BM_IRQ:
  dec $d020
 PHA
 TXA 
 PHA
 TYA 
 PHA 
 INC $D019    ;VIC Interrupt Request Register (IRR)

 LDA BANK
 STA $D018    ;VIC Memory Control Register
 
 LDA #$3B ; bitmap mode? - finding
 STA $D011    ;VIC Control Register 1

; LDA #$18
 LDA #%00011000 ; 0-2=SCRL 3=40/38 4=MCM 5-7=UNUSED
 STA $D016    ;VIC Control Register 2

 LDA #<TM_IRQ  ; raster interrupt setup - finding
 STA $fffe    ;IRQ
 LDA #>TM_IRQ  ; raster interrupt setup - finding
 STA $ffff    ;IRQ
  
 LDA #$E0     ; change screen to text at pos ba - finding
 STA $D012    ;Raster Position
 PLA 
 TAY
 PLA 
 TAX
 PLA
  inc $d020
NMI_NOP:
RTI ; This is the irq handler for the NMI. Just returns without acknowledge. This prevents subsequent NMI's from interfering.

TM_IRQ: 
  inc $d020
 PHA
 TXA 
 PHA
 TYA 
 PHA 
 INC $D019    ;VIC Interrupt Request Register (IRR)

 LDA #$7E
 STA $D018    ;VIC Memory Control Register

 LDA #$1B ; text mode? - finding 
 STA $D011    ;VIC Control Register 1

 LDA #$08
 STA $D016    ;VIC Control Register 2

 LDA #<BM_IRQ  ; raster interrupt setup - finding
 STA $FFFE    ;IRQ
 LDA #>BM_IRQ  ; raster interrupt setup - finding
 STA $FFFF    ;IRQ

 LDA #$FF     ; change screen to bitmap at pos 00 - finding
 STA $D012    ;Raster Position
 PLA 
 TAY
 PLA 
 TAX
 PLA  
  dec $d020
RTI

SHAPE_XL: !BYTE <1350,<-1350,<1350,<-1350,<1350,<-1350,<1350,<-1350
SHAPE_XH: !BYTE >1350,>-1350,>1350,>-1350,>1350,>-1350,>1350,>-1350
SHAPE_YL: !BYTE <1350,<1350,<-1350,<-1350,<1350,<1350,<-1350,<-1350
SHAPE_YH: !BYTE >1350,>1350,>-1350,>-1350,>1350,>1350,>-1350,>-1350
SHAPE_ZL: !BYTE <1350,<1350,<1350,<1350,<-1350,<-1350,<-1350,<-1350
SHAPE_ZH: !BYTE >1350,>1350,>1350,>1350,>-1350,>-1350,>-1350,>-1350

SHAPE_PS: !BYTE 0,1,3,2, 4,5,7,6 ,0,1,2,3
SHAPE_PE: !BYTE 1,3,2,0, 5,7,6,4 ,4,5,6,7

SCR_TAB3:
!BYTE $00,$00,$00,$00,$08,$08,$08,$08
!BYTE $10,$10,$10,$10,$18,$18,$18,$18
!BYTE $20,$20,$20,$20,$28,$28,$28,$28
!BYTE $30,$30,$30,$30,$38,$38,$38,$38
!BYTE $40,$40,$40,$40,$48,$48,$48,$48
!BYTE $50,$50,$50,$50,$58,$58,$58,$58
!BYTE $60,$60,$60,$60,$68,$68,$68,$68
!BYTE $70,$70,$70,$70,$78,$78,$78,$78
!BYTE $80,$80,$80,$80,$88,$88,$88,$88
!BYTE $90,$90,$90,$90,$98,$98,$98,$98
!BYTE $A0,$A0,$A0,$A0,$A8,$A8,$A8,$A8
!BYTE $B0,$B0,$B0,$B0,$B8,$B8,$B8,$B8
!BYTE $C0,$C0,$C0,$C0,$C8,$C8,$C8,$C8
!BYTE $D0,$D0,$D0,$D0,$D8,$D8,$D8,$D8
!BYTE $E0,$E0,$E0,$E0,$E8,$E8,$E8,$E8
!BYTE $F0,$F0,$F0,$F0,$F8,$F8,$F8,$F8
!BYTE $00,$00,$00,$00,$08,$08,$08,$08
!BYTE $10,$10,$10,$10,$18,$18,$18,$18
!BYTE $20,$20,$20,$20,$28,$28,$28,$28
!BYTE $30,$30,$30,$30,$38,$38,$38,$38
!BYTE $40,$40,$40,$40,$48,$48,$48,$48
!BYTE $50,$50,$50,$50,$58,$58,$58,$58
!BYTE $60,$60,$60,$60,$68,$68,$68,$68
!BYTE $70,$70,$70,$70,$78,$78,$78,$78
!BYTE $80,$80,$80,$80,$88,$88,$88,$88
!BYTE $90,$90,$90,$90,$98,$98,$98,$98
!BYTE $A0,$A0,$A0,$A0,$A8,$A8,$A8,$A8
!BYTE $B0,$B0,$B0,$B0,$B8,$B8,$B8,$B8
!BYTE $C0,$C0,$C0,$C0,$C8,$C8,$C8,$C8
!BYTE $D0,$D0,$D0,$D0,$D8,$D8,$D8,$D8
!BYTE $E0,$E0,$E0,$E0,$E8,$E8,$E8,$E8
!BYTE $F0,$F0,$F0,$F0,$F8,$F8,$F8,$F8

SCR_AND_TAB:
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

SCR_OR_TAB:
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03

SCR_TAB_BANK_1_HI:
!BYTE >($4000+(00*320)+0),>($4000+(00*320)+1),>($4000+(00*320)+2),>($4000+(00*320)+3),>($4000+(00*320)+4),>($4000+(00*320)+5),>($4000+(00*320)+6),>($4000+(00*320)+7)
!BYTE >($4000+(01*320)+0),>($4000+(01*320)+1),>($4000+(01*320)+2),>($4000+(01*320)+3),>($4000+(01*320)+4),>($4000+(01*320)+5),>($4000+(01*320)+6),>($4000+(01*320)+7)
!BYTE >($4000+(02*320)+0),>($4000+(02*320)+1),>($4000+(02*320)+2),>($4000+(02*320)+3),>($4000+(02*320)+4),>($4000+(02*320)+5),>($4000+(02*320)+6),>($4000+(02*320)+7)
!BYTE >($4000+(03*320)+0),>($4000+(03*320)+1),>($4000+(03*320)+2),>($4000+(03*320)+3),>($4000+(03*320)+4),>($4000+(03*320)+5),>($4000+(03*320)+6),>($4000+(03*320)+7)
!BYTE >($4000+(04*320)+0),>($4000+(04*320)+1),>($4000+(04*320)+2),>($4000+(04*320)+3),>($4000+(04*320)+4),>($4000+(04*320)+5),>($4000+(04*320)+6),>($4000+(04*320)+7)
!BYTE >($4000+(05*320)+0),>($4000+(05*320)+1),>($4000+(05*320)+2),>($4000+(05*320)+3),>($4000+(05*320)+4),>($4000+(05*320)+5),>($4000+(05*320)+6),>($4000+(05*320)+7)
!BYTE >($4000+(06*320)+0),>($4000+(06*320)+1),>($4000+(06*320)+2),>($4000+(06*320)+3),>($4000+(06*320)+4),>($4000+(06*320)+5),>($4000+(06*320)+6),>($4000+(06*320)+7)
!BYTE >($4000+(07*320)+0),>($4000+(07*320)+1),>($4000+(07*320)+2),>($4000+(07*320)+3),>($4000+(07*320)+4),>($4000+(07*320)+5),>($4000+(07*320)+6),>($4000+(07*320)+7)
!BYTE >($4000+(08*320)+0),>($4000+(08*320)+1),>($4000+(08*320)+2),>($4000+(08*320)+3),>($4000+(08*320)+4),>($4000+(08*320)+5),>($4000+(08*320)+6),>($4000+(08*320)+7)
!BYTE >($4000+(09*320)+0),>($4000+(09*320)+1),>($4000+(09*320)+2),>($4000+(09*320)+3),>($4000+(09*320)+4),>($4000+(09*320)+5),>($4000+(09*320)+6),>($4000+(09*320)+7)
!BYTE >($4000+(10*320)+0),>($4000+(10*320)+1),>($4000+(10*320)+2),>($4000+(10*320)+3),>($4000+(10*320)+4),>($4000+(10*320)+5),>($4000+(10*320)+6),>($4000+(10*320)+7)
!BYTE >($4000+(11*320)+0),>($4000+(11*320)+1),>($4000+(11*320)+2),>($4000+(11*320)+3),>($4000+(11*320)+4),>($4000+(11*320)+5),>($4000+(11*320)+6),>($4000+(11*320)+7)
!BYTE >($4000+(12*320)+0),>($4000+(12*320)+1),>($4000+(12*320)+2),>($4000+(12*320)+3),>($4000+(12*320)+4),>($4000+(12*320)+5),>($4000+(12*320)+6),>($4000+(12*320)+7)
!BYTE >($4000+(13*320)+0),>($4000+(13*320)+1),>($4000+(13*320)+2),>($4000+(13*320)+3),>($4000+(13*320)+4),>($4000+(13*320)+5),>($4000+(13*320)+6),>($4000+(13*320)+7)
!BYTE >($4000+(14*320)+0),>($4000+(14*320)+1),>($4000+(14*320)+2),>($4000+(14*320)+3),>($4000+(14*320)+4),>($4000+(14*320)+5),>($4000+(14*320)+6),>($4000+(14*320)+7)
!BYTE >($4000+(15*320)+0),>($4000+(15*320)+1),>($4000+(15*320)+2),>($4000+(15*320)+3),>($4000+(15*320)+4),>($4000+(15*320)+5),>($4000+(15*320)+6),>($4000+(15*320)+7)
!BYTE >($4000+(16*320)+0),>($4000+(16*320)+1),>($4000+(16*320)+2),>($4000+(16*320)+3),>($4000+(16*320)+4),>($4000+(16*320)+5),>($4000+(16*320)+6),>($4000+(16*320)+7)
!BYTE >($4000+(17*320)+0),>($4000+(17*320)+1),>($4000+(17*320)+2),>($4000+(17*320)+3),>($4000+(17*320)+4),>($4000+(17*320)+5),>($4000+(17*320)+6),>($4000+(17*320)+7)
!BYTE >($4000+(18*320)+0),>($4000+(18*320)+1),>($4000+(18*320)+2),>($4000+(18*320)+3),>($4000+(18*320)+4),>($4000+(18*320)+5),>($4000+(18*320)+6),>($4000+(18*320)+7)
!BYTE >($4000+(19*320)+0),>($4000+(19*320)+1),>($4000+(19*320)+2),>($4000+(19*320)+3),>($4000+(19*320)+4),>($4000+(19*320)+5),>($4000+(19*320)+6),>($4000+(19*320)+7)
!BYTE >($4000+(20*320)+0),>($4000+(20*320)+1),>($4000+(20*320)+2),>($4000+(20*320)+3),>($4000+(20*320)+4),>($4000+(20*320)+5),>($4000+(20*320)+6),>($4000+(20*320)+7)
!BYTE >($4000+(21*320)+0),>($4000+(21*320)+1),>($4000+(21*320)+2),>($4000+(21*320)+3),>($4000+(21*320)+4),>($4000+(21*320)+5),>($4000+(21*320)+6),>($4000+(21*320)+7)
!BYTE >($4000+(22*320)+0),>($4000+(22*320)+1),>($4000+(22*320)+2),>($4000+(22*320)+3),>($4000+(22*320)+4),>($4000+(22*320)+5),>($4000+(22*320)+6),>($4000+(22*320)+7)
!BYTE >($4000+(23*320)+0),>($4000+(23*320)+1),>($4000+(23*320)+2),>($4000+(23*320)+3),>($4000+(23*320)+4),>($4000+(23*320)+5),>($4000+(23*320)+6),>($4000+(23*320)+7)
!BYTE >($4000+(24*320)+0),>($4000+(24*320)+1),>($4000+(24*320)+2),>($4000+(24*320)+3),>($4000+(24*320)+4),>($4000+(24*320)+5),>($4000+(24*320)+6),>($4000+(24*320)+7)
!BYTE >($4000+(25*320)+0),>($4000+(25*320)+1),>($4000+(25*320)+2),>($4000+(25*320)+3),>($4000+(25*320)+4),>($4000+(25*320)+5),>($4000+(25*320)+6),>($4000+(25*320)+7)

SCR_TAB_BANK_1_LO:
!BYTE <($4000+(00*320)+0),<($4000+(00*320)+1),<($4000+(00*320)+2),<($4000+(00*320)+3),<($4000+(00*320)+4),<($4000+(00*320)+5),<($4000+(00*320)+6),<($4000+(00*320)+7)
!BYTE <($4000+(01*320)+0),<($4000+(01*320)+1),<($4000+(01*320)+2),<($4000+(01*320)+3),<($4000+(01*320)+4),<($4000+(01*320)+5),<($4000+(01*320)+6),<($4000+(01*320)+7)
!BYTE <($4000+(02*320)+0),<($4000+(02*320)+1),<($4000+(02*320)+2),<($4000+(02*320)+3),<($4000+(02*320)+4),<($4000+(02*320)+5),<($4000+(02*320)+6),<($4000+(02*320)+7)
!BYTE <($4000+(03*320)+0),<($4000+(03*320)+1),<($4000+(03*320)+2),<($4000+(03*320)+3),<($4000+(03*320)+4),<($4000+(03*320)+5),<($4000+(03*320)+6),<($4000+(03*320)+7)
!BYTE <($4000+(04*320)+0),<($4000+(04*320)+1),<($4000+(04*320)+2),<($4000+(04*320)+3),<($4000+(04*320)+4),<($4000+(04*320)+5),<($4000+(04*320)+6),<($4000+(04*320)+7)
!BYTE <($4000+(05*320)+0),<($4000+(05*320)+1),<($4000+(05*320)+2),<($4000+(05*320)+3),<($4000+(05*320)+4),<($4000+(05*320)+5),<($4000+(05*320)+6),<($4000+(05*320)+7)
!BYTE <($4000+(06*320)+0),<($4000+(06*320)+1),<($4000+(06*320)+2),<($4000+(06*320)+3),<($4000+(06*320)+4),<($4000+(06*320)+5),<($4000+(06*320)+6),<($4000+(06*320)+7)
!BYTE <($4000+(07*320)+0),<($4000+(07*320)+1),<($4000+(07*320)+2),<($4000+(07*320)+3),<($4000+(07*320)+4),<($4000+(07*320)+5),<($4000+(07*320)+6),<($4000+(07*320)+7)
!BYTE <($4000+(08*320)+0),<($4000+(08*320)+1),<($4000+(08*320)+2),<($4000+(08*320)+3),<($4000+(08*320)+4),<($4000+(08*320)+5),<($4000+(08*320)+6),<($4000+(08*320)+7)
!BYTE <($4000+(09*320)+0),<($4000+(09*320)+1),<($4000+(09*320)+2),<($4000+(09*320)+3),<($4000+(09*320)+4),<($4000+(09*320)+5),<($4000+(09*320)+6),<($4000+(09*320)+7)
!BYTE <($4000+(10*320)+0),<($4000+(10*320)+1),<($4000+(10*320)+2),<($4000+(10*320)+3),<($4000+(10*320)+4),<($4000+(10*320)+5),<($4000+(10*320)+6),<($4000+(10*320)+7)
!BYTE <($4000+(11*320)+0),<($4000+(11*320)+1),<($4000+(11*320)+2),<($4000+(11*320)+3),<($4000+(11*320)+4),<($4000+(11*320)+5),<($4000+(11*320)+6),<($4000+(11*320)+7)
!BYTE <($4000+(12*320)+0),<($4000+(12*320)+1),<($4000+(12*320)+2),<($4000+(12*320)+3),<($4000+(12*320)+4),<($4000+(12*320)+5),<($4000+(12*320)+6),<($4000+(12*320)+7)
!BYTE <($4000+(13*320)+0),<($4000+(13*320)+1),<($4000+(13*320)+2),<($4000+(13*320)+3),<($4000+(13*320)+4),<($4000+(13*320)+5),<($4000+(13*320)+6),<($4000+(13*320)+7)
!BYTE <($4000+(14*320)+0),<($4000+(14*320)+1),<($4000+(14*320)+2),<($4000+(14*320)+3),<($4000+(14*320)+4),<($4000+(14*320)+5),<($4000+(14*320)+6),<($4000+(14*320)+7)
!BYTE <($4000+(15*320)+0),<($4000+(15*320)+1),<($4000+(15*320)+2),<($4000+(15*320)+3),<($4000+(15*320)+4),<($4000+(15*320)+5),<($4000+(15*320)+6),<($4000+(15*320)+7)
!BYTE <($4000+(16*320)+0),<($4000+(16*320)+1),<($4000+(16*320)+2),<($4000+(16*320)+3),<($4000+(16*320)+4),<($4000+(16*320)+5),<($4000+(16*320)+6),<($4000+(16*320)+7)
!BYTE <($4000+(17*320)+0),<($4000+(17*320)+1),<($4000+(17*320)+2),<($4000+(17*320)+3),<($4000+(17*320)+4),<($4000+(17*320)+5),<($4000+(17*320)+6),<($4000+(17*320)+7)
!BYTE <($4000+(18*320)+0),<($4000+(18*320)+1),<($4000+(18*320)+2),<($4000+(18*320)+3),<($4000+(18*320)+4),<($4000+(18*320)+5),<($4000+(18*320)+6),<($4000+(18*320)+7)
!BYTE <($4000+(19*320)+0),<($4000+(19*320)+1),<($4000+(19*320)+2),<($4000+(19*320)+3),<($4000+(19*320)+4),<($4000+(19*320)+5),<($4000+(19*320)+6),<($4000+(19*320)+7)
!BYTE <($4000+(20*320)+0),<($4000+(20*320)+1),<($4000+(20*320)+2),<($4000+(20*320)+3),<($4000+(20*320)+4),<($4000+(20*320)+5),<($4000+(20*320)+6),<($4000+(20*320)+7)
!BYTE <($4000+(21*320)+0),<($4000+(21*320)+1),<($4000+(21*320)+2),<($4000+(21*320)+3),<($4000+(21*320)+4),<($4000+(21*320)+5),<($4000+(21*320)+6),<($4000+(21*320)+7)
!BYTE <($4000+(22*320)+0),<($4000+(22*320)+1),<($4000+(22*320)+2),<($4000+(22*320)+3),<($4000+(22*320)+4),<($4000+(22*320)+5),<($4000+(22*320)+6),<($4000+(22*320)+7)
!BYTE <($4000+(23*320)+0),<($4000+(23*320)+1),<($4000+(23*320)+2),<($4000+(23*320)+3),<($4000+(23*320)+4),<($4000+(23*320)+5),<($4000+(23*320)+6),<($4000+(23*320)+7)
!BYTE <($4000+(24*320)+0),<($4000+(24*320)+1),<($4000+(24*320)+2),<($4000+(24*320)+3),<($4000+(24*320)+4),<($4000+(24*320)+5),<($4000+(24*320)+6),<($4000+(24*320)+7)
!BYTE <($4000+(25*320)+0),<($4000+(25*320)+1),<($4000+(25*320)+2),<($4000+(25*320)+3),<($4000+(25*320)+4),<($4000+(25*320)+5),<($4000+(25*320)+6),<($4000+(25*320)+7)

SCR_TAB_BANK_2_HI:
!BYTE >($6000+(00*320)+0),>($6000+(00*320)+1),>($6000+(00*320)+2),>($6000+(00*320)+3),>($6000+(00*320)+4),>($6000+(00*320)+5),>($6000+(00*320)+6),>($6000+(00*320)+7)
!BYTE >($6000+(01*320)+0),>($6000+(01*320)+1),>($6000+(01*320)+2),>($6000+(01*320)+3),>($6000+(01*320)+4),>($6000+(01*320)+5),>($6000+(01*320)+6),>($6000+(01*320)+7)
!BYTE >($6000+(02*320)+0),>($6000+(02*320)+1),>($6000+(02*320)+2),>($6000+(02*320)+3),>($6000+(02*320)+4),>($6000+(02*320)+5),>($6000+(02*320)+6),>($6000+(02*320)+7)
!BYTE >($6000+(03*320)+0),>($6000+(03*320)+1),>($6000+(03*320)+2),>($6000+(03*320)+3),>($6000+(03*320)+4),>($6000+(03*320)+5),>($6000+(03*320)+6),>($6000+(03*320)+7)
!BYTE >($6000+(04*320)+0),>($6000+(04*320)+1),>($6000+(04*320)+2),>($6000+(04*320)+3),>($6000+(04*320)+4),>($6000+(04*320)+5),>($6000+(04*320)+6),>($6000+(04*320)+7)
!BYTE >($6000+(05*320)+0),>($6000+(05*320)+1),>($6000+(05*320)+2),>($6000+(05*320)+3),>($6000+(05*320)+4),>($6000+(05*320)+5),>($6000+(05*320)+6),>($6000+(05*320)+7)
!BYTE >($6000+(06*320)+0),>($6000+(06*320)+1),>($6000+(06*320)+2),>($6000+(06*320)+3),>($6000+(06*320)+4),>($6000+(06*320)+5),>($6000+(06*320)+6),>($6000+(06*320)+7)
!BYTE >($6000+(07*320)+0),>($6000+(07*320)+1),>($6000+(07*320)+2),>($6000+(07*320)+3),>($6000+(07*320)+4),>($6000+(07*320)+5),>($6000+(07*320)+6),>($6000+(07*320)+7)
!BYTE >($6000+(08*320)+0),>($6000+(08*320)+1),>($6000+(08*320)+2),>($6000+(08*320)+3),>($6000+(08*320)+4),>($6000+(08*320)+5),>($6000+(08*320)+6),>($6000+(08*320)+7)
!BYTE >($6000+(09*320)+0),>($6000+(09*320)+1),>($6000+(09*320)+2),>($6000+(09*320)+3),>($6000+(09*320)+4),>($6000+(09*320)+5),>($6000+(09*320)+6),>($6000+(09*320)+7)
!BYTE >($6000+(10*320)+0),>($6000+(10*320)+1),>($6000+(10*320)+2),>($6000+(10*320)+3),>($6000+(10*320)+4),>($6000+(10*320)+5),>($6000+(10*320)+6),>($6000+(10*320)+7)
!BYTE >($6000+(11*320)+0),>($6000+(11*320)+1),>($6000+(11*320)+2),>($6000+(11*320)+3),>($6000+(11*320)+4),>($6000+(11*320)+5),>($6000+(11*320)+6),>($6000+(11*320)+7)
!BYTE >($6000+(12*320)+0),>($6000+(12*320)+1),>($6000+(12*320)+2),>($6000+(12*320)+3),>($6000+(12*320)+4),>($6000+(12*320)+5),>($6000+(12*320)+6),>($6000+(12*320)+7)
!BYTE >($6000+(13*320)+0),>($6000+(13*320)+1),>($6000+(13*320)+2),>($6000+(13*320)+3),>($6000+(13*320)+4),>($6000+(13*320)+5),>($6000+(13*320)+6),>($6000+(13*320)+7)
!BYTE >($6000+(14*320)+0),>($6000+(14*320)+1),>($6000+(14*320)+2),>($6000+(14*320)+3),>($6000+(14*320)+4),>($6000+(14*320)+5),>($6000+(14*320)+6),>($6000+(14*320)+7)
!BYTE >($6000+(15*320)+0),>($6000+(15*320)+1),>($6000+(15*320)+2),>($6000+(15*320)+3),>($6000+(15*320)+4),>($6000+(15*320)+5),>($6000+(15*320)+6),>($6000+(15*320)+7)
!BYTE >($6000+(16*320)+0),>($6000+(16*320)+1),>($6000+(16*320)+2),>($6000+(16*320)+3),>($6000+(16*320)+4),>($6000+(16*320)+5),>($6000+(16*320)+6),>($6000+(16*320)+7)
!BYTE >($6000+(17*320)+0),>($6000+(17*320)+1),>($6000+(17*320)+2),>($6000+(17*320)+3),>($6000+(17*320)+4),>($6000+(17*320)+5),>($6000+(17*320)+6),>($6000+(17*320)+7)
!BYTE >($6000+(18*320)+0),>($6000+(18*320)+1),>($6000+(18*320)+2),>($6000+(18*320)+3),>($6000+(18*320)+4),>($6000+(18*320)+5),>($6000+(18*320)+6),>($6000+(18*320)+7)
!BYTE >($6000+(19*320)+0),>($6000+(19*320)+1),>($6000+(19*320)+2),>($6000+(19*320)+3),>($6000+(19*320)+4),>($6000+(19*320)+5),>($6000+(19*320)+6),>($6000+(19*320)+7)
!BYTE >($6000+(20*320)+0),>($6000+(20*320)+1),>($6000+(20*320)+2),>($6000+(20*320)+3),>($6000+(20*320)+4),>($6000+(20*320)+5),>($6000+(20*320)+6),>($6000+(20*320)+7)
!BYTE >($6000+(21*320)+0),>($6000+(21*320)+1),>($6000+(21*320)+2),>($6000+(21*320)+3),>($6000+(21*320)+4),>($6000+(21*320)+5),>($6000+(21*320)+6),>($6000+(21*320)+7)
!BYTE >($6000+(22*320)+0),>($6000+(22*320)+1),>($6000+(22*320)+2),>($6000+(22*320)+3),>($6000+(22*320)+4),>($6000+(22*320)+5),>($6000+(22*320)+6),>($6000+(22*320)+7)
!BYTE >($6000+(23*320)+0),>($6000+(23*320)+1),>($6000+(23*320)+2),>($6000+(23*320)+3),>($6000+(23*320)+4),>($6000+(23*320)+5),>($6000+(23*320)+6),>($6000+(23*320)+7)
!BYTE >($6000+(24*320)+0),>($6000+(24*320)+1),>($6000+(24*320)+2),>($6000+(24*320)+3),>($6000+(24*320)+4),>($6000+(24*320)+5),>($6000+(24*320)+6),>($6000+(24*320)+7)
!BYTE >($6000+(25*320)+0),>($6000+(25*320)+1),>($6000+(25*320)+2),>($6000+(25*320)+3),>($6000+(25*320)+4),>($6000+(25*320)+5),>($6000+(25*320)+6),>($6000+(25*320)+7)

SCR_TAB_BANK_2_LO:
!BYTE <($6000+(00*320)+0),<($6000+(00*320)+1),<($6000+(00*320)+2),<($6000+(00*320)+3),<($6000+(00*320)+4),<($6000+(00*320)+5),<($6000+(00*320)+6),<($6000+(00*320)+7)
!BYTE <($6000+(01*320)+0),<($6000+(01*320)+1),<($6000+(01*320)+2),<($6000+(01*320)+3),<($6000+(01*320)+4),<($6000+(01*320)+5),<($6000+(01*320)+6),<($6000+(01*320)+7)
!BYTE <($6000+(02*320)+0),<($6000+(02*320)+1),<($6000+(02*320)+2),<($6000+(02*320)+3),<($6000+(02*320)+4),<($6000+(02*320)+5),<($6000+(02*320)+6),<($6000+(02*320)+7)
!BYTE <($6000+(03*320)+0),<($6000+(03*320)+1),<($6000+(03*320)+2),<($6000+(03*320)+3),<($6000+(03*320)+4),<($6000+(03*320)+5),<($6000+(03*320)+6),<($6000+(03*320)+7)
!BYTE <($6000+(04*320)+0),<($6000+(04*320)+1),<($6000+(04*320)+2),<($6000+(04*320)+3),<($6000+(04*320)+4),<($6000+(04*320)+5),<($6000+(04*320)+6),<($6000+(04*320)+7)
!BYTE <($6000+(05*320)+0),<($6000+(05*320)+1),<($6000+(05*320)+2),<($6000+(05*320)+3),<($6000+(05*320)+4),<($6000+(05*320)+5),<($6000+(05*320)+6),<($6000+(05*320)+7)
!BYTE <($6000+(06*320)+0),<($6000+(06*320)+1),<($6000+(06*320)+2),<($6000+(06*320)+3),<($6000+(06*320)+4),<($6000+(06*320)+5),<($6000+(06*320)+6),<($6000+(06*320)+7)
!BYTE <($6000+(07*320)+0),<($6000+(07*320)+1),<($6000+(07*320)+2),<($6000+(07*320)+3),<($6000+(07*320)+4),<($6000+(07*320)+5),<($6000+(07*320)+6),<($6000+(07*320)+7)
!BYTE <($6000+(08*320)+0),<($6000+(08*320)+1),<($6000+(08*320)+2),<($6000+(08*320)+3),<($6000+(08*320)+4),<($6000+(08*320)+5),<($6000+(08*320)+6),<($6000+(08*320)+7)
!BYTE <($6000+(09*320)+0),<($6000+(09*320)+1),<($6000+(09*320)+2),<($6000+(09*320)+3),<($6000+(09*320)+4),<($6000+(09*320)+5),<($6000+(09*320)+6),<($6000+(09*320)+7)
!BYTE <($6000+(10*320)+0),<($6000+(10*320)+1),<($6000+(10*320)+2),<($6000+(10*320)+3),<($6000+(10*320)+4),<($6000+(10*320)+5),<($6000+(10*320)+6),<($6000+(10*320)+7)
!BYTE <($6000+(11*320)+0),<($6000+(11*320)+1),<($6000+(11*320)+2),<($6000+(11*320)+3),<($6000+(11*320)+4),<($6000+(11*320)+5),<($6000+(11*320)+6),<($6000+(11*320)+7)
!BYTE <($6000+(12*320)+0),<($6000+(12*320)+1),<($6000+(12*320)+2),<($6000+(12*320)+3),<($6000+(12*320)+4),<($6000+(12*320)+5),<($6000+(12*320)+6),<($6000+(12*320)+7)
!BYTE <($6000+(13*320)+0),<($6000+(13*320)+1),<($6000+(13*320)+2),<($6000+(13*320)+3),<($6000+(13*320)+4),<($6000+(13*320)+5),<($6000+(13*320)+6),<($6000+(13*320)+7)
!BYTE <($6000+(14*320)+0),<($6000+(14*320)+1),<($6000+(14*320)+2),<($6000+(14*320)+3),<($6000+(14*320)+4),<($6000+(14*320)+5),<($6000+(14*320)+6),<($6000+(14*320)+7)
!BYTE <($6000+(15*320)+0),<($6000+(15*320)+1),<($6000+(15*320)+2),<($6000+(15*320)+3),<($6000+(15*320)+4),<($6000+(15*320)+5),<($6000+(15*320)+6),<($6000+(15*320)+7)
!BYTE <($6000+(16*320)+0),<($6000+(16*320)+1),<($6000+(16*320)+2),<($6000+(16*320)+3),<($6000+(16*320)+4),<($6000+(16*320)+5),<($6000+(16*320)+6),<($6000+(16*320)+7)
!BYTE <($6000+(17*320)+0),<($6000+(17*320)+1),<($6000+(17*320)+2),<($6000+(17*320)+3),<($6000+(17*320)+4),<($6000+(17*320)+5),<($6000+(17*320)+6),<($6000+(17*320)+7)
!BYTE <($6000+(18*320)+0),<($6000+(18*320)+1),<($6000+(18*320)+2),<($6000+(18*320)+3),<($6000+(18*320)+4),<($6000+(18*320)+5),<($6000+(18*320)+6),<($6000+(18*320)+7)
!BYTE <($6000+(19*320)+0),<($6000+(19*320)+1),<($6000+(19*320)+2),<($6000+(19*320)+3),<($6000+(19*320)+4),<($6000+(19*320)+5),<($6000+(19*320)+6),<($6000+(19*320)+7)
!BYTE <($6000+(20*320)+0),<($6000+(20*320)+1),<($6000+(20*320)+2),<($6000+(20*320)+3),<($6000+(20*320)+4),<($6000+(20*320)+5),<($6000+(20*320)+6),<($6000+(20*320)+7)
!BYTE <($6000+(21*320)+0),<($6000+(21*320)+1),<($6000+(21*320)+2),<($6000+(21*320)+3),<($6000+(21*320)+4),<($6000+(21*320)+5),<($6000+(21*320)+6),<($6000+(21*320)+7)
!BYTE <($6000+(22*320)+0),<($6000+(22*320)+1),<($6000+(22*320)+2),<($6000+(22*320)+3),<($6000+(22*320)+4),<($6000+(22*320)+5),<($6000+(22*320)+6),<($6000+(22*320)+7)
!BYTE <($6000+(23*320)+0),<($6000+(23*320)+1),<($6000+(23*320)+2),<($6000+(23*320)+3),<($6000+(23*320)+4),<($6000+(23*320)+5),<($6000+(23*320)+6),<($6000+(23*320)+7)
!BYTE <($6000+(24*320)+0),<($6000+(24*320)+1),<($6000+(24*320)+2),<($6000+(24*320)+3),<($6000+(24*320)+4),<($6000+(24*320)+5),<($6000+(24*320)+6),<($6000+(24*320)+7)
!BYTE <($6000+(25*320)+0),<($6000+(25*320)+1),<($6000+(25*320)+2),<($6000+(25*320)+3),<($6000+(25*320)+4),<($6000+(25*320)+5),<($6000+(25*320)+6),<($6000+(25*320)+7)

CLEAR_TAB:
!BYTE 00*8,01*8,02*8,03*8,04*8,05*8,06*8,07*8,08*8,09*8,10*8,11*8,12*8,13*8,14*8,15*8,16*8,17*8,18*8,19*8,20*8,21*8,22*8,23*8,24*8,25*8,26*8,27*8,28*8,29*8,30*8,31*8

