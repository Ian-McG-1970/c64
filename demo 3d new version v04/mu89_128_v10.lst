
;6502/65C02/65816/CPU64/DTV Turbo Assembler V1.47 listing file of "mu89_128_v10.tas"
;done on Sun Feb 12 19:10:05 2023

=0002					SCREEN_POS_LO = $02

=0003					SCREEN_POS_HI = $03

=0024					SCREEN_FLIP = $24

=0066					LINE_INC = $66

=0002					SCREEN_POS_PTR = $02

=0040					SCREEN_0 = $40

=0060					SCREEN_1 = $60

=0052					X_POS_HI = $52 ; is actually start?

=0053					X_POS_LO = $53

=0054					Y_POS_HI = $54

=0055					Y_POS_LO = $55

=0056					Z_POS_HI = $56

=0057					Z_POS_LO = $57

=0006					ab06 = $06 ; math temp?

=0007					ab07 = $07 ; math temp?

=0008					LINE_FRACTION_ab08 = $08

=0008					ab08 = $08 ; math temp? line draw fraction?

=0009					ab09 = $09 ; math temp?

=0008					Z_ROT_LO = $08 ; math temp?

=0009					Z_ROT_HI = $09 

=000a					ab0A = $0A ; math temp?

=000b					ab0B = $0B ; math temp?

=000a					Z_CLIP_LO_ab0A = $0A

=000b					Z_CLIP_HI_ab0B = $0B

=000a					H_PERS_FP_LO_DIFF_ab0A = $0A

=000b					H_PERS_FP_HI_DIFF_ab0B = $0B

=000a					X_ROT_LO = $0A

=000b					X_ROT_HI = $0B

=000c					Z_CLIP_LO_ab0C = $0C ; math temp?

=000d					Z_CLIP_HI_ab0D = $0D ; math temp?

=000c					V_PERS_FP_LO_DIFF_ab0C = $0C

=000d					V_PERS_FP_HI_DIFF_ab0D = $0D

=0018					ab18 = $18 ; math temp?

=0019					POINT_LINE_COUNT = $19

=000e					REGA = $0E

=000f					REGX = $0F

=0020					REGY = $20

=0018					FOCUS = $18 ; focus value not location

=0022					FP_MULTIPLY_LO = $22

=0023					FP_MULTIPLY_HI = $23

=0022					FP_DIVIDE_LO = FP_MULTIPLY_LO

=0023					FP_DIVIDE_HI = FP_MULTIPLY_HI

=002c					ROT_LO = $2C

=002d					ROT_HI = $2D

=003c					SIN_LO = $3C

=003d					SIN_HI = $3D

=003e					COS_LO = $3E

=003f					COS_HI = $3F

=0058					X_ROTATION_LO = $58 ; is actually end?

=0059					X_ROTATION_HI = $59

=005a					Y_ROTATION_LO = $5A

=005b					Y_ROTATION_HI = $5B

=005c					Z_ROTATION_LO = $5C

=005d					Z_ROTATION_HI = $5D

=005e					H_PERS_FP_LO_ST = $5E	; hor pers pos lo fp point start

=005f					H_PERS_FP_HI_ST = $5F	; hor pers pos hi fp point start

=0060					V_PERS_FP_LO_ST = $60	; ver pers pos lo fp point start

=0061					V_PERS_FP_HI_ST = $61	; ver pers pos hi fp point start

=0062					H_PERS_FP_LO_EN = $62	; hor pers pos lo fp point end

=0063					H_PERS_FP_HI_EN = $63	; hor pers pos hi fp point end

=0064					V_PERS_FP_LO_EN = $64	; ver pers pos lo fp point end

=0065					V_PERS_FP_HI_EN = $65	; ver pers pos hi fp point end

=0067					LINE_TYPE_POINTER = $67 ; line type?

=0068					ab68 = $68

=0069					ab69 = $69

=006a					LINE_START_HOR = $6A ; line start x?

=006b					LINE_START_VER = $6B ; line start y?

=006c					PERS_HOR_ab6C = $6C	; pers?

=006d					PERS_VER_ab6D = $6D  ; pers?

=006e					POINT_CLASSIFY_ST = $6E	; start point classification of this point?

=006f					POINT_CLASSIFY_EN = $6F  ; end point classification

=0072					CURR_X_LSB = $72

=0073					CURR_X_MSB = $73

=0074					CURR_X_HSB = $74

=0075					CURR_Y_LSB = $75

=0076					CURR_Y_MSB = $76

=0077					CURR_Y_HSB = $77

=0078					CURR_Z_LSB = $78

=0079					CURR_Z_MSB = $79

=007a					CURR_Z_HSB = $7A

=0040					SCR_HOR_MID = 128/2 ; tobe 128/2 was 160/2

=0040					SCR_VER_MID = 128/2 ; tobe 128/2 was 136/2

=0004					ab90_VAL = $04	; -80

=0019					ab91_VAL = $19 	; -80

=00f8					ab92_VAL = $f8  ; +79 ; tobe $04 was $3C

=0014					ab93_VAL = $14  ; +79

=0004					ab94_VAL = $04  ; -68

=0019					ab95_VAL = $19  ; -68

=00f8					ab96_VAL = $f8	; +67

=0014					ab97_VAL = $14  ; +67

=0080					CLIP_TEST_BOTTOM = 128 ; $88 	; tobe 128 was $88

=007f					CLIP_BOTTOM = CLIP_TEST_BOTTOM-1

=0080					CLIP_TEST_RIGHT = 128 ; $A0 	; tobe 128 was $A0

=007f					CLIP_RIGHT = CLIP_TEST_RIGHT-1

=0000					CLIP_TEST_TOP = $00

=0000					CLIP_TEST_LEFT = $00

=00aa					SPEED_LO = $AA

=00ab					SPEED_HI = $AB

=00ac					ROT_SPD = $AC

=00ad					OBJECT_POINTER_POS = $AD

=00af					CURRENT_OBJECT = $AF

=00b0					NUMBER_OF_POINTS = $B0

=00b2					DRAW_OBJECT_COUNT = $B2

=00b3					DRAW_OBJECT_COUNTER = $B3

=00cf					OBJ_PNT_X_LSB 	= $CF

=00d0					OBJ_PNT_X_MSB 	= $D0

=00d1					OBJ_PNT_Y_LSB 	= $D1

=00d2					OBJ_PNT_Y_MSB 	= $D2

=00d3					OBJ_PNT_Z_LSB 	= $D3

=00d4					OBJ_PNT_Z_MSB 	= $D4

=00d5					DIFF_X_LSB = $D5

=00d6					DIFF_X_MSB = $D6

=00d7					DIFF_X_HSB = $D7

=00d8					DIFF_Y_LSB = $D8

=00d9					DIFF_Y_MSB = $D9

=00da					DIFF_Y_HSB = $DA

=00db					DIFF_Z_LSB = $DB

=00dc					DIFF_Z_MSB = $DC

=00dd					DIFF_Z_HSB = $DD

=001d					OBJECT_POINTER = $1D

=0001					FP_SIGN = $01

=fffe					IRQ = $FFFE

=0001					PNT_OFF_HOR = $01	; PNT_OFF_RIGHT = $01

=0002					PNT_OFF_VER = $02	; PNT_OFF_BOTTOM = $02

=e000					OVERFLOW = $E000 ; overflow?

.0801					startup

.0801	 78		sei			SEI

.0802	 a2 ff		ldx #$ff		LDX #$FF

.0804	 9a		txs			TXS

.0805	 a9 00		lda #$00	 LDA #$00

.0807	 8d 20 d0	sta $d020	 STA $D020

.080a	 a9 01		lda #$01	 LDA #$01 ; $00

.080c	 8d 21 d0	sta $d021	 STA $D021

.080f	 a9 0b		lda #$0b	 LDA #$0B ; $00

.0811	 8d 22 d0	sta $d022	 STA $D022

.0814	 a9 0c		lda #$0c	 LDA #$0C ; $00

.0816	 8d 23 d0	sta $d023	 STA $D023

.0819	 a9 00		lda #$00	 LDA #$00 ; $01 ; colour 11 

.081b	 a2 00		ldx #$00	 LDX #<$D800

.081d	 a0 d8		ldy #$d8	 LDY #>$D800

.081f	 86 02		stx $02		 STX SCREEN_POS_LO+0

.0821	 84 03		sty $03		 STY SCREEN_POS_LO+1

.0823	 a2 03		ldx #$03	 LDX #>1000 

.0825	 a0 e8		ldy #$e8	 LDY #<1000

.0827	 20 8e 09	jsr $098e	 JSR MEMSET

.082a	 a9 bc		lda #$bc	 LDA #$BC ;$65 ; colour 01 (0000????) and colour 10 (????0000) - bank 1

.082c	 a2 00		ldx #$00	 LDX #<(SCREEN_COLOUR)

.082e	 a0 5c		ldy #$5c	 LDY #>(SCREEN_COLOUR)

.0830	 86 02		stx $02		 STX SCREEN_POS_LO+0

.0832	 84 03		sty $03		 STY SCREEN_POS_LO+1

.0834	 a2 03		ldx #$03	 LDX #>1000 

.0836	 a0 e8		ldy #$e8	 LDY #<1000

.0838	 20 8e 09	jsr $098e	 JSR MEMSET

.083b	 a9 35		lda #$35		LDA #$35

.083d	 85 01		sta $01			STA $1

.083f	 a9 70		lda #$70		LDA #$70

.0841	 8d 18 d0	sta $d018		STA $D018

.0844	 a9 3b		lda #$3b		LDA #$3B

.0846	 8d 11 d0	sta $d011		STA $D011

.0849	 a9 18		lda #$18		LDA #$18

.084b	 8d 16 d0	sta $d016		STA $D016

.084e	 a9 42		lda #$42		LDA #<IRQ_1

.0850	 8d fe ff	sta $fffe		STA $FFFE

.0853	 a9 09		lda #$09		LDA #>IRQ_1

.0855	 8d ff ff	sta $ffff		STA $FFFF

.0858	 a9 7f		lda #$7f	 LDA #$7F

.085a	 8d 0d dc	sta $dc0d	 STA $DC0D  ; disable timer interrupts which can be generated by the two CIA chips

.085d	 8d 0d dd	sta $dd0d	 STA $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

.0860	 ad 0d dc	lda $dc0d	 LDA $DC0D  ; by reading this two registers we negate any pending CIA irqs.

.0863	 ad 0d dd	lda $dd0d	 LDA $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

.0866	 a9 01		lda #$01	  LDA #$01   ; this is how to tell the VICII to generate a raster interrupt

.0868	 8d 1a d0	sta $d01a	 STA $D01A

.086b	 a9 02		lda #$02	 LDA #2 ; SCRNBANK

.086d	 8d 00 dd	sta $dd00	 STA $DD00 ; bank

.0870	 a9 ba		lda #$ba		LDA #$BA

.0872	 8d 12 d0	sta $d012		STA $D012

.0875	 a9 01		lda #$01		LDA #$01

.0877	 8d 19 d0	sta $d019		STA $D019

.087a	 a9 07		lda #$07		LDA		#7

.087c	 85 ac		sta $ac			STA		ROT_SPD

.087e	 a9 40		lda #$40		LDA		#$40

.0880	 85 aa		sta $aa			STA		SPEED_LO

.0882	 a9 18		lda #$18		LDA		#$18

.0884	 85 ab		sta $ab			STA		SPEED_HI

.0886	 a9 01		lda #$01		LDA		#1 ;7

.0888	 85 b2		sta $b2			STA		DRAW_OBJECT_COUNT

.088a	 a9 00		lda #$00		LDA		#0

.088c	 85 2c		sta $2c			STA		ROT_LO

.088e	 85 2d		sta $2d			STA		ROT_HI

.0890	 85 73		sta $73			STA		CURR_X_MSB

.0892	 85 74		sta $74			STA		CURR_X_HSB

.0894	 85 76		sta $76			STA		CURR_Y_MSB

.0896	 85 77		sta $77			STA		CURR_Y_HSB

.0898	 85 79		sta $79			STA		CURR_Z_MSB

.089a	 85 7a		sta $7a			STA		CURR_Z_HSB

.089c	 58		cli			CLI

.089d					main_loop
.089d	 20 a8 17	jsr $17a8				JSR 	READ_JOYSTICK_KEYBOARD

.08a0	 20 f9 10	jsr $10f9				JSR		SIN_COS

.08a3	 20 49 14	jsr $1449				JSR 	DRAW_SCREEN

.08a6	 20 0e 14	jsr $140e				JSR 	COLOUR_SETUP_BLACK ; COLOUR_SETUP_WHITE ; BLACK

.08a9	 20 f7 0b	jsr $0bf7				JSR 	DRAW_OBJECTS

.08ac	 a6 73		ldx $73					LDX CURR_X_MSB

.08ae	 a5 74		lda $74					LDA CURR_X_HSB

.08b0	 a0 00		ldy #$00				LDY	#0

.08b2	 20 15 18	jsr $1815				JSR	HEX16

.08b5	 a5 72		lda $72					LDA CURR_X_LSB

.08b7	 a2 20		ldx #$20				LDX #32

.08b9	 a0 00		ldy #$00				LDY	#0

.08bb	 20 28 18	jsr $1828				JSR	HEX8

.08be	 a6 76		ldx $76					LDX CURR_Y_MSB

.08c0	 a5 77		lda $77					LDA CURR_Y_HSB

.08c2	 a0 06		ldy #$06				LDY	#6

.08c4	 20 15 18	jsr $1815				JSR	HEX16

.08c7	 a5 75		lda $75					LDA CURR_Y_LSB

.08c9	 a2 20		ldx #$20				LDX #32

.08cb	 a0 06		ldy #$06				LDY	#6

.08cd	 20 28 18	jsr $1828				JSR	HEX8

.08d0	 a6 79		ldx $79					LDX CURR_Z_MSB

.08d2	 a5 7a		lda $7a					LDA CURR_Z_HSB

.08d4	 a0 0c		ldy #$0c				LDY	#12

.08d6	 20 15 18	jsr $1815				JSR	HEX16

.08d9	 a5 78		lda $78					LDA CURR_Z_LSB

.08db	 a2 20		ldx #$20				LDX #32

.08dd	 a0 0c		ldy #$0c				LDY	#12

.08df	 20 28 18	jsr $1828				JSR	HEX8

.08e2	 ad 50 1a	lda $1a50				LDA OBJECTS_TO_DRAW+1

.08e5	 a2 00		ldx #$00				LDX #0

.08e7	 a0 12		ldy #$12				LDY	#18

.08e9	 20 28 18	jsr $1828				JSR	HEX8

.08ec	 18		clc					CLC

.08ed	 ad 3d 09	lda $093d				LDA		TEST_LSB

.08f0	 69 01		adc #$01				ADC		#1

.08f2	 8d 3d 09	sta $093d				STA		TEST_LSB

.08f5	 ad 3e 09	lda $093e				LDA		TEST_MSB

.08f8	 69 00		adc #$00				ADC		#0

.08fa	 8d 3e 09	sta $093e				STA		TEST_MSB

.08fd	 ad 3f 09	lda $093f				LDA		TEST_HSB

.0900	 69 00		adc #$00				ADC		#0

.0902	 8d 3f 09	sta $093f				STA		TEST_HSB			

.0905	 ad 3f 09	lda $093f				LDA		TEST_HSB

.0908	 a2 00		ldx #$00				LDX 	#0

.090a	 a0 18		ldy #$18				LDY		#24

.090c	 20 28 18	jsr $1828				JSR		HEX8

.090f	 ad 3e 09	lda $093e				LDA		TEST_MSB

.0912	 a2 10		ldx #$10				LDX 	#16

.0914	 a0 18		ldy #$18				LDY		#24

.0916	 20 28 18	jsr $1828				JSR		HEX8

.0919	 ad 3d 09	lda $093d				LDA		TEST_LSB

.091c	 a2 20		ldx #$20				LDX 	#32

.091e	 a0 18		ldy #$18				LDY		#24

.0920	 20 28 18	jsr $1828				JSR		HEX8

.0923	 ac 3d 09	ldy $093d				LDY		TEST_LSB

.0926	 ae 3e 09	ldx $093e				LDX		TEST_MSB

.0929	 ad 3f 09	lda $093f				LDA		TEST_HSB

.092c	 20 b5 0b	jsr $0bb5				JSR		BIT24TOFP

.092f	 8c 40 09	sty $0940				STY		TEST_HI

.0932	 ae 40 09	ldx $0940				LDX		TEST_HI

.0935	 a0 1e		ldy #$1e				LDY		#30

.0937	 20 15 18	jsr $1815				JSR		HEX16

.093a	 4c 9d 08	jmp $089d				JMP MAIN_LOOP


>093d	 00                       	TEST_LSB	.byte 0

>093e	 00                       	TEST_MSB	.byte 0

>093f	 00                       	TEST_HSB	.byte 0

>0940	 00                       	TEST_HI 	.byte 0

>0941	 00                       	TEST_LO 	.byte 0


.0942	 48		pha		IRQ_1   		PHA

.0943	 a9 7e		lda #$7e					LDA 	#$7E

.0945	 8d 18 d0	sta $d018					STA 	$D018   ;VIC Memory Control Register

.0948	 a9 68		lda #$68					LDA 	#<IRQ_2

.094a	 8d fe ff	sta $fffe					STA 	IRQ

.094d	 a9 09		lda #$09					LDA 	#>IRQ_2

.094f	 8d ff ff	sta $ffff					STA 	IRQ+1

.0952	 a9 00		lda #$00					LDA 	#$00

.0954	 8d 12 d0	sta $d012					STA 	$D012	;Raster Position

.0957	 a9 1b		lda #$1b					LDA 	#$1B

.0959	 8d 11 d0	sta $d011					STA 	$D011   ;VIC Control Register 1

.095c	 a9 08		lda #$08					LDA 	#$08

.095e	 8d 16 d0	sta $d016					STA 	$D016   ;VIC Control Register 2

.0961	 a9 01		lda #$01					LDA 	#$01

.0963	 8d 19 d0	sta $d019					STA 	$D019   ;VIC Interrupt Request Register (IRR)

.0966	 68		pla						PLA 

.0967	 40		rti		NMI_NOP			RTI ; This is the irq handler for the NMI. Just returns without acknowledge. This prevents subsequent NMI's from interfering.

.0968	 48		pha		IRQ_2  			PHA

.0969	 a9 00		lda #$00	VIC_SCREEN_BANK	LDA 	#0

.096b	 8d 18 d0	sta $d018					STA 	$D018    ;VIC Memory Control Register

.096e	 a9 42		lda #$42					LDA 	#<IRQ_1

.0970	 8d fe ff	sta $fffe					STA 	IRQ

.0973	 a9 09		lda #$09					LDA 	#>IRQ_1

.0975	 8d ff ff	sta $ffff					STA 	IRQ+1

.0978	 a9 b2		lda #$b2					LDA 	#178	; 186

.097a	 8d 12 d0	sta $d012					STA 	$D012    ;Raster Position

.097d	 a9 3b		lda #$3b					LDA 	#$3B

.097f	 8d 11 d0	sta $d011					STA 	$D011    ;VIC Control Register 1

.0982	 a9 18		lda #$18					LDA 	#$18

.0984	 8d 16 d0	sta $d016					STA 	$D016    ;VIC Control Register 2

.0987	 a9 01		lda #$01					LDA 	#$01

.0989	 8d 19 d0	sta $d019					STA 	$D019    ;VIC Interrupt Request Register (IRR)

.098c	 68		pla						PLA 

.098d	 40		rti						RTI

.098e	 8c a2 09	sty $09a2	MEMSET       STY    LSB_ONLY+1 ; store LSB count

.0991	 e0 00		cpx #$00	             CPX    #0          ; MSB?     

.0993	 f0 0c		beq $09a1	             BEQ    LSB_ONLY   ; no

.0995	 a0 00		ldy #$00	             LDY    #0          ; yes so reset LSB

.0997					msb_loop
.0997	 91 02		sta ($02),y	LSB_LOOP      STA    (SCREEN_POS_LO),Y   ; clear whole MSB

.0999	 88		dey		               DEY 

.099a	 d0 fb		bne $0997	               BNE    LSB_LOOP

.099c	 e6 03		inc $03		              INC    SCREEN_POS_LO+1      ; inc MSB

.099e	 ca		dex		              DEX               ; dec MSB count

.099f	 d0 f6		bne $0997	              BNE    MSB_LOOP

.09a1	 a0 00		ldy #$00	LSB_ONLY    LDY    #0          ; LSB count 

.09a3	 f0 07		beq $09ac	             BEQ    MS_END

.09a5	 91 02		sta ($02),y	LAST_LSB_LOOP STA   (SCREEN_POS_LO),Y

.09a7	 88		dey		               DEY 

.09a8	 d0 fb		bne $09a5	               BNE   LAST_LSB_LOOP               

.09aa	 91 02		sta ($02),y	              STA   (SCREEN_POS_LO),Y     ; clear last Y (0)

.09ac	 60		rts		MS_END      RTS

.09ad	 85 23		sta $23		FP_DIVIDE	STA		FP_DIVIDE_HI	; inputs = X-(LO) + Y-(HI) + A (HI) + FP_MULTILPLY_LO - outputs = AY

.09af	 b9 00 2c	lda $2c00,y				LDA 	LOG_TABLE,Y

.09b2	 a4 22		ldy $22					LDY 	FP_DIVIDE_LO

.09b4	 38		sec					SEC 

.09b5	 f9 00 2c	sbc $2c00,y				SBC 	LOG_TABLE,Y

.09b8	 a8		tay					TAY

.09b9	 8a		txa					TXA

.09ba	 be 00 2d	ldx $2d00,y				LDX 	EXP_TABLE,Y

.09bd	 09 02		ora #$02				ORA 	#$02

.09bf	 b0 03		bcs $09c4				BCS 	_FP_DIV_CNT

.09c1	 e9 03		sbc #$03						SBC 	#$03	; subtract 00000011

.09c3	 38		sec							SEC 

.09c4	 e5 23		sbc $23		_FP_DIV_CNT SBC 	FP_DIVIDE_HI

.09c6	 29 fd		and #$fd				AND 	#$FD

.09c8	 60		rts					RTS

.09c9	 85 23		sta $23		FP_MULTIPLY	STA		FP_MULTIPLY_HI	; inputs = X-(LO) + Y-(HI) + A (HI) + FP_MULTILPLY_LO - outputs = AY

.09cb	 bd 00 2c	lda $2c00,x				LDA 	LOG_TABLE,X		

.09ce	 a6 22		ldx $22					LDX 	FP_MULTIPLY_LO

.09d0	 18		clc					CLC 

.09d1	 7d 00 2c	adc $2c00,x				ADC 	LOG_TABLE,X

.09d4	 aa		tax					TAX 

.09d5	 98		tya					TYA 

.09d6	 90 03		bcc $09db				BCC 	_FP_MUL_CNT

.09d8	 69 03		adc #$03						ADC 	#$03	; add 00000011

.09da	 18		clc							CLC 

.09db	 65 23		adc $23		_FP_MUL_CNT	ADC 	FP_MULTIPLY_HI

.09dd	 29 fd		and #$fd				AND 	#$FD

.09df	 bc 00 2d	ldy $2d00,x				LDY 	EXP_TABLE,X

.09e2	 60		rts					RTS 

.09e3	 bd 00 2c	lda $2c00,x	FPMUL		LDA LOG_TABLE,X		; fpMul - ; Input:  [08] = fp multiplier ;         XY   = fp multiplicand ; Output: [08] and XY = result

.09e6	 a6 08		ldx $08					LDX ab08

.09e8	 18		clc					CLC 

.09e9	 7d 00 2c	adc $2c00,x				ADC LOG_TABLE,X

.09ec	 aa		tax					TAX 

.09ed	 98		tya					TYA 

.09ee	 90 03		bcc $09f3				BCC _PF_MUL_CNT

.09f0	 69 03		adc #$03					ADC #$03			; add 00000011

.09f2	 18		clc						CLC 

.09f3	 65 09		adc $09		_PF_MUL_CNT   	ADC ab09

.09f5	 70 0c		bvs $0a03				BVS MATH_LIMIT 

.09f7	 29 fd		and #$fd				AND #$FD

.09f9	 85 09		sta $09					STA ab09

.09fb	 a8		tay					TAY 

.09fc	 bd 00 2d	lda $2d00,x				LDA EXP_TABLE,X

.09ff	 aa		tax					TAX 

.0a00	 85 08		sta $08					STA ab08

.0a02	 60		rts					RTS 

.0a03	 10 0c		bpl $0a11	MATH_LIMIT	BPL _MATH_LIMIT_POS

.0a05	 29 01		and #$01				AND #$01

.0a07	 09 78		ora #$78				ORA #$78

.0a09	 a8		tay					TAY 

.0a0a	 a2 00		ldx #$00				LDX #$00

.0a0c	 86 08		stx $08					STX ab08

.0a0e	 84 09		sty $09					STY ab09

.0a10	 60		rts					RTS 

.0a11	 29 01		and #$01	_MATH_LIMIT_POS	AND #$01

.0a13	 09 84		ora #$84					ORA #$84

.0a15	 a8		tay		MATH_LIMIT_EXIT	TAY 

.0a16	 a2 00		ldx #$00					LDX #$00

.0a18	 86 08		stx $08						STX ab08

.0a1a	 84 09		sty $09						STY ab09

.0a1c	 60		rts						RTS 

.0a1d	 84 06		sty $06		FPDIV	STY 	ab06	 ; fpDiv - Input:  [08] = fp divisor - XY   = fp dividend - Output: [08] and XY = result

.0a1f	 a4 08		ldy $08		        LDY 	ab08

.0a21	 b9 00 2c	lda $2c00,y	        LDA 	LOG_TABLE,Y

.0a24	 38		sec		        SEC 

.0a25	 fd 00 2c	sbc $2c00,x	        SBC 	LOG_TABLE,X

.0a28	 aa		tax		        TAX 

.0a29	 a5 09		lda $09		        LDA 	ab09

.0a2b	 09 02		ora #$02	        ORA 	#$02

.0a2d	 b0 03		bcs $0a32	        BCS 	b8349

.0a2f	 e9 03		sbc #$03				SBC 	#$03		; subtract 00000011

.0a31	 38		sec					SEC 

.0a32	 e5 06		sbc $06		b8349   SBC 	ab06

.0a34	 70 cd		bvs $0a03	        BVS 	MATH_LIMIT 

.0a36	 29 fd		and #$fd	        AND 	#$FD

.0a38	 85 09		sta $09		        STA 	ab09

.0a3a	 a8		tay		        TAY 

.0a3b	 bd 00 2d	lda $2d00,x	        LDA 	EXP_TABLE,X

.0a3e	 aa		tax		        TAX 

.0a3f	 85 08		sta $08		        STA 	ab08

.0a41	 60		rts		        RTS 

.0a42	 a5 18		lda $18		FPADD_CONT	LDA		ab18	; ($838B entry point)  

.0a44	 4a		lsr					LSR 

.0a45	 b0 15		bcs $0a5c				BCS 	b8373

.0a47	 8a		txa		        TXA 

.0a48	 65 08		adc $08		        ADC 	ab08

.0a4a	 6a		ror		        ROR 

.0a4b	 c8		iny		        INY 

.0a4c	 c8		iny		        INY 

.0a4d	 c8		iny		        INY 

.0a4e	 c8		iny		        INY 

.0a4f	 aa		tax		        TAX 

.0a50	 85 08		sta $08		        STA 	ab08

.0a52	 84 09		sty $09		        STY 	ab09

.0a54	 60		rts		        RTS 

.0a55	 98		tya		b836C   TYA 

.0a56	 0a		asl		        ASL 

.0a57	 90 5c		bcc $0ab5	        BCC 	b83CC

.0a59	 4c 02 0b	jmp $0b02	        JMP 	j8419

.0a5c	 8a		txa		b8373   TXA 

.0a5d	 e5 08		sbc $08		        SBC 	ab08

.0a5f	 f0 0b		beq $0a6c	        BEQ 	b8383

.0a61	 b0 5b		bcs $0abe				BCS 	b83D5

.0a63	 a4 09		ldy $09					LDY 	ab09

.0a65	 49 ff		eor #$ff				EOR 	#$FF

.0a67	 69 01		adc #$01				ADC 	#$01

.0a69	 4c be 0a	jmp $0abe				JMP 	b83D5

.0a6c	 98		tya		b8383   TYA 

.0a6d	 38		sec		        SEC 

.0a6e	 e9 24		sbc #$24	        SBC 	#$24

.0a70	 70 9f		bvs $0a11			BVS 	_MATH_LIMIT_POS

.0a72	 50 a1		bvc $0a15				BVC 	MATH_LIMIT_EXIT

.0a74	 98		tya		FP_ADD  TYA			; XY + 89

.0a75	 38		sec		        SEC 

.0a76	 e5 09		sbc $09		        SBC 	ab09

.0a78	 70 db		bvs $0a55	        BVS 	b836C

.0a7a	 85 18		sta $18		        STA 	ab18

.0a7c	 69 01		adc #$01	        ADC 	#$01

.0a7e	 70 d5		bvs $0a55	        BVS 	b836C

.0a80	 30 5c		bmi $0ade	        BMI 	b83F5

.0a82	 4a		lsr		        LSR 

.0a83	 4a		lsr		        LSR 

.0a84	 f0 bc		beq $0a42	        BEQ 	FPADD_CONT

.0a86	 c9 09		cmp #$09	        CMP 	#$09

.0a88	 b0 2b		bcs $0ab5	        BCS 	b83CC

.0a8a	 49 0f		eor #$0f	        EOR 	#$0F

.0a8c	 8d 94 0a	sta $0a94	        STA 	ab83AB +1

.0a8f	 a5 08		lda $08		        LDA		ab08

.0a91	 38		sec		        SEC 

.0a92	 6a		ror		        ROR 

.0a93	 d0 07		bne $0a9c	ab83AB 	BNE		b83B3 	; self modifiction code shift

.0a95	 ea		nop		        NOP 

.0a96	 ea		nop		        NOP 

.0a97	 ea		nop		        NOP 

.0a98	 ea		nop		        NOP 

.0a99	 ea		nop		        NOP 

.0a9a	 ea		nop		        NOP 

.0a9b	 ea		nop		        NOP 

.0a9c	 4a		lsr		b83B3   LSR 

.0a9d	 4a		lsr		        LSR 

.0a9e	 4a		lsr		        LSR 

.0a9f	 4a		lsr		        LSR 

.0aa0	 4a		lsr		        LSR 

.0aa1	 4a		lsr		        LSR 

.0aa2	 4a		lsr		        LSR 

.0aa3	 85 06		sta $06		        STA 	ab06

.0aa5	 a5 18		lda $18		        LDA 	ab18

.0aa7	 4a		lsr		        LSR 

.0aa8	 8a		txa		        TXA 

.0aa9	 b0 0f		bcs $0aba	        BCS 	b83D1

.0aab	 65 06		adc $06		b83C2   ADC 	ab06

.0aad	 90 05		bcc $0ab4	        BCC 	b83CB

.0aaf	 4a		lsr					LSR 

.0ab0	 c8		iny					INY 

.0ab1	 c8		iny					INY 

.0ab2	 c8		iny					INY 

.0ab3	 c8		iny					INY 

.0ab4	 aa		tax		b83CB   TAX 

.0ab5	 86 08		stx $08		b83CC   STX 	ab08

.0ab7	 84 09		sty $09		        STY 	ab09

.0ab9	 60		rts		        RTS 

.0aba	 e5 06		sbc $06		b83D1   SBC ab06

.0abc	 b0 f6		bcs $0ab4	        BCS b83CB

.0abe	 84 06		sty $06		b83D5   STY ab06

.0ac0	 a0 00		ldy #$00	        LDY #$00

.0ac2	 0a		asl		b83D9   ASL 

.0ac3	 88		dey		        DEY 

.0ac4	 90 fc		bcc $0ac2	        BCC b83D9

.0ac6	 aa		tax		        TAX 

.0ac7	 98		tya		        TYA 

.0ac8	 0a		asl		        ASL 

.0ac9	 0a		asl		        ASL 

.0aca	 18		clc		        CLC 

.0acb	 65 06		adc $06		        ADC ab06

.0acd	 70 06		bvs $0ad5	        BVS b83EC

.0acf	 a8		tay		        TAY 

.0ad0	 86 08		stx $08		        STX ab08

.0ad2	 84 09		sty $09		        STY ab09

.0ad4	 60		rts		        RTS 

.0ad5	 a2 e9		ldx #$e9	b83EC   LDX #<p8400

.0ad7	 a0 0a		ldy #$0a	        LDY #>p8400

.0ad9	 86 08		stx $08		        STX ab08

.0adb	 84 09		sty $09		        STY ab09

.0add	 60		rts		        RTS 

.0ade	 c9 e0		cmp #$e0	b83F5   CMP #$E0

.0ae0	 90 20		bcc $0b02	        BCC j8419

.0ae2	 4a		lsr		        LSR 

.0ae3	 4a		lsr		        LSR 

.0ae4	 29 07		and #$07	        AND #$07

.0ae6	 8d ed 0a	sta $0aed	        STA ab8404 +1

.0ae9	 8a		txa		p8400   TXA 

.0aea	 38		sec		        SEC 

.0aeb	 6a		ror		        ROR 

.0aec	 d0 03		bne $0af1	ab8404  BNE b8408

.0aee	 4a		lsr		        LSR 

.0aef	 4a		lsr		        LSR 

.0af0	 4a		lsr		        LSR 

.0af1	 4a		lsr		b8408   LSR 

.0af2	 4a		lsr		        LSR 

.0af3	 4a		lsr		        LSR 

.0af4	 4a		lsr		        LSR 

.0af5	 85 06		sta $06		        STA ab06

.0af7	 a4 09		ldy $09		        LDY ab09

.0af9	 a5 18		lda $18		        LDA ab18

.0afb	 4a		lsr		        LSR 

.0afc	 a5 08		lda $08		        LDA ab08

.0afe	 90 ab		bcc $0aab	        BCC b83C2

.0b00	 b0 b8		bcs $0aba	        BCS b83D1

.0b02	 a6 08		ldx $08		j8419   LDX ab08

.0b04	 a4 09		ldy $09		        LDY ab09

.0b06	 60		rts		        RTS 

.0b07	 c8		iny		COS_FP	INY 

.0b08	 98		tya		SIN_FP	TYA 

.0b09	 4a		lsr				LSR 

.0b0a	 90 06		bcc $0b12			BCC 	SIN_CNT

.0b0c	 8a		txa						TXA 

.0b0d	 49 ff		eor #$ff					EOR #$FF

.0b0f	 aa		tax						TAX 

.0b10	 98		tya						TYA 

.0b11	 4a		lsr						LSR 

.0b12	 29 01		and #$01	SIN_CNT AND 	#$01

.0b14	 1d 00 2b	ora $2b00,x			ORA 	SIN_MSB,X

.0b17	 a8		tay				TAY 

.0b18	 bd 00 2a	lda $2a00,x			LDA 	SIN_LSB,X

.0b1b	 aa		tax				TAX 

.0b1c	 60		rts				RTS 

.0b1d	 98		tya		FPTO8BIT	TYA 				; input X/Y (mantisa/exponent) -  output X=HI/Y=LO ; transfer exponent? to a

.0b1e	 30 25		bmi $0b45				BMI		b849F		; if negative

.0b20	 4a		lsr					LSR 				; half and put bit into carry (carry unused)

.0b21	 4a		lsr					LSR 				; half and put bit into carry (carry unused)

.0b22	 c9 07		cmp #$07				CMP 	#$07		; is it greater than 7

.0b24	 b0 26		bcs $0b4c				BCS 	FP8BIT_ERR		; yes so error so exit with carry set

.0b26	 8d 2d 0b	sta $0b2d				STA 	FP8BIT_JMP +1	; no so self modifying code to jump forward a number of divides

.0b29	 8a		txa					TXA 				; transfer mantisa? to a

.0b2a	 38		sec					SEC 				; set carry

.0b2b	 6a		ror					ROR 				; /2 - putting 1 in top bit (and putting 0 in carry?) 

.0b2c	 d0 04		bne $0b32	FP8BIT_JMP	BNE 	b848C		; jump forward self modifying code - always done as carry is set so ROR result is never 0

.0b2e	 4a		lsr					LSR 				; /2

.0b2f	 4a		lsr					LSR 				; /4

.0b30	 4a		lsr					LSR 				; /8

.0b31	 4a		lsr					LSR 				; /16

.0b32	 4a		lsr		b848C   	LSR 				; /32

.0b33	 4a		lsr					LSR 				; /64

.0b34	 4a		lsr					LSR 				; /128

.0b35	 69 00		adc #$00	b848F   	ADC 	#0			; add carry?

.0b37	 30 12		bmi $0b4b				BMI 	b84A5		; if minus then error?

.0b39	 aa		tax					TAX 				; backup result

.0b3a	 98		tya					TYA 				; transfer y to a

.0b3b	 4a		lsr					LSR					; / 2

.0b3c	 8a		txa					TXA 				; restore result

.0b3d	 90 05		bcc $0b44				BCC 	b849E		; clear carry so ok?

.0b3f	 49 ff		eor #$ff					EOR 	#$FF	; negate?

.0b41	 69 00		adc #$00					ADC 	#$00	; negate by adding carry that is already set?

.0b43	 18		clc						CLC 			; clear carry for ok?

.0b44	 60		rts		b849E   	RTS 				; exit

.0b45	 c9 fc		cmp #$fc	b849F   	CMP 	#$FC		; sets the carry flag if greater than (11111100 binary)

.0b47	 a9 00		lda #$00				LDA 	#$00		; resets the output x value? 

.0b49	 f0 ea		beq $0b35				BEQ 	b848F		; jump back into code

.0b4b	 38		sec		b84A5   	SEC 				; set carry for error?

.0b4c	 60		rts		FP8BIT_ERR	RTS 				; exit

.0b4d	 98		tya		FPTO16BIT	TYA					; input X/Y (mantisa/exponent) -  output X=HI/Y=LO	; transfer exponent? to a

.0b4e	 30 57		bmi $0ba7				BMI 	b8501 		; if negative

.0b50	 4a		lsr					LSR 				; half and put bit into carry

.0b51	 4a		lsr					LSR 				; half and put bit into carry

.0b52	 c9 0f		cmp #$0f				CMP 	#15			; is it greater than 15

.0b54	 b0 f6		bcs $0b4c				BCS 	FP8BIT_ERR		; yes so error so exit with carry set

.0b56	 85 06		sta $06					STA 	ab06		; store intermediate in temp var

.0b58	 0a		asl					ASL 				; *2

.0b59	 65 06		adc $06					ADC 	ab06		; *3 

.0b5b	 8d 68 0b	sta $0b68				STA 	FP16BIT_JMP +1	; number of bytes to jump

.0b5e	 a9 00		lda #$00				LDA 	#0

.0b60	 85 06		sta $06					STA 	ab06		; clear result

.0b62	 8a		txa					TXA 				; get input (mantisa?)

.0b63	 38		sec					SEC 				; set carry to move 1 into result

.0b64	 6a		ror					ROR 				; rotate carry into high bit and low bit into carry

.0b65	 66 06		ror $06					ROR 	ab06		; rotate carry into result

.0b67	 90 0f		bcc $0b78	FP16BIT_JMP BCC 	b84D2		; jump forward

.0b69	 4a		lsr					LSR 				; half and shift lowest bit into carry  

.0b6a	 66 06		ror $06					ROR 	ab06		; half and rotate carry bit into result

.0b6c	 4a		lsr					LSR 

.0b6d	 66 06		ror $06					ROR 	ab06

.0b6f	 4a		lsr					LSR 

.0b70	 66 06		ror $06					ROR 	ab06

.0b72	 4a		lsr					LSR 

.0b73	 66 06		ror $06					ROR 	ab06

.0b75	 4a		lsr					LSR 

.0b76	 66 06		ror $06					ROR 	ab06

.0b78	 4a		lsr		b84D2   	LSR 

.0b79	 66 06		ror $06					ROR 	ab06

.0b7b	 4a		lsr					LSR 

.0b7c	 66 06		ror $06					ROR 	ab06

.0b7e	 4a		lsr					LSR 

.0b7f	 66 06		ror $06					ROR 	ab06

.0b81	 4a		lsr					LSR 

.0b82	 66 06		ror $06					ROR		ab06

.0b84	 4a		lsr					LSR 

.0b85	 66 06		ror $06					ROR 	ab06

.0b87	 4a		lsr					LSR 

.0b88	 66 06		ror $06					ROR 	ab06

.0b8a	 4a		lsr					LSR 

.0b8b	 66 06		ror $06					ROR 	ab06

.0b8d	 4a		lsr					LSR 

.0b8e	 66 06		ror $06					ROR 	ab06

.0b90	 4a		lsr					LSR 

.0b91	 66 06		ror $06					ROR 	ab06

.0b93	 4a		lsr					LSR 

.0b94	 66 06		ror $06					ROR 	ab06

.0b96	 aa		tax					TAX 				; store low byte of result?

.0b97	 98		tya					TYA 				; get input (exponent?)

.0b98	 a4 06		ldy $06					LDY 	ab06		; store high byte of result?

.0b9a	 4a		lsr					LSR 				; move 1st bit of input (sign) into carry

.0b9b	 90 09		bcc $0ba6				BCC 	b8500		; clear so positive

.0b9d	 8a		txa						TXA 			; negtive so

.0b9e	 49 ff		eor #$ff					EOR 	#$FF	; negate x

.0ba0	 aa		tax						TAX 

.0ba1	 98		tya						TYA 

.0ba2	 49 ff		eor #$ff					EOR 	#$FF	; negate y

.0ba4	 a8		tay						TAY 

.0ba5	 18		clc						CLC 

.0ba6	 60		rts		b8500   RTS 					; no

.0ba7	 4a		lsr		b8501 		LSR 				; move 1st bit to carry

.0ba8	 90 06		bcc $0bb0				BCC 	b850B		; set y/n

.0baa	 a2 ff		ldx #$ff					LDX 	#$FF	; yes

.0bac	 a0 ff		ldy #$ff					LDY 	#$FF

.0bae	 18		clc						CLC 

.0baf	 60		rts					RTS 

.0bb0	 a2 00		ldx #$00	b850B   	LDX 	#0			; no

.0bb2	 a0 00		ldy #$00				LDY 	#0

.0bb4	 60		rts					RTS 

.0bb5	 84 07		sty $07		BIT24TOFP 	STY		ab07 	; store lsb	; MATH_24BitToFP (FP.SetToObjectSpaceCoordinate24) ; Enter: A = Coordinate.MSB X = Coordinate.PSB Y = Coordinate.LSB ; Usese: [06].b  Temporary store for coordinate MSB ; Exit:  [08].fp Result, also stored in X:A (exp:man)

.0bb7	 85 06		sta $06					STA 	ab06 	; store msb

.0bb9	 10 11		bpl $0bcc				BPL 	_BIT24FP_POS	 ; positive ?

.0bbb	 a9 00		lda #$00					LDA 	#0	 	; negative so 

.0bbd	 38		sec						SEC 

.0bbe	 e5 07		sbc $07						SBC 	ab07 	; negate lsb

.0bc0	 85 07		sta $07						STA 	ab07

.0bc2	 8a		txa						TXA 			; negate psb

.0bc3	 49 ff		eor #$ff					EOR 	#$FF

.0bc5	 69 00		adc #$00					ADC 	#0

.0bc7	 aa		tax						TAX 

.0bc8	 a9 00		lda #$00					LDA 	#0

.0bca	 e5 06		sbc $06						SBC 	ab06	; negate msb

.0bcc	 d0 0f		bne $0bdd	_BIT24FP_POS	BNE 	_BIT24			; if msb not 0 - jump to set loop counter to 24 ($18)?

.0bce	 8a		txa						TXA 				; move psb to a

.0bcf	 d0 1d		bne $0bee					BNE 	_BIT16			; if psb not 0 - jump to set loop counter to 16 ($10)?

.0bd1	 a5 07		lda $07							LDA 	ab07			; get lsb

.0bd3	 f0 1d		beq $0bf2						BEQ 	_BIT00 			; if lsb is 0 - jump to overflow and exit

.0bd5	 a2 00		ldx #$00							LDX 	#0

.0bd7	 86 07		stx $07								STX 	ab07

.0bd9	 a2 08		ldx #$08							LDX 	#8			; set loop counter to 8?

.0bdb	 d0 04		bne $0be1							BNE 	_EXP_LOOP 		; jump?

.0bdd	 86 07		stx $07		_BIT24   	STX 	ab07	; store psb?

.0bdf	 a2 18		ldx #$18				LDX 	#24		; set loop counter to 24?

.0be1	 ca		dex		_EXP_LOOP     	DEX 			; find exponent - start from whatever x is passed in and reduce until x a bit set found 

.0be2	 06 07		asl $07						ASL 	ab07 	; shift lsb up into carry

.0be4	 2a		rol						ROL 	 		; shift msb up with carry - mantisa?

.0be5	 90 fa		bcc $0be1					BCC 	_EXP_LOOP	; as soon as first bit is set then exit

.0be7	 a8		tay					TAY					; store mantisa?

.0be8	 8a		txa					TXA 				; x is exponent?

.0be9	 0a		asl					ASL 				; exponent *2?

.0bea	 06 06		asl $06					ASL 	ab06		; shift msb putting sign into carry 

.0bec	 2a		rol					ROL 				; rotate carry into first bit of exponent - bit 0 is sign

.0bed	 60		rts					RTS

.0bee	 a2 10		ldx #$10	_BIT16   	LDX 	#16		; set loop counter to 16?

.0bf0	 d0 ef		bne $0be1				BNE 	_EXP_LOOP 	; jump?

.0bf2	 a0 00		ldy #$00	_BIT00    	LDY 	#<OVERFLOW ; overflow?

.0bf4	 a9 e0		lda #$e0				LDA 	#>OVERFLOW

.0bf6	 60		rts					RTS 

.0bf7	 a4 b2		ldy $b2		DRAW_OBJECTS	LDY 	DRAW_OBJECT_COUNT 			; number of objects to draw

.0bf9	 f0 0e		beq $0c09					BEQ 	DRAW_OBJECTS_EXIT 			; exit if none

.0bfb	 84 b3		sty $b3						STY 	DRAW_OBJECT_COUNTER 		; store temp object count

.0bfd	 be 4f 1a	ldx $1a4f,y	DRAW_OBJECTS_LOOP   LDX 	OBJECTS_TO_DRAW,Y 		; object number

.0c00	 20 0a 0c	jsr $0c0a						JSR 	DRAW_OBJECT

.0c03	 c6 b3		dec $b3							DEC 	DRAW_OBJECT_COUNTER 	; dec temp object count

.0c05	 a4 b3		ldy $b3							LDY 	DRAW_OBJECT_COUNTER 	; get temp object count

.0c07	 d0 f4		bne $0bfd						BNE 	DRAW_OBJECTS_LOOP 		; exit y/n

.0c09	 60		rts		DRAW_OBJECTS_EXIT 	RTS 							; exit

.0c0a	 86 af		stx $af		DRAW_OBJECT			STX		CURRENT_OBJECT					; store object number 

.0c0c	 bd c9 28	lda $28c9,x						LDA		OBJECT_SHAPE_PTR_LO,X	; get object pos hi

.0c0f	 85 1d		sta $1d							STA		OBJECT_POINTER			; store in pointer

.0c11	 bd 09 29	lda $2909,x						LDA		OBJECT_SHAPE_PTR_HI,X	; get object pos lo

.0c14	 85 1e		sta $1e							STA		OBJECT_POINTER+1		; store in pointer

.0c16	 20 e8 0c	jsr $0ce8						JSR		CAMERA_OBJECT_DIFF

.0c19	 a2 00		ldx #$00	DRAW_OBJECT_CONT   	LDX		#$00

.0c1b	 86 19		stx $19							STX		POINT_LINE_COUNT

.0c1d	 a0 01		ldy #$01						LDY		#$01

.0c1f	 20 2b 0d	jsr $0d2b						JSR		CHK_ABS_DIST

.0c22	 90 56		bcc $0c7a						BCC		DRAW_OBJECT_LINES	; draw the object

.0c24	 a5 da		lda $da							LDA		DIFF_Y_HSB			; above ground?

.0c26	 10 09		bpl $0c31						BPL		DRAW_OBJECT_POINT	; not underground?

.0c28	 a0 00		ldy #$00						LDY		#$00

.0c2a	 a2 00		ldx #$00						LDX		#$00

.0c2c	 20 2b 0d	jsr $0d2b						JSR		CHK_ABS_DIST

.0c2f	 b0 d8		bcs $0c09						BCS		DRAW_OBJECTS_EXIT

.0c31	 a4 d5		ldy $d5		DRAW_OBJECT_POINT	LDY		DIFF_X_LSB		; object is a point

.0c33	 a6 d6		ldx $d6							LDX		DIFF_X_MSB

.0c35	 a5 d7		lda $d7							LDA		DIFF_X_HSB

.0c37	 20 b5 0b	jsr $0bb5						JSR		BIT24TOFP

.0c3a	 84 52		sty $52							STY		X_POS_HI

.0c3c	 85 53		sta $53							STA		X_POS_LO

.0c3e	 a4 d8		ldy $d8							LDY		DIFF_Y_LSB

.0c40	 a6 d9		ldx $d9							LDX		DIFF_Y_MSB

.0c42	 a5 da		lda $da							LDA		DIFF_Y_HSB

.0c44	 20 b5 0b	jsr $0bb5						JSR		BIT24TOFP

.0c47	 84 54		sty $54							STY		Y_POS_HI

.0c49	 85 55		sta $55							STA		Y_POS_LO

.0c4b	 a4 db		ldy $db							LDY		DIFF_Z_LSB

.0c4d	 a6 dc		ldx $dc							LDX		DIFF_Z_MSB

.0c4f	 a5 dd		lda $dd							LDA		DIFF_Z_HSB

.0c51	 20 b5 0b	jsr $0bb5						JSR		BIT24TOFP

.0c54	 84 56		sty $56							STY		Z_POS_HI

.0c56	 85 57		sta $57							STA		Z_POS_LO

.0c58	 20 a4 11	jsr $11a4						JSR		ROTATE_PERS

.0c5b	 a2 00		ldx #$00						LDX		#$00

.0c5d	 bd 40 07	lda $0740,x	PLOT_POINT_CHK		LDA		POINT_CLASSIFICATION,X	; GET POINT FROM PLOT POINT TABLE ?

.0c60	 d0 17		bne $0c79						BNE		PLOT_POINT_EXIT			; EXIT IF ITS not ZERO - this being set to not zero plots a point - what sets it to 0?

.0c62	 bc c0 06	ldy $06c0,x	PLOT_POINT				LDY		PERS_VER_TAB,X			; GET VER POS

.0c65	 b9 00 30	lda $3000,y							LDA		VER_POS_LO,Y 

.0c68	 85 02		sta $02								STA		SCREEN_POS_LO

.0c6a	 b9 00 2e	lda $2e00,y	PLOT_POINT_SCN			LDA 	VER_POS_SCN0_HI,Y

.0c6d	 85 03		sta $03								STA		SCREEN_POS_HI

.0c6f	 bc 88 30	ldy $3088,x							LDY		HOR_SCR_POS,X

.0c72	 b1 02		lda ($02),y							LDA		(SCREEN_POS_PTR),Y	; GET SCREEN BYTE

.0c74	 1d 80 2f	ora $2f80,x	LINE_DRAW_8_TYPE		ORA		ORA_PIXEL_POS,X		; AND PIXEL

.0c77	 91 02		sta ($02),y							STA		(SCREEN_POS_PTR),Y	; PUT SCREEN BYTE

.0c79	 60		rts		PLOT_POINT_EXIT 	RTS 

.0c7a	 a5 d6		lda $d6		DRAW_OBJECT_LINES	LDA 	DIFF_X_MSB

.0c7c	 38		sec							SEC 

.0c7d	 e9 08		sbc #$08						SBC 	#$08

.0c7f	 85 d6		sta $d6							STA 	DIFF_X_MSB

.0c81	 b0 02		bcs $0c85						BCS 	b9795

.0c83	 c6 d7		dec $d7								DEC 	DIFF_X_HSB		

.0c85	 a5 d9		lda $d9		b9795   			LDA 	DIFF_Y_MSB

.0c87	 38		sec							SEC 

.0c88	 e9 08		sbc #$08						SBC 	#$08

.0c8a	 85 d9		sta $d9							STA 	DIFF_Y_MSB

.0c8c	 b0 02		bcs $0c90						BCS 	b97A0

.0c8e	 c6 da		dec $da								DEC 	DIFF_Y_HSB

.0c90	 a5 dc		lda $dc		b97A0   			LDA 	DIFF_Z_MSB

.0c92	 38		sec							SEC 

.0c93	 e9 08		sbc #$08						SBC 	#$08

.0c95	 85 dc		sta $dc							STA 	DIFF_Z_MSB

.0c97	 b0 02		bcs $0c9b						BCS 	b97AB

.0c99	 c6 dd		dec $dd								DEC 	DIFF_Z_HSB

.0c9b	 a0 00		ldy #$00	b97AB   			LDY 	#0

.0c9d	 84 19		sty $19							STY 	POINT_LINE_COUNT 	; start point count

.0c9f	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y 	; object point count

.0ca1	 85 b0		sta $b0							STA 	NUMBER_OF_POINTS 	; number of points?

.0ca3	 84 ad		sty $ad							STY 	OBJECT_POINTER_POS 	; store mem pos

.0ca5	 20 10 11	jsr $1110	PROCESS_POINT_LOOP		JSR 	PROCESS_POINT_TO_FP		; get point then *16 then convert to 24bit fp

.0ca8	 20 a4 11	jsr $11a4							JSR 	ROTATE_PERS

.0cab	 a5 19		lda $19								LDA 	POINT_LINE_COUNT		; get point count

.0cad	 e6 19		inc $19								INC 	POINT_LINE_COUNT		; inc point count

.0caf	 c5 b0		cmp $b0								CMP 	NUMBER_OF_POINTS	 	; last point yn

.0cb1	 d0 f2		bne $0ca5							BNE 	PROCESS_POINT_LOOP  	; no so do next

.0cb3	 e6 ad		inc $ad							INC 	OBJECT_POINTER_POS 			; inc mem pos

.0cb5	 a4 ad		ldy $ad							LDY 	OBJECT_POINTER_POS 			; get mem pos

.0cb7	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y  		; object line count

.0cb9	 85 19		sta $19							STA 	POINT_LINE_COUNT  			; number of lines?

.0cbb	 10 13		bpl $0cd0						BPL 	NEXT_COMPRESSED_LINE		; line count is positive so lines are compressed

.0cbd	 a4 ad		ldy $ad		NEXT_LINE				LDY 	OBJECT_POINTER_POS 	; get mem pos

.0cbf	 c8		iny								INY  						; inc mem pos

.0cc0	 b3 1d		lax ($1d),y							LAX 	(OBJECT_POINTER),Y 	; get 1st point into a and x

.0cc2	 c8		iny								INY 						; inc mem pos

.0cc3	 b1 1d		lda ($1d),y							LDA 	(OBJECT_POINTER),Y 	; get 2nd point

.0cc5	 84 ad		sty $ad								STY 	OBJECT_POINTER_POS 	; store 2nd point?

.0cc7	 a8		tay								TAY 						; 2nd point

.0cc8	 20 6e 0d	jsr $0d6e							JSR 	LINE_DRAW 			; draw line

.0ccb	 c6 19		dec $19								DEC 	POINT_LINE_COUNT 	; dec line count

.0ccd	 30 ee		bmi $0cbd							BMI 	NEXT_LINE 			; last line y/n

.0ccf	 60		rts							RTS 						; yes

.0cd0	 a4 ad		ldy $ad		NEXT_COMPRESSED_LINE 	LDY 	OBJECT_POINTER_POS 	; get mem pos ; first and second point are stored in 1 byte as 2 nibbles

.0cd2	 c8		iny								INY  						; inc mem pos

.0cd3	 84 ad		sty $ad								STY 	OBJECT_POINTER_POS 	; store mem pos

.0cd5	 b3 1d		lax ($1d),y							LAX 	(OBJECT_POINTER),Y 	; get point count into a and x

.0cd7	 29 0f		and #$0f							AND 	#$0F 				; and with 15 = 1st point

.0cd9	 a8		tay								TAY 						; y = first point

.0cda	 8a		txa								TXA  						; get backup

.0cdb	 4a		lsr								LSR  						; /2

.0cdc	 4a		lsr								LSR  						; /2

.0cdd	 4a		lsr								LSR  						; /2

.0cde	 4a		lsr								LSR  						; /2

.0cdf	 aa		tax								TAX  						; divide by 16 = 2nd point

.0ce0	 20 6e 0d	jsr $0d6e							JSR 	LINE_DRAW       	; DRAW LINE

.0ce3	 c6 19		dec $19								DEC 	POINT_LINE_COUNT 	; dec line count

.0ce5	 10 e9		bpl $0cd0							BPL 	NEXT_COMPRESSED_LINE ; last line yn

.0ce7	 60		rts							RTS  						; yes

.0ce8	 38		sec		CAMERA_OBJECT_DIFF	SEC 						; calc diff between object pos and current pos

.0ce9	 bd 80 07	lda $0780,x						LDA 	OBJ_X_LSB,X		;

.0cec	 e5 72		sbc $72							SBC 	CURR_X_LSB		;

.0cee	 85 d5		sta $d5							STA 	DIFF_X_LSB		;

.0cf0	 bd cf 18	lda $18cf,x						LDA 	OBJ_X_MSB,X		;

.0cf3	 e5 73		sbc $73							SBC 	CURR_X_MSB		;

.0cf5	 85 d6		sta $d6							STA 	DIFF_X_MSB		;

.0cf7	 bd 8f 19	lda $198f,x						LDA 	OBJ_X_HSB,X		;

.0cfa	 e5 74		sbc $74							SBC 	CURR_X_HSB		;

.0cfc	 85 d7		sta $d7							STA 	DIFF_X_HSB		;

.0cfe	 38		sec							SEC 

.0cff	 bd c0 07	lda $07c0,x						LDA 	OBJ_Y_LSB,X		;

.0d02	 e5 75		sbc $75							SBC 	CURR_Y_LSB		;

.0d04	 85 d8		sta $d8							STA 	DIFF_Y_LSB		;

.0d06	 bd 0f 19	lda $190f,x						LDA 	OBJ_Y_MSB,X		;

.0d09	 e5 76		sbc $76							SBC 	CURR_Y_MSB		;

.0d0b	 85 d9		sta $d9							STA 	DIFF_Y_MSB		;

.0d0d	 bd cf 19	lda $19cf,x						LDA 	OBJ_Y_HSB,X		;

.0d10	 e5 77		sbc $77							SBC 	CURR_Y_HSB		;

.0d12	 85 da		sta $da							STA 	DIFF_Y_HSB		;

.0d14	 38		sec							SEC 

.0d15	 bd 00 03	lda $0300,x						LDA 	OBJ_Z_LSB,X		;

.0d18	 e5 78		sbc $78							SBC 	CURR_Z_LSB		;

.0d1a	 85 db		sta $db							STA 	DIFF_Z_LSB		;

.0d1c	 bd 4f 19	lda $194f,x						LDA 	OBJ_Z_MSB,X		;

.0d1f	 e5 79		sbc $79							SBC 	CURR_Z_MSB		;

.0d21	 85 dc		sta $dc							STA 	DIFF_Z_MSB		;

.0d23	 bd 0f 1a	lda $1a0f,x						LDA 	OBJ_Z_HSB,X		;

.0d26	 e5 7a		sbc $7a							SBC 	CURR_Z_HSB		;

.0d28	 85 dd		sta $dd							STA 	DIFF_Z_HSB		;

.0d2a	 60		rts							RTS 

.0d2b	 86 08		stx $08		CHK_ABS_DIST	STX 	ab08

.0d2d	 84 09		sty $09						STY 	ab09

.0d2f	 a5 d5		lda $d5						LDA 	DIFF_X_LSB

.0d31	 a6 d6		ldx $d6						LDX 	DIFF_X_MSB

.0d33	 a4 d7		ldy $d7						LDY 	DIFF_X_HSB

.0d35	 20 4f 0d	jsr $0d4f					JSR 	ABS_DIFF

.0d38	 b0 14		bcs $0d4e					BCS 	b99BD 		; return carry set

.0d3a	 a5 d8		lda $d8						LDA 	DIFF_Y_LSB

.0d3c	 a6 d9		ldx $d9						LDX 	DIFF_Y_MSB

.0d3e	 a4 da		ldy $da						LDY 	DIFF_Y_HSB

.0d40	 20 4f 0d	jsr $0d4f					JSR 	ABS_DIFF

.0d43	 b0 09		bcs $0d4e					BCS 	b99BD 		; return carry set

.0d45	 a5 db		lda $db						LDA 	DIFF_Z_LSB

.0d47	 a6 dc		ldx $dc						LDX 	DIFF_Z_MSB

.0d49	 a4 dd		ldy $dd						LDY 	DIFF_Z_HSB

.0d4b	 20 4f 0d	jsr $0d4f					JSR		ABS_DIFF

.0d4e	 60		rts		b99BD   		RTS

.0d4f	 10 15		bpl $0d66	ABS_DIFF   	BPL 	CONTINUE1 	; calc absolute difference returning carry if too far away?  if number is positive continue ; negate a/x/y which hold lsb/msb/hsb if needed and subtract 08 and 09 from msb/hsb 

.0d51	 49 ff		eor #$ff					EOR 	#$FF  	; negative so negate LSB

.0d53	 48		pha						PHA 			; backup LSB

.0d54	 8a		txa						TXA       		; negate MSB

.0d55	 49 ff		eor #$ff					EOR 	#$FF	;

.0d57	 aa		tax						TAX 			;

.0d58	 98		tya						TYA 			; negate HSB

.0d59	 49 ff		eor #$ff					EOR 	#$FF	;

.0d5b	 a8		tay						TAY 			;

.0d5c	 68		pla						PLA 			; restore LSB

.0d5d	 18		clc						CLC 

.0d5e	 69 01		adc #$01					ADC 	#$01		; inc LSB

.0d60	 90 04		bcc $0d66					BCC 	CONTINUE1	; no overlow so continue

.0d62	 e8		inx							INX 			; inc MSB

.0d63	 d0 01		bne $0d66						BNE 	CONTINUE1	; no overlow so continue

.0d65	 c8		iny								INY 			; inc HSB

.0d66	 38		sec		CONTINUE1   SEC 				; subtract 

.0d67	 8a		txa					TXA 

.0d68	 e5 08		sbc $08					SBC 	ab08		; subtract from MSB

.0d6a	 98		tya					TYA 

.0d6b	 e5 09		sbc $09					SBC 	ab09		; subtract from HSB

.0d6d	 60		rts					RTS 

.0d6e	 bd 40 07	lda $0740,x	LINE_DRAW		LDA		POINT_CLASSIFICATION,X 		; start point X classification ; LINE_DRAW_04 - DRAW LINE - x is start index - y is end index

.0d71	 f0 25		beq $0d98					BEQ 	POINT_X_INFRONT 			; start point X onscreen

.0d73	 30 17		bmi $0d8c					BMI 	POINT_X_BEHIND 				; start point X behind

.0d75	 b9 40 07	lda $0740,y					LDA 	POINT_CLASSIFICATION,Y 		; end point Y classification 

.0d78	 f0 12		beq $0d8c					BEQ 	POINT_X_BEHIND 				; end point Y onscreen

.0d7a	 30 1c		bmi $0d98					BMI 	POINT_X_INFRONT 			; end point Y behind	

.0d7c	 b9 80 03	lda $0380,y					LDA 	Z_ROT_TAB_HI,Y 

.0d7f	 49 80		eor #$80					EOR 	#$80

.0d81	 85 06		sta $06						STA 	ab06

.0d83	 bd 80 03	lda $0380,x					LDA 	Z_ROT_TAB_HI,X

.0d86	 49 80		eor #$80					EOR 	#$80

.0d88	 c5 06		cmp $06						CMP 	ab06

.0d8a	 b0 0c		bcs $0d98					BCS	 	POINT_X_INFRONT

.0d8c	 98		tya		POINT_X_BEHIND 	TYA 			; start X is behind so swap start X and end Y pointer so that Y is behind and X start might be behind? so swap start and end - so Y is behind?

.0d8d	 86 06		stx $06						STX 	ab06	; swap start / end

.0d8f	 aa		tax						TAX 			; swap start / end

.0d90	 a4 06		ldy $06						LDY 	ab06	; swap start / end

.0d92	 bd 40 07	lda $0740,x					LDA 	POINT_CLASSIFICATION,X 	; start point X which was end point Y classification

.0d95	 10 01		bpl $0d98					BPL 	POINT_X_INFRONT 		; end point X point infront

.0d97	 60		rts								RTS 					; both points behind

.0d98	 bd 40 07	lda $0740,x	POINT_X_INFRONT	LDA 	POINT_CLASSIFICATION,X 	; at least 1 point is in front ; point 1 classification

.0d9b	 85 6e		sta $6e						STA 	POINT_CLASSIFY_ST

.0d9d	 30 1e		bmi $0dbd					BMI 	X_ROT_COPY 				; point X is behind so x rotation points need to be copied and pers doesnt

.0d9f	 bd 80 06	lda $0680,x						LDA 	PERS_HOR_TAB,X

.0da2	 85 6a		sta $6a							STA 	LINE_START_HOR

.0da4	 bd c0 06	lda $06c0,x						LDA 	PERS_VER_TAB,X

.0da7	 85 6b		sta $6b							STA 	LINE_START_VER

.0da9	 bd 00 06	lda $0600,x						LDA 	H_PERS_FP_LO,X

.0dac	 85 5e		sta $5e							STA 	H_PERS_FP_LO_ST

.0dae	 bd c0 03	lda $03c0,x						LDA 	H_PERS_FP_HI,X

.0db1	 85 5f		sta $5f							STA 	H_PERS_FP_HI_ST

.0db3	 bd 00 07	lda $0700,x						LDA 	V_PERS_FP_LO,X

.0db6	 85 60		sta $60							STA 	V_PERS_FP_LO_ST

.0db8	 bd 40 06	lda $0640,x						LDA 	V_PERS_FP_HI,X

.0dbb	 85 61		sta $61							STA 	V_PERS_FP_HI_ST

.0dbd	 bd 00 01	lda $0100,x	X_ROT_COPY		LDA 	X_ROT_TAB_LO,X ; a point is behind? so x and y rotation needs to be copied to be used in z clip

.0dc0	 85 52		sta $52						STA 	X_POS_HI

.0dc2	 bd 40 01	lda $0140,x					LDA 	X_ROT_TAB_HI,X

.0dc5	 85 53		sta $53						STA 	X_POS_LO

.0dc7	 bd 80 01	lda $0180,x					LDA 	Y_ROT_TAB_LO,X

.0dca	 85 54		sta $54						STA 	Y_POS_HI

.0dcc	 bd c0 02	lda $02c0,x					LDA 	Y_ROT_TAB_HI,X

.0dcf	 85 55		sta $55						STA 	Y_POS_LO

.0dd1	 bd 40 03	lda $0340,x					LDA 	Z_ROT_TAB_LO,X

.0dd4	 85 56		sta $56						STA 	Z_POS_HI

.0dd6	 bd 80 03	lda $0380,x					LDA 	Z_ROT_TAB_HI,X

.0dd9	 85 57		sta $57						STA 	Z_POS_LO

.0ddb	 b9 40 07	lda $0740,y					LDA 	POINT_CLASSIFICATION,Y

.0dde	 85 6f		sta $6f						STA 	POINT_CLASSIFY_EN

.0de0	 30 1e		bmi $0e00					BMI 	Y_ROT_COPY				; Y is behind so y rotation points need to be copied and pers doesnt

.0de2	 b9 80 06	lda $0680,y						LDA 	PERS_HOR_TAB,Y

.0de5	 85 6c		sta $6c							STA 	PERS_HOR_ab6C

.0de7	 b9 c0 06	lda $06c0,y						LDA 	PERS_VER_TAB,Y

.0dea	 85 6d		sta $6d							STA 	PERS_VER_ab6D

.0dec	 b9 00 06	lda $0600,y						LDA 	H_PERS_FP_LO,Y

.0def	 85 62		sta $62							STA 	H_PERS_FP_LO_EN

.0df1	 b9 c0 03	lda $03c0,y						LDA 	H_PERS_FP_HI,Y

.0df4	 85 63		sta $63							STA 	H_PERS_FP_HI_EN

.0df6	 b9 00 07	lda $0700,y						LDA 	V_PERS_FP_LO,Y

.0df9	 85 64		sta $64							STA 	V_PERS_FP_LO_EN

.0dfb	 b9 40 06	lda $0640,y						LDA 	V_PERS_FP_HI,Y

.0dfe	 85 65		sta $65							STA 	V_PERS_FP_HI_EN

.0e00	 b9 00 01	lda $0100,y	Y_ROT_COPY		LDA 	X_ROT_TAB_LO,Y

.0e03	 85 58		sta $58						STA 	X_ROTATION_LO

.0e05	 b9 40 01	lda $0140,y					LDA 	X_ROT_TAB_HI,Y

.0e08	 85 59		sta $59						STA 	X_ROTATION_HI

.0e0a	 b9 80 01	lda $0180,y					LDA 	Y_ROT_TAB_LO,Y

.0e0d	 85 5a		sta $5a						STA 	Y_ROTATION_LO

.0e0f	 b9 c0 02	lda $02c0,y					LDA 	Y_ROT_TAB_HI,Y

.0e12	 85 5b		sta $5b						STA 	Y_ROTATION_HI

.0e14	 b9 40 03	lda $0340,y					LDA 	Z_ROT_TAB_LO,Y

.0e17	 85 5c		sta $5c						STA 	Z_ROTATION_LO

.0e19	 b9 80 03	lda $0380,y					LDA 	Z_ROT_TAB_HI,Y

.0e1c	 85 5d		sta $5d						STA 	Z_ROTATION_HI

.0e1e	 a5 6f		lda $6f						LDA 	POINT_CLASSIFY_EN

.0e20	 30 70		bmi $0e92					BMI 	Z_CLIP ; z clip? as end is negative so is behind

.0e22					calc_hor_ver_diff_slope
.0e22	 a6 5e		ldx $5e				LDX H_PERS_FP_LO_ST		; calc hor difference

.0e24	 a5 5f		lda $5f		        LDA H_PERS_FP_HI_ST

.0e26	 49 01		eor #$01	        EOR		#FP_SIGN

.0e28	 86 08		stx $08		        STX ab08

.0e2a	 85 09		sta $09		        STA ab09

.0e2c	 a6 62		ldx $62		        LDX H_PERS_FP_LO_EN

.0e2e	 a4 63		ldy $63		        LDY H_PERS_FP_HI_EN

.0e30	 20 74 0a	jsr $0a74	        JSR FP_ADD 					; H_PERS_FP_HI_EN + (-H_PERS_FP_HI_ST) ? 

.0e33	 86 0a		stx $0a		        STX H_PERS_FP_LO_DIFF_ab0A	; h line difference?

.0e35	 84 0b		sty $0b		        STY H_PERS_FP_HI_DIFF_ab0B

.0e37	 98		tya		        TYA 

.0e38	 0a		asl		        ASL 

.0e39	 29 02		and #$02	        AND #$02

.0e3b	 85 67		sta $67		        STA LINE_TYPE_POINTER 	; sign? *2? ; does the sign show the line direction?

.0e3d	 a6 60		ldx $60		        LDX V_PERS_FP_LO_ST		; calc ver difference

.0e3f	 a5 61		lda $61		        LDA V_PERS_FP_HI_ST

.0e41	 49 01		eor #$01	        EOR 	#FP_SIGN

.0e43	 86 08		stx $08		        STX ab08

.0e45	 85 09		sta $09		        STA ab09

.0e47	 a6 64		ldx $64		        LDX V_PERS_FP_LO_EN

.0e49	 a4 65		ldy $65		        LDY V_PERS_FP_HI_EN

.0e4b	 20 74 0a	jsr $0a74	        JSR FP_ADD					; V_PERS_FP_HI_EN + (-V_PERS_FP_HI_ST) ? 

.0e4e	 86 0c		stx $0c		        STX V_PERS_FP_LO_DIFF_ab0C	; v line difference?

.0e50	 84 0d		sty $0d		        STY V_PERS_FP_HI_DIFF_ab0D

.0e52	 98		tya		        TYA 

.0e53	 29 01		and #$01	        AND #$01				; sign? ; does the sign show the line direction?

.0e55	 05 67		ora $67		        ORA LINE_TYPE_POINTER

.0e57	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0e59	 a5 0a		lda $0a				LDA		H_PERS_FP_LO_DIFF_ab0A	; hdiff - calc hdiff / vdiff slope?

.0e5b	 85 22		sta $22				STA		FP_DIVIDE_LO

.0e5d	 a6 09		ldx $09				LDX		ab09					; vdiff

.0e5f	 a4 08		ldy $08				LDY		ab08					; vdiff

.0e61	 a5 0b		lda $0b				LDA		H_PERS_FP_HI_DIFF_ab0B	; hdiff

.0e63	 20 ad 09	jsr $09ad			JSR		FP_DIVIDE		; 0A-0B / 08-09 -> 68-69 = hdiff / vdiff slope?

.0e66	 86 68		stx $68				STx		ab68

.0e68	 85 69		sta $69				STA		ab69

.0e6a	 30 1a		bmi $0e86	        BMI 	b9B1E

.0e6c	 a5 67		lda $67					LDA 	LINE_TYPE_POINTER

.0e6e	 09 04		ora #$04				ORA 	#$04

.0e70	 85 67		sta $67					STA 	LINE_TYPE_POINTER

.0e72	 a5 0c		lda $0c					LDA		V_PERS_FP_LO_DIFF_ab0C ; vdiff - calc vdiff / hdiff slope?

.0e74	 85 22		sta $22					STA		FP_DIVIDE_LO

.0e76	 a6 0b		ldx $0b					LDX		H_PERS_FP_HI_DIFF_ab0B ; hdiff

.0e78	 a4 0a		ldy $0a					LDY		H_PERS_FP_LO_DIFF_ab0A ; hdiff

.0e7a	 a5 0d		lda $0d					LDA		V_PERS_FP_HI_DIFF_ab0D ; vdiff 

.0e7c	 20 ad 09	jsr $09ad				JSR		FP_DIVIDE		; 0A-0B / 0C-0D -> 08-09 = vdiff / hdiff slope?

.0e7f	 30 05		bmi $0e86				BMI 	b9B1E

.0e81	 a0 ff		ldy #$ff					LDY 	#$FF		; straight line?	LDA 	#$FF

.0e83	 4c 23 0f	jmp $0f23					JMP 	STORE_LINE_INC

.0e86	 18		clc		b9B1E   CLC 

.0e87	 69 20		adc #$20	        ADC #$20		; possible *128 ?

.0e89	 29 fc		and #$fc	        AND #$FC

.0e8b	 a8		tay		        TAY 

.0e8c	 20 4d 0b	jsr $0b4d	        JSR FPTO16BIT

.0e8f	 4c 23 0f	jmp $0f23			JMP 	STORE_LINE_INC

.0e92	 a5 56		lda $56		Z_CLIP	LDA		Z_POS_HI			 ; do z_clip  zclip z-clip ; calc z-diff = z-st / z-en?

.0e94	 85 22		sta $22				STA		FP_DIVIDE_LO

.0e96	 a6 5d		ldx $5d				LDX		Z_ROTATION_HI

.0e98	 a4 5c		ldy $5c				LDY		Z_ROTATION_LO

.0e9a	 a5 57		lda $57				LDA		Z_POS_LO

.0e9c	 20 ad 09	jsr $09ad			JSR		FP_DIVIDE		; ZPOS HI-LO / Z_ROTATION HI-LO -> 0A-0B

.0e9f	 86 0a		stx $0a				STX		Z_CLIP_LO_ab0A

.0ea1	 49 01		eor #$01			EOR 	#FP_SIGN				; swap sign?

.0ea3	 85 0b		sta $0b		        STA Z_CLIP_HI_ab0B

.0ea5	 a5 52		lda $52				LDA 	X_POS_HI		; calc x start distance based on z

.0ea7	 85 22		sta $22				STA		FP_MULTIPLY_LO

.0ea9	 a5 53		lda $53				LDA 	X_POS_LO

.0eab	 a4 0b		ldy $0b				LDY 	Z_CLIP_HI_ab0B

.0ead	 a6 0a		ldx $0a		        LDX 	Z_CLIP_LO_ab0A

.0eaf	 20 c9 09	jsr $09c9			JSR		FP_MULTIPLY		; XPOS HI-LO * 0A-0B -> 08-09

.0eb2	 84 08		sty $08		        STy 	ab08

.0eb4	 85 09		sta $09		        STA 	ab09

.0eb6	 a6 58		ldx $58		        LDX X_ROTATION_LO		; calc x end distance based on z

.0eb8	 a4 59		ldy $59		        LDY X_ROTATION_HI

.0eba	 20 74 0a	jsr $0a74	        JSR FP_ADD				; XROT HI-LO + 08-09 -> 0c-0D

.0ebd	 86 0c		stx $0c		        STX Z_CLIP_LO_ab0C

.0ebf	 84 0d		sty $0d		        STY Z_CLIP_HI_ab0D

.0ec1	 98		tya		        TYA 

.0ec2	 45 57		eor $57		        EOR Z_POS_LO

.0ec4	 0a		asl		        ASL 

.0ec5	 29 02		and #$02	        AND #$02

.0ec7	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0ec9	 a5 54		lda $54				LDA 	Y_POS_HI		; calc y start distance based on z

.0ecb	 85 22		sta $22				STA		FP_MULTIPLY_LO

.0ecd	 a5 55		lda $55				LDA 	Y_POS_LO

.0ecf	 a4 0b		ldy $0b				LDY 	Z_CLIP_HI_ab0B

.0ed1	 a6 0a		ldx $0a		        LDX 	Z_CLIP_LO_ab0A

.0ed3	 20 c9 09	jsr $09c9			JSR		FP_MULTIPLY		; Y_POS HI-LO * 0A-0B -> 08-09

.0ed6	 84 08		sty $08		        STy 	ab08

.0ed8	 85 09		sta $09		        STA 	ab09

.0eda	 a6 5a		ldx $5a		        LDX Y_ROTATION_LO		; calc y end distance based on z

.0edc	 a4 5b		ldy $5b		        LDY Y_ROTATION_HI

.0ede	 20 74 0a	jsr $0a74	        JSR FP_ADD				; YROT HI-LO + 08-09 -> 0A-0B

.0ee1	 86 0a		stx $0a		        STX Z_CLIP_LO_ab0A

.0ee3	 84 0b		sty $0b		        STY Z_CLIP_HI_ab0B

.0ee5	 98		tya		        TYA 

.0ee6	 45 57		eor $57		        EOR Z_POS_LO

.0ee8	 29 01		and #$01	        AND #$01

.0eea	 05 67		ora $67		        ORA LINE_TYPE_POINTER

.0eec	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0eee	 a5 0c		lda $0c				LDA		Z_CLIP_LO_ab0C

.0ef0	 85 22		sta $22				STA		FP_DIVIDE_LO

.0ef2	 a6 09		ldx $09				LDX		ab09

.0ef4	 a4 08		ldy $08				LDY		ab08

.0ef6	 a5 0d		lda $0d				LDA		Z_CLIP_HI_ab0D

.0ef8	 20 ad 09	jsr $09ad			JSR		FP_DIVIDE		; 0C-0D / 08-09 -> 68-69

.0efb	 86 68		stx $68				STX		ab68

.0efd	 85 69		sta $69				STA		ab69

.0eff	 30 19		bmi $0f1a	        BMI 	b9C05

.0f01	 a5 67		lda $67					LDA 	LINE_TYPE_POINTER

.0f03	 09 04		ora #$04				ORA 	#$04

.0f05	 85 67		sta $67					STA 	LINE_TYPE_POINTER

.0f07	 a5 0a		lda $0a					LDA		Z_CLIP_LO_ab0A

.0f09	 85 22		sta $22					STA		FP_DIVIDE_LO

.0f0b	 a6 0d		ldx $0d					LDX		Z_CLIP_HI_ab0D

.0f0d	 a4 0c		ldy $0c					LDY		Z_CLIP_LO_ab0C

.0f0f	 a5 0b		lda $0b					LDA		Z_CLIP_HI_ab0B

.0f11	 20 ad 09	jsr $09ad				JSR		FP_DIVIDE		; 0A-0B / 0C-0D -> 08-09

.0f14	 30 04		bmi $0f1a				BMI 	b9C05

.0f16	 a0 ff		ldy #$ff					LDY 	#$FF			; straight line?

.0f18	 d0 09		bne $0f23					BNE 	STORE_LINE_INC ; jump

.0f1a	 18		clc		b9C05   CLC 

.0f1b	 69 20		adc #$20	        ADC #$20	; *128 ?

.0f1d	 29 fc		and #$fc	        AND #$FC

.0f1f	 a8		tay		        TAY 

.0f20	 20 4d 0b	jsr $0b4d	        JSR 	FPTO16BIT

.0f23	 84 66		sty $66		STORE_LINE_INC	STY 	LINE_INC

.0f25	 a6 67		ldx $67		GET_LINE_TYPE	LDX 	LINE_TYPE_POINTER    	; GET LINE TYPE 0-7

.0f27	 bc 18 31	ldy $3118,x					LDY 	LINE_DRAW_CONV_PTR,X 	; CONVERT LINE TYPE TO POINTER TYPE

.0f2a	 b9 08 31	lda $3108,y					LDA 	LINE_DRAW_PTR_LO,Y 		; GET POINTER TO CORRECT LINE

.0f2d	 8d 9f 10	sta $109f					STA 	LINE_JP_PTR +1    		; STORE AT JUMP TABLE ADDRESS

.0f30	 b9 10 31	lda $3110,y					LDA 	LINE_DRAW_PTR_HI,Y		; GET POINTER TO CORRECT LINE

.0f33	 8d a0 10	sta $10a0					STA 	LINE_JP_PTR +2    		; STORE AT JUMP TABLE ADDRESS

.0f36	 a5 6f		lda $6f						LDA 	POINT_CLASSIFY_EN

.0f38	 f0 0a		beq $0f44					BEQ 	END_ONSCREEN

.0f3a	 b9 20 31	lda $3120,y					LDA 	PERS_HOR_EDGE,Y			; Y is line type

.0f3d	 85 6c		sta $6c						STA 	PERS_HOR_ab6C

.0f3f	 b9 28 31	lda $3128,y					LDA 	PERS_VER_EDGE,Y			; y is line type

.0f42	 85 6d		sta $6d						STA 	PERS_VER_ab6D

.0f44	 a5 6e		lda $6e		END_ONSCREEN   	LDA 	POINT_CLASSIFY_ST

.0f46	 d0 03		bne $0f4b					BNE 	ST_OFF_SCRN				; point off screen

.0f48	 4c 9a 10	jmp $109a						JMP		LINE_DRW_JP

.0f4b	 a5 61		lda $61		ST_OFF_SCRN LDA V_PERS_FP_HI_ST

.0f4d	 0a		asl		        ASL 

.0f4e	 0a		asl		        ASL 

.0f4f	 29 04		and #$04	        AND #$04

.0f51	 05 6e		ora $6e		        ORA POINT_CLASSIFY_ST

.0f53	 85 06		sta $06		        STA ab06

.0f55	 a5 5f		lda $5f		        LDA H_PERS_FP_HI_ST

.0f57	 0a		asl		        ASL 

.0f58	 0a		asl		        ASL 

.0f59	 0a		asl		        ASL 

.0f5a	 29 08		and #$08	        AND #$08

.0f5c	 05 06		ora $06		        ORA ab06

.0f5e	 aa		tax		        TAX 

.0f5f	 98		tya		        TYA 

.0f60	 1d 30 31	ora $3130,x	        ORA fBBE8,X

.0f63	 4a		lsr		        LSR 

.0f64	 aa		tax		        TAX 

.0f65	 bd 40 31	lda $3140,x	        LDA fBBF8,X

.0f68	 d0 01		bne $0f6b	        BNE b9C56

.0f6a	 60		rts					RTS 

.0f6b	 85 6e		sta $6e		b9C56   STA POINT_CLASSIFY_ST

.0f6d	 a5 6f		lda $6f		        LDA POINT_CLASSIFY_EN

.0f6f	 30 20		bmi $0f91	        BMI b9C7C					; end is behind so needs clipped?

.0f71	 a5 65		lda $65					LDA V_PERS_FP_HI_EN

.0f73	 0a		asl					ASL 

.0f74	 0a		asl					ASL 

.0f75	 29 04		and #$04				AND #$04

.0f77	 05 6f		ora $6f					ORA POINT_CLASSIFY_EN

.0f79	 85 06		sta $06					STA ab06

.0f7b	 a5 63		lda $63					LDA H_PERS_FP_HI_EN

.0f7d	 0a		asl					ASL 

.0f7e	 0a		asl					ASL 

.0f7f	 0a		asl					ASL 

.0f80	 29 08		and #$08				AND #$08

.0f82	 05 06		ora $06					ORA ab06

.0f84	 aa		tax					TAX 

.0f85	 98		tya					TYA 

.0f86	 1d 30 31	ora $3130,x				ORA fBBE8,X

.0f89	 4a		lsr					LSR 

.0f8a	 aa		tax					TAX 

.0f8b	 bd 60 31	lda $3160,x				LDA fBC18,X

.0f8e	 d0 01		bne $0f91				BNE b9C7C

.0f90	 60		rts						RTS 

.0f91	 a5 6e		lda $6e		b9C7C   LDA 	POINT_CLASSIFY_ST ; CHECK TOP?

.0f93	 29 01		and #$01	        AND 	#$01 ; off this edge

.0f95	 f0 3d		beq $0fd4	        BEQ 	b9CC1 ; no

.0f97	 a2 f8		ldx #$f8				LDX 	#ab92_VAL ; ab92 ; yes

.0f99	 a9 14		lda #$14				LDA 	#ab93_VAL ; ab93

.0f9b	 38		sec					SEC 

.0f9c	 e9 18		sbc #$18				SBC 	#FOCUS ; ab21

.0f9e	 86 08		stx $08					STX 	ab08

.0fa0	 85 09		sta $09					STA 	ab09

.0fa2	 a6 5e		ldx $5e					LDX 	H_PERS_FP_LO_ST

.0fa4	 a5 5f		lda $5f					LDA 	H_PERS_FP_HI_ST

.0fa6	 49 01		eor #$01				EOR 	#FP_SIGN			; swap sign

.0fa8	 a8		tay					TAY 

.0fa9	 20 74 0a	jsr $0a74				JSR 	FP_ADD			; 5E-5F + 92-93 -> 68-69 (due to sign swap its actually fp minus?)

.0fac	 a6 68		ldx $68					LDX 	ab68

.0fae	 a4 69		ldy $69					LDY 	ab69

.0fb0	 20 e3 09	jsr $09e3				JSR 	FPMUL			; 92-93 * 68-69 -> 60-61

.0fb3	 a6 60		ldx $60					LDX 	V_PERS_FP_LO_ST

.0fb5	 a4 61		ldy $61					LDY 	V_PERS_FP_HI_ST

.0fb7	 20 74 0a	jsr $0a74				JSR 	FP_ADD			; 68-69 + 60-61 -> 

.0fba	 98		tya					TYA 

.0fbb	 18		clc					CLC 

.0fbc	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.0fbe	 70 14		bvs $0fd4				BVS 	b9CC1

.0fc0	 a8		tay						TAY 

.0fc1	 20 1d 0b	jsr $0b1d					JSR 	FPTO8BIT

.0fc4	 b0 0e		bcs $0fd4					BCS 	b9CC1

.0fc6	 18		clc						CLC 

.0fc7	 69 40		adc #$40					ADC 	#SCR_VER_MID

.0fc9	 30 09		bmi $0fd4					BMI 	b9CC1				; CLIP_TEST_BOTTOM

.0fcb	 85 6b		sta $6b							STA 	LINE_START_VER

.0fcd	 a9 7f		lda #$7f						LDA 	#CLIP_RIGHT 		; clip right ?

.0fcf	 85 6a		sta $6a							STA 	LINE_START_HOR 		; clip right ?

.0fd1	 4c 9a 10	jmp $109a						JMP 	LINE_DRW_JP

.0fd4	 a5 6e		lda $6e		b9CC1   LDA 	POINT_CLASSIFY_ST

.0fd6	 29 02		and #$02	        AND 	#$02 ; off this edge

.0fd8	 f0 3d		beq $1017	        BEQ 	b9D06 ; no

.0fda	 a2 f8		ldx #$f8				LDX 	#ab96_VAL ; ab96 ; yes

.0fdc	 a9 14		lda #$14				LDA 	#ab97_VAL ; ab97

.0fde	 38		sec					SEC 

.0fdf	 e9 18		sbc #$18				SBC 	#FOCUS ; ab21

.0fe1	 86 08		stx $08					STX 	ab08

.0fe3	 85 09		sta $09					STA 	ab09

.0fe5	 a6 60		ldx $60					LDX 	V_PERS_FP_LO_ST

.0fe7	 a5 61		lda $61					LDA 	V_PERS_FP_HI_ST

.0fe9	 49 01		eor #$01				EOR 	#FP_SIGN				; sign swap?

.0feb	 a8		tay					TAY 

.0fec	 20 74 0a	jsr $0a74				JSR 	FP_ADD				; 60-61 + 96-97 -> 68-69 (due to sign swap actually fp minus?)

.0fef	 a6 68		ldx $68					LDX 	ab68

.0ff1	 a4 69		ldy $69					LDY 	ab69

.0ff3	 20 1d 0a	jsr $0a1d				JSR 	FPDIV				; 96-97 / 68-69 -> 5E-5F

.0ff6	 a6 5e		ldx $5e					LDX 	H_PERS_FP_LO_ST

.0ff8	 a4 5f		ldy $5f					LDY 	H_PERS_FP_HI_ST

.0ffa	 20 74 0a	jsr $0a74				JSR 	FP_ADD				; 5E-5F + 96-97 ->

.0ffd	 98		tya					TYA 

.0ffe	 18		clc					CLC 

.0fff	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.1001	 70 14		bvs $1017				BVS 	b9D06

.1003	 a8		tay						TAY 

.1004	 20 1d 0b	jsr $0b1d					JSR 	FPTO8BIT

.1007	 b0 0e		bcs $1017					BCS 	b9D06

.1009	 18		clc						CLC 

.100a	 69 40		adc #$40					ADC 	#SCR_HOR_MID

.100c	 30 09		bmi $1017					BMI 	b9D06					; CLIP_TEST_RIGHT

.100e	 85 6a		sta $6a							STA 	LINE_START_HOR

.1010	 a9 7f		lda #$7f						LDA 	#CLIP_BOTTOM 			; clip bottom

.1012	 85 6b		sta $6b							STA 	LINE_START_VER 			; clip bottom

.1014	 4c 9a 10	jmp $109a						JMP 	LINE_DRW_JP

.1017	 a5 6e		lda $6e		b9D06   LDA 	POINT_CLASSIFY_ST ; LINE DRAW

.1019	 29 04		and #$04	        AND 	#$04 ; off this edge

.101b	 f0 3d		beq $105a	        BEQ 	b9D4B ; no

.101d	 a2 04		ldx #$04				LDX 	#ab90_VAL ; ab90 ; yes

.101f	 a9 19		lda #$19				LDA 	#ab91_VAL ; ab91

.1021	 38		sec					SEC 

.1022	 e9 18		sbc #$18				SBC 	#FOCUS ; ab21

.1024	 86 08		stx $08					STX 	ab08

.1026	 85 09		sta $09					STA 	ab09

.1028	 a6 5e		ldx $5e					LDX 	H_PERS_FP_LO_ST

.102a	 a5 5f		lda $5f					LDA 	H_PERS_FP_HI_ST

.102c	 49 01		eor #$01				EOR 	#FP_SIGN				; swap sign?

.102e	 a8		tay					TAY 

.102f	 20 74 0a	jsr $0a74				JSR 	FP_ADD				; 90-91 + 5E+5F -> 68-69 (its actually fp minus due to sign swap?)

.1032	 a6 68		ldx $68					LDX 	ab68

.1034	 a4 69		ldy $69					LDY 	ab69

.1036	 20 e3 09	jsr $09e3				JSR 	FPMUL				; 68-69 * 90-91 -> 60-61

.1039	 a6 60		ldx $60					LDX 	V_PERS_FP_LO_ST

.103b	 a4 61		ldy $61					LDY 	V_PERS_FP_HI_ST

.103d	 20 74 0a	jsr $0a74				JSR 	FP_ADD				; 60-61 + 90-91 -> 

.1040	 98		tya					TYA 

.1041	 18		clc					CLC 

.1042	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.1044	 70 14		bvs $105a				BVS 	b9D4B

.1046	 a8		tay						TAY 

.1047	 20 1d 0b	jsr $0b1d					JSR 	FPTO8BIT

.104a	 b0 0e		bcs $105a					BCS 	b9D4B

.104c	 18		clc						CLC 

.104d	 69 40		adc #$40					ADC 	#SCR_VER_MID

.104f	 30 09		bmi $105a					BMI 	b9D4B				; CLIP_TEST_BOTTOM

.1051	 85 6b		sta $6b							STA 	LINE_START_VER

.1053	 a9 00		lda #$00						LDA 	#CLIP_TEST_TOP 	; clip off top

.1055	 85 6a		sta $6a							STA 	LINE_START_HOR 	; clip off top 

.1057	 4c 9a 10	jmp $109a						JMP 	LINE_DRW_JP

.105a	 a5 6e		lda $6e		b9D4B   LDA 	POINT_CLASSIFY_ST ; LINE DRAW

.105c	 29 08		and #$08	        AND 	#$08 ; off this edge

.105e	 f0 41		beq $10a1			BEQ 	b9D98 ; no

.1060	 a2 04		ldx #$04				LDX 	#ab94_VAL ; ab94 ; yes

.1062	 a9 19		lda #$19				LDA 	#ab95_VAL ; ab95

.1064	 38		sec					SEC 

.1065	 e9 18		sbc #$18				SBC 	#FOCUS ; ab21

.1067	 86 08		stx $08					STX 	ab08

.1069	 85 09		sta $09					STA 	ab09

.106b	 a6 60		ldx $60					LDX 	V_PERS_FP_LO_ST

.106d	 a5 61		lda $61					LDA 	V_PERS_FP_HI_ST

.106f	 49 01		eor #$01				EOR 	#FP_SIGN				; sign swap

.1071	 a8		tay					TAY 

.1072	 20 74 0a	jsr $0a74				JSR 	FP_ADD				; 94-95 + 60-61 -> 68-69 (due to sign swap actually fp minus?)

.1075	 a6 68		ldx $68					LDX 	ab68

.1077	 a4 69		ldy $69					LDY 	ab69

.1079	 20 1d 0a	jsr $0a1d				JSR 	FPDIV				; 94-95 / 68-69 -> 5E-5F

.107c	 a6 5e		ldx $5e					LDX 	H_PERS_FP_LO_ST

.107e	 a4 5f		ldy $5f					LDY 	H_PERS_FP_HI_ST

.1080	 20 74 0a	jsr $0a74				JSR 	FP_ADD				; 94-95 + 5E-5F ->

.1083	 98		tya					TYA 

.1084	 18		clc					CLC 

.1085	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.1087	 70 18		bvs $10a1				BVS 	b9D98

.1089	 a8		tay						TAY 

.108a	 20 1d 0b	jsr $0b1d					JSR 	FPTO8BIT

.108d	 b0 12		bcs $10a1					BCS 	b9D98

.108f	 18		clc						CLC 

.1090	 69 40		adc #$40					ADC 	#SCR_HOR_MID

.1092	 30 0d		bmi $10a1					BMI 	b9D98				; CLIP_TEST_RIGHT

.1094	 85 6a		sta $6a							STA 	LINE_START_HOR

.1096	 a9 00		lda #$00						LDA 	#CLIP_TEST_LEFT 	; clip off left

.1098	 85 6b		sta $6b							STA 	LINE_START_VER 		; clip off left

.109a	 a6 6a		ldx $6a		LINE_DRW_JP	LDX 	LINE_START_HOR

.109c	 a4 6b		ldy $6b					LDY 	LINE_START_VER

.109e	 4c cd ab	jmp $abcd	LINE_JP_PTR	JMP 	$ABCD 					; LINE_DRAW_01

.10a1	 60		rts		b9D98   	RTS 

.10a2	 48		pha		FORWARD_BACK	PHA 			; push sign/direction

.10a3	 a6 aa		ldx $aa						LDX 	SPEED_LO

.10a5	 45 ab		eor $ab						EOR 	SPEED_HI 	; set direction

.10a7	 86 08		stx $08						STX 	ab08

.10a9	 85 09		sta $09						STA 	ab09

.10ab	 a6 3e		ldx $3e						LDX 	COS_LO

.10ad	 a4 3f		ldy $3f						LDY 	COS_HI

.10af	 20 e3 09	jsr $09e3					JSR 	FPMUL

.10b2	 20 4d 0b	jsr $0b4d					JSR 	FPTO16BIT

.10b5	 98		tya						TYA 

.10b6	 18		clc						CLC 

.10b7	 65 78		adc $78						ADC 	CURR_Z_LSB

.10b9	 85 78		sta $78						STA 	CURR_Z_LSB

.10bb	 8a		txa						TXA 

.10bc	 65 79		adc $79						ADC 	CURR_Z_MSB

.10be	 85 79		sta $79						STA 	CURR_Z_MSB

.10c0	 8a		txa						TXA 

.10c1	 10 04		bpl $10c7					BPL 	_Z_PLUS 		; if +

.10c3	 a9 ff		lda #$ff						LDA 	#$FF		; set to 255 for -

.10c5	 30 02		bmi $10c9						BMI 	_Z_NEG_CONT	; jmp

.10c7	 a9 00		lda #$00	_Z_PLUS   		LDA 	#$00			; set to 0 for +

.10c9	 65 7a		adc $7a		_Z_NEG_CONT 	ADC 	CURR_Z_HSB		; either add or sub depending on + or -

.10cb	 85 7a		sta $7a						STA 	CURR_Z_HSB

.10cd	 68		pla						PLA 			; pop sign

.10ce	 a6 aa		ldx $aa						LDX 	SPEED_LO

.10d0	 45 ab		eor $ab						EOR 	SPEED_HI	; set direction

.10d2	 86 08		stx $08						STX 	ab08

.10d4	 85 09		sta $09						STA 	ab09

.10d6	 a6 3c		ldx $3c						LDX 	SIN_LO

.10d8	 a4 3d		ldy $3d						LDY 	SIN_HI

.10da	 20 e3 09	jsr $09e3					JSR 	FPMUL

.10dd	 20 4d 0b	jsr $0b4d					JSR 	FPTO16BIT

.10e0	 98		tya						TYA 

.10e1	 18		clc						CLC 

.10e2	 65 72		adc $72						ADC 	CURR_X_LSB

.10e4	 85 72		sta $72						STA 	CURR_X_LSB

.10e6	 8a		txa						TXA 

.10e7	 65 73		adc $73						ADC 	CURR_X_MSB

.10e9	 85 73		sta $73						STA 	CURR_X_MSB

.10eb	 8a		txa						TXA 

.10ec	 10 04		bpl $10f2					BPL 	_X_PLUS			; positive

.10ee	 a9 ff		lda #$ff						LDA 	#$FF		; negative so set to 255

.10f0	 30 02		bmi $10f4						BMI 	_X_NEG_CONT ; jump to calc

.10f2	 a9 00		lda #$00	_X_PLUS	   		LDA 	#$00			; positive so set to 0

.10f4	 65 74		adc $74		_X_NEG_CONT    	ADC 	CURR_X_HSB		; calc

.10f6	 85 74		sta $74						STA 	CURR_X_HSB

.10f8	 60		rts						RTS 

.10f9	 a6 2c		ldx $2c		SIN_COS	LDX 	ROT_LO

.10fb	 a4 2d		ldy $2d		        LDY 	ROT_HI

.10fd	 20 08 0b	jsr $0b08	        JSR 	SIN_FP

.1100	 86 3c		stx $3c		        STX 	SIN_LO ; sin_lo

.1102	 84 3d		sty $3d		        STY 	SIN_HI ; sin_hi

.1104	 a6 2c		ldx $2c		        LDX 	ROT_LO

.1106	 a4 2d		ldy $2d		        LDY 	ROT_HI

.1108	 20 07 0b	jsr $0b07	        JSR 	COS_FP

.110b	 86 3e		stx $3e		        STX 	COS_LO ; cos_lo

.110d	 84 3f		sty $3f		        STY 	COS_HI ; cos_hi

.110f	 60		rts		        RTS 

.1110	 a4 ad		ldy $ad		PROCESS_POINT_TO_FP	LDY 	OBJECT_POINTER_POS 	; get point then *16 then conveert to 24bit fp

.1112	 c8		iny							INY 

.1113	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y

.1115	 85 cf		sta $cf							STA 	OBJ_PNT_X_LSB

.1117	 c8		iny							INY 

.1118	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y

.111a	 85 d1		sta $d1							STA 	OBJ_PNT_Y_LSB

.111c	 c8		iny							INY 

.111d	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y

.111f	 85 d3		sta $d3							STA 	OBJ_PNT_Z_LSB

.1121	 84 ad		sty $ad							STY 	OBJECT_POINTER_POS

.1123	 a9 00		lda #$00						LDA 	#0				; MULTIPLY POINT *16 ?

.1125	 85 d0		sta $d0							STA 	OBJ_PNT_X_MSB

.1127	 85 d2		sta $d2							STA 	OBJ_PNT_Y_MSB

.1129	 85 d4		sta $d4							STA 	OBJ_PNT_Z_MSB

.112b	 a5 cf		lda $cf							LDA 	OBJ_PNT_X_LSB

.112d	 49 80		eor #$80						EOR 	#$80 			; reverse the sign?

.112f	 0a		asl							ASL 

.1130	 26 d0		rol $d0							ROL 	OBJ_PNT_X_MSB 	; *2

.1132	 0a		asl							ASL 

.1133	 26 d0		rol $d0							ROL 	OBJ_PNT_X_MSB 	; *4

.1135	 0a		asl							ASL 

.1136	 26 d0		rol $d0							ROL 	OBJ_PNT_X_MSB 	; *8

.1138	 0a		asl							ASL 

.1139	 26 d0		rol $d0							ROL 	OBJ_PNT_X_MSB 	; *16

.113b	 85 cf		sta $cf							STA 	OBJ_PNT_X_LSB

.113d	 18		clc							CLC

.113e	 a5 d5		lda $d5							LDA 	DIFF_X_LSB

.1140	 65 cf		adc $cf							ADC 	OBJ_PNT_X_LSB

.1142	 a8		tay							TAY

.1143	 a5 d6		lda $d6							LDA 	DIFF_X_MSB

.1145	 65 d0		adc $d0							ADC 	OBJ_PNT_X_MSB

.1147	 aa		tax							TAX 

.1148	 a5 d7		lda $d7							LDA 	DIFF_X_HSB

.114a	 69 00		adc #$00						ADC 	#$00

.114c	 20 b5 0b	jsr $0bb5						JSR 	BIT24TOFP

.114f	 84 52		sty $52							STY 	X_POS_HI

.1151	 85 53		sta $53							STA 	X_POS_LO

.1153	 a5 d1		lda $d1							LDA 	OBJ_PNT_Y_LSB

.1155	 49 80		eor #$80						EOR 	#$80

.1157	 0a		asl							ASL 

.1158	 26 d2		rol $d2							ROL 	OBJ_PNT_Y_MSB

.115a	 0a		asl							ASL 

.115b	 26 d2		rol $d2							ROL 	OBJ_PNT_Y_MSB

.115d	 0a		asl							ASL 

.115e	 26 d2		rol $d2							ROL 	OBJ_PNT_Y_MSB

.1160	 0a		asl							ASL 

.1161	 26 d2		rol $d2							ROL 	OBJ_PNT_Y_MSB

.1163	 85 d1		sta $d1							STA 	OBJ_PNT_Y_LSB

.1165	 18		clc							CLC 

.1166	 a5 d8		lda $d8							LDA 	DIFF_Y_LSB

.1168	 65 d1		adc $d1							ADC 	OBJ_PNT_Y_LSB

.116a	 a8		tay							TAY

.116b	 a5 d9		lda $d9							LDA 	DIFF_Y_MSB

.116d	 65 d2		adc $d2							ADC 	OBJ_PNT_Y_MSB

.116f	 aa		tax							TAX 

.1170	 a5 da		lda $da							LDA 	DIFF_Y_HSB

.1172	 69 00		adc #$00						ADC 	#$00

.1174	 20 b5 0b	jsr $0bb5						JSR 	BIT24TOFP

.1177	 84 54		sty $54							STY 	Y_POS_HI

.1179	 85 55		sta $55							STA 	Y_POS_LO

.117b	 a5 d3		lda $d3							LDA 	OBJ_PNT_Z_LSB

.117d	 49 80		eor #$80						EOR 	#$80

.117f	 0a		asl							ASL 

.1180	 26 d4		rol $d4							ROL 	OBJ_PNT_Z_MSB

.1182	 0a		asl							ASL 

.1183	 26 d4		rol $d4							ROL 	OBJ_PNT_Z_MSB

.1185	 0a		asl							ASL 

.1186	 26 d4		rol $d4							ROL 	OBJ_PNT_Z_MSB

.1188	 0a		asl							ASL 

.1189	 26 d4		rol $d4							ROL 	OBJ_PNT_Z_MSB

.118b	 85 d3		sta $d3							STA 	OBJ_PNT_Z_LSB

.118d	 18		clc							CLC 

.118e	 a5 db		lda $db							LDA 	DIFF_Z_LSB

.1190	 65 d3		adc $d3							ADC 	OBJ_PNT_Z_LSB

.1192	 a8		tay							TAY

.1193	 a5 dc		lda $dc							LDA 	DIFF_Z_MSB

.1195	 65 d4		adc $d4							ADC 	OBJ_PNT_Z_MSB

.1197	 aa		tax							TAX 

.1198	 a5 dd		lda $dd							LDA 	DIFF_Z_HSB

.119a	 69 00		adc #$00						ADC 	#$00

.119c	 20 b5 0b	jsr $0bb5						JSR 	BIT24TOFP

.119f	 84 56		sty $56							STY 	Z_POS_HI

.11a1	 85 57		sta $57							STA 	Z_POS_LO

.11a3	 60		rts							RTS 

.11a4	 a5 3c		lda $3c		ROTATE_PERS LDA 	SIN_LO

.11a6	 85 22		sta $22					STA		FP_MULTIPLY_LO

.11a8	 a5 3d		lda $3d					LDA 	SIN_HI

.11aa	 a6 52		ldx $52					LDX		X_POS_HI

.11ac	 a4 53		ldy $53					LDY		X_POS_LO

.11ae	 20 c9 09	jsr $09c9				JSR		FP_MULTIPLY			; X * SIN

.11b1	 84 0a		sty $0a					STy 	X_ROT_LO

.11b3	 85 0b		sta $0b					STA		X_ROT_HI

.11b5	 a5 3e		lda $3e					LDA 	COS_LO

.11b7	 85 22		sta $22					STA		FP_MULTIPLY_LO

.11b9	 a5 3f		lda $3f					LDA 	COS_HI

.11bb	 a6 56		ldx $56					LDX		Z_POS_HI

.11bd	 a4 57		ldy $57					LDY		Z_POS_LO

.11bf	 20 c9 09	jsr $09c9				JSR		FP_MULTIPLY			; Z * COS

.11c2	 84 08		sty $08					STy 	Z_ROT_LO

.11c4	 85 09		sta $09					STA		Z_ROT_HI

.11c6	 a6 0a		ldx $0a					LDX 	X_ROT_LO

.11c8	 a4 0b		ldy $0b					LDY 	X_ROT_HI

.11ca	 20 74 0a	jsr $0a74				JSR 	FP_ADD				; Z = (X * SIN) + (Z * COS)

.11cd	 86 5c		stx $5c					STX 	Z_ROTATION_LO		; Z rotation result?

.11cf	 98		tya					TYA 

.11d0	 49 01		eor #$01				EOR 	#FP_SIGN				; swap sign?

.11d2	 85 5d		sta $5d					STA 	Z_ROTATION_HI		; Z rotation result?

.11d4	 29 01		and #$01				AND 	#$01				; keep fp sign

.11d6	 4a		lsr					LSR 						; shift sign

.11d7	 6a		ror					ROR 						; rotate sign into top bit

.11d8	 85 6e		sta $6e					STA 	POINT_CLASSIFY_ST	; so -ve = $80 / +ve = $00 ? = behind point classification?

.11da	 a5 3e		lda $3e					LDA 	COS_LO

.11dc	 85 22		sta $22					STA		FP_MULTIPLY_LO

.11de	 a5 3f		lda $3f					LDA 	COS_HI

.11e0	 a6 52		ldx $52					LDX		X_POS_HI

.11e2	 a4 53		ldy $53					LDY		X_POS_LO

.11e4	 20 c9 09	jsr $09c9				JSR		FP_MULTIPLY			; X * COS

.11e7	 84 0a		sty $0a					STy 	X_ROT_LO

.11e9	 85 0b		sta $0b					STA		X_ROT_HI

.11eb	 a5 3c		lda $3c					LDA 	SIN_LO

.11ed	 85 22		sta $22					STA		FP_MULTIPLY_LO

.11ef	 a5 3d		lda $3d					LDA 	SIN_HI

.11f1	 a6 56		ldx $56					LDX		Z_POS_HI

.11f3	 a4 57		ldy $57					LDY		Z_POS_LO

.11f5	 20 c9 09	jsr $09c9				JSR		FP_MULTIPLY			; Z * SIN

.11f8	 84 08		sty $08					STy 	Z_ROT_LO

.11fa	 49 01		eor #$01				EOR 	#FP_SIGN 				; -Z * SIN

.11fc	 85 09		sta $09					STA 	Z_ROT_HI

.11fe	 a6 0a		ldx $0a					LDX 	X_ROT_LO

.1200	 a4 0b		ldy $0b					LDY 	X_ROT_HI

.1202	 20 74 0a	jsr $0a74				JSR 	FP_ADD 				; X = (X * COS) + (-Z * SIN)

.1205	 86 58		stx $58					STX 	X_ROTATION_LO		; X rotation result?

.1207	 98		tya					TYA 

.1208	 85 59		sta $59					STA 	X_ROTATION_HI		; X rotation result?

.120a	 a4 6e		ldy $6e		        LDY POINT_CLASSIFY_ST	; z classification? (see #1 above) 0 is infront - !0 is behind

.120c	 d0 28		bne $1236	        BNE bAA54				; behind?

.120e	 85 09		sta $09		        STA ab09

.1210	 a5 5c		lda $5c				LDA		Z_ROTATION_LO

.1212	 85 22		sta $22				STA		FP_DIVIDE_LO

.1214	 a6 09		ldx $09				LDX		ab09

.1216	 a4 08		ldy $08				LDY		ab08

.1218	 a5 5d		lda $5d				LDA		Z_ROTATION_HI

.121a	 20 ad 09	jsr $09ad			JSR		FP_DIVIDE		; Z_ROTATION LO-HI / 08-09 -> 5E-5F

.121d	 86 5e		stx $5e				STX		H_PERS_FP_LO_ST			; hor pers pos

.121f	 85 5f		sta $5f				STA		H_PERS_FP_HI_ST			; hor pers pos

.1221	 18		clc		        CLC 

.1222	 69 18		adc #$18	        ADC #FOCUS ; ab21		; add focus to mantisa?

.1224	 70 0c		bvs $1232	        BVS bAA50

.1226	 a8		tay					TAY 					; copy to mantisa?

.1227	 20 1d 0b	jsr $0b1d				JSR FPTO8BIT			; convert X/Y back to 

.122a	 b0 06		bcs $1232				BCS bAA50

.122c	 69 40		adc #$40				ADC #SCR_HOR_MID		; add hor middle

.122e	 85 6a		sta $6a					STA LINE_START_HOR

.1230	 10 04		bpl $1236				BPL bAA54 				; CLIP_TEST_RIGHT

.1232	 a9 01		lda #$01	bAA50   		LDA 	#PNT_OFF_HOR		; PNT_OFF_RIGHT 		; right clip

.1234	 85 6e		sta $6e						STA 	POINT_CLASSIFY_ST

.1236	 a6 54		ldx $54		bAA54   LDX Y_POS_HI

.1238	 a5 55		lda $55		        LDA Y_POS_LO

.123a	 49 01		eor #$01	        EOR #FP_SIGN				; reverses the sign?

.123c	 a8		tay		        TAY 

.123d	 86 08		stx $08		        STX ab08

.123f	 84 09		sty $09		        STY ab09

.1241	 86 5a		stx $5a		jA8E9   STX 	Y_ROTATION_LO

.1243	 98		tya		        TYA 

.1244	 18		clc		        CLC 

.1245	 69 04		adc #$04	        ADC #$04

.1247	 70 01		bvs $124a	        BVS bA8F2

.1249	 a8		tay					TAY 

.124a	 84 5b		sty $5b		bA8F2   STY 	Y_ROTATION_HI

.124c	 84 09		sty $09		        STY ab09

.124e	 a5 6e		lda $6e		        LDA 	POINT_CLASSIFY_ST

.1250	 30 28		bmi $127a	        BMI 	bA933

.1252	 a5 5c		lda $5c					LDA		Z_ROTATION_LO

.1254	 85 22		sta $22					STA		FP_DIVIDE_LO

.1256	 a6 09		ldx $09					LDX		ab09

.1258	 a4 08		ldy $08					LDY		ab08

.125a	 a5 5d		lda $5d					LDA		Z_ROTATION_HI

.125c	 20 ad 09	jsr $09ad				JSR		FP_DIVIDE		; Z_ROTATION LO-HI / 08-09 -> 60-61

.125f	 86 60		stx $60					STX		V_PERS_FP_LO_ST			; ver pers pos

.1261	 85 61		sta $61					STA		V_PERS_FP_HI_ST			; ver pers pos

.1263	 18		clc					CLC 

.1264	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.1266	 70 0c		bvs $1274				BVS 	bA92D

.1268	 a8		tay						TAY 

.1269	 20 1d 0b	jsr $0b1d					JSR 	FPTO8BIT

.126c	 b0 06		bcs $1274					BCS 	bA92D

.126e	 69 40		adc #$40					ADC 	#SCR_VER_MID

.1270	 85 6b		sta $6b						STA 	LINE_START_VER

.1272	 10 06		bpl $127a					BPL 	bA933				; CLIP_TEST_BOTTOM

.1274	 a5 6e		lda $6e		bA92D   			LDA 	POINT_CLASSIFY_ST

.1276	 09 02		ora #$02						ORA 	#PNT_OFF_VER

.1278	 85 6e		sta $6e							STA 	POINT_CLASSIFY_ST

.127a	 a4 19		ldy $19		bA933   LDY 	POINT_LINE_COUNT						; point position?

.127c	 a5 6e		lda $6e		        LDA 	POINT_CLASSIFY_ST

.127e	 99 40 07	sta $0740,y	        STA 	POINT_CLASSIFICATION,Y

.1281	 30 1e		bmi $12a1	        BMI 	bA95A					; behind

.1283	 a5 5e		lda $5e					LDA 	H_PERS_FP_LO_ST

.1285	 99 00 06	sta $0600,y				STA 	H_PERS_FP_LO,Y	; pers point?

.1288	 a5 5f		lda $5f					LDA 	H_PERS_FP_HI_ST

.128a	 99 c0 03	sta $03c0,y				STA 	H_PERS_FP_HI,Y	; pers point?

.128d	 a5 60		lda $60					LDA 	V_PERS_FP_LO_ST

.128f	 99 00 07	sta $0700,y				STA 	V_PERS_FP_LO,Y	; pers point?

.1292	 a5 61		lda $61					LDA 	V_PERS_FP_HI_ST

.1294	 99 40 06	sta $0640,y				STA 	V_PERS_FP_HI,Y	; pers point?

.1297	 a5 6a		lda $6a					LDA 	LINE_START_HOR 			; get perspective ver

.1299	 99 80 06	sta $0680,y				STA 	PERS_HOR_TAB,Y 				; put perspective ver

.129c	 a5 6b		lda $6b					LDA 	LINE_START_VER 			; get perspective hor

.129e	 99 c0 06	sta $06c0,y				STA 	PERS_VER_TAB,Y 				; put perspective hor

.12a1	 a5 58		lda $58		bA95A   LDA 	X_ROTATION_LO

.12a3	 99 00 01	sta $0100,y	        STA 	X_ROT_TAB_LO,Y 	; X rotation result x pos lo

.12a6	 a5 59		lda $59		        LDA 	X_ROTATION_HI

.12a8	 99 40 01	sta $0140,y	        STA 	X_ROT_TAB_HI,Y 	; X rotation result x pos hi

.12ab	 a5 5a		lda $5a		        LDA 	Y_ROTATION_LO

.12ad	 99 80 01	sta $0180,y	        STA 	Y_ROT_TAB_LO,Y	; rotation result y pos lo

.12b0	 a5 5b		lda $5b		        LDA 	Y_ROTATION_HI

.12b2	 99 c0 02	sta $02c0,y	        STA 	Y_ROT_TAB_HI,Y	; rotation result y pos hi

.12b5	 a5 5c		lda $5c		        LDA 	Z_ROTATION_LO

.12b7	 99 40 03	sta $0340,y	        STA 	Z_ROT_TAB_LO,Y	; rotation result z pos lo

.12ba	 a5 5d		lda $5d		        LDA 	Z_ROTATION_HI

.12bc	 99 80 03	sta $0380,y	        STA 	Z_ROT_TAB_HI,Y	; rotation result z pos hi

.12bf	 60		rts		        RTS 

.12c0	 e8		inx		LINE_DRAW_0_LOOP  	INX 

.12c1	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.12c3	 65 66		adc $66							ADC 	LINE_INC

.12c5	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.12c7	 90 0f		bcc $12d8						BCC 	LINE_DRAW_0_CONT

.12c9	 c8		iny								INY

.12ca	 30 1c		bmi $12e8							BMI 	LINE_DRAW_0_EXIT

.12cc	 b9 00 30	lda $3000,y	LINE_DRAW_0				LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.12cf	 85 02		sta $02								STA 	SCREEN_POS_LO

.12d1	 b9 00 2e	lda $2e00,y	LINE_DRAW_0_SCN			LDA 	VER_POS_SCN0_HI,Y

.12d4	 85 03		sta $03								STA 	SCREEN_POS_HI

.12d6	 84 06		sty $06								STY 	ab06

.12d8	 bc 88 30	ldy $3088,x	LINE_DRAW_0_CONT	LDY 	HOR_SCR_POS,X

.12db	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.12dd	 1d 80 2f	ora $2f80,x	LINE_DRAW_0_TYPE	ORA 	ORA_PIXEL_POS,X

.12e0	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.12e2	 a4 06		ldy $06							LDY 	ab06

.12e4	 e4 6c		cpx $6c							CPX 	PERS_HOR_ab6C

.12e6	 d0 d8		bne $12c0						BNE 	LINE_DRAW_0_LOOP

.12e8	 60		rts		LINE_DRAW_0_EXIT   RTS 

.12e9	 c8		iny		LINE_DRAW_1_LOOP   INY  ; LINE-DRAW

.12ea	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.12ec	 65 66		adc $66							ADC 	LINE_INC

.12ee	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.12f0	 90 03		bcc $12f5						BCC 	LINE_DRAW_1

.12f2	 e8		inx								INX 

.12f3	 30 1c		bmi $1311							BMI 	LINE_DRAW_1_EXIT

.12f5	 b9 00 30	lda $3000,y	LINE_DRAW_1			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.12f8	 85 02		sta $02							STA 	SCREEN_POS_LO

.12fa	 b9 00 2e	lda $2e00,y	LINE_DRAW_1_SCN		LDA 	VER_POS_SCN0_HI,Y

.12fd	 85 03		sta $03							STA 	SCREEN_POS_HI

.12ff	 84 06		sty $06							STY 	ab06

.1301	 bc 88 30	ldy $3088,x						LDY 	HOR_SCR_POS,X

.1304	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.1306	 1d 80 2f	ora $2f80,x	LINE_DRAW_1_TYPE	ORA 	ORA_PIXEL_POS,X

.1309	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.130b	 a4 06		ldy $06							LDY 	ab06

.130d	 c4 6d		cpy $6d							CPY 	PERS_VER_ab6D

.130f	 d0 d8		bne $12e9						BNE 	LINE_DRAW_1_LOOP ; GOTO LINE-DRAW

.1311	 60		rts		LINE_DRAW_1_EXIT   	RTS 

.1312	 c8		iny		LINE_DRAW_2_LOOP   	INY  ; LINE-DRAW

.1313	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.1315	 65 66		adc $66							ADC 	LINE_INC

.1317	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.1319	 90 03		bcc $131e						BCC 	LINE_DRAW_2

.131b	 ca		dex								DEX 

.131c	 30 1c		bmi $133a							BMI 	LINE_DRAW_2_EXIT

.131e	 b9 00 30	lda $3000,y	LINE_DRAW_2			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.1321	 85 02		sta $02							STA 	SCREEN_POS_LO

.1323	 b9 00 2e	lda $2e00,y	LINE_DRAW_2_SCN		LDA 	VER_POS_SCN0_HI,Y

.1326	 85 03		sta $03							STA 	SCREEN_POS_HI

.1328	 84 06		sty $06							STY 	ab06

.132a	 bc 88 30	ldy $3088,x						LDY 	HOR_SCR_POS,X

.132d	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.132f	 1d 80 2f	ora $2f80,x	LINE_DRAW_2_TYPE	ORA 	ORA_PIXEL_POS,X

.1332	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.1334	 a4 06		ldy $06							LDY 	ab06

.1336	 c4 6d		cpy $6d							CPY 	PERS_VER_ab6D

.1338	 d0 d8		bne $1312						BNE 	LINE_DRAW_2_LOOP ; GOTO LINE-DRAW

.133a	 60		rts		LINE_DRAW_2_EXIT   	RTS 

.133b	 ca		dex		LINE_DRAW_3_LOOP  	DEX ; LINE-DRAW

.133c	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.133e	 e5 66		sbc $66							SBC 	LINE_INC

.1340	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.1342	 b0 0f		bcs $1353						BCS 	LINE_DRAW_3_CONT

.1344	 c8		iny								INY 

.1345	 30 1c		bmi $1363							BMI 	LINE_DRAW_3_EXIT

.1347	 b9 00 30	lda $3000,y	LINE_DRAW_3				LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.134a	 85 02		sta $02								STA 	SCREEN_POS_LO

.134c	 b9 00 2e	lda $2e00,y	LINE_DRAW_3_SCN			LDA 	VER_POS_SCN0_HI,Y

.134f	 85 03		sta $03								STA 	SCREEN_POS_HI

.1351	 84 06		sty $06								STY 	ab06

.1353	 bc 88 30	ldy $3088,x	LINE_DRAW_3_CONT	LDY 	HOR_SCR_POS,X

.1356	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.1358	 1d 80 2f	ora $2f80,x	LINE_DRAW_3_TYPE	ORA 	ORA_PIXEL_POS,X

.135b	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.135d	 a4 06		ldy $06							LDY 	ab06

.135f	 e4 6c		cpx $6c							CPX 	PERS_HOR_ab6C

.1361	 d0 d8		bne $133b						BNE 	LINE_DRAW_3_LOOP ; GOTO LINE-DRAW

.1363	 60		rts		LINE_DRAW_3_EXIT   	RTS 

.1364	 ca		dex		LINE_DRAW_4_LOOP   	DEX  ; LINE-DRAW

.1365	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.1367	 e5 66		sbc $66							SBC 	LINE_INC

.1369	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.136b	 b0 0f		bcs $137c						BCS 	LINE_DRAW_4_CONT

.136d	 88		dey								DEY 

.136e	 30 1c		bmi $138c							BMI 	LINE_DRAW_4_EXIT

.1370	 b9 00 30	lda $3000,y	LINE_DRAW_4				LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.1373	 85 02		sta $02								STA 	SCREEN_POS_LO

.1375	 b9 00 2e	lda $2e00,y	LINE_DRAW_4_SCN			LDA 	VER_POS_SCN0_HI,Y

.1378	 85 03		sta $03								STA 	SCREEN_POS_HI

.137a	 84 06		sty $06								STY 	ab06

.137c	 bc 88 30	ldy $3088,x	LINE_DRAW_4_CONT	LDY 	HOR_SCR_POS,X

.137f	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.1381	 1d 80 2f	ora $2f80,x	LINE_DRAW_4_TYPE  	ORA 	ORA_PIXEL_POS,X

.1384	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.1386	 a4 06		ldy $06							LDY 	ab06

.1388	 e4 6c		cpx $6c							CPX 	PERS_HOR_ab6C

.138a	 d0 d8		bne $1364						BNE 	LINE_DRAW_4_LOOP ; GOTO LINE-DRAW

.138c	 60		rts		LINE_DRAW_4_EXIT   	RTS 

.138d	 88		dey		LINE_DRAW_5_LOOP   	DEY  ; LINE-DRAW

.138e	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.1390	 65 66		adc $66							ADC 	LINE_INC

.1392	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.1394	 90 03		bcc $1399						BCC 	LINE_DRAW_5

.1396	 ca		dex								DEX 

.1397	 30 1c		bmi $13b5							BMI 	LINE_DRAW_5_EXIT

.1399	 b9 00 30	lda $3000,y	LINE_DRAW_5			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.139c	 85 02		sta $02							STA 	SCREEN_POS_LO

.139e	 b9 00 2e	lda $2e00,y	LINE_DRAW_5_SCN		LDA 	VER_POS_SCN0_HI,Y

.13a1	 85 03		sta $03							STA 	SCREEN_POS_HI

.13a3	 84 06		sty $06							STY 	ab06

.13a5	 bc 88 30	ldy $3088,x						LDY 	HOR_SCR_POS,X

.13a8	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.13aa	 1d 80 2f	ora $2f80,x	LINE_DRAW_5_TYPE  	ORA 	ORA_PIXEL_POS,X

.13ad	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.13af	 a4 06		ldy $06							LDY 	ab06

.13b1	 c4 6d		cpy $6d							CPY 	PERS_VER_ab6D

.13b3	 d0 d8		bne $138d						BNE 	LINE_DRAW_5_LOOP ; GOTO LINE-DRAW

.13b5	 60		rts		LINE_DRAW_5_EXIT  	RTS

.13b6	 88		dey		LINE_DRAW_6_LOOP   	DEY  ; LINE-DRAW

.13b7	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.13b9	 e5 66		sbc $66							SBC 	LINE_INC

.13bb	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.13bd	 b0 03		bcs $13c2						BCS 	LINE_DRAW_6

.13bf	 e8		inx								INX             ; NEXT VER

.13c0	 30 1c		bmi $13de							BMI 	LINE_DRAW_6_EXIT       ; EXIT

.13c2	 b9 00 30	lda $3000,y	LINE_DRAW_6			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.13c5	 85 02		sta $02							STA 	SCREEN_POS_LO

.13c7	 b9 00 2e	lda $2e00,y	LINE_DRAW_6_SCN		LDA 	VER_POS_SCN0_HI,Y

.13ca	 85 03		sta $03							STA 	SCREEN_POS_HI

.13cc	 84 06		sty $06							STY 	ab06

.13ce	 bc 88 30	ldy $3088,x						LDY 	HOR_SCR_POS,X

.13d1	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.13d3	 1d 80 2f	ora $2f80,x	LINE_DRAW_6_TYPE	ORA 	ORA_PIXEL_POS,X

.13d6	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.13d8	 a4 06		ldy $06							LDY 	ab06

.13da	 c4 6d		cpy $6d							CPY 	PERS_VER_ab6D

.13dc	 d0 d8		bne $13b6						BNE 	LINE_DRAW_6_LOOP ; GOTO LINE-DRAW 

.13de	 60		rts		LINE_DRAW_6_EXIT	RTS 

.13df	 e8		inx		LINE_DRAW_7_LOOP   	INX	; LINE-DRAW

.13e0	 a5 08		lda $08							LDA		LINE_FRACTION_ab08

.13e2	 65 66		adc $66							ADC		LINE_INC

.13e4	 85 08		sta $08							STA		LINE_FRACTION_ab08

.13e6	 90 0f		bcc $13f7						BCC		LINE_DRAW_7_CONT

.13e8	 88		dey								DEY 

.13e9	 30 1c		bmi $1407							BMI		LINE_DRAW_7_EXIT

.13eb	 b9 00 30	lda $3000,y	LINE_DRAW_7				LDA		VER_POS_LO,Y ; LINE-DRAW-START

.13ee	 85 02		sta $02								STA		SCREEN_POS_LO

.13f0	 b9 00 2e	lda $2e00,y	LINE_DRAW_7_SCN			LDA 	VER_POS_SCN0_HI,Y

.13f3	 85 03		sta $03								STA 	SCREEN_POS_HI

.13f5	 84 06		sty $06								STY 	ab06

.13f7	 bc 88 30	ldy $3088,x	LINE_DRAW_7_CONT	LDY 	HOR_SCR_POS,X

.13fa	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.13fc	 1d 80 2f	ora $2f80,x	LINE_DRAW_7_TYPE	ORA 	ORA_PIXEL_POS,X

.13ff	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.1401	 a4 06		ldy $06							LDY 	ab06

.1403	 e4 6c		cpx $6c							CPX 	PERS_HOR_ab6C

.1405	 d0 d8		bne $13df						BNE 	LINE_DRAW_7_LOOP ; GOTO LINE DRAW

.1407	 60		rts		LINE_DRAW_7_EXIT   	RTS 

.1408	 a9 2e		lda #$2e	COLOUR_SETUP_WHITE	LDA 	#>AND_PIXEL_POS

.140a	 a2 3d		ldx #$3d						LDX 	#$3D				; AND

.140c	 d0 04		bne $1412						BNE 	COLOUR_SETUP 		; JUMP

.140e	 a9 2f		lda #$2f	COLOUR_SETUP_BLACK	LDA 	#>ORA_PIXEL_POS

.1410	 a2 1d		ldx #$1d						LDX 	#$1D				; ORA

.1412	 8d df 12	sta $12df	COLOUR_SETUP		STA 	LINE_DRAW_0_TYPE +2

.1415	 8d 08 13	sta $1308						STA 	LINE_DRAW_1_TYPE +2

.1418	 8d 31 13	sta $1331						STA 	LINE_DRAW_2_TYPE +2

.141b	 8d 5a 13	sta $135a						STA 	LINE_DRAW_3_TYPE +2

.141e	 8d 83 13	sta $1383						STA 	LINE_DRAW_4_TYPE +2

.1421	 8d ac 13	sta $13ac						STA 	LINE_DRAW_5_TYPE +2

.1424	 8d d5 13	sta $13d5						STA 	LINE_DRAW_6_TYPE +2

.1427	 8d fe 13	sta $13fe						STA 	LINE_DRAW_7_TYPE +2

.142a	 8d 76 0c	sta $0c76						STA 	LINE_DRAW_8_TYPE +2

.142d	 8e dd 12	stx $12dd						STX 	LINE_DRAW_0_TYPE

.1430	 8e 06 13	stx $1306						STX 	LINE_DRAW_1_TYPE

.1433	 8e 2f 13	stx $132f						STX 	LINE_DRAW_2_TYPE

.1436	 8e 58 13	stx $1358						STX 	LINE_DRAW_3_TYPE

.1439	 8e 81 13	stx $1381						STX 	LINE_DRAW_4_TYPE

.143c	 8e aa 13	stx $13aa						STX 	LINE_DRAW_5_TYPE

.143f	 8e d3 13	stx $13d3						STX 	LINE_DRAW_6_TYPE

.1442	 8e fc 13	stx $13fc						STX 	LINE_DRAW_7_TYPE

.1445	 8e 74 0c	stx $0c74						STX 	LINE_DRAW_8_TYPE

.1448	 60		rts							RTS

.1449	 a9 e0		lda #$e0	DRAW_SCREEN	LDA		#$E0

.144b	 cd 12 d0	cmp $d012	WAIT_RASTER	CMP		$D012

.144e	 d0 fb		bne $144b				BNE 	WAIT_RASTER

.1450	 e6 24		inc $24					INC		SCREEN_FLIP		; INCREMENT SCREEN FLIP

.1452	 a5 24		lda $24					LDA		SCREEN_FLIP		; GET SCREEN FLIP

.1454	 4a		lsr					LSR 					; SHIFT BIT0 INTO CARRY

.1455	 b0 08		bcs $145f				BCS		SCRN_2			; CARRY SET ?

.1457	 a0 40		ldy #$40				LDY		#SCREEN_0		; SCREEN 1 OFFSET

.1459	 a9 2e		lda #$2e				lda		#>VER_POS_SCN0_HI

.145b	 a2 78		ldx #$78				LDX		#$78

.145d	 d0 06		bne $1465				BNE		SCNCLR			; JUMP

.145f	 a0 60		ldy #$60	SCRN_2  	LDY		#SCREEN_1		; SCREEN 2 OFFSET

.1461	 a9 2f		lda #$2f				lda		#>VER_POS_SCN1_HI

.1463	 a2 70		ldx #$70				LDX		#$70

.1465	 8d d3 12	sta $12d3	SCNCLR		sta		LINE_DRAW_0_SCN +2

.1468	 8d fc 12	sta $12fc				sta		LINE_DRAW_1_SCN +2

.146b	 8d 25 13	sta $1325				sta		LINE_DRAW_2_SCN +2

.146e	 8d 4e 13	sta $134e				sta		LINE_DRAW_3_SCN +2

.1471	 8d 77 13	sta $1377				sta		LINE_DRAW_4_SCN +2

.1474	 8d a0 13	sta $13a0				sta		LINE_DRAW_5_SCN +2

.1477	 8d c9 13	sta $13c9				sta		LINE_DRAW_6_SCN +2

.147a	 8d f2 13	sta $13f2				sta		LINE_DRAW_7_SCN +2

.147d	 8d 6c 0c	sta $0c6c				sta		PLOT_POINT_SCN +2

.1480	 8e 6a 09	stx $096a				STX		VIC_SCREEN_BANK +1

.1483	 a2 20		ldx #$20				LDX 	#32

.1485	 c0 60		cpy #$60				CPY 	#SCREEN_1

.1487	 d0 03		bne $148c				BNE	CLSSCN0_LP

.1489	 4c 1a 16	jmp $161a					JMP CLSSCN1_LP

.148c	 a9 a5		lda #$a5	CLSSCN0_LP	LDA 	#$A5

.148e	 99 00 40	sta $4000,y				STA SCREEN0+( 0*320)+0,Y

.1491	 99 01 40	sta $4001,y				STA SCREEN0+( 0*320)+1,Y

.1494	 99 02 40	sta $4002,y				STA SCREEN0+( 0*320)+2,Y

.1497	 99 03 40	sta $4003,y				STA SCREEN0+( 0*320)+3,Y

.149a	 99 04 40	sta $4004,y				STA SCREEN0+( 0*320)+4,Y

.149d	 99 05 40	sta $4005,y				STA SCREEN0+( 0*320)+5,Y

.14a0	 99 06 40	sta $4006,y				STA SCREEN0+( 0*320)+6,Y

.14a3	 99 07 40	sta $4007,y				STA SCREEN0+( 0*320)+7,Y

.14a6	 99 40 41	sta $4140,y				STA SCREEN0+( 1*320)+0,Y

.14a9	 99 41 41	sta $4141,y				STA SCREEN0+( 1*320)+1,Y

.14ac	 99 42 41	sta $4142,y				STA SCREEN0+( 1*320)+2,Y

.14af	 99 43 41	sta $4143,y				STA SCREEN0+( 1*320)+3,Y

.14b2	 99 44 41	sta $4144,y				STA SCREEN0+( 1*320)+4,Y

.14b5	 99 45 41	sta $4145,y				STA SCREEN0+( 1*320)+5,Y

.14b8	 99 46 41	sta $4146,y				STA SCREEN0+( 1*320)+6,Y

.14bb	 99 47 41	sta $4147,y				STA SCREEN0+( 1*320)+7,Y

.14be	 99 80 42	sta $4280,y				STA SCREEN0+( 2*320)+0,Y

.14c1	 99 81 42	sta $4281,y				STA SCREEN0+( 2*320)+1,Y

.14c4	 99 82 42	sta $4282,y				STA SCREEN0+( 2*320)+2,Y

.14c7	 99 83 42	sta $4283,y				STA SCREEN0+( 2*320)+3,Y

.14ca	 99 84 42	sta $4284,y				STA SCREEN0+( 2*320)+4,Y

.14cd	 99 85 42	sta $4285,y				STA SCREEN0+( 2*320)+5,Y

.14d0	 99 86 42	sta $4286,y				STA SCREEN0+( 2*320)+6,Y

.14d3	 99 87 42	sta $4287,y				STA SCREEN0+( 2*320)+7,Y

.14d6	 99 c0 43	sta $43c0,y				STA SCREEN0+( 3*320)+0,Y

.14d9	 99 c1 43	sta $43c1,y				STA SCREEN0+( 3*320)+1,Y

.14dc	 99 c2 43	sta $43c2,y				STA SCREEN0+( 3*320)+2,Y

.14df	 99 c3 43	sta $43c3,y				STA SCREEN0+( 3*320)+3,Y

.14e2	 99 c4 43	sta $43c4,y				STA SCREEN0+( 3*320)+4,Y

.14e5	 99 c5 43	sta $43c5,y				STA SCREEN0+( 3*320)+5,Y

.14e8	 99 c6 43	sta $43c6,y				STA SCREEN0+( 3*320)+6,Y

.14eb	 99 c7 43	sta $43c7,y				STA SCREEN0+( 3*320)+7,Y

.14ee	 99 00 45	sta $4500,y				STA SCREEN0+( 4*320)+0,Y

.14f1	 99 01 45	sta $4501,y				STA SCREEN0+( 4*320)+1,Y

.14f4	 99 02 45	sta $4502,y				STA SCREEN0+( 4*320)+2,Y

.14f7	 99 03 45	sta $4503,y				STA SCREEN0+( 4*320)+3,Y

.14fa	 99 04 45	sta $4504,y				STA SCREEN0+( 4*320)+4,Y

.14fd	 99 05 45	sta $4505,y				STA SCREEN0+( 4*320)+5,Y

.1500	 99 06 45	sta $4506,y				STA SCREEN0+( 4*320)+6,Y

.1503	 99 07 45	sta $4507,y				STA SCREEN0+( 4*320)+7,Y

.1506	 99 40 46	sta $4640,y				STA SCREEN0+( 5*320)+0,Y

.1509	 99 41 46	sta $4641,y				STA SCREEN0+( 5*320)+1,Y

.150c	 99 42 46	sta $4642,y				STA SCREEN0+( 5*320)+2,Y

.150f	 99 43 46	sta $4643,y				STA SCREEN0+( 5*320)+3,Y

.1512	 99 44 46	sta $4644,y				STA SCREEN0+( 5*320)+4,Y

.1515	 99 45 46	sta $4645,y				STA SCREEN0+( 5*320)+5,Y

.1518	 99 46 46	sta $4646,y				STA SCREEN0+( 5*320)+6,Y

.151b	 99 47 46	sta $4647,y				STA SCREEN0+( 5*320)+7,Y

.151e	 99 80 47	sta $4780,y				STA SCREEN0+( 6*320)+0,Y

.1521	 99 81 47	sta $4781,y				STA SCREEN0+( 6*320)+1,Y

.1524	 99 82 47	sta $4782,y				STA SCREEN0+( 6*320)+2,Y

.1527	 99 83 47	sta $4783,y				STA SCREEN0+( 6*320)+3,Y

.152a	 99 84 47	sta $4784,y				STA SCREEN0+( 6*320)+4,Y

.152d	 99 85 47	sta $4785,y				STA SCREEN0+( 6*320)+5,Y

.1530	 99 86 47	sta $4786,y				STA SCREEN0+( 6*320)+6,Y

.1533	 99 87 47	sta $4787,y				STA SCREEN0+( 6*320)+7,Y

.1536	 99 c0 48	sta $48c0,y				STA SCREEN0+( 7*320)+0,Y

.1539	 99 c1 48	sta $48c1,y				STA SCREEN0+( 7*320)+1,Y

.153c	 99 c2 48	sta $48c2,y				STA SCREEN0+( 7*320)+2,Y

.153f	 99 c3 48	sta $48c3,y				STA SCREEN0+( 7*320)+3,Y

.1542	 99 c4 48	sta $48c4,y				STA SCREEN0+( 7*320)+4,Y

.1545	 99 c5 48	sta $48c5,y				STA SCREEN0+( 7*320)+5,Y

.1548	 99 c6 48	sta $48c6,y				STA SCREEN0+( 7*320)+6,Y

.154b	 99 c7 48	sta $48c7,y				STA SCREEN0+( 7*320)+7,Y

.154e	 99 00 4a	sta $4a00,y				STA SCREEN0+( 8*320)+0,Y

.1551	 99 01 4a	sta $4a01,y				STA SCREEN0+( 8*320)+1,Y

.1554	 99 02 4a	sta $4a02,y				STA SCREEN0+( 8*320)+2,Y

.1557	 99 03 4a	sta $4a03,y				STA SCREEN0+( 8*320)+3,Y

.155a	 99 04 4a	sta $4a04,y				STA SCREEN0+( 8*320)+4,Y

.155d	 99 05 4a	sta $4a05,y				STA SCREEN0+( 8*320)+5,Y

.1560	 99 06 4a	sta $4a06,y				STA SCREEN0+( 8*320)+6,Y

.1563	 99 07 4a	sta $4a07,y				STA SCREEN0+( 8*320)+7,Y

.1566	 99 40 4b	sta $4b40,y				STA SCREEN0+( 9*320)+0,Y

.1569	 99 41 4b	sta $4b41,y				STA SCREEN0+( 9*320)+1,Y

.156c	 99 42 4b	sta $4b42,y				STA SCREEN0+( 9*320)+2,Y

.156f	 99 43 4b	sta $4b43,y				STA SCREEN0+( 9*320)+3,Y

.1572	 99 44 4b	sta $4b44,y				STA SCREEN0+( 9*320)+4,Y

.1575	 99 45 4b	sta $4b45,y				STA SCREEN0+( 9*320)+5,Y

.1578	 99 46 4b	sta $4b46,y				STA SCREEN0+( 9*320)+6,Y

.157b	 99 47 4b	sta $4b47,y				STA SCREEN0+( 9*320)+7,Y

.157e	 99 80 4c	sta $4c80,y				STA SCREEN0+( 10*320)+0,Y

.1581	 99 81 4c	sta $4c81,y				STA SCREEN0+( 10*320)+1,Y

.1584	 99 82 4c	sta $4c82,y				STA SCREEN0+( 10*320)+2,Y

.1587	 99 83 4c	sta $4c83,y				STA SCREEN0+( 10*320)+3,Y

.158a	 99 84 4c	sta $4c84,y				STA SCREEN0+( 10*320)+4,Y

.158d	 99 85 4c	sta $4c85,y				STA SCREEN0+( 10*320)+5,Y

.1590	 99 86 4c	sta $4c86,y				STA SCREEN0+( 10*320)+6,Y

.1593	 99 87 4c	sta $4c87,y				STA SCREEN0+( 10*320)+7,Y

.1596	 99 c0 4d	sta $4dc0,y				STA SCREEN0+( 11*320)+0,Y

.1599	 99 c1 4d	sta $4dc1,y				STA SCREEN0+( 11*320)+1,Y

.159c	 99 c2 4d	sta $4dc2,y				STA SCREEN0+( 11*320)+2,Y

.159f	 99 c3 4d	sta $4dc3,y				STA SCREEN0+( 11*320)+3,Y

.15a2	 99 c4 4d	sta $4dc4,y				STA SCREEN0+( 11*320)+4,Y

.15a5	 99 c5 4d	sta $4dc5,y				STA SCREEN0+( 11*320)+5,Y

.15a8	 99 c6 4d	sta $4dc6,y				STA SCREEN0+( 11*320)+6,Y

.15ab	 99 c7 4d	sta $4dc7,y				STA SCREEN0+( 11*320)+7,Y

.15ae	 99 00 4f	sta $4f00,y				STA SCREEN0+( 12*320)+0,Y

.15b1	 99 01 4f	sta $4f01,y				STA SCREEN0+( 12*320)+1,Y

.15b4	 99 02 4f	sta $4f02,y				STA SCREEN0+( 12*320)+2,Y

.15b7	 99 03 4f	sta $4f03,y				STA SCREEN0+( 12*320)+3,Y

.15ba	 99 04 4f	sta $4f04,y				STA SCREEN0+( 12*320)+4,Y

.15bd	 99 05 4f	sta $4f05,y				STA SCREEN0+( 12*320)+5,Y

.15c0	 99 06 4f	sta $4f06,y				STA SCREEN0+( 12*320)+6,Y

.15c3	 99 07 4f	sta $4f07,y				STA SCREEN0+( 12*320)+7,Y

.15c6	 99 40 50	sta $5040,y				STA SCREEN0+( 13*320)+0,Y

.15c9	 99 41 50	sta $5041,y				STA SCREEN0+( 13*320)+1,Y

.15cc	 99 42 50	sta $5042,y				STA SCREEN0+( 13*320)+2,Y

.15cf	 99 43 50	sta $5043,y				STA SCREEN0+( 13*320)+3,Y

.15d2	 99 44 50	sta $5044,y				STA SCREEN0+( 13*320)+4,Y

.15d5	 99 45 50	sta $5045,y				STA SCREEN0+( 13*320)+5,Y

.15d8	 99 46 50	sta $5046,y				STA SCREEN0+( 13*320)+6,Y

.15db	 99 47 50	sta $5047,y				STA SCREEN0+( 13*320)+7,Y

.15de	 99 80 51	sta $5180,y				STA SCREEN0+( 14*320)+0,Y

.15e1	 99 81 51	sta $5181,y				STA SCREEN0+( 14*320)+1,Y

.15e4	 99 82 51	sta $5182,y				STA SCREEN0+( 14*320)+2,Y

.15e7	 99 83 51	sta $5183,y				STA SCREEN0+( 14*320)+3,Y

.15ea	 99 84 51	sta $5184,y				STA SCREEN0+( 14*320)+4,Y

.15ed	 99 85 51	sta $5185,y				STA SCREEN0+( 14*320)+5,Y

.15f0	 99 86 51	sta $5186,y				STA SCREEN0+( 14*320)+6,Y

.15f3	 99 87 51	sta $5187,y				STA SCREEN0+( 14*320)+7,Y

.15f6	 99 c0 52	sta $52c0,y				STA SCREEN0+( 15*320)+0,Y

.15f9	 99 c1 52	sta $52c1,y				STA SCREEN0+( 15*320)+1,Y

.15fc	 99 c2 52	sta $52c2,y				STA SCREEN0+( 15*320)+2,Y

.15ff	 99 c3 52	sta $52c3,y				STA SCREEN0+( 15*320)+3,Y

.1602	 99 c4 52	sta $52c4,y				STA SCREEN0+( 15*320)+4,Y

.1605	 99 c5 52	sta $52c5,y				STA SCREEN0+( 15*320)+5,Y

.1608	 99 c6 52	sta $52c6,y				STA SCREEN0+( 15*320)+6,Y

.160b	 99 c7 52	sta $52c7,y				STA SCREEN0+( 15*320)+7,Y

.160e	 ca		dex					DEX

.160f	 f0 08		beq $1619				BEQ 	CLSSCN0_END

.1611	 98		tya						TYA

.1612	 18		clc						CLC

.1613	 69 08		adc #$08					ADC	#8

.1615	 a8		tay						TAY

.1616	 4c 8c 14	jmp $148c					JMP		CLSSCN0_LP

.1619	 60		rts		CLSSCN0_END	RTS

.161a					clsscn1_lp
.161a	 a9 a5		lda #$a5				LDA 	#$A5

.161c	 99 00 60	sta $6000,y				STA SCREEN1+( 0*320)+0,Y

.161f	 99 01 60	sta $6001,y				STA SCREEN1+( 0*320)+1,Y

.1622	 99 02 60	sta $6002,y				STA SCREEN1+( 0*320)+2,Y

.1625	 99 03 60	sta $6003,y				STA SCREEN1+( 0*320)+3,Y

.1628	 99 04 60	sta $6004,y				STA SCREEN1+( 0*320)+4,Y

.162b	 99 05 60	sta $6005,y				STA SCREEN1+( 0*320)+5,Y

.162e	 99 06 60	sta $6006,y				STA SCREEN1+( 0*320)+6,Y

.1631	 99 07 60	sta $6007,y				STA SCREEN1+( 0*320)+7,Y

.1634	 99 40 61	sta $6140,y				STA SCREEN1+( 1*320)+0,Y

.1637	 99 41 61	sta $6141,y				STA SCREEN1+( 1*320)+1,Y

.163a	 99 42 61	sta $6142,y				STA SCREEN1+( 1*320)+2,Y

.163d	 99 43 61	sta $6143,y				STA SCREEN1+( 1*320)+3,Y

.1640	 99 44 61	sta $6144,y				STA SCREEN1+( 1*320)+4,Y

.1643	 99 45 61	sta $6145,y				STA SCREEN1+( 1*320)+5,Y

.1646	 99 46 61	sta $6146,y				STA SCREEN1+( 1*320)+6,Y

.1649	 99 47 61	sta $6147,y				STA SCREEN1+( 1*320)+7,Y

.164c	 99 80 62	sta $6280,y				STA SCREEN1+( 2*320)+0,Y

.164f	 99 81 62	sta $6281,y				STA SCREEN1+( 2*320)+1,Y

.1652	 99 82 62	sta $6282,y				STA SCREEN1+( 2*320)+2,Y

.1655	 99 83 62	sta $6283,y				STA SCREEN1+( 2*320)+3,Y

.1658	 99 84 62	sta $6284,y				STA SCREEN1+( 2*320)+4,Y

.165b	 99 85 62	sta $6285,y				STA SCREEN1+( 2*320)+5,Y

.165e	 99 86 62	sta $6286,y				STA SCREEN1+( 2*320)+6,Y

.1661	 99 87 62	sta $6287,y				STA SCREEN1+( 2*320)+7,Y

.1664	 99 c0 63	sta $63c0,y				STA SCREEN1+( 3*320)+0,Y

.1667	 99 c1 63	sta $63c1,y				STA SCREEN1+( 3*320)+1,Y

.166a	 99 c2 63	sta $63c2,y				STA SCREEN1+( 3*320)+2,Y

.166d	 99 c3 63	sta $63c3,y				STA SCREEN1+( 3*320)+3,Y

.1670	 99 c4 63	sta $63c4,y				STA SCREEN1+( 3*320)+4,Y

.1673	 99 c5 63	sta $63c5,y				STA SCREEN1+( 3*320)+5,Y

.1676	 99 c6 63	sta $63c6,y				STA SCREEN1+( 3*320)+6,Y

.1679	 99 c7 63	sta $63c7,y				STA SCREEN1+( 3*320)+7,Y

.167c	 99 00 65	sta $6500,y				STA SCREEN1+( 4*320)+0,Y

.167f	 99 01 65	sta $6501,y				STA SCREEN1+( 4*320)+1,Y

.1682	 99 02 65	sta $6502,y				STA SCREEN1+( 4*320)+2,Y

.1685	 99 03 65	sta $6503,y				STA SCREEN1+( 4*320)+3,Y

.1688	 99 04 65	sta $6504,y				STA SCREEN1+( 4*320)+4,Y

.168b	 99 05 65	sta $6505,y				STA SCREEN1+( 4*320)+5,Y

.168e	 99 06 65	sta $6506,y				STA SCREEN1+( 4*320)+6,Y

.1691	 99 07 65	sta $6507,y				STA SCREEN1+( 4*320)+7,Y

.1694	 99 40 66	sta $6640,y				STA SCREEN1+( 5*320)+0,Y

.1697	 99 41 66	sta $6641,y				STA SCREEN1+( 5*320)+1,Y

.169a	 99 42 66	sta $6642,y				STA SCREEN1+( 5*320)+2,Y

.169d	 99 43 66	sta $6643,y				STA SCREEN1+( 5*320)+3,Y

.16a0	 99 44 66	sta $6644,y				STA SCREEN1+( 5*320)+4,Y

.16a3	 99 45 66	sta $6645,y				STA SCREEN1+( 5*320)+5,Y

.16a6	 99 46 66	sta $6646,y				STA SCREEN1+( 5*320)+6,Y

.16a9	 99 47 66	sta $6647,y				STA SCREEN1+( 5*320)+7,Y

.16ac	 99 80 67	sta $6780,y				STA SCREEN1+( 6*320)+0,Y

.16af	 99 81 67	sta $6781,y				STA SCREEN1+( 6*320)+1,Y

.16b2	 99 82 67	sta $6782,y				STA SCREEN1+( 6*320)+2,Y

.16b5	 99 83 67	sta $6783,y				STA SCREEN1+( 6*320)+3,Y

.16b8	 99 84 67	sta $6784,y				STA SCREEN1+( 6*320)+4,Y

.16bb	 99 85 67	sta $6785,y				STA SCREEN1+( 6*320)+5,Y

.16be	 99 86 67	sta $6786,y				STA SCREEN1+( 6*320)+6,Y

.16c1	 99 87 67	sta $6787,y				STA SCREEN1+( 6*320)+7,Y

.16c4	 99 c0 68	sta $68c0,y				STA SCREEN1+( 7*320)+0,Y

.16c7	 99 c1 68	sta $68c1,y				STA SCREEN1+( 7*320)+1,Y

.16ca	 99 c2 68	sta $68c2,y				STA SCREEN1+( 7*320)+2,Y

.16cd	 99 c3 68	sta $68c3,y				STA SCREEN1+( 7*320)+3,Y

.16d0	 99 c4 68	sta $68c4,y				STA SCREEN1+( 7*320)+4,Y

.16d3	 99 c5 68	sta $68c5,y				STA SCREEN1+( 7*320)+5,Y

.16d6	 99 c6 68	sta $68c6,y				STA SCREEN1+( 7*320)+6,Y

.16d9	 99 c7 68	sta $68c7,y				STA SCREEN1+( 7*320)+7,Y

.16dc	 99 00 6a	sta $6a00,y				STA SCREEN1+( 8*320)+0,Y

.16df	 99 01 6a	sta $6a01,y				STA SCREEN1+( 8*320)+1,Y

.16e2	 99 02 6a	sta $6a02,y				STA SCREEN1+( 8*320)+2,Y

.16e5	 99 03 6a	sta $6a03,y				STA SCREEN1+( 8*320)+3,Y

.16e8	 99 04 6a	sta $6a04,y				STA SCREEN1+( 8*320)+4,Y

.16eb	 99 05 6a	sta $6a05,y				STA SCREEN1+( 8*320)+5,Y

.16ee	 99 06 6a	sta $6a06,y				STA SCREEN1+( 8*320)+6,Y

.16f1	 99 07 6a	sta $6a07,y				STA SCREEN1+( 8*320)+7,Y

.16f4	 99 40 6b	sta $6b40,y				STA SCREEN1+( 9*320)+0,Y

.16f7	 99 41 6b	sta $6b41,y				STA SCREEN1+( 9*320)+1,Y

.16fa	 99 42 6b	sta $6b42,y				STA SCREEN1+( 9*320)+2,Y

.16fd	 99 43 6b	sta $6b43,y				STA SCREEN1+( 9*320)+3,Y

.1700	 99 44 6b	sta $6b44,y				STA SCREEN1+( 9*320)+4,Y

.1703	 99 45 6b	sta $6b45,y				STA SCREEN1+( 9*320)+5,Y

.1706	 99 46 6b	sta $6b46,y				STA SCREEN1+( 9*320)+6,Y

.1709	 99 47 6b	sta $6b47,y				STA SCREEN1+( 9*320)+7,Y

.170c	 99 80 6c	sta $6c80,y				STA SCREEN1+( 10*320)+0,Y

.170f	 99 81 6c	sta $6c81,y				STA SCREEN1+( 10*320)+1,Y

.1712	 99 82 6c	sta $6c82,y				STA SCREEN1+( 10*320)+2,Y

.1715	 99 83 6c	sta $6c83,y				STA SCREEN1+( 10*320)+3,Y

.1718	 99 84 6c	sta $6c84,y				STA SCREEN1+( 10*320)+4,Y

.171b	 99 85 6c	sta $6c85,y				STA SCREEN1+( 10*320)+5,Y

.171e	 99 86 6c	sta $6c86,y				STA SCREEN1+( 10*320)+6,Y

.1721	 99 87 6c	sta $6c87,y				STA SCREEN1+( 10*320)+7,Y

.1724	 99 c0 6d	sta $6dc0,y				STA SCREEN1+( 11*320)+0,Y

.1727	 99 c1 6d	sta $6dc1,y				STA SCREEN1+( 11*320)+1,Y

.172a	 99 c2 6d	sta $6dc2,y				STA SCREEN1+( 11*320)+2,Y

.172d	 99 c3 6d	sta $6dc3,y				STA SCREEN1+( 11*320)+3,Y

.1730	 99 c4 6d	sta $6dc4,y				STA SCREEN1+( 11*320)+4,Y

.1733	 99 c5 6d	sta $6dc5,y				STA SCREEN1+( 11*320)+5,Y

.1736	 99 c6 6d	sta $6dc6,y				STA SCREEN1+( 11*320)+6,Y

.1739	 99 c7 6d	sta $6dc7,y				STA SCREEN1+( 11*320)+7,Y

.173c	 99 00 6f	sta $6f00,y				STA SCREEN1+( 12*320)+0,Y

.173f	 99 01 6f	sta $6f01,y				STA SCREEN1+( 12*320)+1,Y

.1742	 99 02 6f	sta $6f02,y				STA SCREEN1+( 12*320)+2,Y

.1745	 99 03 6f	sta $6f03,y				STA SCREEN1+( 12*320)+3,Y

.1748	 99 04 6f	sta $6f04,y				STA SCREEN1+( 12*320)+4,Y

.174b	 99 05 6f	sta $6f05,y				STA SCREEN1+( 12*320)+5,Y

.174e	 99 06 6f	sta $6f06,y				STA SCREEN1+( 12*320)+6,Y

.1751	 99 07 6f	sta $6f07,y				STA SCREEN1+( 12*320)+7,Y

.1754	 99 40 70	sta $7040,y				STA SCREEN1+( 13*320)+0,Y

.1757	 99 41 70	sta $7041,y				STA SCREEN1+( 13*320)+1,Y

.175a	 99 42 70	sta $7042,y				STA SCREEN1+( 13*320)+2,Y

.175d	 99 43 70	sta $7043,y				STA SCREEN1+( 13*320)+3,Y

.1760	 99 44 70	sta $7044,y				STA SCREEN1+( 13*320)+4,Y

.1763	 99 45 70	sta $7045,y				STA SCREEN1+( 13*320)+5,Y

.1766	 99 46 70	sta $7046,y				STA SCREEN1+( 13*320)+6,Y

.1769	 99 47 70	sta $7047,y				STA SCREEN1+( 13*320)+7,Y

.176c	 99 80 71	sta $7180,y				STA SCREEN1+( 14*320)+0,Y

.176f	 99 81 71	sta $7181,y				STA SCREEN1+( 14*320)+1,Y

.1772	 99 82 71	sta $7182,y				STA SCREEN1+( 14*320)+2,Y

.1775	 99 83 71	sta $7183,y				STA SCREEN1+( 14*320)+3,Y

.1778	 99 84 71	sta $7184,y				STA SCREEN1+( 14*320)+4,Y

.177b	 99 85 71	sta $7185,y				STA SCREEN1+( 14*320)+5,Y

.177e	 99 86 71	sta $7186,y				STA SCREEN1+( 14*320)+6,Y

.1781	 99 87 71	sta $7187,y				STA SCREEN1+( 14*320)+7,Y

.1784	 99 c0 72	sta $72c0,y				STA SCREEN1+( 15*320)+0,Y

.1787	 99 c1 72	sta $72c1,y				STA SCREEN1+( 15*320)+1,Y

.178a	 99 c2 72	sta $72c2,y				STA SCREEN1+( 15*320)+2,Y

.178d	 99 c3 72	sta $72c3,y				STA SCREEN1+( 15*320)+3,Y

.1790	 99 c4 72	sta $72c4,y				STA SCREEN1+( 15*320)+4,Y

.1793	 99 c5 72	sta $72c5,y				STA SCREEN1+( 15*320)+5,Y

.1796	 99 c6 72	sta $72c6,y				STA SCREEN1+( 15*320)+6,Y

.1799	 99 c7 72	sta $72c7,y				STA SCREEN1+( 15*320)+7,Y

.179c	 ca		dex					DEX

.179d	 f0 08		beq $17a7				BEQ 	CLSSCN1_END

.179f	 98		tya						TYA

.17a0	 18		clc						CLC

.17a1	 69 08		adc #$08					ADC  #8

.17a3	 a8		tay						TAY

.17a4	 4c 1a 16	jmp $161a					JMP 	CLSSCN1_LP

.17a7	 60		rts		CLSSCN1_END	RTS

.17a8					read_joystick_keyboard
.17a8	 ad 00 dc	lda $dc00	        LDA 	$DC00    ;CIA1: Data Port Register A into A and X

.17ab	 4a		lsr		MVMENT	LSR

.17ac	 b0 07		bcs $17b5			BCS 	MVE_DWN

.17ae	 48		pha					PHA

.17af	 a9 01		lda #$01				LDA 	#$01 ; FORWARD

.17b1	 20 a2 10	jsr $10a2				JSR 	FORWARD_BACK

.17b4	 68		pla					PLA

.17b5	 4a		lsr		MVE_DWN LSR

.17b6	 b0 07		bcs $17bf			BCS 	MVE_LFT

.17b8	 48		pha					PHA

.17b9	 a9 00		lda #$00				LDA 	#$00	; BACKWARD

.17bb	 20 a2 10	jsr $10a2				JSR 	FORWARD_BACK

.17be	 68		pla					PLA

.17bf	 4a		lsr		MVE_LFT LSR

.17c0	 b0 11		bcs $17d3			BCS 	MVE_RGT

.17c2	 a8		tay					TAY

.17c3	 a5 2c		lda $2c					LDA 	ROT_LO	; LEFT

.17c5	 18		clc					CLC 

.17c6	 65 ac		adc $ac					ADC 	ROT_SPD

.17c8	 85 2c		sta $2c					STA 	ROT_LO

.17ca	 a5 2d		lda $2d					LDA 	ROT_HI

.17cc	 69 00		adc #$00				ADC 	#$00

.17ce	 29 03		and #$03				AND 	#$03

.17d0	 85 2d		sta $2d					STA 	ROT_HI

.17d2	 98		tya					TYA

.17d3	 4a		lsr		MVE_RGT LSR

.17d4	 b0 11		bcs $17e7			BCS 	MVE_FRE

.17d6	 a8		tay					TAY

.17d7	 a5 2c		lda $2c					LDA 	ROT_LO	; RIGHT

.17d9	 38		sec					SEC 

.17da	 e5 ac		sbc $ac					SBC 	ROT_SPD

.17dc	 85 2c		sta $2c					STA 	ROT_LO

.17de	 a5 2d		lda $2d					LDA 	ROT_HI

.17e0	 e9 00		sbc #$00				SBC 	#$00

.17e2	 29 03		and #$03				AND 	#$03

.17e4	 85 2d		sta $2d					STA 	ROT_HI

.17e6	 98		tya					TYA

.17e7	 4a		lsr		MVE_FRE LSR

.17e8	 b0 0b		bcs $17f5			BCS 	MVE_EXT

.17ea	 ad 50 1a	lda $1a50				lda 	OBJECTS_TO_DRAW+1

.17ed	 18		clc					clc

.17ee	 69 01		adc #$01				adc 	#1

.17f0	 29 3f		and #$3f				and 	#63

.17f2	 8d 50 1a	sta $1a50				sta 	OBJECTS_TO_DRAW+1

.17f5	 60		rts		MVE_EXT	RTS

.17f6	 b9 7f 18	lda $187f,y	HEXCHAR		LDA		HEX0,Y

.17f9	 9d cd ab	sta $abcd,x	HEX_NUMBER0	STA		$ABCD,X

.17fc	 b9 8f 18	lda $188f,y				LDA		HEX1,Y

.17ff	 9d cd ab	sta $abcd,x	HEX_NUMBER1	STA		$ABCD,X

.1802	 b9 9f 18	lda $189f,y				LDA		HEX2,Y

.1805	 9d cd ab	sta $abcd,x	HEX_NUMBER2	STA		$ABCD,X

.1808	 b9 af 18	lda $18af,y				LDA		HEX3,Y

.180b	 9d cd ab	sta $abcd,x	HEX_NUMBER3	STA		$ABCD,X

.180e	 b9 bf 18	lda $18bf,y				LDA		HEX4,Y

.1811	 9d cd ab	sta $abcd,x	HEX_NUMBER4	STA		$ABCD,X

.1814	 60		rts					RTS

.1815	 84 20		sty $20		HEX16		STY		REGY	; Y = YPOS / A = HI / X = LO

.1817	 86 0f		stx $0f					STX		REGX		

.1819	 a2 00		ldx #$00				LDX		#0

.181b	 20 28 18	jsr $1828				JSR		HEX8

.181e	 a5 0f		lda $0f					LDA		REGX

.1820	 a4 20		ldy $20					LDY		REGY

.1822	 a2 10		ldx #$10				LDX		#16

.1824	 20 28 18	jsr $1828				JSR		HEX8

.1827	 60		rts					RTS

.1828	 18		clc		HEX8		CLC		; A = NUM / Y = YPOS / X = XPOS

.1829	 85 0e		sta $0e					STA		REGA

.182b	 b9 00 30	lda $3000,y				LDA		VER_POS_LO+0,Y

.182e	 8d fa 17	sta $17fa				STA		HEX_NUMBER0+1

.1831	 b9 00 2e	lda $2e00,y				LDA 	VER_POS_SCN0_HI+0,Y

.1834	 8d fb 17	sta $17fb				STA		HEX_NUMBER0+2

.1837	 b9 01 30	lda $3001,y				LDA		VER_POS_LO+1,Y

.183a	 8d 00 18	sta $1800				STA		HEX_NUMBER1+1

.183d	 b9 01 2e	lda $2e01,y				LDA 	VER_POS_SCN0_HI+1,Y

.1840	 8d 01 18	sta $1801				STA		HEX_NUMBER1+2

.1843	 b9 02 30	lda $3002,y				LDA		VER_POS_LO+2,Y

.1846	 8d 06 18	sta $1806				STA		HEX_NUMBER2+1			

.1849	 b9 02 2e	lda $2e02,y				LDA 	VER_POS_SCN0_HI+2,Y

.184c	 8d 07 18	sta $1807				STA		HEX_NUMBER2+2

.184f	 b9 03 30	lda $3003,y				LDA		VER_POS_LO+3,Y

.1852	 8d 0c 18	sta $180c				STA		HEX_NUMBER3+1

.1855	 b9 03 2e	lda $2e03,y				LDA 	VER_POS_SCN0_HI+3,Y

.1858	 8d 0d 18	sta $180d				STA		HEX_NUMBER3+2

.185b	 b9 04 30	lda $3004,y				LDA		VER_POS_LO+4,Y

.185e	 8d 12 18	sta $1812				STA		HEX_NUMBER4+1

.1861	 b9 04 2e	lda $2e04,y				LDA 	VER_POS_SCN0_HI+4,Y

.1864	 8d 13 18	sta $1813				STA		HEX_NUMBER4+2

.1867	 a5 0e		lda $0e					LDA		REGA

.1869	 4a		lsr					LSR

.186a	 4a		lsr					LSR

.186b	 4a		lsr					LSR

.186c	 4a		lsr					LSR

.186d	 a8		tay					TAY

.186e	 20 f6 17	jsr $17f6				JSR		HEXCHAR

.1871	 8a		txa					TXA

.1872	 18		clc					CLC

.1873	 69 08		adc #$08				ADC 	#8

.1875	 aa		tax					TAX

.1876	 a5 0e		lda $0e					LDA		REGA

.1878	 29 0f		and #$0f				AND		#15

.187a	 a8		tay					TAY

.187b	 20 f6 17	jsr $17f6				JSR		HEXCHAR

.187e	 60		rts					RTS

=0100					X_ROT_TAB_LO = $0100 ; UNKNOWN_POINT_TAB_6

=0140					X_ROT_TAB_HI = $0140

=0180					Y_ROT_TAB_LO = $0180

=02c0					Y_ROT_TAB_HI = $02C0

=0340					Z_ROT_TAB_LO = $0340 

=0380					Z_ROT_TAB_HI = $0380

=0600					H_PERS_FP_LO = $0600

=03c0					H_PERS_FP_HI = $03C0

=0700					V_PERS_FP_LO = $0700

=0640					V_PERS_FP_HI = $0640

=0680					PERS_HOR_TAB = $0680

=06c0					PERS_VER_TAB = $06C0

=0740					POINT_CLASSIFICATION = $0740 ; 00 = point is onscreen - 01 = point needs off left/right - 02 = point is off top/bottom - 03 = point is off left/right + top/bottom - 80 / minus = point is behind

=0780					OBJ_X_LSB = $0780

=07c0					OBJ_Y_LSB = $07C0

=0300					OBJ_Z_LSB = $0300


>187f	 80 a2 80 80 88 80 80 80 	HEX0	.BYTE %10000000,%10100010,%10000000,%10000000,%10001000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000010,%10000000,%10000000 

>1887	 80 80 80 80 80 82 80 80 
>188f	 88 82 a8 a8 88 8a 8a a8 	HEX1	.BYTE %10001000,%10000010,%10101000,%10101000,%10001000,%10001010,%10001010,%10101000,%10001000,%10001000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010 

>1897	 88 88 88 88 8a 88 8a 8a 
>189f	 88 a2 80 80 80 80 80 a8 	HEX2	.BYTE %10001000,%10100010,%10000000,%10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10000000,%10000010,%10001010,%10001000,%10000000,%10000000

>18a7	 80 80 80 82 8a 88 80 80 
>18af	 88 a2 8a a8 a8 a8 88 a8 	HEX3	.BYTE %10001000,%10100010,%10001010,%10101000,%10101000,%10101000,%10001000,%10101000,%10001000,%10101000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010

>18b7	 88 a8 88 88 8a 88 8a 8a 
>18bf	 80 80 80 80 a8 80 80 a8 	HEX4	.BYTE %10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10101000,%10000000,%10000000,%10001000,%10000000,%10100000,%10000010,%10000000,%10001010

>18c7	 80 80 88 80 a0 82 80 8a 

.18cf					obj_x_msb

>18cf	 00 14 28 3c 50 64 78 8c 	.BYTE 00,20,40,60,80,100,120,140,160,180,200,220

>18d7	 a0 b4 c8 dc 

.190f					obj_y_msb
.194f					obj_z_msb

>194f	 00 14 28 3c 50 64 78 8c 	.BYTE 00,20,40,60,80,100,120,140,160,180,200,220

>1957	 a0 b4 c8 dc 

.198f					obj_x_hsb
.19cf					obj_y_hsb
.1a0f					obj_z_hsb
.1a4f					objects_to_draw

>1a4f	 00                       			.BYTE 00

>1a50	 01                       			.BYTE 01 ; object being drawn

>1a51	 02 03 04 05 06 07        			.BYTE 02,03,04,05,06,07

>1a57	 08 09 0a 0b 0c 0d 0e 0f  	        .BYTE 08,09,10,11,12,13,14,15

>1a5f	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a67	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a6f	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a77	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a7f	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a87	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00


.1a8f					obj53

>1a8f	 11 fd 08 00              		.byte $11,$FD,$08,$00

>1a93	 03 04 00 fd 04 00 03 08  	  .BYTE $03,$04,$00,$FD,$04,$00,$03,$08

>1a9b	 00 ff 07 00 01 07 00 02  	  .BYTE $00,$FF,$07,$00,$01,$07,$00,$02

>1aa3	 09 00 02 0a 00 01 0b 00  	  .BYTE $09,$00,$02,$0A,$00,$01,$0B,$00

>1aab	 ff 0b 00 fe 0a 00 fe 09  	  .BYTE $FF,$0B,$00,$FE,$0A,$00,$FE,$09

>1ab3	 00 ff 0a 00 ff 09 00 01  	  .BYTE $00,$FF,$0A,$00,$FF,$09,$00,$01

>1abb	 0a 00 01 09 00 ff 08 00  	  .BYTE $0A,$00,$01,$09,$00,$FF,$08,$00

>1ac3	 01 08 00 8c 00 01 02 03  	  .BYTE $01,$08,$00,$8C,$00,$01,$02,$03

>1acb	 04 05 05 06 06 07 07 08  	  .BYTE $04,$05,$05,$06,$06,$07,$07,$08

>1ad3	 08 09 09 0a 0a 0b 0b 04  	  .BYTE $08,$09,$09,$0A,$0A,$0B,$0B,$04

>1adb	 0c 0d 0e 0f 10 11        	  .BYTE $0C,$0D,$0E,$0F,$10,$11


.1ae1					obj5

>1ae1	 0c fe                    	  .byte $0C,$FE

>1ae3	 00 e0 02 00 e0 06 00 10  	  .BYTE $00,$E0,$02,$00,$E0,$06,$00,$10

>1aeb	 fa 00 10 fc 04 e8 04 04  	  .BYTE $FA,$00,$10,$FC,$04,$E8,$04,$04

>1af3	 e8 06 06 16 fa 06 16 00  	  .BYTE $E8,$06,$06,$16,$FA,$06,$16,$00

>1afb	 04 e8 00 0a 1a 00 06 16  	  .BYTE $04,$E8,$00,$0A,$1A,$00,$06,$16

>1b03	 10 00 20 f0 00 20 15 01  	  .BYTE $10,$00,$20,$F0,$00,$20,$15,$01

>1b0b	 12 23 30 45 56 67 74 15  	  .BYTE $12,$23,$30,$45,$56,$67,$74,$15

>1b13	 04 26 37 89 9a a8 1b b2  	  .BYTE $04,$26,$37,$89,$9A,$A8,$1B,$B2

>1b1b	 0c c3 6b 7c bc 0b fa 00  	  .BYTE $0C,$C3,$6B,$7C,$BC,$0B,$FA,$00

>1b23	 ff fa 00 02 fd           	  .BYTE $FF,$FA,$00,$02,$FD


.1b28					obj27

>1b28	 00 03 06                 	  .byte $00,$03,$06

>1b2b	 00 02 06 00 ff fd 00 fe  	  .BYTE $00,$02,$06,$00,$FF,$FD,$00,$FE

>1b33	 fa 03 ff fa 03 02 fd 03  	  .BYTE $FA,$03,$FF,$FA,$03,$02,$FD,$03

>1b3b	 03 06 03 02 06 03 ff fd  	  .BYTE $03,$06,$03,$02,$06,$03,$FF,$FD

>1b43	 03 fe 11 01 12 23 34 45  	  .BYTE $03,$FE,$11,$01,$12,$23,$34,$45

>1b4b	 50 67 78 89 9a ab 06 17  	  .BYTE $50,$67,$78,$89,$9A,$AB,$06,$17

>1b53	 28 39 4a 5b b6           	  .BYTE $28,$39,$4A,$5B,$B6


.1b58					obj32

>1b58	 0b 06 07                 		.byte $0B,$06,$07

>1b5b	 00 06 0c 00 06 0f 00 fa  	  .BYTE $00,$06,$0C,$00,$06,$0F,$00,$FA

>1b63	 0f 00 fa 07 00 04 0b 00  	  .BYTE $0F,$00,$FA,$07,$00,$04,$0B,$00

>1b6b	 02 0d 00 00 09 00 fe 0b  	  .BYTE $02,$0D,$00,$00,$09,$00,$FE,$0B

>1b73	 00 fc 0a 00 fb 07 00 fa  	  .BYTE $00,$FC,$0A,$00,$FB,$07,$00,$FA

>1b7b	 04 00 0a 02 23 34 40 15  	  .BYTE $04,$00,$0A,$02,$23,$34,$40,$15

>1b83	 56 67 78 89 9a ab        	  .BYTE $56,$67,$78,$89,$9A,$AB


.1b89					obj43

>1b89	 12 fa                    		.byte $12,$FA

>1b8b	 10 00 fc 0e 00 fe 0c 00  	  .BYTE $10,$00,$FC,$0E,$00,$FE,$0C,$00

>1b93	 01 09 00 05 10 00 04 0e  	  .BYTE $01,$09,$00,$05,$10,$00,$04,$0E

>1b9b	 00 03 0c 00 08 09 00 07  	  .BYTE $00,$03,$0C,$00,$08,$09,$00,$07

>1ba3	 09 00 04 09 00 07 00 00  	  .BYTE $09,$00,$04,$09,$00,$07,$00,$00

>1bab	 05 03 00 03 06 00 fa 00  	  .BYTE $05,$03,$00,$03,$06,$00,$FA,$00

>1bb3	 00 fc 02 00 ff 06 00 f8  	  .BYTE $00,$FC,$02,$00,$FF,$06,$00,$F8

>1bbb	 07 00 f9 07 00 fd 08 00  	  .BYTE $07,$00,$F9,$07,$00,$FD,$08,$00

>1bc3	 93 00 03 04 03 07 03 0a  	  .BYTE $93,$00,$03,$04,$03,$07,$03,$0A

>1bcb	 03 0e 03 11 03 0d 0e 10  	  .BYTE $03,$0E,$03,$11,$03,$0D,$0E,$10

>1bd3	 11 01 05 05 08 08 0b 0b  	  .BYTE $11,$01,$05,$05,$08,$08,$0B,$0B

>1bdb	 0e 0e 11 11 01 02 06 06  	  .BYTE $0E,$0E,$11,$11,$01,$02,$06,$06

>1be3	 09 09 0c 0c 0f 0f 12 12  	  .BYTE $09,$09,$0C,$0C,$0F,$0F,$12,$12

>1beb	 02                       	  .BYTE $02


.1bec					obj28

>1bec	 09 fe 00 fe 00 00 02     	  .byte $09,$FE,$00,$FE,$00,$00,$02

>1bf3	 02 00 fe 00 01 00 00 03  	  .BYTE $02,$00,$FE,$00,$01,$00,$00,$03

>1bfb	 00 00 07 00 fe 06 ff fe  	  .BYTE $00,$00,$07,$00,$FE,$06,$FF,$FE

>1c03	 08 01 02 08 01 02 06 ff  	  .BYTE $08,$01,$02,$08,$01,$02,$06,$FF

>1c0b	 09 04 14 24 35 67 78 89  	  .BYTE $09,$04,$14,$24,$35,$67,$78,$89

>1c13	 96 68 79                 	  .BYTE $96,$68,$79


.1c16					obj42

>1c16	 16 f8 00 fd f8           		.byte $16,$F8,$00,$FD,$F8

>1c1b	 00 04 08 00 04 08 00 fd  	  .BYTE $00,$04,$08,$00,$04,$08,$00,$FD

>1c23	 f8 07 fd f8 07 04 08 07  	  .BYTE $F8,$07,$FD,$F8,$07,$04,$08,$07

>1c2b	 04 08 07 fd f9 07 fe f9  	  .BYTE $04,$08,$07,$FD,$F9,$07,$FE,$F9

>1c33	 07 02 ff 07 02 ff 07 fe  	  .BYTE $07,$02,$FF,$07,$02,$FF,$07,$FE

>1c3b	 f9 04 fe f9 04 02 ff 04  	  .BYTE $F9,$04,$FE,$F9,$04,$02,$FF,$04

>1c43	 02 ff 04 fe fc 07 03 fc  	  .BYTE $02,$FF,$04,$FE,$FC,$07,$03,$FC

>1c4b	 09 03 fb 09 03 fd 09 03  	  .BYTE $09,$03,$FB,$09,$03,$FD,$09,$03

>1c53	 fc 08 03 fc 08 01 fc 06  	  .BYTE $FC,$08,$03,$FC,$08,$01,$FC,$06

>1c5b	 01 9b 00 01 01 02 02 03  	  .BYTE $01,$9B,$00,$01,$01,$02,$02,$03

>1c63	 03 00 04 05 05 06 06 07  	  .BYTE $03,$00,$04,$05,$05,$06,$06,$07

>1c6b	 07 04 00 04 01 05 02 06  	  .BYTE $07,$04,$00,$04,$01,$05,$02,$06

>1c73	 03 07 08 09 09 0a 0a 0b  	  .BYTE $03,$07,$08,$09,$09,$0A,$0A,$0B

>1c7b	 0b 08 0c 0d 0d 0e 0e 0f  	  .BYTE $0B,$08,$0C,$0D,$0D,$0E,$0E,$0F

>1c83	 0f 0c 0c 08 0d 09 0e 0a  	  .BYTE $0F,$0C,$0C,$08,$0D,$09,$0E,$0A

>1c8b	 0f 0b 10 11 12 13 14 15  	  .BYTE $0F,$0B,$10,$11,$12,$13,$14,$15

>1c93	 15 16                    	  .BYTE $15,$16


.1c95					obj36

>1c95	 13 fc 00 fc fc 00        		.byte $13,$FC,$00,$FC,$FC,$00

>1c9b	 04 04 00 04 04 00 fc fc  	  .BYTE $04,$04,$00,$04,$04,$00,$FC,$FC

>1ca3	 0a fc fc 0a 04 04 0a 04  	  .BYTE $0A,$FC,$FC,$0A,$04,$04,$0A,$04

>1cab	 04 0a fc ff 02 fc ff 04  	  .BYTE $04,$0A,$FC,$FF,$02,$FC,$FF,$04

>1cb3	 fc fd 04 fc fd 06 fc ff  	  .BYTE $FC,$FD,$04,$FC,$FD,$06,$FC,$FF

>1cbb	 06 fc ff 08 fc 01 08 fc  	  .BYTE $06,$FC,$FF,$08,$FC,$01,$08,$FC

>1cc3	 01 06 fc 03 06 fc 03 04  	  .BYTE $01,$06,$FC,$03,$06,$FC,$03,$04

>1ccb	 fc 01 04 fc 01 02 fc 97  	  .BYTE $FC,$01,$04,$FC,$01,$02,$FC,$97

>1cd3	 00 01 01 02 02 03 03 00  	  .BYTE $00,$01,$01,$02,$02,$03,$03,$00

>1cdb	 04 05 05 06 06 07 07 04  	  .BYTE $04,$05,$05,$06,$06,$07,$07,$04

>1ce3	 00 04 01 05 02 06 03 07  	  .BYTE $00,$04,$01,$05,$02,$06,$03,$07

>1ceb	 08 09 09 0a 0a 0b 0b 0c  	  .BYTE $08,$09,$09,$0A,$0A,$0B,$0B,$0C

>1cf3	 0c 0d 0d 0e 0e 0f 0f 10  	  .BYTE $0C,$0D,$0D,$0E,$0E,$0F,$0F,$10

>1cfb	 10 11 11 12 12 13 13 08  	  .BYTE $10,$11,$11,$12,$12,$13,$13,$08


.1d03					obj37

>1d03	 1f fb 00 03 fb 00 fd 05  	  .BYTE $1F,$FB,$00,$03,$FB,$00,$FD,$05

>1d0b	 00 fd 05 00 03 fb 06 03  	  .BYTE $00,$FD,$05,$00,$03,$FB,$06,$03

>1d13	 fb 06 fd 05 06 fd 05 06  	  .BYTE $FB,$06,$FD,$05,$06,$FD,$05,$06

>1d1b	 03 fc 02 fd fc 03 fd fc  	  .BYTE $03,$FC,$02,$FD,$FC,$03,$FD,$FC

>1d23	 04 fd fd 04 fd fd 03 fd  	  .BYTE $04,$FD,$FD,$04,$FD,$FD,$03,$FD

>1d2b	 fe 02 fd fe 03 fd fe 04  	  .BYTE $FE,$02,$FD,$FE,$03,$FD,$FE,$04

>1d33	 fd ff 04 fd ff 03 fd ff  	  .BYTE $FD,$FF,$04,$FD,$FF,$03,$FD,$FF

>1d3b	 02 fd 00 02 fd 00 03 fd  	  .BYTE $02,$FD,$00,$02,$FD,$00,$03,$FD

>1d43	 00 04 fd 01 04 fd 01 03  	  .BYTE $00,$04,$FD,$01,$04,$FD,$01,$03

>1d4b	 fd 02 02 fd 02 03 fd 02  	  .BYTE $FD,$02,$02,$FD,$02,$03,$FD,$02

>1d53	 04 fd 03 04 fd 03 03 fd  	  .BYTE $04,$FD,$03,$04,$FD,$03,$03,$FD

>1d5b	 03 02 fd 04 02 fd 04 04  	  .BYTE $03,$02,$FD,$04,$02,$FD,$04,$04

>1d63	 fd 9d 00 01 01 02 02 03  	  .BYTE $FD,$9D,$00,$01,$01,$02,$02,$03

>1d6b	 03 00 04 05 05 06 06 07  	  .BYTE $03,$00,$04,$05,$05,$06,$06,$07

>1d73	 07 04 00 04 01 05 02 06  	  .BYTE $07,$04,$00,$04,$01,$05,$02,$06

>1d7b	 03 07 08 0a 0a 0b 0b 0c  	  .BYTE $03,$07,$08,$0A,$0A,$0B,$0B,$0C

>1d83	 0c 09 0d 0f 0f 10 0e 11  	  .BYTE $0C,$09,$0D,$0F,$0F,$10,$0E,$11

>1d8b	 0d 12 13 15 15 16 16 17  	  .BYTE $0D,$12,$13,$15,$15,$16,$16,$17

>1d93	 17 14 18 1d 1d 1c 19 1c  	  .BYTE $17,$14,$18,$1D,$1D,$1C,$19,$1C

>1d9b	 19 1a 1a 1b 1e 1f        	  .BYTE $19,$1A,$1A,$1B,$1E,$1F


.1da1					obj31

>1da1	 0f fb                    		.byte $0F,$FB

>1da3	 00 fe fb 00 02 00 00 02  	  .BYTE $00,$FE,$FB,$00,$02,$00,$00,$02

>1dab	 00 00 fe fb 06 fe fb 06  	  .BYTE $00,$00,$FE,$FB,$06,$FE,$FB,$06

>1db3	 02 00 06 02 00 06 fe fb  	  .BYTE $02,$00,$06,$02,$00,$06,$FE,$FB

>1dbb	 09 ff fb 09 02 00 09 02  	  .BYTE $09,$FF,$FB,$09,$02,$00,$09,$02

>1dc3	 00 09 ff fb 0b 00 fb 0b  	  .BYTE $00,$09,$FF,$FB,$0B,$00,$FB,$0B

>1dcb	 02 00 0b 02 00 0b 00 15  	  .BYTE $02,$00,$0B,$02,$00,$0B,$00,$15

>1dd3	 01 12 23 30 45 56 67 74  	  .BYTE $01,$12,$23,$30,$45,$56,$67,$74

>1ddb	 04 37 1d 2e 89 9a ab b8  	  .BYTE $04,$37,$1D,$2E,$89,$9A,$AB,$B8

>1de3	 cd de ef fc 8c bf        	  .BYTE $CD,$DE,$EF,$FC,$8C,$BF


.1de9					obj30

>1de9	 07 f0                    		.byte $07,$F0

>1deb	 00 f0 10 00 f0 10 00 10  	  .BYTE $00,$F0,$10,$00,$F0,$10,$00,$10

>1df3	 f0 00 10 f0 10 f0 10 10  	  .BYTE $F0,$00,$10,$F0,$10,$F0,$10,$10

>1dfb	 f0 10 10 10 f0 10 10 0b  	  .BYTE $F0,$10,$10,$10,$F0,$10,$10,$0B

>1e03	 01 12 23 30 45 56 67 74  	  .BYTE $01,$12,$23,$30,$45,$56,$67,$74

>1e0b	 04 15 26 37              	  .BYTE $04,$15,$26,$37


.1e0f					obj35

>1e0f	 0d fc 00 00              		.byte $0D,$FC,$00,$00

>1e13	 fe 05 00 fc 07 00 fc 09  	  .BYTE $FE,$05,$00,$FC,$07,$00,$FC,$09

>1e1b	 00 fe 0b 00 02 0b 00 04  	  .BYTE $00,$FE,$0B,$00,$02,$0B,$00,$04

>1e23	 09 00 04 07 00 02 05 00  	  .BYTE $09,$00,$04,$07,$00,$02,$05,$00

>1e2b	 04 00 00 fd 08 00 ff 08  	  .BYTE $04,$00,$00,$FD,$08,$00,$FF,$08

>1e33	 00 01 08 00 03 08 00 0b  	  .BYTE $00,$01,$08,$00,$03,$08,$00,$0B

>1e3b	 01 12 23 34 45 56 67 78  	  .BYTE $01,$12,$23,$34,$45,$56,$67,$78

>1e43	 89 18 ab cd              	  .BYTE $89,$18,$AB,$CD


.1e47					obj41

>1e47	 0a 00 05 fe              		.byte $0A,$00,$05,$FE

>1e4b	 00 0c fe 00 0c 02 00 05  	  .BYTE $00,$0C,$FE,$00,$0C,$02,$00,$05

>1e53	 02 00 06 ff 00 0b ff 00  	  .BYTE $02,$00,$06,$FF,$00,$0B,$FF,$00

>1e5b	 0b 01 00 09 01 00 09 ff  	  .BYTE $0B,$01,$00,$09,$01,$00,$09,$FF

>1e63	 00 05 00 00 00 00 08 01  	  .BYTE $00,$05,$00,$00,$00,$00,$08,$01

>1e6b	 12 23 30 45 56 67 78 9a  	  .BYTE $12,$23,$30,$45,$56,$67,$78,$9A

>1e73	 00                       	  .BYTE $00


.1e74					obj39

>1e74	 0f f6 00 fa f6 00 06     		.byte $0F,$F6,$00,$FA,$F6,$00,$06

>1e7b	 0a 00 06 0a 00 fa f8 0a  	  .BYTE $0A,$00,$06,$0A,$00,$FA,$F8,$0A

>1e83	 fc f8 0a 04 08 0a 04 08  	  .BYTE $FC,$F8,$0A,$04,$08,$0A,$04,$08

>1e8b	 0a fc f6 00 fd f6 00 03  	  .BYTE $0A,$FC,$F6,$00,$FD,$F6,$00,$03

>1e93	 fa 00 03 fa 00 fd fa 00  	  .BYTE $FA,$00,$03,$FA,$00,$FD,$FA,$00

>1e9b	 00 0a 00 00 04 00 ff 08  	  .BYTE $00,$0A,$00,$00,$04,$00,$FF,$08

>1ea3	 00 ff 10 01 12 23 30 45  	  .BYTE $00,$FF,$10,$01,$12,$23,$30,$45

>1eab	 56 67 74 04 15 26 37 9a  	  .BYTE $56,$67,$74,$04,$15,$26,$37,$9A

>1eb3	 ab b8 cd ef              	  .BYTE $AB,$B8,$CD,$EF


.1eb7					obj40

>1eb7	 05 fa 00 fa              		.byte $05,$FA,$00,$FA

>1ebb	 06 00 fa 06 00 06 fa 00  	  .BYTE $06,$00,$FA,$06,$00,$06,$FA,$00

>1ec3	 06 fa 0c 00 06 0c 00 08  	  .BYTE $06,$FA,$0C,$00,$06,$0C,$00,$08

>1ecb	 01 12 23 30 04 43 15 52  	  .BYTE $01,$12,$23,$30,$04,$43,$15,$52

>1ed3	 45                       	  .BYTE $45


.1ed4					obj51

>1ed4	 04 aa 00 aa aa 00 56     		.byte $04,$AA,$00,$AA,$AA,$00,$56

>1edb	 56 00 56 56 00 aa 00 7f  	  .BYTE $56,$00,$56,$56,$00,$AA,$00,$7F

>1ee3	 00 07 01 12 23 30 04 14  	  .BYTE $00,$07,$01,$12,$23,$30,$04,$14

>1eeb	 24 34                    	  .BYTE $24,$34


.1eed					obj45

>1eed	 0e 00 00 00 fc 14        		.byte $0E,$00,$00,$00,$FC,$14

>1ef3	 fc fc 14 04 04 14 04 04  	  .BYTE $FC,$FC,$14,$04,$04,$14,$04,$04

>1efb	 14 fc fc 5a fc fc 5a 04  	  .BYTE $14,$FC,$FC,$5A,$FC,$FC,$5A,$04

>1f03	 04 5a 04 04 5a fc 00 6e  	  .BYTE $04,$5A,$04,$04,$5A,$FC,$00,$6E

>1f0b	 00 00 7f 00 d8 00 d8 d8  	  .BYTE $00,$00,$7F,$00,$D8,$00,$D8,$D8

>1f13	 00 28 28 00 28 28 00 d8  	  .BYTE $00,$28,$28,$00,$28,$28,$00,$D8

>1f1b	 18 01 02 03 04 12 23 34  	  .BYTE $18,$01,$02,$03,$04,$12,$23,$34

>1f23	 41 56 67 78 85 15 26 37  	  .BYTE $41,$56,$67,$78,$85,$15,$26,$37

>1f2b	 48 59 69 79 89 b5 c6 d7  	  .BYTE $48,$59,$69,$79,$89,$B5,$C6,$D7

>1f33	 e8 0a                    	  .BYTE $E8,$0A


.1f35					obj21

>1f35	 07 fd 06 fe fd 06        		.byte $07,$FD,$06,$FE,$FD,$06

>1f3b	 02 00 06 04 03 06 02 03  	  .BYTE $02,$00,$06,$04,$03,$06,$02,$03

>1f43	 06 fe 00 06 fc 00 06 00  	  .BYTE $06,$FE,$00,$06,$FC,$00,$06,$00

>1f4b	 00 00 00 09 01 12 23 34  	  .BYTE $00,$00,$00,$09,$01,$12,$23,$34

>1f53	 45 50 03 14 25 67        	  .BYTE $45,$50,$03,$14,$25,$67

>1f59	 15 fc                    	OBJ10 .BYTE $15,$FC

>1f5b	 00 fc fc 00 04 04 00 04  	  .BYTE $00,$FC,$FC,$00,$04,$04,$00,$04

>1f63	 04 00 fc fe 09 fe fe 09  	  .BYTE $04,$00,$FC,$FE,$09,$FE,$FE,$09

>1f6b	 02 02 09 02 02 09 fe fe  	  .BYTE $02,$02,$09,$02,$02,$09,$FE,$FE

>1f73	 0b fe fe 0b 02 02 0b 02  	  .BYTE $0B,$FE,$FE,$0B,$02,$02,$0B,$02

>1f7b	 02 0b fe ff 0b fe ff 09  	  .BYTE $02,$0B,$FE,$FF,$0B,$FE,$FF,$09

>1f83	 fe 01 0b fe 01 09 fe 00  	  .BYTE $FE,$01,$0B,$FE,$01,$09,$FE,$00

>1f8b	 0b fa fb 0b 03 05 0b 03  	  .BYTE $0B,$FA,$FB,$0B,$03,$05,$0B,$03

>1f93	 00 0e fe fe 0e 01 02 0e  	  .BYTE $00,$0E,$FE,$FE,$0E,$01,$02,$0E

>1f9b	 01 9e 00 01 01 02 02 03  	  .BYTE $01,$9E,$00,$01,$01,$02,$02,$03

>1fa3	 03 00 04 05 05 06 06 07  	  .BYTE $03,$00,$04,$05,$05,$06,$06,$07

>1fab	 07 04 08 09 09 0a 0a 0b  	  .BYTE $07,$04,$08,$09,$09,$0A,$0A,$0B

>1fb3	 0b 08 0c 0d 0e 0f 10 11  	  .BYTE $0B,$08,$0C,$0D,$0E,$0F,$10,$11

>1fbb	 11 12 12 10 13 14 14 15  	  .BYTE $11,$12,$12,$10,$13,$14,$14,$15

>1fc3	 15 13 00 04 01 05 02 06  	  .BYTE $15,$13,$00,$04,$01,$05,$02,$06

>1fcb	 03 07 04 08 05 09 06 0a  	  .BYTE $03,$07,$04,$08,$05,$09,$06,$0A

>1fd3	 07 0b 10 13 11 14 12 15  	  .BYTE $07,$0B,$10,$13,$11,$14,$12,$15


.1fdb					obj22

>1fdb	 0b fe 00 00 01 00 02 01  	  .BYTE $0B,$FE,$00,$00,$01,$00,$02,$01

>1fe3	 00 fe 00 03 00 00 06 00  	  .BYTE $00,$FE,$00,$03,$00,$00,$06,$00

>1feb	 fe 09 00 01 09 02 01 09  	  .BYTE $FE,$09,$00,$01,$09,$02,$01,$09

>1ff3	 fe 00 09 00 fa 12 00 03  	  .BYTE $FE,$00,$09,$00,$FA,$12,$00,$03

>1ffb	 12 05 03 12 fb 11 01 12  	  .BYTE $12,$05,$03,$12,$FB,$11,$01,$12

>2003	 20 03 13 23 45 46 47 56  	  .BYTE $20,$03,$13,$23,$45,$46,$47,$56

>200b	 67 75 89 8a 8b 9a ab b9  	  .BYTE $67,$75,$89,$8A,$8B,$9A,$AB,$B9


.2013					obj24

>2013	 0f 00 04 fc fc 04 00 00  	  .BYTE $0F,$00,$04,$FC,$FC,$04,$00,$00

>201b	 04 04 04 04 00 00 0c fc  	  .BYTE $04,$04,$04,$04,$00,$00,$0C,$FC

>2023	 fc 0c 00 00 0c 04 04 0c  	  .BYTE $FC,$0C,$00,$00,$0C,$04,$04,$0C

>202b	 00 fe 06 fe fe 06 02 02  	  .BYTE $00,$FE,$06,$FE,$FE,$06,$02,$02

>2033	 06 02 02 06 fe fe 0a fe  	  .BYTE $06,$02,$02,$06,$FE,$FE,$0A,$FE

>203b	 fe 0a 02 02 0a 02 02 0a  	  .BYTE $FE,$0A,$02,$02,$0A,$02,$02,$0A

>2043	 fe 07 17 35 06 24 8e ac  	  .BYTE $FE,$07,$17,$35,$06,$24,$8E,$AC

>204b	 9f bd                    	  .BYTE $9F,$BD


.204d					obj47

>204d	 23 fa 00 f6 02 00        		.byte $23,$FA,$00,$F6,$02,$00

>2053	 f0 02 00 10 fa 00 0a fa  	  .BYTE $F0,$02,$00,$10,$FA,$00,$0A,$FA

>205b	 0a f6 02 10 f0 02 10 10  	  .BYTE $0A,$F6,$02,$10,$F0,$02,$10,$10

>2063	 fa 0a 0a fa 04 f6 00 04  	  .BYTE $FA,$0A,$0A,$FA,$04,$F6,$00,$04

>206b	 fd 00 04 03 fa 04 0a 00  	  .BYTE $FD,$00,$04,$03,$FA,$04,$0A,$00

>2073	 0a fd 00 0a 03 fb 05 f7  	  .BYTE $0A,$FD,$00,$0A,$03,$FB,$05,$F7

>207b	 fb 09 f7 ff 09 fc ff 05  	  .BYTE $FB,$09,$F7,$FF,$09,$FC,$FF,$05

>2083	 fc ff 05 04 ff 09 04 fb  	  .BYTE $FC,$FF,$05,$04,$FF,$09,$04,$FB

>208b	 09 09 fb 05 09 00 05 fe  	  .BYTE $09,$09,$FB,$05,$09,$00,$05,$FE

>2093	 00 06 fe 00 06 ff 00 05  	  .BYTE $00,$06,$FE,$00,$06,$FF,$00,$05

>209b	 ff 00 05 01 00 06 01 00  	  .BYTE $FF,$00,$05,$01,$00,$06,$01,$00

>20a3	 06 02 00 05 02 00 07 fe  	  .BYTE $06,$02,$00,$05,$02,$00,$07,$FE

>20ab	 00 07 02 00 08 fe 00 08  	  .BYTE $00,$07,$02,$00,$08,$FE,$00,$08

>20b3	 02 00 09 fe 00 09 02 a4  	  .BYTE $02,$00,$09,$FE,$00,$09,$02,$A4

>20bb	 00 01 01 05 05 04 04 00  	  .BYTE $00,$01,$01,$05,$05,$04,$04,$00

>20c3	 03 07 07 06 06 02 02 03  	  .BYTE $03,$07,$07,$06,$06,$02,$02,$03

>20cb	 01 02 05 06 08 09 09 0a  	  .BYTE $01,$02,$05,$06,$08,$09,$09,$0A

>20d3	 0a 0b 04 0c 0c 0d 0d 07  	  .BYTE $0A,$0B,$04,$0C,$0C,$0D,$0D,$07

>20db	 09 0c 0a 0d 0e 0f 0f 10  	  .BYTE $09,$0C,$0A,$0D,$0E,$0F,$0F,$10

>20e3	 10 11 11 0e 12 13 13 14  	  .BYTE $10,$11,$11,$0E,$12,$13,$13,$14

>20eb	 14 15 15 12 16 17 17 18  	  .BYTE $14,$15,$15,$12,$16,$17,$17,$18

>20f3	 18 19 19 16 1a 1b 1b 1c  	  .BYTE $18,$19,$19,$16,$1A,$1B,$1B,$1C

>20fb	 1c 1d 1d 1a 1e 1f 20 21  	  .BYTE $1C,$1D,$1D,$1A,$1E,$1F,$20,$21

>2103	 22 23                    	  .BYTE $22,$23


.2105					obj38

>2105	 0f fe 00 fe fe 00        		.byte $0F,$FE,$00,$FE,$FE,$00

>210b	 02 02 00 02 02 00 fe fe  	  .BYTE $02,$02,$00,$02,$02,$00,$FE,$FE

>2113	 06 fe fe 06 02 02 06 02  	  .BYTE $06,$FE,$FE,$06,$02,$02,$06,$02

>211b	 02 06 fe ff 08 ff ff 08  	  .BYTE $02,$06,$FE,$FF,$08,$FF,$FF,$08

>2123	 01 01 08 01 01 08 ff ff  	  .BYTE $01,$01,$08,$01,$01,$08,$FF,$FF

>212b	 09 ff ff 09 01 01 09 01  	  .BYTE $09,$FF,$FF,$09,$01,$01,$09,$01

>2133	 01 09 ff 1b 01 12 23 30  	  .BYTE $01,$09,$FF,$1B,$01,$12,$23,$30

>213b	 45 56 67 74 89 9a ab b8  	  .BYTE $45,$56,$67,$74,$89,$9A,$AB,$B8

>2143	 cd de ef fc 04 15 26 37  	  .BYTE $CD,$DE,$EF,$FC,$04,$15,$26,$37

>214b	 48 59 6a 7b 8c 9d ae bf  	  .BYTE $48,$59,$6A,$7B,$8C,$9D,$AE,$BF


.2153					obj23

>2153	 0f 00 00 f7 fc 02 f7 fa  	  .BYTE $0F,$00,$00,$F7,$FC,$02,$F7,$FA

>215b	 06 f7 fc 0a f7 00 0c f7  	  .BYTE $06,$F7,$FC,$0A,$F7,$00,$0C,$F7

>2163	 04 0a f7 06 06 f7 04 02  	  .BYTE $04,$0A,$F7,$06,$06,$F7,$04,$02

>216b	 f7 00 00 09 fc 02 09 fa  	  .BYTE $F7,$00,$00,$09,$FC,$02,$09,$FA

>2173	 06 09 fc 0a 09 00 0c 09  	  .BYTE $06,$09,$FC,$0A,$09,$00,$0C,$09

>217b	 04 0a 09 06 06 09 04 02  	  .BYTE $04,$0A,$09,$06,$06,$09,$04,$02

>2183	 09 0f 08 19 2a 3b 4c 5d  	  .BYTE $09,$0F,$08,$19,$2A,$3B,$4C,$5D

>218b	 6e 7f 0c 48 1d 59 2e 6a  	  .BYTE $6E,$7F,$0C,$48,$1D,$59,$2E,$6A

>2193	 3f 7b                    	  .BYTE $3F,$7B


.2195					obj20

>2195	 0f 00 00 f7 fc 02        	  .byte $0F,$00,$00,$F7,$FC,$02

>219b	 f7 fa 06 f7 fc 0a f7 00  	  .BYTE $F7,$FA,$06,$F7,$FC,$0A,$F7,$00

>21a3	 0c f7 04 0a f7 06 06 f7  	  .BYTE $0C,$F7,$04,$0A,$F7,$06,$06,$F7

>21ab	 04 02 f7 00 00 09 fc 02  	  .BYTE $04,$02,$F7,$00,$00,$09,$FC,$02

>21b3	 09 fa 06 09 fc 0a 09 00  	  .BYTE $09,$FA,$06,$09,$FC,$0A,$09,$00

>21bb	 0c 09 04 0a 09 06 06 09  	  .BYTE $0C,$09,$04,$0A,$09,$06,$06,$09

>21c3	 04 02 09 1b 08 19 2a 3b  	  .BYTE $04,$02,$09,$1B,$08,$19,$2A,$3B

>21cb	 4c 5d 6e 7f 01 12 23 34  	  .BYTE $4C,$5D,$6E,$7F,$01,$12,$23,$34

>21d3	 45 56 67 70 89 9a ab bc  	  .BYTE $45,$56,$67,$70,$89,$9A,$AB,$BC

>21db	 cd de ef f8 15 37 9d bf  	  .BYTE $CD,$DE,$EF,$F8,$15,$37,$9D,$BF


.21e3					obj25

>21e3	 0f 00 00 00 00 09 00 fe  	  .BYTE $0F,$00,$00,$00,$00,$09,$00,$FE

>21eb	 08 fe fe 08 02 fe 0a fe  	  .BYTE $08,$FE,$FE,$08,$02,$FE,$0A,$FE

>21f3	 fe 0a 02 fe 08 00 fe 0a  	  .BYTE $FE,$0A,$02,$FE,$08,$00,$FE,$0A

>21fb	 00 fe 09 00 08 09 00 01  	  .BYTE $00,$FE,$09,$00,$08,$09,$00,$01

>2203	 09 fe 01 09 02 04 09 fe  	  .BYTE $09,$FE,$01,$09,$02,$04,$09,$FE

>220b	 04 09 02 07 09 fe 07 09  	  .BYTE $04,$09,$02,$07,$09,$FE,$07,$09

>2213	 02 07 01 89 23 45 67 ab  	  .BYTE $02,$07,$01,$89,$23,$45,$67,$AB

>221b	 cd ef                    	  .BYTE $CD,$EF


.221d					obj26

>221d	 0c fd 00 fe fd 00        		.byte $0C,$FD,$00,$FE,$FD,$00

>2223	 02 00 00 04 03 00 02 03  	  .BYTE $02,$00,$00,$04,$03,$00,$02,$03

>222b	 00 fe 00 00 fc fd 06 fe  	  .BYTE $00,$FE,$00,$00,$FC,$FD,$06,$FE

>2233	 fd 06 02 00 06 04 03 06  	  .BYTE $FD,$06,$02,$00,$06,$04,$03,$06

>223b	 02 03 06 fe 00 06 fc 00  	  .BYTE $02,$03,$06,$FE,$00,$06,$FC,$00

>2243	 0c 00 17 01 12 23 34 45  	  .BYTE $0C,$00,$17,$01,$12,$23,$34,$45

>224b	 50 67 78 89 9a ab b6 06  	  .BYTE $50,$67,$78,$89,$9A,$AB,$B6,$06

>2253	 17 28 39 4a 5b 6c 7c 8c  	  .BYTE $17,$28,$39,$4A,$5B,$6C,$7C,$8C

>225b	 9c ac bc                 	  .BYTE $9C,$AC,$BC


.225e					obj44

>225e	 0d ff 00 ff ff           		.byte $0D,$FF,$00,$FF,$FF

>2263	 00 01 01 00 01 01 00 ff  	  .BYTE $00,$01,$01,$00,$01,$01,$00,$FF

>226b	 fe 09 fe fe 09 02 02 09  	  .BYTE $FE,$09,$FE,$FE,$09,$02,$02,$09

>2273	 02 02 09 fe ff 0c ff ff  	  .BYTE $02,$02,$09,$FE,$FF,$0C,$FF,$FF

>227b	 0c 01 01 0c 01 01 0c ff  	  .BYTE $0C,$01,$01,$0C,$01,$01,$0C,$FF

>2283	 00 00 00 00 09 00 10 01  	  .BYTE $00,$00,$00,$00,$09,$00,$10,$01

>228b	 12 23 30 45 56 67 74 89  	  .BYTE $12,$23,$30,$45,$56,$67,$74,$89

>2293	 9a ab b8 cd 48 59 6a 7b  	  .BYTE $9A,$AB,$B8,$CD,$48,$59,$6A,$7B


.229b					obj46

>229b	 11 fb 00 fe fb 00 00 fb  	  .BYTE $11,$FB,$00,$FE,$FB,$00,$00,$FB

>22a3	 06 fe fb 06 00 05 00 fe  	  .BYTE $06,$FE,$FB,$06,$00,$05,$00,$FE

>22ab	 05 00 00 05 06 fe 05 06  	  .BYTE $05,$00,$00,$05,$06,$FE,$05,$06

>22b3	 00 fd 00 00 fd 04 00 03  	  .BYTE $00,$FD,$00,$00,$FD,$04,$00,$03

>22bb	 04 00 03 00 00 fe 01 00  	  .BYTE $04,$00,$03,$00,$00,$FE,$01,$00

>22c3	 fe 03 00 02 03 00 02 01  	  .BYTE $FE,$03,$00,$02,$03,$00,$02,$01

>22cb	 00 fe 02 00 02 02 00 92  	  .BYTE $00,$FE,$02,$00,$02,$02,$00,$92

>22d3	 00 01 00 02 02 03 03 01  	  .BYTE $00,$01,$00,$02,$02,$03,$03,$01

>22db	 04 05 04 06 06 07 07 05  	  .BYTE $04,$05,$04,$06,$06,$07,$07,$05

>22e3	 01 05 02 06 03 07 08 09  	  .BYTE $01,$05,$02,$06,$03,$07,$08,$09

>22eb	 09 0a 0a 0b 0c 0d 0d 0e  	  .BYTE $09,$0A,$0A,$0B,$0C,$0D,$0D,$0E

>22f3	 0e 0f                    	  .BYTE $0E,$0F


.22f5					obj33

>22f5	 0f 0c 10 11 07 fe        		.byte $0F,$0C,$10,$11,$07,$FE

>22fb	 00 fa fe 00 06 02 00 06  	  .BYTE $00,$FA,$FE,$00,$06,$02,$00,$06

>2303	 02 00 fa ff 03 fb ff 03  	  .BYTE $02,$00,$FA,$FF,$03,$FB,$FF,$03

>230b	 05 01 03 05 01 03 fb 0b  	  .BYTE $05,$01,$03,$05,$01,$03,$FB,$0B

>2313	 01 12 23 30 45 56 67 74  	  .BYTE $01,$12,$23,$30,$45,$56,$67,$74

>231b	 04 15 26 37              	  .BYTE $04,$15,$26,$37

>231f	 19 03 00 f6              	OBJ34 .byte $19,$03,$00,$F6

>2323	 fd 00 f6 fc 06 f6 fd 06  	  .BYTE $FD,$00,$F6,$FC,$06,$F6,$FD,$06

>232b	 f6 fe 03 f6 02 03 f6 03  	  .BYTE $F6,$FE,$03,$F6,$02,$03,$F6,$03

>2333	 00 f8 fe 00 f8 fe 03 f8  	  .BYTE $00,$F8,$FE,$00,$F8,$FE,$03,$F8

>233b	 02 03 f8 03 00 0a fd 00  	  .BYTE $02,$03,$F8,$03,$00,$0A,$FD,$00

>2343	 0a fc 06 0a fd 06 0a fe  	  .BYTE $0A,$FC,$06,$0A,$FD,$06,$0A,$FE

>234b	 03 0a 02 03 0a 03 00 08  	  .BYTE $03,$0A,$02,$03,$0A,$03,$00,$08

>2353	 fe 00 08 fe 03 08 02 03  	  .BYTE $FE,$00,$08,$FE,$03,$08,$02,$03

>235b	 08 fe 02 f8 02 02 f8 02  	  .BYTE $08,$FE,$02,$F8,$02,$02,$F8,$02

>2363	 00 f8 fe 02 08 02 02 08  	  .BYTE $00,$F8,$FE,$02,$08,$02,$02,$08

>236b	 02 00 08 a3 00 01 01 02  	  .BYTE $02,$00,$08,$A3,$00,$01,$01,$02

>2373	 02 03 03 04 04 05 05 00  	  .BYTE $02,$03,$03,$04,$04,$05,$05,$00

>237b	 06 07 07 08 08 09 09 06  	  .BYTE $06,$07,$07,$08,$08,$09,$09,$06

>2383	 0a 0b 0b 0c 0c 0d 0d 0e  	  .BYTE $0A,$0B,$0B,$0C,$0C,$0D,$0D,$0E

>238b	 0e                       	  .BYTE $0E

>238c	 0f 0f 0a                 	  .BYTE $0F,$0F,$0A ;SLO $0A0F

>238f	 10 11 11 12 12 13 13 10  	  .BYTE $10,$11,$11,$12,$12,$13,$13,$10

>2397	 14 15 15 16 17 18 18 19  	  .BYTE $14,$15,$15,$16,$17,$18,$18,$19

>239f	 01 0b 02 0c 03 0d 14 17  	  .BYTE $01,$0B,$02,$0C,$03,$0D,$14,$17

>23a7	 15 18 16 19 04 08 05 09  	  .BYTE $15,$18,$16,$19,$04,$08,$05,$09

>23af	 00 06 0e 12 0f 13 0a 10  	  .BYTE $00,$06,$0E,$12,$0F,$13,$0A,$10


.23b7					obj9

>23b7	 12 fc 16 04 04 16 04 00  	  .BYTE $12,$FC,$16,$04,$04,$16,$04,$00

>23bf	 16 fc ff 12 01 01 12 01  	  .BYTE $16,$FC,$FF,$12,$01,$01,$12,$01

>23c7	 00 12 ff fd 12 03 03 12  	  .BYTE $00,$12,$FF,$FD,$12,$03,$03,$12

>23cf	 03 00 12 fd f0 16 10 10  	  .BYTE $03,$00,$12,$FD,$F0,$16,$10,$10

>23d7	 16 10 fe 02 02 02 02 02  	  .BYTE $16,$10,$FE,$02,$02,$02,$02,$02

>23df	 00 00 fe fe 00 02 02 00  	  .BYTE $00,$00,$FE,$FE,$00,$02,$02,$00

>23e7	 02 00 02 fe 00 13 f9 00  	  .BYTE $02,$00,$02,$FE,$00,$13,$F9,$00

>23ef	 0c e6 9a 00 01 01 02 02  	  .BYTE $0C,$E6,$9A,$00,$01,$01,$02,$02

>23f7	 00 03 04 04 05 05 03 00  	  .BYTE $00,$03,$04,$04,$05,$05,$03,$00

>23ff	 03 01 04 02 05 06 07 07  	  .BYTE $03,$01,$04,$02,$05,$06,$07,$07

>2407	 08 08 06 09 06 09 0b 06  	  .BYTE $08,$08,$06,$09,$06,$09,$0B,$06

>240f	 0b 0a 07 0a 0c 07 0c 0b  	  .BYTE $0B,$0A,$07,$0A,$0C,$07,$0C,$0B

>2417	 0e 0c 0f 08 0d 0d 0e 0e  	  .BYTE $0E,$0C,$0F,$08,$0D,$0D,$0E,$0E

>241f	 0f 0f 0d 10 11 11 12 12  	  .BYTE $0F,$0F,$0D,$10,$11,$11,$12,$12

>2427	 10 4c 00 00 4b 50 35 20  	  .BYTE $10,$4C,$00,$00,$4B,$50,$35,$20


.242f					obj1

>242f	 05                       	  .BYTE $05

>2430	 f0 00 20 10 00 20 fd 02  	  .BYTE $F0,$00,$20,$10,$00,$20,$FD,$02

>2438	 20 03 02 20 00 0c 20 00  	  .BYTE $20,$03,$02,$20,$00,$0C,$20,$00

>2440	 00 e1 09 01              	  .BYTE $00,$E1,$09,$01								; f3B3A   

>2444	 13 34 42 20 05 15 25 35  			.BYTE $13,$34,$42,$20,$05,$15,$25,$35

>244c	 45                       	  .BYTE $45


.244d					obj2

>244d	 01                       		.BYTE $01

>244e	 7f 7f 7f                 		.BYTE 127,127,127

>2451	 80 80 80                 		.BYTE 255-127,255-127,255-127

>2454	 00                       		.BYTE $00

>2455	 01                       		.BYTE $01


.2456					obj3

>2456	 0f f8 04 18 08           		.BYTE $0F,$F8,$04,$18,$08

>245b	 04 18 00 04 e8 00 0c 18  	  .BYTE $04,$18,$00,$04,$E8,$00,$0C,$18

>2463	 e2 04 18 1e 04 18 fc 04  	  .BYTE $E2,$04,$18,$1E,$04,$18,$FC,$04

>246b	 00 04 04 00 00 14 18 00  	  .BYTE $00,$04,$04,$00,$00,$14,$18,$00

>2473	 0a 0c f2 04 10 f2 00 10  	  .BYTE $0A,$0C,$F2,$04,$10,$F2,$00,$10

>247b	 0e 04 10 0e 00 10 00 04  	  .BYTE $0E,$04,$10,$0E,$00,$10,$00,$04

>2483	 f0 00 00 f0 0c 20 23 21  	  .BYTE $F0,$00,$00,$F0,$0C,$20,$23,$21

>248b	 13 03 45 46 57 38 89 ab  	  .BYTE $13,$03,$45,$46,$57,$38,$89,$AB

>2493	 cd ef                    	  .BYTE $CD,$EF


.2495					obj4

>2495	 07 00 00 00 ec 07        	  .byte $07,$00,$00,$00,$EC,$07

>249b	 00 f6 07 11 0a 07 11 14  	  .BYTE $00,$F6,$07,$11,$0A,$07,$11,$14

>24a3	 07 00 0a 07 ef f6 07 ef  	  .BYTE $07,$00,$0A,$07,$EF,$F6,$07,$EF

>24ab	 00 10 00 11 01 02 03 04  	  .BYTE $00,$10,$00,$11,$01,$02,$03,$04

>24b3	 05 06 71 72 73 74 75 76  	  .BYTE $05,$06,$71,$72,$73,$74,$75,$76

>24bb	 12 23 34 45 56 61        	  .BYTE $12,$23,$34,$45,$56,$61


.24c1					obj6

>24c1	 05 f4                    		.byte $05,$F4

>24c3	 00 10 00 00 f0 0c 00 10  	  .BYTE $00,$10,$00,$00,$F0,$0C,$00,$10

>24cb	 f4 0a 10 00 0a f0 0c 0a  	  .BYTE $F4,$0A,$10,$00,$0A,$F0,$0C,$0A

>24d3	 10 08 01 12 20 34 45 53  	  .BYTE $10,$08,$01,$12,$20,$34,$45,$53

>24db	 03 14 25                 	  .BYTE $03,$14,$25


.24de					obj7

>24de	 0f f0 00 10 10           	  .byte $0F,$F0,$00,$10,$10

>24e3	 00 10 00 00 ec fc 00 04  	  .BYTE $00,$10,$00,$00,$EC,$FC,$00,$04

>24eb	 04 00 04 00 00 fc fd 04  	  .BYTE $04,$00,$04,$00,$00,$FC,$FD,$04

>24f3	 03 03 04 03 00 04 fd fe  	  .BYTE $03,$03,$04,$03,$00,$04,$FD,$FE

>24fb	 14 02 02 14 02 00 14 fe  	  .BYTE $14,$02,$02,$14,$02,$00,$14,$FE

>2503	 ff 04 01 01 04 01 00 04  	  .BYTE $FF,$04,$01,$01,$04,$01,$00,$04

>250b	 ff 00 34 00 14 f6 f7 f8  	  .BYTE $FF,$00,$34,$00,$14,$F6,$F7,$F8

>2513	 90 a1 b2 06 17 28 c3 d4  	  .BYTE $90,$A1,$B2,$06,$17,$28,$C3,$D4

>251b	 e5 34 45 53 67 78 86 cd  	  .BYTE $E5,$34,$45,$53,$67,$78,$86,$CD

>2523	 de ec                    	  .BYTE $DE,$EC


.2525					obj8

>2525	 07 f8 f8 f8 08 f8        		.byte $07,$F8,$F8,$F8,$08,$F8

>252b	 f8 08 f8 08 f8 f8 08 f8  	  .BYTE $F8,$08,$F8,$08,$F8,$F8,$08,$F8

>2533	 08 f8 08 08 f8 08 08 08  	  .BYTE $08,$F8,$08,$08,$F8,$08,$08,$08

>253b	 f8 08 08 0b 01 12 23 30  	  .BYTE $F8,$08,$08,$0B,$01,$12,$23,$30

>2543	 04 15 26 37 45 56 67 74  	  .BYTE $04,$15,$26,$37,$45,$56,$67,$74

>254b	 09 fc 07 04 04 07 04 00  	  .BYTE $09,$FC,$07,$04,$04,$07,$04,$00


.2553					obj11

>2553	 07 fc 00 0e 00 ff 07 01  	  .BYTE $07,$FC,$00,$0E,$00,$FF,$07,$01

>255b	 01 07 01 00 07 ff fe 00  	  .BYTE $01,$07,$01,$00,$07,$FF,$FE,$00

>2563	 02 02 00 02 00 00 fe 0e  	  .BYTE $02,$02,$00,$02,$00,$00,$FE,$0E

>256b	 01 12 20 03 13 23 45 56  	  .BYTE $01,$12,$20,$03,$13,$23,$45,$56

>2573	 64 78 89 97 47 58 69     	  .BYTE $64,$78,$89,$97,$47,$58,$69


.257a					obj12

>257a	 05                       	  .BYTE $05

>257b	 fb 00 ff 05 00 ff 00 0c  	  .BYTE $FB,$00,$FF,$05,$00,$FF,$00,$0C

>2583	 ff fb 00 01 05 00 01 00  	  .BYTE $FF,$FB,$00,$01,$05,$00,$01,$00

>258b	 0c 01 08 01 12 20 34 45  	  .BYTE $0C,$01,$08,$01,$12,$20,$34,$45

>2593	 53 03 14 25              	  .BYTE $53,$03,$14,$25

>2597	 07 ff 00 fc              	OBJ13 .BYTE $07,$FF,$00,$FC

>259b	 ff 00 04 ff 0c 02 ff 0c  	  .BYTE $FF,$00,$04,$FF,$0C,$02,$FF,$0C

>25a3	 fe 01 00 fc 01 00 04 01  	  .BYTE $FE,$01,$00,$FC,$01,$00,$04,$01

>25ab	 0c 02 01 0c fe 0b 01 12  	  .BYTE $0C,$02,$01,$0C,$FE,$0B,$01,$12

>25b3	 23 30 45 56 67 74 04 15  	  .BYTE $23,$30,$45,$56,$67,$74,$04,$15

>25bb	 26 37                    	  .BYTE $26,$37


.25bd					obj14

>25bd	 09 04 00 ff fc 00        	  .byte $09,$04,$00,$FF,$FC,$00

>25c3	 ff fa 08 ff 00 0c ff 06  	  .BYTE $FF,$FA,$08,$FF,$00,$0C,$FF,$06

>25cb	 08 ff 04 00 01 fc 00 01  	  .BYTE $08,$FF,$04,$00,$01,$FC,$00,$01

>25d3	 fa 08 01 00 0c 01 06 08  	  .BYTE $FA,$08,$01,$00,$0C,$01,$06,$08

>25db	 01 0e 01 12 23 34 40 56  	  .BYTE $01,$0E,$01,$12,$23,$34,$40,$56

>25e3	 67 78 89 95 05 16 27 38  	  .BYTE $67,$78,$89,$95,$05,$16,$27,$38

>25eb	 49                       	  .BYTE $49


.25ec					obj15

>25ec	 09 fd 00 ff 03 00 ff     	  .byte $09,$FD,$00,$FF,$03,$00,$FF

>25f3	 03 0a ff 00 0c ff fd 0a  	  .BYTE $03,$0A,$FF,$00,$0C,$FF,$FD,$0A

>25fb	 ff fd 00 01 03 00 01 03  	  .BYTE $FF,$FD,$00,$01,$03,$00,$01,$03

>2603	 0a 01 00 0c 01 fd 0a 01  	  .BYTE $0A,$01,$00,$0C,$01,$FD,$0A,$01

>260b	 0e 01 12 23 34 40 56 67  	  .BYTE $0E,$01,$12,$23,$34,$40,$56,$67

>2613	 78 89 95 05 16 27 38 49  	  .BYTE $78,$89,$95,$05,$16,$27,$38,$49


.261b					obj16

>261b	 07 fe 00 ff 02 00 ff 04  	  .BYTE $07,$FE,$00,$FF,$02,$00,$FF,$04

>2623	 0c ff fc 0c ff fe 00 01  	  .BYTE $0C,$FF,$FC,$0C,$FF,$FE,$00,$01

>262b	 02 00 01 04 0c 01 fc 0c  	  .BYTE $02,$00,$01,$04,$0C,$01,$FC,$0C

>2633	 01 0b 01 12 23 30 45 56  	  .BYTE $01,$0B,$01,$12,$23,$30,$45,$56

>263b	 67 74 04 15 26 37        	  .BYTE $67,$74,$04,$15,$26,$37


.2641					obj17

>2641	 0b 02                    		.byte $0B,$02

>2643	 00 ff 04 06 ff 02 0c ff  	  .BYTE $00,$FF,$04,$06,$FF,$02,$0C,$FF

>264b	 fe 0c ff fc 06 ff fe 00  	  .BYTE $FE,$0C,$FF,$FC,$06,$FF,$FE,$00

>2653	 ff 02 00 01 04 06 01 02  	  .BYTE $FF,$02,$00,$01,$04,$06,$01,$02

>265b	 0c 01 fe 0c 01 fc 06 01  	  .BYTE $0C,$01,$FE,$0C,$01,$FC,$06,$01

>2663	 fe 00 01 11 01 12 23 34  	  .BYTE $FE,$00,$01,$11,$01,$12,$23,$34

>266b	 45 50 67 78 89 9a ab b6  	  .BYTE $45,$50,$67,$78,$89,$9A,$AB,$B6

>2673	 06 17 28 39 4a 5b        	  .BYTE $06,$17,$28,$39,$4A,$5B


.2679					obj18

>2679	 0b 03                    		.byte $0B,$03

>267b	 00 ff 03 08 ff 01 0c ff  	  .BYTE $00,$FF,$03,$08,$FF,$01,$0C,$FF

>2683	 ff 0c ff fd 08 ff fd 00  	  .BYTE $FF,$0C,$FF,$FD,$08,$FF,$FD,$00

>268b	 ff 03 00 01 03 08 01 01  	  .BYTE $FF,$03,$00,$01,$03,$08,$01,$01

>2693	 0c 01 ff 0c 01 fd 08 01  	  .BYTE $0C,$01,$FF,$0C,$01,$FD,$08,$01

>269b	 fd 00 01 11 01 12 23 34  	  .BYTE $FD,$00,$01,$11,$01,$12,$23,$34

>26a3	 45 50 67 78 89 9a ab b6  	  .BYTE $45,$50,$67,$78,$89,$9A,$AB,$B6

>26ab	 06 17 28 39 4a 5b        	  .BYTE $06,$17,$28,$39,$4A,$5B

>26b1	 09 fc                    	OBJ19 .byte $09,$FC

>26b3	 07 04 04 07 04 00 07 fc  	  .BYTE $07,$04,$04,$07,$04,$00,$07,$FC

>26bb	 00 09 00 ff 07 01 01 07  	  .BYTE $00,$09,$00,$FF,$07,$01,$01,$07

>26c3	 01 00 07 ff ff 00 01 01  	  .BYTE $01,$00,$07,$FF,$FF,$00,$01,$01

>26cb	 00 01 00 00 ff 0e 01 12  	  .BYTE $00,$01,$00,$00,$FF,$0E,$01,$12

>26d3	 20 03 13 23 45 56 64 78  	  .BYTE $20,$03,$13,$23,$45,$56,$64,$78

>26db	 89 97 47 58 69           	  .BYTE $89,$97,$47,$58,$69


.26e0					obj29

>26e0	 0f f9 07                 		.byte $0F,$F9,$07

>26e3	 ff f9 09 ff 07 09 ff 07  	  .BYTE $FF,$F9,$09,$FF,$07,$09,$FF,$07

>26eb	 00 ff 05 00 ff 04 04 ff  	  .BYTE $00,$FF,$05,$00,$FF,$04,$04,$FF

>26f3	 02 04 ff 02 07 ff f9 07  	  .BYTE $02,$04,$FF,$02,$07,$FF,$F9,$07

>26fb	 01 f9 09 01 07 09 01 07  	  .BYTE $01,$F9,$09,$01,$07,$09,$01,$07

>2703	 00 01 05 00 01 04 04 01  	  .BYTE $00,$01,$05,$00,$01,$04,$04,$01

>270b	 02 04 01 02 07 01 17 01  	  .BYTE $02,$04,$01,$02,$07,$01,$17,$01

>2713	 12 23 34 45 56 67 70 89  	  .BYTE $12,$23,$34,$45,$56,$67,$70,$89

>271b	 9a ab bc cd de ef f8 08  	  .BYTE $9A,$AB,$BC,$CD,$DE,$EF,$F8,$08

>2723	 19 2a 3b 4c 5d 6e 7f     	  .BYTE $19,$2A,$3B,$4C,$5D,$6E,$7F


.272a					obj48

>272a	 0b                       		.byte $0B

>272b	 f9 00 f3 07 00 f3 07 00  	  .BYTE $F9,$00,$F3,$07,$00,$F3,$07,$00

>2733	 0d f9 00 0d f9 06 f3 07  	  .BYTE $0D,$F9,$00,$0D,$F9,$06,$F3,$07

>273b	 06 f3 07 06 0d f9 06 0d  	  .BYTE $06,$F3,$07,$06,$0D,$F9,$06,$0D

>2743	 f6 06 f0 0a 06 f0 0a 06  	  .BYTE $F6,$06,$F0,$0A,$06,$F0,$0A,$06

>274b	 10 f6 06 10 07 04 15 26  	  .BYTE $10,$F6,$06,$10,$07,$04,$15,$26

>2753	 37 89 9a ab b8           	  .BYTE $37,$89,$9A,$AB,$B8


.2758					obj49

>2758	 0b fe 00                 		.byte $0B,$FE,$00

>275b	 fe fe 00 02 02 00 02 02  	  .BYTE $FE,$FE,$00,$02,$02,$00,$02,$02

>2763	 00 fe fe 04 fe fe 04 02  	  .BYTE $00,$FE,$FE,$04,$FE,$FE,$04,$02

>276b	 02 04 02 02 04 fe 02 06  	  .BYTE $02,$04,$02,$02,$04,$FE,$02,$06

>2773	 02 02 06 fe 02 07 02 02  	  .BYTE $02,$02,$06,$FE,$02,$07,$02,$02

>277b	 07 fe 09 04 15 2a 3b 45  	  .BYTE $07,$FE,$09,$04,$15,$2A,$3B,$45

>2783	 56 67 74 89 ab           	  .BYTE $56,$67,$74,$89,$AB


.2788					obj50

>2788	 0d f6 00                 		.byte $0D,$F6,$00

>278b	 fb f6 00 05 0a 00 05 0a  	  .BYTE $FB,$F6,$00,$05,$0A,$00,$05,$0A

>2793	 00 fb f6 02 fb f6 02 05  	  .BYTE $00,$FB,$F6,$02,$FB,$F6,$02,$05

>279b	 0a 02 05 0a 02 fb f6 04  	  .BYTE $0A,$02,$05,$0A,$02,$FB,$F6,$04

>27a3	 fb f6 04 05 0a 04 05 0a  	  .BYTE $FB,$F6,$04,$05,$0A,$04,$05,$0A

>27ab	 04 fb 0a 08 05 0a 08 fb  	  .BYTE $04,$FB,$0A,$08,$05,$0A,$08,$FB

>27b3	 0c 08 19 2c 3d 45 56 67  	  .BYTE $0C,$08,$19,$2C,$3D,$45,$56,$67

>27bb	 74 89 9a ab b8 cd        	  .BYTE $74,$89,$9A,$AB,$B8,$CD


.27c1					obj52

>27c1	 11 00                    		.byte $11,$00

>27c3	 08 fd 00 04 03 00 04 fd  	  .BYTE $08,$FD,$00,$04,$03,$00,$04,$FD

>27cb	 00 08 03 00 07 ff 00 07  	  .BYTE $00,$08,$03,$00,$07,$FF,$00,$07

>27d3	 01 00 09 02 00 0a 02 00  	  .BYTE $01,$00,$09,$02,$00,$0A,$02,$00

>27db	 0b 01 00 0b ff 00 0a fe  	  .BYTE $0B,$01,$00,$0B,$FF,$00,$0A,$FE

>27e3	 00 09 fe 00 0a ff 00 09  	  .BYTE $00,$09,$FE,$00,$0A,$FF,$00,$09

>27eb	 ff 00 0a 01 00 09 01 00  	  .BYTE $FF,$00,$0A,$01,$00,$09,$01,$00

>27f3	 08 ff 00 08 01 8c 00 01  	  .BYTE $08,$FF,$00,$08,$01,$8C,$00,$01

>27fb	 02 03 04 05 05 06 06 07  	  .BYTE $02,$03,$04,$05,$05,$06,$06,$07

>2803	 07 08 08 09 09 0a 0a 0b  	  .BYTE $07,$08,$08,$09,$09,$0A,$0A,$0B

>280b	 0b 04 0c 0d 0e 0f 10 11  	  .BYTE $0B,$04,$0C,$0D,$0E,$0F,$10,$11


.2813					obj54

>2813	 0f e0 00 e0 e0 00 20 20  	  .BYTE $0F,$E0,$00,$E0,$E0,$00,$20,$20

>281b	 00 20 20 00 e0 e0 06 e0  	  .BYTE $00,$20,$20,$00,$E0,$E0,$06,$E0

>2823	 e0 06 20 20 06 20 20 06  	  .BYTE $E0,$06,$20,$20,$06,$20,$20,$06

>282b	 e0 e0 0c e0 e0 0c 20 20  	  .BYTE $E0,$E0,$0C,$E0,$E0,$0C,$20,$20

>2833	 0c 20 20 0c e0 e0 12 e0  	  .BYTE $0C,$20,$20,$0C,$E0,$E0,$12,$E0

>283b	 e0 12 20 20 12 20 20 12  	  .BYTE $E0,$12,$20,$20,$12,$20,$20,$12

>2843	 e0 10 01 12 23 30 45 67  	  .BYTE $E0,$10,$01,$12,$23,$30,$45,$67

>284b	 74 89 ab b8 cd ef fc 0c  	  .BYTE $74,$89,$AB,$B8,$CD,$EF,$FC,$0C

>2853	 1d 2e 3f                 	  .BYTE $1D,$2E,$3F


.2856					obj55

>2856	 15                       		.BYTE $15

>2857	 80 e0 80                 		.BYTE $80,$E0,$80

>285a	 7f e0 80                 		.BYTE $7F,$E0,$80

>285d	 7f e0 7f                 		.BYTE $7F,$E0,$7F

>2860	 80 e0 7f                 		.BYTE $80,$E0,$7F

>2863	 80 20 80                 		.BYTE $80,$20,$80

>2866	 7f 20 80                 		.BYTE $7F,$20,$80

>2869	 7f 20 7f                 		.BYTE $7F,$20,$7F

>286c	 80 20 7f                 		.BYTE $80,$20,$7F

>286f	 80 e0 fd                 		.BYTE $80,$E0,$FD

>2872	 80 e0 03                 		.BYTE $80,$E0,$03

>2875	 80 ec 03                 		.BYTE $80,$EC,$03

>2878	 80 ec fd                 		.BYTE $80,$EC,$FD

>287b	 b0 20 80                 		.BYTE $B0,$20,$80

>287e	 b0 20 70                 		.BYTE $B0,$20,$70

>2881	 40 20 70                 		.BYTE $40,$20,$70

>2884	 40 20 00                 		.BYTE $40,$20,$00

>2887	 00 20 00                 		.BYTE $00,$20,$00

>288a	 00 20 50                 		.BYTE $00,$20,$50

>288d	 d0 20 50                 		.BYTE $D0,$20,$50

>2890	 d0 20 80                 		.BYTE $D0,$20,$80

>2893	 00 20 40                 		.BYTE $00,$20,$40

>2896	 40 20 40                 		.BYTE $40,$20,$40

>2899	 96                       		.BYTE $96

>289a	 00 01 01 02 02 03 03 00  		.BYTE $00,$01, $01,$02, $02,$03, $03,$00

>28a2	 00 04 01 05 02 06 03 07  		.BYTE $00,$04, $01,$05, $02,$06, $03,$07

>28aa	 04 05 05 06 06 07 07 04  		.BYTE $04,$05, $05,$06, $06,$07, $07,$04

>28b2	 09 0a 0a 0b 0b 08 0c 0d  		.BYTE $09,$0A, $0A,$0B, $0B,$08, $0C,$0D

>28ba	 0d 0e 0e 0f 0f 10 10 11  		.BYTE $0D,$0E, $0E,$0F, $0F,$10, $10,$11

>28c2	 11 12 12 13 14 15 00     		.BYTE $11,$12, $12,$13, $14,$15, $00


.28c9					object_shape_ptr_lo

>28c9	 2f 2f 56 56 95 e1 c1 de  	 .BYTE <OBJ1,<OBJ1,<OBJ3,<OBJ3,<OBJ4,<OBJ5,<OBJ6,<OBJ7

>28d1	 25 4d b7 2f 59 2f 25 95  	 .BYTE <OBJ8,<OBJ2,<OBJ9,<OBJ1,<OBJ10,<OBJ1,<OBJ8,<OBJ4

>28d9	 53 7a 97 bd ec 1b 41 79  	 .BYTE <OBJ11,<OBJ12,<OBJ13,<OBJ14,<OBJ15,<OBJ16,<OBJ17,<OBJ18

>28e1	 b1 95 35 db 53 13 e3 1d  	 .BYTE <OBJ19,<OBJ20,<OBJ21,<OBJ22,<OBJ23,<OBJ24,<OBJ25,<OBJ26

>28e9	 28 ec e0 e9 a1 58 f5 1f  	 .BYTE <OBJ27,<OBJ28,<OBJ29,<OBJ30,<OBJ31,<OBJ32,<OBJ33,<OBJ34

>28f1	 0f 95 03 05 74 b7 47 16  	 .BYTE <OBJ35,<OBJ36,<OBJ37,<OBJ38,<OBJ39,<OBJ40,<OBJ41,<OBJ42

>28f9	 89 5e ed 9b 4d 2a 58 88  	 .BYTE <OBJ43,<OBJ44,<OBJ45,<OBJ46,<OBJ47,<OBJ48,<OBJ49,<OBJ50

>2901	 d4 c1 8f 8f c1 13 13 56  	 .BYTE <OBJ51,<OBJ52,<OBJ53,<OBJ53,<OBJ52,<OBJ54,<OBJ54,<OBJ55


.2909					object_shape_ptr_hi

>2909	 24 24 24 24 24 1a 24 24  	 .BYTE >OBJ1,>OBJ1,>OBJ3,>OBJ3,>OBJ4,>OBJ5,>OBJ6,>OBJ7

>2911	 25 24 23 24 1f 24 25 24  	 .BYTE >OBJ8,>OBJ2,>OBJ9,>OBJ1,>OBJ10,>OBJ1,>OBJ8,>OBJ4

>2919	 25 25 25 25 25 26 26 26  	 .BYTE >OBJ11,>OBJ12,>OBJ13,>OBJ14,>OBJ15,>OBJ16,>OBJ17,>OBJ18

>2921	 26 21 1f 1f 21 20 21 22  	 .BYTE >OBJ19,>OBJ20,>OBJ21,>OBJ22,>OBJ23,>OBJ24,>OBJ25,>OBJ26

>2929	 1b 1b 26 1d 1d 1b 22 23  	 .BYTE >OBJ27,>OBJ28,>OBJ29,>OBJ30,>OBJ31,>OBJ32,>OBJ33,>OBJ34

>2931	 1e 1c 1d 21 1e 1e 1e 1c  	 .BYTE >OBJ35,>OBJ36,>OBJ37,>OBJ38,>OBJ39,>OBJ40,>OBJ41,>OBJ42

>2939	 1b 22 1e 22 20 27 27 27  	 .BYTE >OBJ43,>OBJ44,>OBJ45,>OBJ46,>OBJ47,>OBJ48,>OBJ49,>OBJ50

>2941	 1e 27 1a 1a 27 28 28 28  	 .BYTE >OBJ51,>OBJ52,>OBJ53,>OBJ53,>OBJ52,>OBJ54,>OBJ54,>OBJ55


.2a00					sin_lsb

>2a00	 92 2e f7 60 c4 14 47 79  			.BYTE $92,$2E,$F7,$60,$C4,$14,$47,$79

>2a08	 ab dd 08 21 3a 53 6c 85  	        .BYTE $AB,$DD,$08,$21,$3A,$53,$6C,$85

>2a10	 9e b7 d0 e9 01 0d 1a 26  	        .BYTE $9E,$B7,$D0,$E9,$01,$0D,$1A,$26

>2a18	 33 3f 4c 58 64 71 7d 89  	        .BYTE $33,$3F,$4C,$58,$64,$71,$7D,$89

>2a20	 96 a2 ae bb c7 d3 df ec  	        .BYTE $96,$A2,$AE,$BB,$C7,$D3,$DF,$EC

>2a28	 f8 02 08 0e 14 1a 20 26  	        .BYTE $F8,$02,$08,$0E,$14,$1A,$20,$26

>2a30	 2c 32 38 3e 44 4a 50 56  	        .BYTE $2C,$32,$38,$3E,$44,$4A,$50,$56

>2a38	 5c 62 68 6e 73 79 7f 85  	        .BYTE $5C,$62,$68,$6E,$73,$79,$7F,$85

>2a40	 8b 91 96 9c a2 a8 ad b3  	        .BYTE $8B,$91,$96,$9C,$A2,$A8,$AD,$B3

>2a48	 b9 be c4 ca cf d5 da e0  	        .BYTE $B9,$BE,$C4,$CA,$CF,$D5,$DA,$E0

>2a50	 e5 eb f1 f6 fb 00 03 06  	        .BYTE $E5,$EB,$F1,$F6,$FB,$00,$03,$06

>2a58	 09 0b 0e 11 13 16 19 1b  	        .BYTE $09,$0B,$0E,$11,$13,$16,$19,$1B

>2a60	 1e 20 23 26 28 2b 2d 30  	        .BYTE $1E,$20,$23,$26,$28,$2B,$2D,$30

>2a68	 32 35 37 3a 3c 3f 41 44  	        .BYTE $32,$35,$37,$3A,$3C,$3F,$41,$44

>2a70	 46 48 4b 4d 50 52 54 57  	        .BYTE $46,$48,$4B,$4D,$50,$52,$54,$57

>2a78	 59 5b 5e 60 62 64 67 69  	        .BYTE $59,$5B,$5E,$60,$62,$64,$67,$69

>2a80	 6b 6d 70 72 74 76 78 7a  	        .BYTE $6B,$6D,$70,$72,$74,$76,$78,$7A

>2a88	 7c 7f 81 83 85 87 89 8b  	        .BYTE $7C,$7F,$81,$83,$85,$87,$89,$8B

>2a90	 8d 8f 91 93 95 97 98 9a  	        .BYTE $8D,$8F,$91,$93,$95,$97,$98,$9A

>2a98	 9c 9e a0 a2 a4 a5 a7 a9  	        .BYTE $9C,$9E,$A0,$A2,$A4,$A5,$A7,$A9

>2aa0	 ab ac ae b0 b1 b3 b5 b6  	        .BYTE $AB,$AC,$AE,$B0,$B1,$B3,$B5,$B6

>2aa8	 b8 ba bb bd be c0 c1 c3  	        .BYTE $B8,$BA,$BB,$BD,$BE,$C0,$C1,$C3

>2ab0	 c4 c6 c7 c9 ca cb cd ce  	        .BYTE $C4,$C6,$C7,$C9,$CA,$CB,$CD,$CE

>2ab8	 d0 d1 d2 d3 d5 d6 d7 d8  	        .BYTE $D0,$D1,$D2,$D3,$D5,$D6,$D7,$D8

>2ac0	 da db dc dd de df e0 e2  	        .BYTE $DA,$DB,$DC,$DD,$DE,$DF,$E0,$E2

>2ac8	 e3 e4 e5 e6 e7 e8 e9 e9  	        .BYTE $E3,$E4,$E5,$E6,$E7,$E8,$E9,$E9

>2ad0	 ea eb ec ed ee ef ef f0  	        .BYTE $EA,$EB,$EC,$ED,$EE,$EF,$EF,$F0

>2ad8	 f1 f2 f3 f3 f4 f5 f5 f6  	        .BYTE $F1,$F2,$F3,$F3,$F4,$F5,$F5,$F6

>2ae0	 f6 f7 f8 f8 f9 f9 fa fa  	        .BYTE $F6,$F7,$F8,$F8,$F9,$F9,$FA,$FA

>2ae8	 fb fb fc fc fc fd fd fd  	        .BYTE $FB,$FB,$FC,$FC,$FC,$FD,$FD,$FD

>2af0	 fe fe fe fe ff ff ff ff  	        .BYTE $FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF

>2af8	 ff 00 00 00 00 00 00 00  	        .BYTE $FF,$00,$00,$00,$00,$00,$00,$00


.2b00					sin_msb

>2b00	 dc e4 e4 e8 e8 ec ec ec  			.BYTE $DC,$E4,$E4,$E8,$E8,$EC,$EC,$EC

>2b08	 ec ec f0 f0 f0 f0 f0 f0  	        .BYTE $EC,$EC,$F0,$F0,$F0,$F0,$F0,$F0

>2b10	 f0 f0 f0 f0 f4 f4 f4 f4  	        .BYTE $F0,$F0,$F0,$F0,$F4,$F4,$F4,$F4

>2b18	 f4 f4 f4 f4 f4 f4 f4 f4  	        .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4

>2b20	 f4 f4 f4 f4 f4 f4 f4 f4  	        .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4

>2b28	 f4 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F4,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2b30	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2b38	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2b40	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2b48	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2b50	 f8 f8 f8 f8 f8 fc fc fc  	        .BYTE $F8,$F8,$F8,$F8,$F8,$FC,$FC,$FC

>2b58	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2b60	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2b68	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2b70	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2b78	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2b80	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2b88	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2b90	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2b98	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2ba0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2ba8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2bb0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2bb8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2bc0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2bc8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2bd0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2bd8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2be0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2be8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2bf0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2bf8	 fc 00 00 00 00 00 00 00  	        .BYTE $FC,$00,$00,$00,$00,$00,$00,$00


.2c00					log_table

>2c00	 00 01 03 04 06 07 09 0a  			.BYTE $00,$01,$03,$04,$06,$07,$09,$0A

>2c08	 0b 0d 0e 10 11 12 14 15  	        .BYTE $0B,$0D,$0E,$10,$11,$12,$14,$15

>2c10	 16 18 19 1a 1c 1d 1e 20  	        .BYTE $16,$18,$19,$1A,$1C,$1D,$1E,$20

>2c18	 21 22 24 25 26 28 29 2a  	        .BYTE $21,$22,$24,$25,$26,$28,$29,$2A

>2c20	 2c 2d 2e 2f 31 32 33 34  	        .BYTE $2C,$2D,$2E,$2F,$31,$32,$33,$34

>2c28	 36 37 38 39 3b 3c 3d 3e  	        .BYTE $36,$37,$38,$39,$3B,$3C,$3D,$3E

>2c30	 3f 41 42 43 44 45 47 48  	        .BYTE $3F,$41,$42,$43,$44,$45,$47,$48

>2c38	 49 4a 4b 4d 4e 4f 50 51  	        .BYTE $49,$4A,$4B,$4D,$4E,$4F,$50,$51

>2c40	 52 54 55 56 57 58 59 5a  	        .BYTE $52,$54,$55,$56,$57,$58,$59,$5A

>2c48	 5c 5d 5e 5f 60 61 62 63  	        .BYTE $5C,$5D,$5E,$5F,$60,$61,$62,$63

>2c50	 64 66 67 68 69 6a 6b 6c  	        .BYTE $64,$66,$67,$68,$69,$6A,$6B,$6C

>2c58	 6d 6e 6f 70 71 72 74 75  	        .BYTE $6D,$6E,$6F,$70,$71,$72,$74,$75

>2c60	 76 77 78 79 7a 7b 7c 7d  	        .BYTE $76,$77,$78,$79,$7A,$7B,$7C,$7D

>2c68	 7e 7f 80 81 82 83 84 85  	        .BYTE $7E,$7F,$80,$81,$82,$83,$84,$85

>2c70	 86 87 88 89 8a 8b 8c 8d  	        .BYTE $86,$87,$88,$89,$8A,$8B,$8C,$8D

>2c78	 8e 8f 90 91 92 93 94 95  	        .BYTE $8E,$8F,$90,$91,$92,$93,$94,$95

>2c80	 96 97 98 99 9a 9b 9b 9c  	        .BYTE $96,$97,$98,$99,$9A,$9B,$9B,$9C

>2c88	 9d 9e 9f a0 a1 a2 a3 a4  	        .BYTE $9D,$9E,$9F,$A0,$A1,$A2,$A3,$A4

>2c90	 a5 a6 a7 a8 a9 a9 aa ab  	        .BYTE $A5,$A6,$A7,$A8,$A9,$A9,$AA,$AB

>2c98	 ac ad ae af b0 b1 b2 b2  	        .BYTE $AC,$AD,$AE,$AF,$B0,$B1,$B2,$B2

>2ca0	 b3 b4 b5 b6 b7 b8 b9 b9  	        .BYTE $B3,$B4,$B5,$B6,$B7,$B8,$B9,$B9

>2ca8	 ba bb bc bd be bf c0 c0  	        .BYTE $BA,$BB,$BC,$BD,$BE,$BF,$C0,$C0

>2cb0	 c1 c2 c3 c4 c5 c6 c6 c7  	        .BYTE $C1,$C2,$C3,$C4,$C5,$C6,$C6,$C7

>2cb8	 c8 c9 ca cb cb cc cd ce  	        .BYTE $C8,$C9,$CA,$CB,$CB,$CC,$CD,$CE

>2cc0	 cf d0 d0 d1 d2 d3 d4 d4  	        .BYTE $CF,$D0,$D0,$D1,$D2,$D3,$D4,$D4

>2cc8	 d5 d6 d7 d8 d8 d9 da db  	        .BYTE $D5,$D6,$D7,$D8,$D8,$D9,$DA,$DB

>2cd0	 dc dc dd de df e0 e0 e1  	        .BYTE $DC,$DC,$DD,$DE,$DF,$E0,$E0,$E1

>2cd8	 e2 e3 e4 e4 e5 e6 e7 e7  	        .BYTE $E2,$E3,$E4,$E4,$E5,$E6,$E7,$E7

>2ce0	 e8 e9 ea ea eb ec ed ee  	        .BYTE $E8,$E9,$EA,$EA,$EB,$EC,$ED,$EE

>2ce8	 ee ef f0 f1 f1 f2 f3 f4  	        .BYTE $EE,$EF,$F0,$F1,$F1,$F2,$F3,$F4

>2cf0	 f4 f5 f6 f7 f7 f8 f9 f9  	        .BYTE $F4,$F5,$F6,$F7,$F7,$F8,$F9,$F9

>2cf8	 fa fb fc fc fd fe ff ff  	        .BYTE $FA,$FB,$FC,$FC,$FD,$FE,$FF,$FF


.2d00					exp_table

>2d00	 00 01 01 02 03 03 04 05  			.BYTE $00,$01,$01,$02,$03,$03,$04,$05

>2d08	 06 06 07 08 08 09 0a 0b  	        .BYTE $06,$06,$07,$08,$08,$09,$0A,$0B

>2d10	 0b 0c 0d 0e 0e 0f 10 10  	        .BYTE $0B,$0C,$0D,$0E,$0E,$0F,$10,$10

>2d18	 11 12 13 13 14 15 16 16  	        .BYTE $11,$12,$13,$13,$14,$15,$16,$16

>2d20	 17 18 19 19 1a 1b 1c 1d  	        .BYTE $17,$18,$19,$19,$1A,$1B,$1C,$1D

>2d28	 1d 1e 1f 20 20 21 22 23  	        .BYTE $1D,$1E,$1F,$20,$20,$21,$22,$23

>2d30	 24 24 25 26 27 28 28 29  	        .BYTE $24,$24,$25,$26,$27,$28,$28,$29

>2d38	 2a 2b 2c 2c 2d 2e 2f 30  	        .BYTE $2A,$2B,$2C,$2C,$2D,$2E,$2F,$30

>2d40	 30 31 32 33 34 35 35 36  	        .BYTE $30,$31,$32,$33,$34,$35,$35,$36

>2d48	 37 38 39 3a 3a 3b 3c 3d  	        .BYTE $37,$38,$39,$3A,$3A,$3B,$3C,$3D

>2d50	 3e 3f 40 41 41 42 43 44  	        .BYTE $3E,$3F,$40,$41,$41,$42,$43,$44

>2d58	 45 46 47 48 48 49 4a 4b  	        .BYTE $45,$46,$47,$48,$48,$49,$4A,$4B

>2d60	 4c 4d 4e 4f 50 51 51 52  	        .BYTE $4C,$4D,$4E,$4F,$50,$51,$51,$52

>2d68	 53 54 55 56 57 58 59 5a  	        .BYTE $53,$54,$55,$56,$57,$58,$59,$5A

>2d70	 5b 5c 5d 5e 5e 5f 60 61  	        .BYTE $5B,$5C,$5D,$5E,$5E,$5F,$60,$61

>2d78	 62 63 64 65 66 67 68 69  	        .BYTE $62,$63,$64,$65,$66,$67,$68,$69

>2d80	 6a 6b 6c 6d 6e 6f 70 71  	        .BYTE $6A,$6B,$6C,$6D,$6E,$6F,$70,$71

>2d88	 72 73 74 75 76 77 78 79  	        .BYTE $72,$73,$74,$75,$76,$77,$78,$79

>2d90	 7a 7b 7c 7d 7e 7f 80 81  	        .BYTE $7A,$7B,$7C,$7D,$7E,$7F,$80,$81

>2d98	 82 83 84 85 87 88 89 8a  	        .BYTE $82,$83,$84,$85,$87,$88,$89,$8A

>2da0	 8b 8c 8d 8e 8f 90 91 92  	        .BYTE $8B,$8C,$8D,$8E,$8F,$90,$91,$92

>2da8	 93 95 96 97 98 99 9a 9b  	        .BYTE $93,$95,$96,$97,$98,$99,$9A,$9B

>2db0	 9c 9d 9f a0 a1 a2 a3 a4  	        .BYTE $9C,$9D,$9F,$A0,$A1,$A2,$A3,$A4

>2db8	 a5 a6 a8 a9 aa ab ac ad  	        .BYTE $A5,$A6,$A8,$A9,$AA,$AB,$AC,$AD

>2dc0	 af b0 b1 b2 b3 b4 b6 b7  	        .BYTE $AF,$B0,$B1,$B2,$B3,$B4,$B6,$B7

>2dc8	 b8 b9 ba bc bd be bf c0  	        .BYTE $B8,$B9,$BA,$BC,$BD,$BE,$BF,$C0

>2dd0	 c2 c3 c4 c5 c6 c8 c9 ca  	        .BYTE $C2,$C3,$C4,$C5,$C6,$C8,$C9,$CA

>2dd8	 cb cd ce cf d0 d2 d3 d4  	        .BYTE $CB,$CD,$CE,$CF,$D0,$D2,$D3,$D4

>2de0	 d6 d7 d8 d9 db dc dd de  	        .BYTE $D6,$D7,$D8,$D9,$DB,$DC,$DD,$DE

>2de8	 e0 e1 e2 e4 e5 e6 e8 e9  	        .BYTE $E0,$E1,$E2,$E4,$E5,$E6,$E8,$E9

>2df0	 ea ec ed ee f0 f1 f2 f4  	        .BYTE $EA,$EC,$ED,$EE,$F0,$F1,$F2,$F4

>2df8	 f5 f6 f8 f9 fa fc fd ff  	        .BYTE $F5,$F6,$F8,$F9,$FA,$FC,$FD,$FF


.2e00					ver_pos_scn0_hi

>2e00	 40 40 40 40 40 40 40 40  			.BYTE (>SCREEN0)+$00,(>SCREEN0)+$00,(>SCREEN0)+$00,(>SCREEN0)+$00,(>SCREEN0)+$00,(>SCREEN0)+$00,(>SCREEN0)+$00,(>SCREEN0)+$00

>2e08	 41 41 41 41 41 41 41 41  	        .BYTE (>SCREEN0)+$01,(>SCREEN0)+$01,(>SCREEN0)+$01,(>SCREEN0)+$01,(>SCREEN0)+$01,(>SCREEN0)+$01,(>SCREEN0)+$01,(>SCREEN0)+$01

>2e10	 42 42 42 42 42 42 42 42  	        .BYTE (>SCREEN0)+$02,(>SCREEN0)+$02,(>SCREEN0)+$02,(>SCREEN0)+$02,(>SCREEN0)+$02,(>SCREEN0)+$02,(>SCREEN0)+$02,(>SCREEN0)+$02

>2e18	 43 43 43 43 43 43 43 43  	        .BYTE (>SCREEN0)+$03,(>SCREEN0)+$03,(>SCREEN0)+$03,(>SCREEN0)+$03,(>SCREEN0)+$03,(>SCREEN0)+$03,(>SCREEN0)+$03,(>SCREEN0)+$03

>2e20	 45 45 45 45 45 45 45 45  	        .BYTE (>SCREEN0)+$05,(>SCREEN0)+$05,(>SCREEN0)+$05,(>SCREEN0)+$05,(>SCREEN0)+$05,(>SCREEN0)+$05,(>SCREEN0)+$05,(>SCREEN0)+$05

>2e28	 46 46 46 46 46 46 46 46  	        .BYTE (>SCREEN0)+$06,(>SCREEN0)+$06,(>SCREEN0)+$06,(>SCREEN0)+$06,(>SCREEN0)+$06,(>SCREEN0)+$06,(>SCREEN0)+$06,(>SCREEN0)+$06

>2e30	 47 47 47 47 47 47 47 47  	        .BYTE (>SCREEN0)+$07,(>SCREEN0)+$07,(>SCREEN0)+$07,(>SCREEN0)+$07,(>SCREEN0)+$07,(>SCREEN0)+$07,(>SCREEN0)+$07,(>SCREEN0)+$07

>2e38	 48 48 48 48 48 48 48 48  	        .BYTE (>SCREEN0)+$08,(>SCREEN0)+$08,(>SCREEN0)+$08,(>SCREEN0)+$08,(>SCREEN0)+$08,(>SCREEN0)+$08,(>SCREEN0)+$08,(>SCREEN0)+$08

>2e40	 4a 4a 4a 4a 4a 4a 4a 4a  	        .BYTE (>SCREEN0)+$0A,(>SCREEN0)+$0A,(>SCREEN0)+$0A,(>SCREEN0)+$0A,(>SCREEN0)+$0A,(>SCREEN0)+$0A,(>SCREEN0)+$0A,(>SCREEN0)+$0A

>2e48	 4b 4b 4b 4b 4b 4b 4b 4b  	        .BYTE (>SCREEN0)+$0B,(>SCREEN0)+$0B,(>SCREEN0)+$0B,(>SCREEN0)+$0B,(>SCREEN0)+$0B,(>SCREEN0)+$0B,(>SCREEN0)+$0B,(>SCREEN0)+$0B

>2e50	 4c 4c 4c 4c 4c 4c 4c 4c  	        .BYTE (>SCREEN0)+$0C,(>SCREEN0)+$0C,(>SCREEN0)+$0C,(>SCREEN0)+$0C,(>SCREEN0)+$0C,(>SCREEN0)+$0C,(>SCREEN0)+$0C,(>SCREEN0)+$0C

>2e58	 4d 4d 4d 4d 4d 4d 4d 4d  	        .BYTE (>SCREEN0)+$0D,(>SCREEN0)+$0D,(>SCREEN0)+$0D,(>SCREEN0)+$0D,(>SCREEN0)+$0D,(>SCREEN0)+$0D,(>SCREEN0)+$0D,(>SCREEN0)+$0D

>2e60	 4f 4f 4f 4f 4f 4f 4f 4f  	        .BYTE (>SCREEN0)+$0F,(>SCREEN0)+$0F,(>SCREEN0)+$0F,(>SCREEN0)+$0F,(>SCREEN0)+$0F,(>SCREEN0)+$0F,(>SCREEN0)+$0F,(>SCREEN0)+$0F

>2e68	 50 50 50 50 50 50 50 50  	        .BYTE (>SCREEN0)+$10,(>SCREEN0)+$10,(>SCREEN0)+$10,(>SCREEN0)+$10,(>SCREEN0)+$10,(>SCREEN0)+$10,(>SCREEN0)+$10,(>SCREEN0)+$10

>2e70	 51 51 51 51 51 51 51 51  	        .BYTE (>SCREEN0)+$11,(>SCREEN0)+$11,(>SCREEN0)+$11,(>SCREEN0)+$11,(>SCREEN0)+$11,(>SCREEN0)+$11,(>SCREEN0)+$11,(>SCREEN0)+$11

>2e78	 52 52 52 52 52 52 52 52  	        .BYTE (>SCREEN0)+$12,(>SCREEN0)+$12,(>SCREEN0)+$12,(>SCREEN0)+$12,(>SCREEN0)+$12,(>SCREEN0)+$12,(>SCREEN0)+$12,(>SCREEN0)+$12


.2e80					and_pixel_pos

>2e80	 3f cf f3 fc 3f cf f3 fc  			.BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2e88	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2e90	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2e98	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2ea0	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2ea8	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2eb0	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2eb8	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2ec0	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2ec8	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2ed0	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2ed8	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2ee0	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2ee8	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2ef0	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2ef8	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC


.2f00					ver_pos_scn1_hi

>2f00	 60 60 60 60 60 60 60 60  			.BYTE (>SCREEN1)+$00,(>SCREEN1)+$00,(>SCREEN1)+$00,(>SCREEN1)+$00,(>SCREEN1)+$00,(>SCREEN1)+$00,(>SCREEN1)+$00,(>SCREEN1)+$00

>2f08	 61 61 61 61 61 61 61 61  	        .BYTE (>SCREEN1)+$01,(>SCREEN1)+$01,(>SCREEN1)+$01,(>SCREEN1)+$01,(>SCREEN1)+$01,(>SCREEN1)+$01,(>SCREEN1)+$01,(>SCREEN1)+$01

>2f10	 62 62 62 62 62 62 62 62  	        .BYTE (>SCREEN1)+$02,(>SCREEN1)+$02,(>SCREEN1)+$02,(>SCREEN1)+$02,(>SCREEN1)+$02,(>SCREEN1)+$02,(>SCREEN1)+$02,(>SCREEN1)+$02

>2f18	 63 63 63 63 63 63 63 63  	        .BYTE (>SCREEN1)+$03,(>SCREEN1)+$03,(>SCREEN1)+$03,(>SCREEN1)+$03,(>SCREEN1)+$03,(>SCREEN1)+$03,(>SCREEN1)+$03,(>SCREEN1)+$03

>2f20	 65 65 65 65 65 65 65 65  	        .BYTE (>SCREEN1)+$05,(>SCREEN1)+$05,(>SCREEN1)+$05,(>SCREEN1)+$05,(>SCREEN1)+$05,(>SCREEN1)+$05,(>SCREEN1)+$05,(>SCREEN1)+$05

>2f28	 66 66 66 66 66 66 66 66  	        .BYTE (>SCREEN1)+$06,(>SCREEN1)+$06,(>SCREEN1)+$06,(>SCREEN1)+$06,(>SCREEN1)+$06,(>SCREEN1)+$06,(>SCREEN1)+$06,(>SCREEN1)+$06

>2f30	 67 67 67 67 67 67 67 67  	        .BYTE (>SCREEN1)+$07,(>SCREEN1)+$07,(>SCREEN1)+$07,(>SCREEN1)+$07,(>SCREEN1)+$07,(>SCREEN1)+$07,(>SCREEN1)+$07,(>SCREEN1)+$07

>2f38	 68 68 68 68 68 68 68 68  	        .BYTE (>SCREEN1)+$08,(>SCREEN1)+$08,(>SCREEN1)+$08,(>SCREEN1)+$08,(>SCREEN1)+$08,(>SCREEN1)+$08,(>SCREEN1)+$08,(>SCREEN1)+$08

>2f40	 6a 6a 6a 6a 6a 6a 6a 6a  	        .BYTE (>SCREEN1)+$0A,(>SCREEN1)+$0A,(>SCREEN1)+$0A,(>SCREEN1)+$0A,(>SCREEN1)+$0A,(>SCREEN1)+$0A,(>SCREEN1)+$0A,(>SCREEN1)+$0A

>2f48	 6b 6b 6b 6b 6b 6b 6b 6b  	        .BYTE (>SCREEN1)+$0B,(>SCREEN1)+$0B,(>SCREEN1)+$0B,(>SCREEN1)+$0B,(>SCREEN1)+$0B,(>SCREEN1)+$0B,(>SCREEN1)+$0B,(>SCREEN1)+$0B

>2f50	 6c 6c 6c 6c 6c 6c 6c 6c  	        .BYTE (>SCREEN1)+$0C,(>SCREEN1)+$0C,(>SCREEN1)+$0C,(>SCREEN1)+$0C,(>SCREEN1)+$0C,(>SCREEN1)+$0C,(>SCREEN1)+$0C,(>SCREEN1)+$0C

>2f58	 6d 6d 6d 6d 6d 6d 6d 6d  	        .BYTE (>SCREEN1)+$0D,(>SCREEN1)+$0D,(>SCREEN1)+$0D,(>SCREEN1)+$0D,(>SCREEN1)+$0D,(>SCREEN1)+$0D,(>SCREEN1)+$0D,(>SCREEN1)+$0D

>2f60	 6f 6f 6f 6f 6f 6f 6f 6f  	        .BYTE (>SCREEN1)+$0F,(>SCREEN1)+$0F,(>SCREEN1)+$0F,(>SCREEN1)+$0F,(>SCREEN1)+$0F,(>SCREEN1)+$0F,(>SCREEN1)+$0F,(>SCREEN1)+$0F

>2f68	 70 70 70 70 70 70 70 70  	        .BYTE (>SCREEN1)+$10,(>SCREEN1)+$10,(>SCREEN1)+$10,(>SCREEN1)+$10,(>SCREEN1)+$10,(>SCREEN1)+$10,(>SCREEN1)+$10,(>SCREEN1)+$10

>2f70	 71 71 71 71 71 71 71 71  	        .BYTE (>SCREEN1)+$11,(>SCREEN1)+$11,(>SCREEN1)+$11,(>SCREEN1)+$11,(>SCREEN1)+$11,(>SCREEN1)+$11,(>SCREEN1)+$11,(>SCREEN1)+$11

>2f78	 72 72 72 72 72 72 72 72  	        .BYTE (>SCREEN1)+$12,(>SCREEN1)+$12,(>SCREEN1)+$12,(>SCREEN1)+$12,(>SCREEN1)+$12,(>SCREEN1)+$12,(>SCREEN1)+$12,(>SCREEN1)+$12


.2f80					ora_pixel_pos

>2f80	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2f88	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2f90	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2f98	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2fa0	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2fa8	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2fb0	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2fb8	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2fc0	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2fc8	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2fd0	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2fd8	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2fe0	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2fe8	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2ff0	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2ff8	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03


.3000					ver_pos_lo

>3000	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>3008	 40 41 42 43 44 45 46 47  	        .BYTE $40,$41,$42,$43,$44,$45,$46,$47

>3010	 80 81 82 83 84 85 86 87  	        .BYTE $80,$81,$82,$83,$84,$85,$86,$87

>3018	 c0 c1 c2 c3 c4 c5 c6 c7  	        .BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>3020	 00 01 02 03 04 05 06 07  	        .BYTE $00,$01,$02,$03,$04,$05,$06,$07

>3028	 40 41 42 43 44 45 46 47  	        .BYTE $40,$41,$42,$43,$44,$45,$46,$47

>3030	 80 81 82 83 84 85 86 87  	        .BYTE $80,$81,$82,$83,$84,$85,$86,$87

>3038	 c0 c1 c2 c3 c4 c5 c6 c7  			.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>3040	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>3048	 40 41 42 43 44 45 46 47  			.BYTE $40,$41,$42,$43,$44,$45,$46,$47

>3050	 80 81 82 83 84 85 86 87  			.BYTE $80,$81,$82,$83,$84,$85,$86,$87

>3058	 c0 c1 c2 c3 c4 c5 c6 c7  			.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>3060	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>3068	 40 41 42 43 44 45 46 47  			.BYTE $40,$41,$42,$43,$44,$45,$46,$47

>3070	 80 81 82 83 84 85 86 87  			.BYTE $80,$81,$82,$83,$84,$85,$86,$87

>3078	 c0 c1 c2 c3 c4 c5 c6 c7  			.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>3080	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07


.3088					hor_scr_pos

>3088	 00 00 00 00 08 08 08 08  			.BYTE $00,$00,$00,$00,$08,$08,$08,$08

>3090	 10 10 10 10 18 18 18 18  	        .BYTE $10,$10,$10,$10,$18,$18,$18,$18

>3098	 20 20 20 20 28 28 28 28  	        .BYTE $20,$20,$20,$20,$28,$28,$28,$28

>30a0	 30 30 30 30 38 38 38 38  	        .BYTE $30,$30,$30,$30,$38,$38,$38,$38

>30a8	 40 40 40 40 48 48 48 48  	        .BYTE $40,$40,$40,$40,$48,$48,$48,$48

>30b0	 50 50 50 50 58 58 58 58  	        .BYTE $50,$50,$50,$50,$58,$58,$58,$58

>30b8	 60 60 60 60 68 68 68 68  	        .BYTE $60,$60,$60,$60,$68,$68,$68,$68

>30c0	 70 70 70 70 78 78 78 78  	        .BYTE $70,$70,$70,$70,$78,$78,$78,$78

>30c8	 80 80 80 80 88 88 88 88  	        .BYTE $80,$80,$80,$80,$88,$88,$88,$88

>30d0	 90 90 90 90 98 98 98 98  	        .BYTE $90,$90,$90,$90,$98,$98,$98,$98

>30d8	 a0 a0 a0 a0 a8 a8 a8 a8  	        .BYTE $A0,$A0,$A0,$A0,$A8,$A8,$A8,$A8

>30e0	 b0 b0 b0 b0 b8 b8 b8 b8  	        .BYTE $B0,$B0,$B0,$B0,$B8,$B8,$B8,$B8

>30e8	 c0 c0 c0 c0 c8 c8 c8 c8  	        .BYTE $C0,$C0,$C0,$C0,$C8,$C8,$C8,$C8

>30f0	 d0 d0 d0 d0 d8 d8 d8 d8  	        .BYTE $D0,$D0,$D0,$D0,$D8,$D8,$D8,$D8

>30f8	 e0 e0 e0 e0 e8 e8 e8 e8  	        .BYTE $E0,$E0,$E0,$E0,$E8,$E8,$E8,$E8

>3100	 f0 f0 f0 f0 f8 f8 f8 f8  	        .BYTE $F0,$F0,$F0,$F0,$F8,$F8,$F8,$F8

>3108	 cc f5 1e 47 70 99 c2 eb  	LINE_DRAW_PTR_LO   .BYTE <LINE_DRAW_0,<LINE_DRAW_1,<LINE_DRAW_2,<LINE_DRAW_3,<LINE_DRAW_4,<LINE_DRAW_5,<LINE_DRAW_6,<LINE_DRAW_7 

>3110	 12 12 13 13 13 13 13 13  	LINE_DRAW_PTR_HI   .BYTE >LINE_DRAW_0,>LINE_DRAW_1,>LINE_DRAW_2,>LINE_DRAW_3,>LINE_DRAW_4,>LINE_DRAW_5,>LINE_DRAW_6,>LINE_DRAW_7 

>3118	 00 07 03 04 01 06 02 05  	LINE_DRAW_CONV_PTR .BYTE $00,$07,$03,$04,$01,$06,$02,$05

>3120	 7f 7f 00 00 00 00 7f 7f  	PERS_HOR_EDGE   .BYTE CLIP_RIGHT,CLIP_RIGHT,$00,$00,$00,$00,CLIP_RIGHT,CLIP_RIGHT	; right or left edge of screen todo?

>3128	 7f 7f 7f 7f 00 00 00 00  	PERS_VER_EDGE   .BYTE CLIP_BOTTOM,CLIP_BOTTOM,CLIP_BOTTOM,CLIP_BOTTOM,$00,$00,$00,$00	; bottom or top of screen todo?

>3130	 40 38 08 00 40 38 28 30  	fBBE8   .BYTE $40,$38,$08,$00,$40,$38,$28,$30

>3138	 40 18 08 10 40 18 28 20  			.BYTE $40,$18,$08,$10,$40,$18,$28,$20

>3140	 00 00 03 00 00 00 02 02  	fBBF8   .BYTE $00,$00,$03,$00,$00,$00,$02,$02

>3148	 00 00 00 06 04 00 00 04  			.BYTE $00,$00,$00,$06,$04,$00,$00,$04

>3150	 0c 00 00 00 08 08 00 00  			.BYTE $0C,$00,$00,$00,$08,$08,$00,$00

>3158	 00 09 00 00 00 01 01 00  			.BYTE $00,$09,$00,$00,$00,$01,$01,$00	

>3160	 01 00 00 00 01 01 00 00  	fBC18   .BYTE $01,$00,$00,$00,$01,$01,$00,$00

>3168	 00 01 00 00 00 01 01 00  			.BYTE $00,$01,$00,$00,$00,$01,$01,$00

>3170	 00 00 01 00 00 00 01 01  			.BYTE $00,$00,$01,$00,$00,$00,$01,$01

>3178	 00 00 00 01 01 00 00 01  			.BYTE $00,$00,$00,$01,$01,$00,$00,$01

=4000					SCREEN0 = $4000

=5c00					SCREEN_COLOUR =  $5C00

=6000					SCREEN1 = $6000


;******  end of code
