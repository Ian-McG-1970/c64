*= $1000 

; assemble with c64 studio

BANK_HI_LO = 2
BANK_HI_HI = 3
BANK_LO_LO = 4
BANK_LO_HI = 5
SCR_LO = 6
SCR_HI = 7
SCR = SCR_LO
BANK = 8
LINE_FRAC = 9
LINE_INC = 10
LINE_VER = 11
LINE_END = 12
H_ST = 13
H_EN = 15
V_ST = 14
V_EN = 16
INCP = LINE_INC
PNT = LINE_VER
LIMIT = LINE_END
DIVIDEND = 17
DIVISOR = 19
RESULT = 20
X_PNT_LO = 21
X_PNT_HI = 22
Y_PNT_LO = 23
Y_PNT_HI = 24
Z_PNT_LO = 25
Z_PNT_HI = 26
X_OFF_LO = 27
X_OFF_HI = 28
Y_OFF_LO = 29
Y_OFF_HI = 30
Z_OFF_LO = 31
Z_OFF_HI = 32
CC = 33
PNT_CNT = 34

X_PNT = X_PNT_LO
Y_PNT = Y_PNT_LO
Z_PNT = Z_PNT_LO
X_OFF = X_OFF_LO
Y_OFF = Y_OFF_LO
Z_OFF = Z_OFF_LO
LINE_CNT = 35

MAX_PNT = 128
       
RXL = 512
RXH = RXL+MAX_PNT
RYL = RXH+MAX_PNT
RYH = RYL+MAX_PNT
RZL = RYH+MAX_PNT
RZH = RZL+MAX_PNT
PXL = RZH+MAX_PNT
PXH = PXL+MAX_PNT
PYL = PXH+MAX_PNT
PYH = PYL+MAX_PNT
PCC = PYH+MAX_PNT

SCNX = 256/2
SCNY = 172/2

SEI        ; disable maskable IRQs

 LDA #$7F
 STA $DC0D  ; disable timer interrupts which can be generated by the two CIA chips
 STA $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

 LDA $DC0D  ; by reading this two registers we negate any pending CIA irqs.
 LDA $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

 LDA #$01   ; this is how to tell the VICII to generate a raster interrupt
 STA $D01A

 LDA #$F0   ; this is how to tell at which rasterline we want the irq to be triggered
 STA $D012

 LDA #$1B   ; as there are more than 256 rasterlines, the topmost bit of $d011 serves as
 STA $D011  ; the 9th bit for the rasterline we want our irq to be triggered. here we simply set up a character screen, leaving the topmost bit 0.

 LDA #$35   ; we turn off the BASIC and KERNAL rom here
 STA $01    ; the cpu now sees RAM everywhere except at $d000-$e000, where still the registers of SID/VICII/etc are visible

 ldA #<BM_IRQ  ; this is how we set up
 STA $FFFE     ; the address of our interrupt code
 LDA #>BM_IRQ
 STA $FFFF
  
 LDA #<NMI_NOP ; lsb
 STA $FFFA ; Create a nop, irq handler for NMI that gets called whenever RESTORE is pressed or similar.
 LDA #>NMI_NOP ; msb
 STA $FFFB ; We're putting our irq handler directly in the vector that usually points to the kernal's NMI handler since we have kernal banked out.

 LDA #$00  ; Force an NMI by setting up a timer. This will cause an NMI, that won't be acked. Any subsequent NMI's from RESTORE will be essentially disabled.
 STA $DD0E       ; Stop timer A
 STA $DD04       ; Set timer A to 0, NMI will occure immediately after start
 STA $DD0E

 LDA #$81
 STA $DD0D       ; Set timer A as source for NMI

 LDA #$01
 STA $DD0E       ; Start timer A -> NMI

 LDA #$02
 STA $DD00 ; bank
    
 LDA #$00
 STA $D021

; LDA #$01 ; colour 11 
; LDX #<$D800
; LDY #>$D800
; STX SCR+0
; STY SCR+1
; LDX #>1000 
; LDY #<1000
; JSR MEM_CLR

 LDA #$E6 ; colour 01 (0000????) and colour 10 (????0000) - bank 1
 LDX #<($4000+$1c00)
 LDY #>($4000+$1c00)
 STX SCR+0
 STY SCR+1
 LDX #>1000 
 LDY #<1000
 JSR MEM_CLR

 LDA #$E6 ; colour 01 (0000????) and colour 10 (????0000) - bank 2
 LDX #<($6000+$1c00)
 LDY #>($6000+$1c00)
 STX SCR+0
 STY SCR+1
 LDX #>1000 
 LDY #<1000
 JSR MEM_CLR
 
 LDA #0
 STA DIVIDEND

CLI ; enable maskable interrupts again


MLOOP:
; JSR V_WAIT
 JSR SWAP_BANK ;swap bank
 JSR SETUP_LINE_PLOT_POINTERS
 JSR DISPLAY_LINES

JMP MLOOP ; we better don't RTS, the ROMS are now switched off, there's no way back to the system

; = 40

;!ZONE V_WAIT
;V_WAIT  LDA #0
;.LOOP    CMP VWAIT
;         BEQ .LOOP
;        STA VWAIT  
;        RTS

SETUP_LINE_PLOT_POINTERS:
 LDX BANK_HI_LO
 LDY BANK_HI_HI
 STX PLOT_BANK_HI+1
 STY PLOT_BANK_HI+2
 STX DRAW_BANK_HI_1+1
 STY DRAW_BANK_HI_1+2
 STX DRAW_BANK_HI_2+1
 STY DRAW_BANK_HI_2+2
 STX DRAW_BANK_HI_3+1
 STY DRAW_BANK_HI_3+2
 STX DRAW_BANK_HI_4+1
 STY DRAW_BANK_HI_4+2
 
 LDX BANK_LO_LO
 LDY BANK_LO_HI
 STX PLOT_BANK_LO+1
 STY PLOT_BANK_LO+2
 STX DRAW_BANK_LO_1+1
 STY DRAW_BANK_LO_1+2
 STX DRAW_BANK_LO_2+1
 STY DRAW_BANK_LO_2+2
 STX DRAW_BANK_LO_3+1
 STY DRAW_BANK_LO_3+2
 STX DRAW_BANK_LO_4+1
 STY DRAW_BANK_LO_4+2
RTS

SWAP_BANK:
 LDA BANK
 CMP #$70
 BEQ BANK_0
  LDA #$70
  STA BANK
  LDX #<SCR_TAB_BANK_2_HI
  LDY #>SCR_TAB_BANK_2_HI
  STX BANK_HI_LO
  STY BANK_HI_HI
  LDX #<SCR_TAB_BANK_2_LO
  LDY #>SCR_TAB_BANK_2_LO
  STX BANK_LO_LO
  STY BANK_LO_HI
  JSR SCREEN_CLEAR_BANK_01
RTS

BANK_0: 
 LDA #$78
 STA BANK
 LDX #<SCR_TAB_BANK_1_HI
 LDY #>SCR_TAB_BANK_1_HI
 STX BANK_HI_LO
 STY BANK_HI_HI
 LDX #<SCR_TAB_BANK_1_LO
 LDY #>SCR_TAB_BANK_1_LO
 STX BANK_LO_LO
 STY BANK_LO_HI
 JSR SCREEN_CLEAR_BANK_00
RTS

PX1: !BYTE 30
PY1: !BYTE 20
IX1: !BYTE 1
IY1: !BYTE -1
PX2: !BYTE 77
PY2: !BYTE 123
IX2: !BYTE -1
IY2: !BYTE 1

MOVEPNT:
 STA LIMIT
 STX PNT
 STY INCP
 CLC 
 LDA PNT
 ADC INCP
 STA PNT
; CMP #00
 BEQ FLIPPNT
 CMP LIMIT
 BEQ FLIPPNT
 LDX PNT
 LDY INCP
 RTS
FLIPPNT:
 SEC 
 LDA #0
 SBC INCP
 STA INCP
 LDX PNT
 LDY INCP
 RTS 

DISPLAY_LINES:
 LDX PX1
 LDY IX1
 LDA #255
 JSR MOVEPNT
 STX PX1 
 STY IX1

 LDX PY1
 LDY IY1
 LDA #171
 JSR MOVEPNT
 STX PY1 
 STY IY1

 LDX PX2
 LDY IX2
 LDA #255
 JSR MOVEPNT
 STX PX2 
 STY IX2

 LDX PY2
 LDY IY2
 LDA #171
 JSR MOVEPNT
 STX PY2 
 STY IY2
 
 LDA PX1
 STA H_ST
 LDA PY1 
 STA V_ST
 LDA PX2
 STA H_EN
 LDA PY2
 STA V_EN
 JSR LINE
 
 LDX PX1
 LDY PY1
 JSR PLOT
 LDX PX2
 LDY PY2
 JSR PLOT

RTS

!ZONE LINE

LINE:
 LDA H_ST
 CMP H_EN
 BCC .LINE_NOSWAP
  LDA H_EN
  LDY H_ST
  STA H_ST
  STY H_EN
  LDX V_EN
  LDY V_ST
  STX V_ST
  STY V_EN

.LINE_NOSWAP:
 LDA V_EN
 CMP V_ST
 BCC .LINE_BLTR

.LINE_TLBR:
 SEC 
 LDA H_EN
 SBC H_ST
 STA SCR
 SEC
 LDA V_EN
 SBC V_ST
 CMP SCR ; Accumulator less than location SCR ?
 BCC .LINE_TLBR_XY ; yes
.LINE_TLBR_YX: ; no
  JMP CALC_INC_FRAC_HOR_INC_WHOLE_VER
.LINE_TLBR_XY: ; yes
 JMP CALC_INC_FRAC_VER_INC_WHOLE_HOR
 
.LINE_BLTR:
 SEC 
 LDA H_EN
 SBC H_ST
 STA SCR
 SEC
 LDA V_ST
 SBC V_EN
 CMP SCR ; Accumulator less than location SCR ?
 BCC .LINE_BLTR_XY ; yes
.LINE_BLTR_YX: ; no
  JMP CALC_INC_FRAC_HOR_DEC_WHOLE_VER
.LINE_BLTR_XY: ; yes
 JMP CALC_DEC_FRAC_VER_INC_WHOLE_HOR

CALC_INC_FRAC_HOR_INC_WHOLE_VER:
 SEC
 LDA H_EN ; calc x diff
 SBC H_ST
 STA DIVIDEND+1
 SEC
 LDA V_EN
 STA LINE_END 
 SBC V_ST
 STA DIVISOR
 JSR DIVIDE_1608
 LDA RESULT
 STA LINE_INC
 LDX H_ST
 LDY V_ST

LINE_INC_FRAC_HOR_INC_WHOLE_VER:  STY   LINE_VER
DRAW_BANK_LO_1:                   LDA   SCR_TAB_BANK_1_LO,Y
                                  STA   SCR_LO 
DRAW_BANK_HI_1:                   LDA   SCR_TAB_BANK_1_HI,Y
                                  STA   SCR_HI
                                  LDY   SCR_TAB3,X
                                  LDA   (SCR),Y
                                  ORA   SCR_OR_TAB,X
                                  STA   (SCR),Y 
                                  LDA   LINE_FRAC
                                  ADC   LINE_INC
                                  STA   LINE_FRAC
                                  BCC   LINE_IXIY_CONT
                                    INX
LINE_IXIY_CONT:                   LDY   LINE_VER
                                  INY
                                  CPY   LINE_END
                                  BNE   LINE_INC_FRAC_HOR_INC_WHOLE_VER
                                  RTS

CALC_INC_FRAC_VER_INC_WHOLE_HOR:
 SEC
 LDA V_EN ; calc x diff
 SBC V_ST
 STA DIVIDEND+1
 SEC
 LDA H_EN
 STA LINE_END 
 SBC H_ST
 STA DIVISOR
 JSR DIVIDE_1608
 LDA RESULT
 STA LINE_INC
 LDX H_ST
 LDY V_ST
 JMP LINE_INC_FRAC_VER_INC_WHOLE_HOR
                                  
LINE_IYIX_LOOP:                   LDA   LINE_FRAC
                                  ADC   LINE_INC
                                  STA   LINE_FRAC
                                  BCC   LINE_IYIX_CONT
                                    LDY   LINE_VER
                                    INY
LINE_INC_FRAC_VER_INC_WHOLE_HOR:    STY   LINE_VER
DRAW_BANK_LO_2:                     LDA   SCR_TAB_BANK_1_LO,Y
                                    STA   SCR_LO 
DRAW_BANK_HI_2:                     LDA   SCR_TAB_BANK_1_HI,Y 
                                    STA   SCR_HI 
LINE_IYIX_CONT:                   LDY   SCR_TAB3,X
                                  LDA   (SCR),Y
                                  ORA   SCR_OR_TAB,X
                                  STA   (SCR),Y 
                                  INX
                                  CPX   LINE_END
                                  BNE   LINE_IYIX_LOOP
                                  RTS 

CALC_INC_FRAC_HOR_DEC_WHOLE_VER:
 LDA V_EN
 STA LINE_END 
 SEC
 LDA H_EN
 SBC H_ST
 STA DIVIDEND+1
 SEC
 LDA V_ST
 SBC V_EN
 STA DIVISOR
 JSR DIVIDE_1608
 LDA RESULT
 STA LINE_INC
 LDX H_ST
 LDY V_ST
 
LINE_INC_FRAC_HOR_DEC_WHOLE_VER:  STY   LINE_VER
DRAW_BANK_LO_3:                   LDA   SCR_TAB_BANK_1_LO,Y
                                  STA   SCR_LO 
DRAW_BANK_HI_3:                   LDA   SCR_TAB_BANK_1_HI,Y
                                  STA   SCR_HI  
                                  LDY   SCR_TAB3,X
                                  LDA   (SCR),Y
                                  ORA   SCR_OR_TAB,X
                                  STA   (SCR),Y   
                                  LDA   LINE_FRAC
                                  ADC   LINE_INC
                                  STA   LINE_FRAC
                                  BCC   LINE_DXDY_CONT
                                    INX
LINE_DXDY_CONT:                   LDY   LINE_VER
                                  DEY
                                  CPY   LINE_END
                                  BNE   LINE_INC_FRAC_HOR_DEC_WHOLE_VER
                                  RTS
 
CALC_DEC_FRAC_VER_INC_WHOLE_HOR:
 SEC
 LDA V_ST ; calc x diff
 SBC V_EN
 STA DIVIDEND+1
 SEC
 LDA H_EN
 STA LINE_END 
 SBC H_ST
 STA DIVISOR
 JSR DIVIDE_1608
 LDA RESULT
 STA LINE_INC
 LDX H_ST
 LDY V_ST
 JMP LINE_DEC_FRAC_VER_INC_WHOLE_HOR
 
LINE_DYDX_LOOP:                   LDA   LINE_FRAC
                                  ADC   LINE_INC
                                  STA   LINE_FRAC
                                  BCC   LINE_DYDX_CONT
                                    LDY   LINE_VER
                                    DEY
LINE_DEC_FRAC_VER_INC_WHOLE_HOR:    STY   LINE_VER
DRAW_BANK_LO_4:                     LDA   SCR_TAB_BANK_1_LO,Y
                                    STA   SCR_LO 
DRAW_BANK_HI_4:                     LDA   SCR_TAB_BANK_1_HI,Y 
                                    STA   SCR_HI 
LINE_DYDX_CONT:                   LDY SCR_TAB3,X
                                  LDA (SCR),Y
                                  ORA SCR_OR_TAB,X
                                  STA (SCR),Y 
                                  INX
                                  CPX LINE_END
                                  BNE LINE_DYDX_LOOP
                                  RTS
                                  
PLOT:
PLOT_BANK_LO:     LDA   SCR_TAB_BANK_1_LO,Y
                  STA   SCR_LO 
PLOT_BANK_HI:     LDA   SCR_TAB_BANK_1_HI,Y 
                  STA   SCR_HI 
                  LDY   SCR_TAB3,X
                  LDA   (SCR),Y
                  ORA   SCR_OR_TAB,X
                  STA   (SCR),Y 
                  RTS

!ZONE DRAW_OBJ
DRAW_OBJ:
; get object number,y
; get point adr hi,y
; get point adr lo,y
; get point count,y
; get line adr hi,y
; get line adr lo,y
; get line count,y
 
;        STX PNT_CNT
;        STY LINE_CNT
        
        
.POINT_LOOP
        LDY PNT_CNT
.XPL:   LDA $ABCD,Y
        STA X_PNT_LO
.YPL:   LDA $ABCD,Y
        STA Y_PNT_LO
.ZPL:   LDA $ABCD,Y
        STA Z_PNT_LO
XPH:    LDA $ABCD,Y
        STA X_PNT_HI
.YPH:   LDA $ABCD,Y
        STA Y_PNT_HI
.ZPH:   LDA $ABCD,Y
        STA Z_PNT_HI

; ROTATE POINT
        LDY PNT_CNT

        CLC
        LDA X_PNT_LO
        ADC X_OFF_LO
        STA RXL,Y
        STA X_PNT_LO
        LDA X_PNT_HI
        ADC X_OFF_HI
        STA RXH,Y
        STA X_PNT_HI
        
        CLC
        LDA Y_PNT_LO
        ADC Y_OFF_LO
        STA RYL,Y
        STA Y_PNT_LO
        LDA Y_PNT_HI
        ADC Y_OFF_HI
        STA RYH,Y
        STA Y_PNT_HI

        CLC
        LDA Z_PNT_LO
        ADC Z_OFF_LO
        STA RZL,Y
        STA Z_PNT_LO
        LDA Z_PNT_HI
        ADC Z_OFF_HI
        STA RZH,Y
        STA Z_PNT_HI

; PERSPECTIVE POINT

        LDY PNT_CNT

        STA PCC,Y
        STA CC
        
        CLC
        LDA X_PNT_LO
        ADC #SCNX
        STA PXL,Y
        STA X_PNT_LO
        LDA X_PNT_HI
        ADC #0
        STA PXH,Y
        STA X_PNT_HI

        CLC
        LDA Y_PNT_LO
        ADC #SCNY
        STA PYL,Y
        STA Y_PNT_LO
        LDA Y_PNT_HI
        ADC #0
        STA PYH,Y
        STA Y_PNT_HI

      DEC PNT_CNT
      BMI .POINT_EXIT
      JMP .POINT_LOOP

.POINT_EXIT
RTS




; 16-bit addition and subtraction simple example by FMan/Tropyx

;  num1lo = $62
;  num1hi = $63
;  num2lo = $64
;  num2hi = $65
;  resultlo = $66
;  resulthi = $67
;
; adds numbers 1 and 2, writes result to separate location

; add clc       ; clear carry
;  lda num1lo
;  adc num2lo
;  sta reslo     ; store sum of LSBs
;  lda num1hi
;  adc num2hi      ; add the MSBs using carry from
;  sta reshi     ; the previous calculation
;  rts

; subtracts number 2 from number 1 and writes result out

;  sub sec       ; set carry for borrow purpose
;  lda num1lo
;  sbc num2lo      ; perform subtraction on the LSBs
;  sta reslo
;  lda num1hi      ; do the same for the MSBs, with carry
;  sbc num2hi      ; set according to the previous result
;  sta reshi
;  rts
















BM_IRQ:
  dec $d020
 PHA
 TXA 
 PHA
 TYA 
 PHA 
 INC $D019    ;VIC Interrupt Request Register (IRR)

 LDA BANK
 STA $D018    ;VIC Memory Control Register

; INC VWAIT
 
 LDA #$3B ; bitmap mode? - finding
 STA $D011    ;VIC Control Register 1

 LDA #%00001000 ; 0-2=SCRL 3=40/38 4=MCM 5-7=UNUSED
 STA $D016    ;VIC Control Register 2

 LDA #<TM_IRQ  ; raster interrupt setup - finding
 STA $fffe    ;IRQ
 LDA #>TM_IRQ  ; raster interrupt setup - finding
 STA $ffff    ;IRQ
  
 LDA #$E0     ; change screen to text at pos ba - finding
 STA $D012    ;Raster Position
 PLA 
 TAY
 PLA 
 TAX
 PLA
  inc $d020
NMI_NOP:
RTI ; This is the irq handler for the NMI. Just returns without acknowledge. This prevents subsequent NMI's from interfering.

 
TM_IRQ: 
  inc $d020
 PHA
 TXA 
 PHA
 TYA 
 PHA 
 INC $D019    ;VIC Interrupt Request Register (IRR)

 LDA #$7E
 STA $D018    ;VIC Memory Control Register

 LDA #$1B ; text mode? - finding 
 STA $D011    ;VIC Control Register 1

 LDA #$08
 STA $D016    ;VIC Control Register 2

 LDA #<BM_IRQ  ; raster interrupt setup - finding
 STA $FFFE    ;IRQ
 LDA #>BM_IRQ  ; raster interrupt setup - finding
 STA $FFFF    ;IRQ

 LDA #$FF     ; change screen to bitmap at pos 00 - finding
 STA $D012    ;Raster Position
 PLA 
 TAY
 PLA 
 TAX
 PLA  
  dec $d020
RTI
                                    
!ZONE MEM_CLR
MEM_CLR:    STY   BANK
            CPX   #0
            BEQ   .REMAINDER
            LDY   #0
.MAIN_LOOP:   STA  (SCR),Y
              DEY 
              BNE .MAIN_LOOP
             INC  SCR+1
             DEX
             BNE  .MAIN_LOOP
.REMAINDER: LDY   BANK
            CPY   #0
            BEQ   .EXIT
.REM_LOOP:   STA  (SCR),y
             DEY 
             BNE  .REM_LOOP
.EXIT       RTS

!MACRO DIV {
        ASL DIVIDEND        ; Shift numerator low byte left 1 bit.                #5 asl #2
        ROL DIVIDEND+1      ; shift numerator high byte left 1 bit adding carry.  #5 
        LDA DIVIDEND+1      ; Load accumulator high byte.                         #3
        BCC .LABEL          ; Test carry produced by ROL                          #2
          SBC DIVISOR       ; if set subtract denominator and                     #3
          STA DIVIDEND+1    ; store in numerator high byte.                       #3
          SEC               ; Set carry prior to shifting into result             #2
          BCS .SHIFT        ; Jump to Shift.                                      #2
.LABEL  SEC                 ; Set carry prior to subtraction.                     #2
        SBC DIVISOR         ; Subtract denominator                                #3
        BCC .SHIFT          ; and test carry.                                     #2
          STA DIVIDEND+1    ; Store in numerator high byte.                       #3
.SHIFT  ROL RESULT          ; Shift either 0 or 1 into result.                    #5
}

!ZONE DIVIDE_1608
DIVIDE_1608
 LDA #0
 STA RESULT
 +DIV
 +DIV
 +DIV
 +DIV
 +DIV
 +DIV
 +DIV
 +DIV
 RTS  


!MACRO CLR_SCN B0 ,L0 {
  STA B0+(L0*320)+0,Y
  STA B0+(L0*320)+1,Y
  STA B0+(L0*320)+2,Y
  STA B0+(L0*320)+3,Y
  STA B0+(L0*320)+4,Y
  STA B0+(L0*320)+5,Y
  STA B0+(L0*320)+6,Y
  STA B0+(L0*320)+7,Y
}

!ZONE SCREEN_CLEAR_BANK_00:
SCREEN_CLEAR_BANK_00:
 LDA #0
 LDX #32
.LOOP:
  LDY CLEAR_TAB-1,X
 +CLR_SCN $4000, 0
 +CLR_SCN $4000, 1
 +CLR_SCN $4000, 2
 +CLR_SCN $4000, 3
 +CLR_SCN $4000, 4
 +CLR_SCN $4000, 5
 +CLR_SCN $4000, 6
 +CLR_SCN $4000, 7
 +CLR_SCN $4000, 8
 +CLR_SCN $4000, 9
 +CLR_SCN $4000, 10
 +CLR_SCN $4000, 11
 +CLR_SCN $4000, 12
 +CLR_SCN $4000, 13
 +CLR_SCN $4000, 14
 +CLR_SCN $4000, 15
 +CLR_SCN $4000, 16
 +CLR_SCN $4000, 17
 +CLR_SCN $4000, 18
 +CLR_SCN $4000, 19
 +CLR_SCN $4000, 20
 +CLR_SCN $4000, 21
  DEX
  BEQ .EXIT
  JMP .LOOP
.EXIT
RTS

!ZONE SCREEN_CLEAR_BANK_01:
SCREEN_CLEAR_BANK_01:
 LDA #0
 LDX #32
.LOOP:
  LDY CLEAR_TAB-1,X
 +CLR_SCN $6000, 0
 +CLR_SCN $6000, 1
 +CLR_SCN $6000, 2
 +CLR_SCN $6000, 3
 +CLR_SCN $6000, 4
 +CLR_SCN $6000, 5
 +CLR_SCN $6000, 6
 +CLR_SCN $6000, 7
 +CLR_SCN $6000, 8
 +CLR_SCN $6000, 9
 +CLR_SCN $6000, 10
 +CLR_SCN $6000, 11
 +CLR_SCN $6000, 12
 +CLR_SCN $6000, 13
 +CLR_SCN $6000, 14
 +CLR_SCN $6000, 15
 +CLR_SCN $6000, 16
 +CLR_SCN $6000, 17
 +CLR_SCN $6000, 18
 +CLR_SCN $6000, 19
 +CLR_SCN $6000, 20
 +CLR_SCN $6000, 21
  DEX
  BEQ .EXIT
  JMP .LOOP
.EXIT
RTS
  
SCR_TAB3:
!FILL 8,$00
!FILL 8,$08
!FILL 8,$10
!FILL 8,$18
!FILL 8,$20
!FILL 8,$28
!FILL 8,$30
!FILL 8,$38
!FILL 8,$40
!FILL 8,$48
!FILL 8,$50
!FILL 8,$58
!FILL 8,$60
!FILL 8,$68
!FILL 8,$70
!FILL 8,$78
!FILL 8,$80
!FILL 8,$88
!FILL 8,$90
!FILL 8,$98
!FILL 8,$A0
!FILL 8,$A8
!FILL 8,$B0
!FILL 8,$B8
!FILL 8,$C0
!FILL 8,$C8
!FILL 8,$D0
!FILL 8,$D8
!FILL 8,$E0
!FILL 8,$E8
!FILL 8,$F0
!FILL 8,$F8

SCR_OR_TAB:
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01

SCR_TAB_BANK_1_HI:
!BYTE >($4000+(00*320)+0),>($4000+(00*320)+1),>($4000+(00*320)+2),>($4000+(00*320)+3),>($4000+(00*320)+4),>($4000+(00*320)+5),>($4000+(00*320)+6),>($4000+(00*320)+7)
!BYTE >($4000+(01*320)+0),>($4000+(01*320)+1),>($4000+(01*320)+2),>($4000+(01*320)+3),>($4000+(01*320)+4),>($4000+(01*320)+5),>($4000+(01*320)+6),>($4000+(01*320)+7)
!BYTE >($4000+(02*320)+0),>($4000+(02*320)+1),>($4000+(02*320)+2),>($4000+(02*320)+3),>($4000+(02*320)+4),>($4000+(02*320)+5),>($4000+(02*320)+6),>($4000+(02*320)+7)
!BYTE >($4000+(03*320)+0),>($4000+(03*320)+1),>($4000+(03*320)+2),>($4000+(03*320)+3),>($4000+(03*320)+4),>($4000+(03*320)+5),>($4000+(03*320)+6),>($4000+(03*320)+7)
!BYTE >($4000+(04*320)+0),>($4000+(04*320)+1),>($4000+(04*320)+2),>($4000+(04*320)+3),>($4000+(04*320)+4),>($4000+(04*320)+5),>($4000+(04*320)+6),>($4000+(04*320)+7)
!BYTE >($4000+(05*320)+0),>($4000+(05*320)+1),>($4000+(05*320)+2),>($4000+(05*320)+3),>($4000+(05*320)+4),>($4000+(05*320)+5),>($4000+(05*320)+6),>($4000+(05*320)+7)
!BYTE >($4000+(06*320)+0),>($4000+(06*320)+1),>($4000+(06*320)+2),>($4000+(06*320)+3),>($4000+(06*320)+4),>($4000+(06*320)+5),>($4000+(06*320)+6),>($4000+(06*320)+7)
!BYTE >($4000+(07*320)+0),>($4000+(07*320)+1),>($4000+(07*320)+2),>($4000+(07*320)+3),>($4000+(07*320)+4),>($4000+(07*320)+5),>($4000+(07*320)+6),>($4000+(07*320)+7)
!BYTE >($4000+(08*320)+0),>($4000+(08*320)+1),>($4000+(08*320)+2),>($4000+(08*320)+3),>($4000+(08*320)+4),>($4000+(08*320)+5),>($4000+(08*320)+6),>($4000+(08*320)+7)
!BYTE >($4000+(09*320)+0),>($4000+(09*320)+1),>($4000+(09*320)+2),>($4000+(09*320)+3),>($4000+(09*320)+4),>($4000+(09*320)+5),>($4000+(09*320)+6),>($4000+(09*320)+7)
!BYTE >($4000+(10*320)+0),>($4000+(10*320)+1),>($4000+(10*320)+2),>($4000+(10*320)+3),>($4000+(10*320)+4),>($4000+(10*320)+5),>($4000+(10*320)+6),>($4000+(10*320)+7)
!BYTE >($4000+(11*320)+0),>($4000+(11*320)+1),>($4000+(11*320)+2),>($4000+(11*320)+3),>($4000+(11*320)+4),>($4000+(11*320)+5),>($4000+(11*320)+6),>($4000+(11*320)+7)
!BYTE >($4000+(12*320)+0),>($4000+(12*320)+1),>($4000+(12*320)+2),>($4000+(12*320)+3),>($4000+(12*320)+4),>($4000+(12*320)+5),>($4000+(12*320)+6),>($4000+(12*320)+7)
!BYTE >($4000+(13*320)+0),>($4000+(13*320)+1),>($4000+(13*320)+2),>($4000+(13*320)+3),>($4000+(13*320)+4),>($4000+(13*320)+5),>($4000+(13*320)+6),>($4000+(13*320)+7)
!BYTE >($4000+(14*320)+0),>($4000+(14*320)+1),>($4000+(14*320)+2),>($4000+(14*320)+3),>($4000+(14*320)+4),>($4000+(14*320)+5),>($4000+(14*320)+6),>($4000+(14*320)+7)
!BYTE >($4000+(15*320)+0),>($4000+(15*320)+1),>($4000+(15*320)+2),>($4000+(15*320)+3),>($4000+(15*320)+4),>($4000+(15*320)+5),>($4000+(15*320)+6),>($4000+(15*320)+7)
!BYTE >($4000+(16*320)+0),>($4000+(16*320)+1),>($4000+(16*320)+2),>($4000+(16*320)+3),>($4000+(16*320)+4),>($4000+(16*320)+5),>($4000+(16*320)+6),>($4000+(16*320)+7)
!BYTE >($4000+(17*320)+0),>($4000+(17*320)+1),>($4000+(17*320)+2),>($4000+(17*320)+3),>($4000+(17*320)+4),>($4000+(17*320)+5),>($4000+(17*320)+6),>($4000+(17*320)+7)
!BYTE >($4000+(18*320)+0),>($4000+(18*320)+1),>($4000+(18*320)+2),>($4000+(18*320)+3),>($4000+(18*320)+4),>($4000+(18*320)+5),>($4000+(18*320)+6),>($4000+(18*320)+7)
!BYTE >($4000+(19*320)+0),>($4000+(19*320)+1),>($4000+(19*320)+2),>($4000+(19*320)+3),>($4000+(19*320)+4),>($4000+(19*320)+5),>($4000+(19*320)+6),>($4000+(19*320)+7)
!BYTE >($4000+(20*320)+0),>($4000+(20*320)+1),>($4000+(20*320)+2),>($4000+(20*320)+3),>($4000+(20*320)+4),>($4000+(20*320)+5),>($4000+(20*320)+6),>($4000+(20*320)+7)
!BYTE >($4000+(21*320)+0),>($4000+(21*320)+1),>($4000+(21*320)+2),>($4000+(21*320)+3),>($4000+(21*320)+4),>($4000+(21*320)+5),>($4000+(21*320)+6),>($4000+(21*320)+7)
!BYTE >($4000+(22*320)+0),>($4000+(22*320)+1),>($4000+(22*320)+2),>($4000+(22*320)+3),>($4000+(22*320)+4),>($4000+(22*320)+5),>($4000+(22*320)+6),>($4000+(22*320)+7)
!BYTE >($4000+(23*320)+0),>($4000+(23*320)+1),>($4000+(23*320)+2),>($4000+(23*320)+3),>($4000+(23*320)+4),>($4000+(23*320)+5),>($4000+(23*320)+6),>($4000+(23*320)+7)
!BYTE >($4000+(24*320)+0),>($4000+(24*320)+1),>($4000+(24*320)+2),>($4000+(24*320)+3),>($4000+(24*320)+4),>($4000+(24*320)+5),>($4000+(24*320)+6),>($4000+(24*320)+7)
!BYTE >($4000+(25*320)+0),>($4000+(25*320)+1),>($4000+(25*320)+2),>($4000+(25*320)+3),>($4000+(25*320)+4),>($4000+(25*320)+5),>($4000+(25*320)+6),>($4000+(25*320)+7)

SCR_TAB_BANK_1_LO:
!BYTE <($4000+(00*320)+0),<($4000+(00*320)+1),<($4000+(00*320)+2),<($4000+(00*320)+3),<($4000+(00*320)+4),<($4000+(00*320)+5),<($4000+(00*320)+6),<($4000+(00*320)+7)
!BYTE <($4000+(01*320)+0),<($4000+(01*320)+1),<($4000+(01*320)+2),<($4000+(01*320)+3),<($4000+(01*320)+4),<($4000+(01*320)+5),<($4000+(01*320)+6),<($4000+(01*320)+7)
!BYTE <($4000+(02*320)+0),<($4000+(02*320)+1),<($4000+(02*320)+2),<($4000+(02*320)+3),<($4000+(02*320)+4),<($4000+(02*320)+5),<($4000+(02*320)+6),<($4000+(02*320)+7)
!BYTE <($4000+(03*320)+0),<($4000+(03*320)+1),<($4000+(03*320)+2),<($4000+(03*320)+3),<($4000+(03*320)+4),<($4000+(03*320)+5),<($4000+(03*320)+6),<($4000+(03*320)+7)
!BYTE <($4000+(04*320)+0),<($4000+(04*320)+1),<($4000+(04*320)+2),<($4000+(04*320)+3),<($4000+(04*320)+4),<($4000+(04*320)+5),<($4000+(04*320)+6),<($4000+(04*320)+7)
!BYTE <($4000+(05*320)+0),<($4000+(05*320)+1),<($4000+(05*320)+2),<($4000+(05*320)+3),<($4000+(05*320)+4),<($4000+(05*320)+5),<($4000+(05*320)+6),<($4000+(05*320)+7)
!BYTE <($4000+(06*320)+0),<($4000+(06*320)+1),<($4000+(06*320)+2),<($4000+(06*320)+3),<($4000+(06*320)+4),<($4000+(06*320)+5),<($4000+(06*320)+6),<($4000+(06*320)+7)
!BYTE <($4000+(07*320)+0),<($4000+(07*320)+1),<($4000+(07*320)+2),<($4000+(07*320)+3),<($4000+(07*320)+4),<($4000+(07*320)+5),<($4000+(07*320)+6),<($4000+(07*320)+7)
!BYTE <($4000+(08*320)+0),<($4000+(08*320)+1),<($4000+(08*320)+2),<($4000+(08*320)+3),<($4000+(08*320)+4),<($4000+(08*320)+5),<($4000+(08*320)+6),<($4000+(08*320)+7)
!BYTE <($4000+(09*320)+0),<($4000+(09*320)+1),<($4000+(09*320)+2),<($4000+(09*320)+3),<($4000+(09*320)+4),<($4000+(09*320)+5),<($4000+(09*320)+6),<($4000+(09*320)+7)
!BYTE <($4000+(10*320)+0),<($4000+(10*320)+1),<($4000+(10*320)+2),<($4000+(10*320)+3),<($4000+(10*320)+4),<($4000+(10*320)+5),<($4000+(10*320)+6),<($4000+(10*320)+7)
!BYTE <($4000+(11*320)+0),<($4000+(11*320)+1),<($4000+(11*320)+2),<($4000+(11*320)+3),<($4000+(11*320)+4),<($4000+(11*320)+5),<($4000+(11*320)+6),<($4000+(11*320)+7)
!BYTE <($4000+(12*320)+0),<($4000+(12*320)+1),<($4000+(12*320)+2),<($4000+(12*320)+3),<($4000+(12*320)+4),<($4000+(12*320)+5),<($4000+(12*320)+6),<($4000+(12*320)+7)
!BYTE <($4000+(13*320)+0),<($4000+(13*320)+1),<($4000+(13*320)+2),<($4000+(13*320)+3),<($4000+(13*320)+4),<($4000+(13*320)+5),<($4000+(13*320)+6),<($4000+(13*320)+7)
!BYTE <($4000+(14*320)+0),<($4000+(14*320)+1),<($4000+(14*320)+2),<($4000+(14*320)+3),<($4000+(14*320)+4),<($4000+(14*320)+5),<($4000+(14*320)+6),<($4000+(14*320)+7)
!BYTE <($4000+(15*320)+0),<($4000+(15*320)+1),<($4000+(15*320)+2),<($4000+(15*320)+3),<($4000+(15*320)+4),<($4000+(15*320)+5),<($4000+(15*320)+6),<($4000+(15*320)+7)
!BYTE <($4000+(16*320)+0),<($4000+(16*320)+1),<($4000+(16*320)+2),<($4000+(16*320)+3),<($4000+(16*320)+4),<($4000+(16*320)+5),<($4000+(16*320)+6),<($4000+(16*320)+7)
!BYTE <($4000+(17*320)+0),<($4000+(17*320)+1),<($4000+(17*320)+2),<($4000+(17*320)+3),<($4000+(17*320)+4),<($4000+(17*320)+5),<($4000+(17*320)+6),<($4000+(17*320)+7)
!BYTE <($4000+(18*320)+0),<($4000+(18*320)+1),<($4000+(18*320)+2),<($4000+(18*320)+3),<($4000+(18*320)+4),<($4000+(18*320)+5),<($4000+(18*320)+6),<($4000+(18*320)+7)
!BYTE <($4000+(19*320)+0),<($4000+(19*320)+1),<($4000+(19*320)+2),<($4000+(19*320)+3),<($4000+(19*320)+4),<($4000+(19*320)+5),<($4000+(19*320)+6),<($4000+(19*320)+7)
!BYTE <($4000+(20*320)+0),<($4000+(20*320)+1),<($4000+(20*320)+2),<($4000+(20*320)+3),<($4000+(20*320)+4),<($4000+(20*320)+5),<($4000+(20*320)+6),<($4000+(20*320)+7)
!BYTE <($4000+(21*320)+0),<($4000+(21*320)+1),<($4000+(21*320)+2),<($4000+(21*320)+3),<($4000+(21*320)+4),<($4000+(21*320)+5),<($4000+(21*320)+6),<($4000+(21*320)+7)
!BYTE <($4000+(22*320)+0),<($4000+(22*320)+1),<($4000+(22*320)+2),<($4000+(22*320)+3),<($4000+(22*320)+4),<($4000+(22*320)+5),<($4000+(22*320)+6),<($4000+(22*320)+7)
!BYTE <($4000+(23*320)+0),<($4000+(23*320)+1),<($4000+(23*320)+2),<($4000+(23*320)+3),<($4000+(23*320)+4),<($4000+(23*320)+5),<($4000+(23*320)+6),<($4000+(23*320)+7)
!BYTE <($4000+(24*320)+0),<($4000+(24*320)+1),<($4000+(24*320)+2),<($4000+(24*320)+3),<($4000+(24*320)+4),<($4000+(24*320)+5),<($4000+(24*320)+6),<($4000+(24*320)+7)
!BYTE <($4000+(25*320)+0),<($4000+(25*320)+1),<($4000+(25*320)+2),<($4000+(25*320)+3),<($4000+(25*320)+4),<($4000+(25*320)+5),<($4000+(25*320)+6),<($4000+(25*320)+7)

SCR_TAB_BANK_2_HI:
!BYTE >($6000+(00*320)+0),>($6000+(00*320)+1),>($6000+(00*320)+2),>($6000+(00*320)+3),>($6000+(00*320)+4),>($6000+(00*320)+5),>($6000+(00*320)+6),>($6000+(00*320)+7)
!BYTE >($6000+(01*320)+0),>($6000+(01*320)+1),>($6000+(01*320)+2),>($6000+(01*320)+3),>($6000+(01*320)+4),>($6000+(01*320)+5),>($6000+(01*320)+6),>($6000+(01*320)+7)
!BYTE >($6000+(02*320)+0),>($6000+(02*320)+1),>($6000+(02*320)+2),>($6000+(02*320)+3),>($6000+(02*320)+4),>($6000+(02*320)+5),>($6000+(02*320)+6),>($6000+(02*320)+7)
!BYTE >($6000+(03*320)+0),>($6000+(03*320)+1),>($6000+(03*320)+2),>($6000+(03*320)+3),>($6000+(03*320)+4),>($6000+(03*320)+5),>($6000+(03*320)+6),>($6000+(03*320)+7)
!BYTE >($6000+(04*320)+0),>($6000+(04*320)+1),>($6000+(04*320)+2),>($6000+(04*320)+3),>($6000+(04*320)+4),>($6000+(04*320)+5),>($6000+(04*320)+6),>($6000+(04*320)+7)
!BYTE >($6000+(05*320)+0),>($6000+(05*320)+1),>($6000+(05*320)+2),>($6000+(05*320)+3),>($6000+(05*320)+4),>($6000+(05*320)+5),>($6000+(05*320)+6),>($6000+(05*320)+7)
!BYTE >($6000+(06*320)+0),>($6000+(06*320)+1),>($6000+(06*320)+2),>($6000+(06*320)+3),>($6000+(06*320)+4),>($6000+(06*320)+5),>($6000+(06*320)+6),>($6000+(06*320)+7)
!BYTE >($6000+(07*320)+0),>($6000+(07*320)+1),>($6000+(07*320)+2),>($6000+(07*320)+3),>($6000+(07*320)+4),>($6000+(07*320)+5),>($6000+(07*320)+6),>($6000+(07*320)+7)
!BYTE >($6000+(08*320)+0),>($6000+(08*320)+1),>($6000+(08*320)+2),>($6000+(08*320)+3),>($6000+(08*320)+4),>($6000+(08*320)+5),>($6000+(08*320)+6),>($6000+(08*320)+7)
!BYTE >($6000+(09*320)+0),>($6000+(09*320)+1),>($6000+(09*320)+2),>($6000+(09*320)+3),>($6000+(09*320)+4),>($6000+(09*320)+5),>($6000+(09*320)+6),>($6000+(09*320)+7)
!BYTE >($6000+(10*320)+0),>($6000+(10*320)+1),>($6000+(10*320)+2),>($6000+(10*320)+3),>($6000+(10*320)+4),>($6000+(10*320)+5),>($6000+(10*320)+6),>($6000+(10*320)+7)
!BYTE >($6000+(11*320)+0),>($6000+(11*320)+1),>($6000+(11*320)+2),>($6000+(11*320)+3),>($6000+(11*320)+4),>($6000+(11*320)+5),>($6000+(11*320)+6),>($6000+(11*320)+7)
!BYTE >($6000+(12*320)+0),>($6000+(12*320)+1),>($6000+(12*320)+2),>($6000+(12*320)+3),>($6000+(12*320)+4),>($6000+(12*320)+5),>($6000+(12*320)+6),>($6000+(12*320)+7)
!BYTE >($6000+(13*320)+0),>($6000+(13*320)+1),>($6000+(13*320)+2),>($6000+(13*320)+3),>($6000+(13*320)+4),>($6000+(13*320)+5),>($6000+(13*320)+6),>($6000+(13*320)+7)
!BYTE >($6000+(14*320)+0),>($6000+(14*320)+1),>($6000+(14*320)+2),>($6000+(14*320)+3),>($6000+(14*320)+4),>($6000+(14*320)+5),>($6000+(14*320)+6),>($6000+(14*320)+7)
!BYTE >($6000+(15*320)+0),>($6000+(15*320)+1),>($6000+(15*320)+2),>($6000+(15*320)+3),>($6000+(15*320)+4),>($6000+(15*320)+5),>($6000+(15*320)+6),>($6000+(15*320)+7)
!BYTE >($6000+(16*320)+0),>($6000+(16*320)+1),>($6000+(16*320)+2),>($6000+(16*320)+3),>($6000+(16*320)+4),>($6000+(16*320)+5),>($6000+(16*320)+6),>($6000+(16*320)+7)
!BYTE >($6000+(17*320)+0),>($6000+(17*320)+1),>($6000+(17*320)+2),>($6000+(17*320)+3),>($6000+(17*320)+4),>($6000+(17*320)+5),>($6000+(17*320)+6),>($6000+(17*320)+7)
!BYTE >($6000+(18*320)+0),>($6000+(18*320)+1),>($6000+(18*320)+2),>($6000+(18*320)+3),>($6000+(18*320)+4),>($6000+(18*320)+5),>($6000+(18*320)+6),>($6000+(18*320)+7)
!BYTE >($6000+(19*320)+0),>($6000+(19*320)+1),>($6000+(19*320)+2),>($6000+(19*320)+3),>($6000+(19*320)+4),>($6000+(19*320)+5),>($6000+(19*320)+6),>($6000+(19*320)+7)
!BYTE >($6000+(20*320)+0),>($6000+(20*320)+1),>($6000+(20*320)+2),>($6000+(20*320)+3),>($6000+(20*320)+4),>($6000+(20*320)+5),>($6000+(20*320)+6),>($6000+(20*320)+7)
!BYTE >($6000+(21*320)+0),>($6000+(21*320)+1),>($6000+(21*320)+2),>($6000+(21*320)+3),>($6000+(21*320)+4),>($6000+(21*320)+5),>($6000+(21*320)+6),>($6000+(21*320)+7)
!BYTE >($6000+(22*320)+0),>($6000+(22*320)+1),>($6000+(22*320)+2),>($6000+(22*320)+3),>($6000+(22*320)+4),>($6000+(22*320)+5),>($6000+(22*320)+6),>($6000+(22*320)+7)
!BYTE >($6000+(23*320)+0),>($6000+(23*320)+1),>($6000+(23*320)+2),>($6000+(23*320)+3),>($6000+(23*320)+4),>($6000+(23*320)+5),>($6000+(23*320)+6),>($6000+(23*320)+7)
!BYTE >($6000+(24*320)+0),>($6000+(24*320)+1),>($6000+(24*320)+2),>($6000+(24*320)+3),>($6000+(24*320)+4),>($6000+(24*320)+5),>($6000+(24*320)+6),>($6000+(24*320)+7)
!BYTE >($6000+(25*320)+0),>($6000+(25*320)+1),>($6000+(25*320)+2),>($6000+(25*320)+3),>($6000+(25*320)+4),>($6000+(25*320)+5),>($6000+(25*320)+6),>($6000+(25*320)+7)

SCR_TAB_BANK_2_LO:
!BYTE <($6000+(00*320)+0),<($6000+(00*320)+1),<($6000+(00*320)+2),<($6000+(00*320)+3),<($6000+(00*320)+4),<($6000+(00*320)+5),<($6000+(00*320)+6),<($6000+(00*320)+7)
!BYTE <($6000+(01*320)+0),<($6000+(01*320)+1),<($6000+(01*320)+2),<($6000+(01*320)+3),<($6000+(01*320)+4),<($6000+(01*320)+5),<($6000+(01*320)+6),<($6000+(01*320)+7)
!BYTE <($6000+(02*320)+0),<($6000+(02*320)+1),<($6000+(02*320)+2),<($6000+(02*320)+3),<($6000+(02*320)+4),<($6000+(02*320)+5),<($6000+(02*320)+6),<($6000+(02*320)+7)
!BYTE <($6000+(03*320)+0),<($6000+(03*320)+1),<($6000+(03*320)+2),<($6000+(03*320)+3),<($6000+(03*320)+4),<($6000+(03*320)+5),<($6000+(03*320)+6),<($6000+(03*320)+7)
!BYTE <($6000+(04*320)+0),<($6000+(04*320)+1),<($6000+(04*320)+2),<($6000+(04*320)+3),<($6000+(04*320)+4),<($6000+(04*320)+5),<($6000+(04*320)+6),<($6000+(04*320)+7)
!BYTE <($6000+(05*320)+0),<($6000+(05*320)+1),<($6000+(05*320)+2),<($6000+(05*320)+3),<($6000+(05*320)+4),<($6000+(05*320)+5),<($6000+(05*320)+6),<($6000+(05*320)+7)
!BYTE <($6000+(06*320)+0),<($6000+(06*320)+1),<($6000+(06*320)+2),<($6000+(06*320)+3),<($6000+(06*320)+4),<($6000+(06*320)+5),<($6000+(06*320)+6),<($6000+(06*320)+7)
!BYTE <($6000+(07*320)+0),<($6000+(07*320)+1),<($6000+(07*320)+2),<($6000+(07*320)+3),<($6000+(07*320)+4),<($6000+(07*320)+5),<($6000+(07*320)+6),<($6000+(07*320)+7)
!BYTE <($6000+(08*320)+0),<($6000+(08*320)+1),<($6000+(08*320)+2),<($6000+(08*320)+3),<($6000+(08*320)+4),<($6000+(08*320)+5),<($6000+(08*320)+6),<($6000+(08*320)+7)
!BYTE <($6000+(09*320)+0),<($6000+(09*320)+1),<($6000+(09*320)+2),<($6000+(09*320)+3),<($6000+(09*320)+4),<($6000+(09*320)+5),<($6000+(09*320)+6),<($6000+(09*320)+7)
!BYTE <($6000+(10*320)+0),<($6000+(10*320)+1),<($6000+(10*320)+2),<($6000+(10*320)+3),<($6000+(10*320)+4),<($6000+(10*320)+5),<($6000+(10*320)+6),<($6000+(10*320)+7)
!BYTE <($6000+(11*320)+0),<($6000+(11*320)+1),<($6000+(11*320)+2),<($6000+(11*320)+3),<($6000+(11*320)+4),<($6000+(11*320)+5),<($6000+(11*320)+6),<($6000+(11*320)+7)
!BYTE <($6000+(12*320)+0),<($6000+(12*320)+1),<($6000+(12*320)+2),<($6000+(12*320)+3),<($6000+(12*320)+4),<($6000+(12*320)+5),<($6000+(12*320)+6),<($6000+(12*320)+7)
!BYTE <($6000+(13*320)+0),<($6000+(13*320)+1),<($6000+(13*320)+2),<($6000+(13*320)+3),<($6000+(13*320)+4),<($6000+(13*320)+5),<($6000+(13*320)+6),<($6000+(13*320)+7)
!BYTE <($6000+(14*320)+0),<($6000+(14*320)+1),<($6000+(14*320)+2),<($6000+(14*320)+3),<($6000+(14*320)+4),<($6000+(14*320)+5),<($6000+(14*320)+6),<($6000+(14*320)+7)
!BYTE <($6000+(15*320)+0),<($6000+(15*320)+1),<($6000+(15*320)+2),<($6000+(15*320)+3),<($6000+(15*320)+4),<($6000+(15*320)+5),<($6000+(15*320)+6),<($6000+(15*320)+7)
!BYTE <($6000+(16*320)+0),<($6000+(16*320)+1),<($6000+(16*320)+2),<($6000+(16*320)+3),<($6000+(16*320)+4),<($6000+(16*320)+5),<($6000+(16*320)+6),<($6000+(16*320)+7)
!BYTE <($6000+(17*320)+0),<($6000+(17*320)+1),<($6000+(17*320)+2),<($6000+(17*320)+3),<($6000+(17*320)+4),<($6000+(17*320)+5),<($6000+(17*320)+6),<($6000+(17*320)+7)
!BYTE <($6000+(18*320)+0),<($6000+(18*320)+1),<($6000+(18*320)+2),<($6000+(18*320)+3),<($6000+(18*320)+4),<($6000+(18*320)+5),<($6000+(18*320)+6),<($6000+(18*320)+7)
!BYTE <($6000+(19*320)+0),<($6000+(19*320)+1),<($6000+(19*320)+2),<($6000+(19*320)+3),<($6000+(19*320)+4),<($6000+(19*320)+5),<($6000+(19*320)+6),<($6000+(19*320)+7)
!BYTE <($6000+(20*320)+0),<($6000+(20*320)+1),<($6000+(20*320)+2),<($6000+(20*320)+3),<($6000+(20*320)+4),<($6000+(20*320)+5),<($6000+(20*320)+6),<($6000+(20*320)+7)
!BYTE <($6000+(21*320)+0),<($6000+(21*320)+1),<($6000+(21*320)+2),<($6000+(21*320)+3),<($6000+(21*320)+4),<($6000+(21*320)+5),<($6000+(21*320)+6),<($6000+(21*320)+7)
!BYTE <($6000+(22*320)+0),<($6000+(22*320)+1),<($6000+(22*320)+2),<($6000+(22*320)+3),<($6000+(22*320)+4),<($6000+(22*320)+5),<($6000+(22*320)+6),<($6000+(22*320)+7)
!BYTE <($6000+(23*320)+0),<($6000+(23*320)+1),<($6000+(23*320)+2),<($6000+(23*320)+3),<($6000+(23*320)+4),<($6000+(23*320)+5),<($6000+(23*320)+6),<($6000+(23*320)+7)
!BYTE <($6000+(24*320)+0),<($6000+(24*320)+1),<($6000+(24*320)+2),<($6000+(24*320)+3),<($6000+(24*320)+4),<($6000+(24*320)+5),<($6000+(24*320)+6),<($6000+(24*320)+7)
!BYTE <($6000+(25*320)+0),<($6000+(25*320)+1),<($6000+(25*320)+2),<($6000+(25*320)+3),<($6000+(25*320)+4),<($6000+(25*320)+5),<($6000+(25*320)+6),<($6000+(25*320)+7)

CLEAR_TAB:
!BYTE 00*8,01*8,02*8,03*8,04*8,05*8,06*8,07*8,08*8,09*8,10*8,11*8,12*8,13*8,14*8,15*8,16*8,17*8,18*8,19*8,20*8,21*8,22*8,23*8,24*8,25*8,26*8,27*8,28*8,29*8,30*8,31*8

