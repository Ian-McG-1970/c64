  
; Sprites involved in a collision with other sprites will have their respective bits set to "1" in address 53278/$D01E – all other sprites will have a "0" bit here.
; Sprites involved in a collision with background graphics will have their respective bits set to "1" in address 53279/$D01F – all other sprites will report a "0".
; sprite to background = 01 - no collision / 11 - collision / 10 - collision

SCR_LO = 2 ; BANK_LO_HI+1
SCR_HI = SCR_LO+1
SCR = SCR_LO

MEM_TO = SCR
MEM_FROM = MEM_TO +2

BUF_LO = MEM_FROM
BUF_HI = BUF_LO +1
BUF = BUF_LO

REGA_BUF = MEM_FROM +2
REGX_BUF = REGA_BUF+1
REGY_BUF = REGX_BUF+1

REGA_INT = REGY_BUF+1
REGX_INT = REGA_INT+1
REGY_INT = REGX_INT+1

JOYH = REGY_INT +1
JOYV = JOYH +1
JOYF = JOYV +1

XPOS = JOYF +1
YPOS = XPOS +1

TANK0_VLO = YPOS +1
TANK0_VHI = TANK0_VLO +1
TANK0_HLO = TANK0_VHI +1
TANK0_HHI = TANK0_HLO +1
TANK0_ROT = TANK0_HHI +1

TANK0_BK_VLO = TANK0_ROT +1
TANK0_BK_VHI = TANK0_BK_VLO +1
TANK0_BK_HLO = TANK0_BK_VHI +1
TANK0_BK_HHI = TANK0_BK_HLO +1
TANK0_BK_ROT = TANK0_BK_HHI +1

TANK1_VLO = TANK0_BK_ROT +1
TANK1_VHI = TANK1_VLO +1
TANK1_HLO = TANK1_VHI +1
TANK1_HHI = TANK1_HLO +1
TANK1_ROT = TANK1_HHI +1

TANK1_BK_VLO = TANK1_ROT +1
TANK1_BK_VHI = TANK1_BK_VLO +1
TANK1_BK_HLO = TANK1_BK_VHI +1
TANK1_BK_HHI = TANK1_BK_HLO +1
TANK1_BK_ROT = TANK1_BK_HHI +1

VLO = TANK1_BK_ROT +1
VHI = VLO +1
HLO = VHI +1
HHI = HLO +1
ROT = HHI +1

VDIR = ROT +1
HDIR = VDIR +1

SCRN0 = 24*1024 ; $8000
BACK_BUF = 56*1024
SCRNBANK = $02 ; $01
BANK = %01111000

SPRENBL = 53248+21
SPRMULTI = $D01C
SPRPRI = $D01B

SPRXPX = 53248+29 
SPRXPY = 53248+23

S0X = 53248+0
S0Y = 53248+1
S0C = $D027

S1X = 53248+2
S1Y = 53248+3
S1C = $D028

S2X = 53248+4
S2Y = 53248+5
S2C = $D029

S3X = 53248+6
S3Y = 53248+7
S3C = $D02A

S4X = 53248+8
S4Y = 53248+9
S4C = $D02B

S5X = 53248+10
S5Y = 53248+11
S5C = $D02C

S6X = 53248+12
S6Y = 53248+13
S6C = $D02D

S7X = 53248+14
S7Y = 53248+15
S7C = $D02E

SPRXMSB = 53248+16
SPRBCKCOL = $D01F

SCRNCOL = SCRN0 -1024
SPRDEF0 = SCRNCOL +1016
SPRDEF1 = SPRDEF0 +1
SPRDEF2 = SPRDEF1 +1
SPRDEF3 = SPRDEF2 +1
SPRDEF4 = SPRDEF3 +1
SPRDEF5 = SPRDEF4 +1
SPRDEF6 = SPRDEF5 +1
SPRDEF7 = SPRDEF6 +1

VOFFSET = 50
HOFFSET = 24

BACK_BUFFER_OFFSET = 128
MAP = 512
MAX_ROT = 55

;START
*= 2049
!byte $0c,$08,$0a,$00,$9e   ; Line 10 SYS
!tx "2070"            ; Address for sys start in text 4096+11

*= 2070

SEI        ; disable maskable IRQs

 CLD
 CLV

 LDX #$FF  ; max stack pointer
 TXS

 LDA #$7F
 STA $DC0D  ; disable timer interrupts which can be generated by the two CIA chips
 STA $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

 LDA $DC0D  ; by reading this two registers we negate any pending CIA irqs.
 LDA $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

 LDA #$01   ; this is how to tell the VICII to generate a raster interrupt
 STA $D01A

 LDA #$FA   ; this is how to tell at which rasterline we want the irq to be triggered
 STA $D012

 LDA #$1B   ; as there are more than 256 rasterlines, the topmost bit of $d011 serves as
 STA $D011  ; the 9th bit for the rasterline we want our irq to be triggered. here we simply set up a character screen, leaving the topmost bit 0.

 LDA #$35   ; we turn off the BASIC and KERNAL rom here
 STA $01    ; the cpu now sees RAM everywhere except at $d000-$e000, where still the registers of SID/VICII/etc are visible

 lDA #<IRQ  ; this is how we set up
 STA $FFFE     ; the address of our interrupt code
 LDA #>IRQ
 STA $FFFF
  
 LDA #<NMI_NOP  ; lsb
 STA $FFFA      ; Create a nop, irq handler for NMI that gets called whenever RESTORE is pressed or similar.
 LDA #>NMI_NOP  ; msb
 STA $FFFB      ; We're putting our irq handler directly in the vector that usually points to the kernal's NMI handler since we have kernal banked out.

 LDA #$00       ; Force an NMI by setting up a timer. This will cause an NMI, that won't be acked. Any subsequent NMI's from RESTORE will be essentially disabled.
 STA $DD0E      ; Stop timer A
 STA $DD04      ; Set timer A to 0, NMI will occure immediately after start
 STA $DD0E

 LDA #$81
 STA $DD0D      ; Set timer A as source for NMI

 LDA #$01
 STA $DD0E       ; Start timer A -> NMI

 LDA #SCRNBANK
 STA $DD00 ; bank
 
 LDA #BANK
 STA $D018    ;VIC Memory Control Register
    
 LDA #$00     ; screen and border
 STA $D020
 LDA #$00 ; $00
 STA $D021
 LDA #$0B ; $00
 STA $D022
 LDA #$0F ; $00
 STA $D023

 LDA #$3B ; 3B ; bitmap mode? - finding 0011=3 1011=b
 STA $D011    ;VIC Control Register 1

; LDA #$18
 LDA #%00011000 ; 0-2=SCRL 3=40/38 4=MCM 5-7=UNUSED
 STA $D016    ;VIC Control Register 2

 LDA #$01 ; $01 ; colour 11 
 LDX #<$D800
 LDY #>$D800
 STX SCR+0
 STY SCR+1
 LDX #>1000 
 LDY #<1000
 JSR MEMSET

 LDA #$BC ;$65 ; colour 01 (0000????) and colour 10 (????0000) - bank 1
 LDX #<SCRNCOL
 LDY #>SCRNCOL
 STX SCR+0
 STY SCR+1
 LDX #>1000 
 LDY #<1000
 JSR MEMSET

 LDA #0 ;$65 ; colour 01 (0000????) and colour 10 (????0000) - bank 1
 LDX #<BACK_BUF ; SCRN0
 LDY #>BACK_BUF ; SCRN0
 STX SCR+0
 STY SCR+1
 LDX #>8000 
 LDY #<8000
 JSR MEMSET

LDA #20
STA XPOS
STA YPOS

  LDA #0
  STA TANK0_VLO
  STA TANK0_VHI
  STA TANK0_HLO
  STA TANK0_HHI
  STA TANK0_ROT

  STA TANK1_VLO
  STA TANK1_VHI
  STA TANK1_HLO
  STA TANK1_HHI
  STA TANK1_ROT

  LDA #255
  STA SPRENBL
  
  LDA #0
  STA SPRMULTI
  STA SPRPRI
  STA SPRXPX
  STA SPRXPY
  STA SPRXMSB

  LDA #54
  STA S0X
  STA S0Y
  STA S0C

  LDA #76
  STA S1X
  STA S1Y
  STA S1C

  LDA #98
  STA S2X
  STA S2Y
  STA S2C

  LDA #120
  STA S3X
  STA S3Y
  STA S3C

  LDA #142
  STA S4X
  STA S4Y
  STA S4C

  LDA #164
  STA S5X
  STA S5Y
  STA S5C

  LDA #186
  STA S6X
  STA S6Y
  STA S6C

  LDA #198
  STA S7X
  STA S7Y
  STA S7C

 jsr BUILD_MAP
  JSR MAP_TO_BACKBUFFER
  
  LDX #<BACK_BUF
  LDY #>BACK_BUF
  STX MEM_FROM+0
  STY MEM_FROM+1
  LDX #<SCRN0
  LDY #>SCRN0
  STX MEM_TO+0
  STY MEM_TO+1
  LDY #<8000
  LDX #>8000
  JSR MEMCPY

CLI ; enable maskable interrupts again

MLOOP: JMP  MLOOP

!ZONE JOYSTICK
JOYSTICK1 LDA $DC01     ; PORT 1
          BVC .JOYSTICK ; JMP
JOYSTICK2 LDA $DC00     ; PORT 2
.JOYSTICK LDX #0
          LDY #0
.UP       LSR
          BCS   .DOWN
            DEY
.DOWN     LSR
          BCS   .LEFT
            INY
.LEFT     LSR
          BCS   .RIGHT
            DEX
.RIGHT    LSR
          BCS   .FIRE
            INX
.FIRE     EOR   #255
          AND   #1
          STA   JOYF
          STX   JOYH
          STY   JOYV
          LSR
          RTS




;!ZONE PLOT01
;PLOT01  BMI   .PLOT1
;.PLOT0  LDA   VER_TAB_0_LO,Y
;        STA   SCR_LO 
;        LDA   VER_TAB_0_HI,Y 
;        STA   SCR_HI 
;        LDY   HOR_TAB,X
;        LDA   (SCR),Y
;        AND   AND_00_TAB,X
;        ORA   OR_01_TAB,X
;        STA   (SCR),Y 
;        RTS
;.PLOT1  LDA   VER_TAB_0_LO,Y
;        STA   SCR_LO 
;        LDA   VER_TAB_1_HI,Y 
;        STA   SCR_HI 
;        LDY   HOR_TAB,X
;        LDA   (SCR),Y
;        AND   AND_00_TAB,X
;        ORA   OR_01_TAB,X
;        STA   (SCR),Y 
;        RTS

;!ZONE PLOT11
;PLOT11  BMI   .PLOT1
;.PLOT0  LDA   VER_TAB_0_LO,Y
;        STA   SCR_LO 
;        LDA   VER_TAB_0_HI,Y 
;        STA   SCR_HI 
;        LDY   HOR_TAB,X
;        LDA   (SCR),Y
;        ORA   OR_11_TAB,X
;        STA   (SCR),Y 
;        RTS
;.PLOT1  LDA   VER_TAB_0_LO,Y
;        STA   SCR_LO 
;        LDA   VER_TAB_1_HI,Y 
;        STA   SCR_HI 
;        LDY   HOR_TAB,X
;        LDA   (SCR),Y
;        ORA   OR_11_TAB,X
;        STA   (SCR),Y 
;        RTS

;!ZONE PLOT00
;PLOT00  BMI   .PLOT1
;.PLOT0  LDA   VER_TAB_0_LO,Y
;        STA   SCR_LO 
;        LDA   VER_TAB_0_HI,Y 
;        STA   SCR_HI 
;        LDY   HOR_TAB,X
;        LDA   (SCR),Y
;        AND   AND_00_TAB,X
;        STA   (SCR),Y 
;        RTS
;.PLOT1  LDA   VER_TAB_0_LO,Y
;        STA   SCR_LO 
;        LDA   VER_TAB_1_HI,Y 
;        STA   SCR_HI 
;        LDY   HOR_TAB,X
;        LDA   (SCR),Y
;        AND   AND_00_TAB,X
;        STA   (SCR),Y 
;        RTS

;!ZONE PLOT10
;PLOT10  BMI   .PLOT1
;.PLOT0  LDA   VER_TAB_0_LO,Y
;        STA   SCR_LO 
;        LDA   VER_TAB_0_HI,Y 
;        STA   SCR_HI 
;        LDY   HOR_TAB,X
;        LDA   (SCR),Y
;        AND   AND_00_TAB,X
;        ORA   OR_10_TAB,X
;        STA   (SCR),Y 
;        RTS
;.PLOT1  LDA   VER_TAB_0_LO,Y
;        STA   SCR_LO 
;        LDA   VER_TAB_1_HI,Y 
;        STA   SCR_HI 
;        LDY   HOR_TAB,X
;        LDA   (SCR),Y
;        AND   AND_00_TAB,X
;        ORA   OR_10_TAB,X
;        STA   (SCR),Y 
;        RTS
    
;move memory down
;
; FROM = source start address
;   TO = destination start address
; SIZE = number of bytes to move
  
!ZONE MEMCPY
MEMCPY
    STY .LSB +1
    LDY #0
    TXA
    BEQ .LSB
.LOOPHI LDA (MEM_FROM),Y ; move a page at a time
        STA (MEM_TO),Y
        INY
        BNE .LOOPHI
      INC MEM_FROM+1
      INC MEM_TO+1
      DEX
      BNE .LOOPHI
.LSB    LDX #0
        BEQ .EXIT
.LOOPLO   LDA (MEM_FROM),Y ; move the remaining bytes
          STA (MEM_TO),Y
          INY
          DEX
          BNE .LOOPLO
.EXIT  RTS

!ZONE MEMSET        
MEMSET       STY    .LSB_ONLY+1 ; store LSB count
             CPX    #0          ; MSB?     
             BEQ    .LSB_ONLY   ; no

             LDY    #0          ; yes so reset LSB
.MSB_LOOP  
.LSB_LOOP      STA    (MEM_TO),Y   ; clear whole MSB
               DEY 
               BNE    .LSB_LOOP

              INC    MEM_TO+1      ; inc MSB
              DEX               ; dec MSB count
              BNE    .MSB_LOOP

.LSB_ONLY    LDY    #0          ; LSB count 
             BEQ    .MS_END     ; not needed

.LAST_LSB_LOOP STA   (MEM_TO),Y
               DEY 
               BNE   .LAST_LSB_LOOP
                
              STA   (MEM_TO),Y     ; clear last Y (0)
 
.MS_END      RTS

!ZONE DRAW_BULLET
DRAW_BULLET
        BMI   .PLOT1
.PLOT0  LDA   VER_BULLET_TAB_LO,Y
        STA   SCR_LO 
        LDA   VER_BULLET_TAB_LO_HI,Y 
        STA   SCR_HI 
        LDY   HOR_TAB,X
        LDA   (SCR),Y
        ORA   OR_11_TAB,X
        STA   (SCR),Y 
        INY
        LDA   (SCR),Y
        ORA   OR_11_TAB,X
        STA   (SCR),Y
        RTS
.PLOT1  LDA   VER_BULLET_TAB_LO,Y
        STA   SCR_LO 
        LDA   VER_BULLET_TAB_HI_HI,Y 
        STA   SCR_HI 
        LDY   HOR_TAB,X
        LDA   (SCR),Y
        ORA   OR_11_TAB,X
        STA   (SCR),Y 
        INY
        LDA   (SCR),Y
        ORA   OR_11_TAB,X
        STA   (SCR),Y 
        RTS

;!ZONE CLEAR_BULLET
;CLEAR_BULLET
;        BMI   .PLOT1
;.PLOT0  LDA   VER_BULLET_TAB_LO,Y
;        STA   SCR_LO 
;        LDA   VER_BULLET_TAB_LO_HI,Y 
;        STA   SCR_HI 
;        LDY   HOR_TAB,X
;        LDA   (SCR),Y
;        AND   AND_00_TAB,X
;        STA   (SCR),Y 
;        INY
;        LDA   (SCR),Y
;        AND   AND_00_TAB,X
;        STA   (SCR),Y
;        RTS
;.PLOT1  LDA   VER_BULLET_TAB_LO,Y
;        STA   SCR_LO 
;        LDA   VER_BULLET_TAB_HI_HI,Y 
;        STA   SCR_HI 
;        LDY   HOR_TAB,X
;        LDA   (SCR),Y
;        AND   AND_00_TAB,X
;        STA   (SCR),Y
;        INY
;        LDA   (SCR),Y
;        AND   AND_00_TAB,X
;        STA   (SCR),Y
;        RTS

!ZONE CLEAR_BULLET_BB
CLEAR_BULLET_BB
        BMI   .PLOT1
.PLOT0  LDA   VER_BULLET_TAB_LO,Y
        STA   SCR_LO
        STA   BUF_LO
        LDA   VER_BULLET_TAB_LO_HI,Y 
        STA   SCR_HI 
        ORA   #BACK_BUFFER_OFFSET
        STA   BUF_HI
        LDY   HOR_TAB,X
        LDA   (BUF),Y
        STA   (SCR),Y 
        INY
        LDA   (BUF),Y
        STA   (SCR),Y
        RTS
.PLOT1  LDA   VER_BULLET_TAB_LO,Y
        STA   SCR_LO 
        STA   BUF_LO
        LDA   VER_BULLET_TAB_HI_HI,Y 
        STA   SCR_HI 
        ORA   #BACK_BUFFER_OFFSET
        STA   BUF_HI
        LDY   HOR_TAB,X
        LDA   (BUF),Y
        STA   (SCR),Y
        INY
        LDA   (BUF),Y
        STA   (SCR),Y
        RTS

!ZONE IRQ
IRQ INC $D019    ;VIC Interrupt Request Register (IRR)

    INC $d020
    STA REGA_INT
    STX REGX_INT
    STY REGY_INT

;  LDY YPOS
;  LDX XPOS
;  JSR CLEAR_BULLET_BB
; INC $d020

  JSR JOYSTICK2
  LDA #TANK0_VLO
  LDX #TANK0_BK_VLO
  JSR GET_TANK
  JSR MOVE_TANK
  JSR PUT_TANK
  JSR POS16_TO_POS9
  JSR POS9_TO_SPRITE_01
.  
  JSR JOYSTICK1
  LDA #TANK1_VLO
  LDX #TANK1_BK_VLO
  JSR GET_TANK
  JSR MOVE_TANK
  JSR PUT_TANK
  JSR POS16_TO_POS9
  JSR POS9_TO_SPRITE_23

;  LDY YPOS
;  LDX XPOS
;  JSR DRAW_BULLET

 LDA SPRBCKCOL
 BEQ .NOCOL
 INC $D020
 DEC $d020
 INC $D020
 DEC $d020
 INC $D020
 DEC $d020
 INC $D020
 DEC $d020
 INC $D020
 DEC $d020
 INC $D020
 DEC $d020
 INC $D020
 DEC $d020
 INC $D020
 DEC $d020
 INC $D020
 DEC $d020
 INC $D020
 DEC $d020
 INC $D020
 DEC $d020
 INC $D020
 DEC $d020
 INC $D020
 DEC $d020
 INC $D020
 DEC $d020
 INC $D020
 DEC $d020
 INC $D020
 DEC $d020
 INC $D020
 DEC $d020

.NOCOL

; LDA VLO
; LDX #16
; LDY #24
; JSR HEX8
; LDA VHI
; LDX #16
; LDY #30
; JSR HEX8
; LDA HLO
; LDX #16
; LDY #36
; JSR HEX8
; LDA HHI
; LDX #16
; LDY #42
; JSR HEX8

; LDA ROTATE
; LDX #16
; LDY #48
; JSR HEX8
; LDA TEMPCOS
; LDX #16
; LDY #54
; JSR HEX8
; LDA TEMPSIN
; LDX #16
; LDY #60
; JSR HEX8

  LDA REGA_INT
  LDX REGX_INT
  LDY REGY_INT
  DEC $d020

NMI_NOP RTI ; This is the irq handler for the NMI. Just returns without acknowledge. This prevents subsequent NMI's from interfering.

!ZONE GET_TANK
GET_TANK  STA .LOOP +1
          STA PUT_TANK.RESTORE +1
          STX .BACKUP +1
          LDX #4
.LOOP       LDA TANK0_VLO,X
            STA VLO,X
.BACKUP     STA TANK0_BK_VLO,X
            DEX
            BPL .LOOP
          RTS

!ZONE PUT_TANK
PUT_TANK
;  STA .RESTORE +1
          LDX #4
.LOOP       LDA VLO,X
.RESTORE    STA TANK0_VLO,X
            DEX
            BPL .LOOP
          RTS

  LDA TANK0_VLO
  STA VLO
  LDA TANK0_VHI
  STA VHI
  LDA TANK0_HLO
  STA HLO
  LDA TANK0_HHI
  STA HHI
  LDA TANK0_ROT
  STA ROT



  RTS


!ZONE STORE_TANK_PARAMS
  RTS

!ZONE PUT_CHAR_BACK_BUFFER
PUT_CHAR_BACK_BUFFER
  ASL ; *2
  ASL ; *4
  ASL ; char *8
  STA REGA_BUF ; a points to char pos
  TYA ; y = h char so h * 4
  ASL ; *2
  ASL ; *4
  TAY
  TXA ; x = v char so v * 4
  ASL ; *2
  ASL ; *4
  TAX
        BMI   .PLOT1
.PLOT0  LDA   VER_BULLET_TAB_LO_HI,Y 
        BVC   .CONT ; JMP
.PLOT1    LDA   VER_BULLET_TAB_HI_HI,Y 
.CONT   ORA   #BACK_BUFFER_OFFSET
        STA   .BUF_ADDR +2
        LDA   VER_BULLET_TAB_LO,Y
        STA   .BUF_ADDR +1
        LDY   HOR_TAB,X
        LDX   REGA_BUF

        LDA #7
        STA REGA_BUF
.LOOP     LDA CHAR,X
.BUF_ADDR STA $ABCD,Y 
          INY
          INX
          DEC REGA_BUF
          BPL .LOOP
        RTS

!ZONE MAP_TO_BACKBUFFER
MAP_TO_BACKBUFFER
  LDY #24
.LOOPY
    STY REGY_BUF ; ver pos
    LDA MAP_LO,Y
    STA .MAP_ADDR +1
    LDA MAP_HI,Y
    STA .MAP_ADDR +2
    LDX #39
.LOOPX    STX REGX_BUF
.MAP_ADDR LDA $ABCD,X
          LDY REGY_BUF
          JSR PUT_CHAR_BACK_BUFFER
          LDX REGX_BUF
          DEX
          BPL .LOOPX
    LDY REGY_BUF
    DEY
    BPL .LOOPY
  RTS

;RANDOMDIR JSR  RANDOM
;          AND  #1
;          TAX
;          LDA  DIR,X
;          RTS
                    
RANDOM  LDA   EORN+1
        BEQ   EORY
        ASL
        BEQ   EORN ;if the input was $80, skip the EOR
        BCC   EORN
EORY      EOR   #$1D
EORN    STA   EORN+1
        RTS

; random number generator
; move routine
; get px/py
; add mx/my
; get point
; if point( ne expected
;  if point(ver) ne expected
;   swap ver
;  if point(hor) ne expected
;   swap hor
 
; clear screen
; fill lines in corners as 0
; fill 2 lines inside with 3
; you are 

HOR_TAB:
!FILL 4,00*8
!FILL 4,01*8
!FILL 4,02*8
!FILL 4,03*8
!FILL 4,04*8
!FILL 4,05*8
!FILL 4,06*8
!FILL 4,07*8
!FILL 4,08*8
!FILL 4,09*8
!FILL 4,10*8
!FILL 4,11*8
!FILL 4,12*8
!FILL 4,13*8
!FILL 4,14*8
!FILL 4,15*8
!FILL 4,16*8
!FILL 4,17*8
!FILL 4,18*8
!FILL 4,19*8
!FILL 4,20*8
!FILL 4,21*8
!FILL 4,22*8
!FILL 4,23*8
!FILL 4,24*8
!FILL 4,25*8
!FILL 4,26*8
!FILL 4,27*8
!FILL 4,28*8
!FILL 4,29*8
!FILL 4,30*8
!FILL 4,31*8
!FILL 4,00*8
!FILL 4,01*8
!FILL 4,02*8
!FILL 4,03*8
!FILL 4,04*8
!FILL 4,05*8
!FILL 4,06*8
!FILL 4,07*8

AND_00_TAB:
!for I = 1 TO 80
!BYTE $3F,$CF,$F3,$FC
!end

OR_11_TAB:
!for I = 1 TO 80
!BYTE $C0,$30,$0C,$03
!end

OR_01_TAB:
!for I = 1 TO 80
!BYTE $40,$10,$04,$01
!end

OR_10_TAB:
!for I = 1 TO 80
!BYTE $80,$20,$08,$02
!end

VER_TAB_LO_HI
!for I = 0 TO 24
!BYTE >(SCRN0+(I*320)+0),>(SCRN0+(I*320)+1),>(SCRN0+(I*320)+2),>(SCRN0+(I*320)+3),>(SCRN0+(I*320)+4),>(SCRN0+(I*320)+5),>(SCRN0+(I*320)+6),>(SCRN0+(I*320)+7)
!end

VER_TAB_HI_HI
!for I = 0 TO 24
!BYTE >((SCRN0+256)+(I*320)+0),>((SCRN0+256)+(I*320)+1),>((SCRN0+256)+(I*320)+2),>((SCRN0+256)+(I*320)+3),>((SCRN0+256)+(I*320)+4),>((SCRN0+256)+(I*320)+5),>((SCRN0+256)+(I*320)+6),>((SCRN0+256)+(I*320)+7)
!end

VER_TAB_LO_LO
!for I = 0 TO 24
!BYTE <(SCRN0+(I*320)+0),<(SCRN0+(I*320)+1),<(SCRN0+(I*320)+2),<(SCRN0+(I*320)+3),<(SCRN0+(I*320)+4),<(SCRN0+(I*320)+5),<(SCRN0+(I*320)+6),<(SCRN0+(I*320)+7)
!end

VER_BULLET_TAB_LO_HI
!for I = 0 TO 24
!BYTE >(SCRN0+(I*320)+0),>(SCRN0+(I*320)+2),>(SCRN0+(I*320)+4),>(SCRN0+(I*320)+6)
!end

VER_BULLET_TAB_HI_HI
!for I = 0 TO 24
!BYTE >((SCRN0+256)+(I*320)+0),>((SCRN0+256)+(I*320)+2),>((SCRN0+256)+(I*320)+4),>((SCRN0+256)+(I*320)+6)
!end

VER_BULLET_TAB_LO
!for I = 0 TO 24
!BYTE <(SCRN0+(I*320)+0),<(SCRN0+(I*320)+2),<(SCRN0+(I*320)+4),<(SCRN0+(I*320)+6)
!end

CHAR
!BYTE %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
!BYTE %01010101,%01010101,%01010101,%01010101,%01010101,%01010101,%01010101,%01010101
!BYTE %11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111,%11111111
!BYTE %10101010,%10101010,%10101010,%10101010,%10101010,%10101010,%10101010,%10101010

MAP_LO
!BYTE <(MAP+(40*00)),<(MAP+(40*01)),<(MAP+(40*02)),<(MAP+(40*03)),<(MAP+(40*04)),<(MAP+(40*05)),<(MAP+(40*06)),<(MAP+(40*07)),<(MAP+(40*08)),<(MAP+(40*09)),<(MAP+(40*10)),<(MAP+(40*11)),<(MAP+(40*12))
!BYTE <(MAP+(40*13)),<(MAP+(40*14)),<(MAP+(40*15)),<(MAP+(40*16)),<(MAP+(40*17)),<(MAP+(40*18)),<(MAP+(40*19)),<(MAP+(40*20)),<(MAP+(40*21)),<(MAP+(40*22)),<(MAP+(40*23)),<(MAP+(40*24))

MAP_HI
!BYTE >(MAP+(40*00)),>(MAP+(40*01)),>(MAP+(40*02)),>(MAP+(40*03)),>(MAP+(40*04)),>(MAP+(40*05)),>(MAP+(40*06)),>(MAP+(40*07)),>(MAP+(40*08)),>(MAP+(40*09)),>(MAP+(40*10)),>(MAP+(40*11)),>(MAP+(40*12))
!BYTE >(MAP+(40*13)),>(MAP+(40*14)),>(MAP+(40*15)),>(MAP+(40*16)),>(MAP+(40*17)),>(MAP+(40*18)),>(MAP+(40*19)),>(MAP+(40*20)),>(MAP+(40*21)),>(MAP+(40*22)),>(MAP+(40*23)),>(MAP+(40*24))


;fffffflllllllllm
;llllllllmmmmmmmm

; convert from 16bit pos to 8bit pos - 6 bit fraction / 9 bit 

;temphlo !byte 0
;temphhi !byte 0

!ZONE POS16_TO_POS9
POS16_TO_POS9 ; convert from 16bit pos to 9bit pos

  LDA VLO
  ASL
  LDA VHI
  ROL
  TAY

  LDA HLO
  ASL
  LDA HHI
  ROL
  TAX

  LDA #0
  ADC #0
  RTS

!ZONE POS9_TO_SPRITE_01
POS9_TO_SPRITE_01 ; convert from 9 bit number to sprite

 STA REGA_BUF

 LDA ROT
 STA SPRDEF0
 CLC
 ADC #56
 STA SPRDEF1

  TYA
  CLC ; not needed?
  ADC #VOFFSET
  STA S0Y
  STA S1Y

  TXA
  CLC ; not needed?
  ADC #HOFFSET
  STA S0X
  STA S1X

 LAX #0
 ADC REGA_BUF 
 BEQ .CONT
    LDX #%11
.CONT
  STX SPRXMSB
 RTS

!ZONE POS9_TO_SPRITE_23
POS9_TO_SPRITE_23 ; convert from 9 bit number to sprite

 STA REGA_BUF

 LDA ROT
 STA SPRDEF2
 CLC
 ADC #56
 STA SPRDEF3 

  TYA
  CLC ; not needed
  ADC #VOFFSET
  STA S2Y
  STA S3Y

  TXA
  CLC ; not needed
  ADC #HOFFSET
  STA S2X
  STA S3X

 LDX SPRXMSB
 LDA #0
 ADC REGA_BUF 
 BEQ .CONT
    TXA
    ORA #%1100
    TAX
.CONT
  STX SPRXMSB
 RTS

!ZONE MOVE_TANK
MOVE_TANK LDA HLO
        LDY ROT
        LDX JOYH
        BEQ .MOVEV
        BMI .LEFT

.RIGHT    INY
          CPY #MAX_ROT
      BCC .HCONT
      LDY #0
      BVC .HCONT

.LEFT     DEY
          BPL .HCONT
            LDY #MAX_ROT

.HCONT  STY ROT

.MOVEV  LDX JOYV
        BEQ .EXIT
        BMI .UP

.DOWN   LAX SINTAB56,Y
        ASL
        TXA
        ROR
        EOR #$FF
        TAX
        INX
        STX REGA_BUF
        LAX COSTAB56,Y
        ASL
        TXA
        ROR
        EOR #$FF
        TAX
        INX
        STX REGY_BUF
        BVC .CONT

.UP     LDA SINTAB56,Y
        STA REGA_BUF
        LDA COSTAB56,Y
        STA REGY_BUF

.CONT   LDX VLO
        LDY VHI
        LDA REGA_BUF
        JSR ADDSUB16
        STX VLO
        STY VHI

        LDX HLO
        LDY HHI
        LDA REGY_BUF
        JSR ADDSUB16
        STX HLO
        STY HHI
       
.EXIT   RTS

; rotate
; vlo
; vhi
; hlo
; hhi


; X = LO
; Y = HI
; A=VAL TO ADD

!ZONE ADDSUB16
ADDSUB16  BMI .SUB16
          BEQ .EXIT
.ADD16      STX REGX_BUF
            CLC
            ADC REGX_BUF
            TAX
            BCC .EXIT
              INY
            RTS
.SUB16      EOR #$FF
            SEC
            ADC #0
            STA REGA_BUF
            TXA
            SEC
            SBC REGA_BUF
            TAX
            BCS .EXIT
              DEY
.EXIT       RTS

; next = join walls

BUILD_MAP LDA #>(MAP+999)
      STA .MAPADDR +2
      LDA #<(MAP+999)
      STA .MAPADDR +1
      LDY #124
.YLOOP      STY REGY_BUF
        LDA MAPBIT,Y
        LDX #7
.XLOOP        LDY #0
          LSR
          BCC .MAPADDR
            INY
.MAPADDR      STY MAP
          LDY .MAPADDR +1
          BNE .CONT
            DEC .MAPADDR +2
.CONT       DEC .MAPADDR +1
          DEX
          BPL .XLOOP
        LDY REGY_BUF
        DEY
        BPL .YLOOP
      RTS

HEXCHAR     LDA   HEX0,Y
HEX_NUMBER0 STA   $ABCD,X
      LDA   HEX1,Y
HEX_NUMBER1 STA   $ABCD,X
      LDA   HEX2,Y
HEX_NUMBER2 STA   $ABCD,X
      LDA   HEX3,Y
HEX_NUMBER3 STA   $ABCD,X
      LDA   HEX4,Y
HEX_NUMBER4 STA   $ABCD,X
      RTS

HEX16 STY   REGY_BUF  ; Y = YPOS / A = HI / X = LO
      STX   REGX_BUF    
      LDX   #0
      JSR   HEX8
      LDA   REGX_BUF
      LDY   REGY_BUF
      LDX   #16
      JSR   HEX8
      RTS

HEX8 ; A = NUM / Y = YPOS / X = XPOS

      STA   REGA_BUF
      LDA   VER_TAB_LO_LO+0,Y
      STA   HEX_NUMBER0+1
      
      LDA   VER_TAB_LO_HI+0,Y
      STA   HEX_NUMBER0+2

      LDA   VER_TAB_LO_LO+1,Y
      STA   HEX_NUMBER1+1
      
      LDA   VER_TAB_LO_HI+1,Y 
      STA   HEX_NUMBER1+2

      LDA   VER_TAB_LO_LO+2,Y
      STA   HEX_NUMBER2+1
      
      LDA   VER_TAB_LO_HI+2,Y 
      STA   HEX_NUMBER2+2

      LDA   VER_TAB_LO_LO+3,Y
      STA   HEX_NUMBER3+1
      
      LDA   VER_TAB_LO_HI+3,Y 
      STA   HEX_NUMBER3+2

      LDA   VER_TAB_LO_LO+4,Y
      STA   HEX_NUMBER4+1
      
      LDA   VER_TAB_LO_HI+4,Y 
      STA   HEX_NUMBER4+2

      LDA   REGA_BUF
      LSR
      LSR
      LSR
      LSR
      TAY
      JSR   HEXCHAR

      TXA
      CLC
      ADC   #8
      TAX

      LDA   REGA_BUF
      AND   #15
      TAY
      JSR   HEXCHAR

      RTS

HEX0  !BYTE %10000000,%10100010,%10000000,%10000000,%10001000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000010,%10000000,%10000000 
HEX1  !BYTE %10001000,%10000010,%10101000,%10101000,%10001000,%10001010,%10001010,%10101000,%10001000,%10001000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010 
HEX2  !BYTE %10001000,%10100010,%10000000,%10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10000000,%10000010,%10001010,%10001000,%10000000,%10000000
HEX3  !BYTE %10001000,%10100010,%10001010,%10101000,%10101000,%10101000,%10001000,%10101000,%10001000,%10101000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010
HEX4  !BYTE %10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10101000,%10000000,%10000000,%10001000,%10000000,%10100000,%10000010,%10000000,%10001010

MAPBIT
 !byte %11111111,%11111111,%11111111,%11111111,%11111111
 !byte %11111111,%00000000,%00000000,%00000000,%00000001
 !byte %11111111,%00000000,%00000000,%00000000,%00000001
 !byte %11111111,%00000000,%00000000,%00000000,%00000001
 !byte %11111111,%00000000,%00000000,%00000000,%00000001
 !byte %11111111,%00000000,%00000000,%00000000,%00000001
 !byte %11111111,%00000000,%00000000,%00000000,%00000001
 !byte %11111111,%00000000,%00000000,%00000000,%00000001
 !byte %11111111,%00000000,%00000000,%00000000,%00000001
 !byte %11111111,%00000000,%00000000,%00000000,%00000001
 !byte %11111111,%00000000,%00000000,%00000000,%00000001
 !byte %10000000,%00000000,%00000000,%00000000,%00000001
 !byte %10000000,%00000000,%00000000,%00000000,%00000001
 !byte %10000000,%00000000,%00000000,%00000000,%00000001
 !byte %10000000,%00000000,%00000000,%00000000,%00000001
 !byte %10000000,%00000000,%00000000,%00000000,%00000001
 !byte %10000000,%00000000,%00000000,%00000000,%00000001
 !byte %10000000,%00000000,%00000000,%00000000,%00000001
 !byte %10000000,%00000000,%00000000,%00000000,%00000001
 !byte %10000000,%00000000,%00000000,%00000000,%00000001
 !byte %10000000,%00000000,%00000000,%00000000,%00000001
 !byte %10000000,%00000000,%00000000,%00000000,%00000001
 !byte %10000000,%00000000,%00000000,%00000000,%00000001
 !byte %10000000,%00000000,%00000000,%00000000,%00000001
 !byte %11111111,%11111111,%11111111,%11111111,%11111111

SINTAB56:
 !byte 0 ; 0
 !byte 7 ; 1
 !byte 14 ; 2
 !byte 21 ; 3
 !byte 27 ; 4
 !byte 34 ; 5
 !byte 39 ; 6
 !byte 45 ; 7
 !byte 50 ; 8
 !byte 54 ; 9
 !byte 57 ; 10
 !byte 60 ; 11
 !byte 62 ; 12
 !byte 63 ; 13
COSTAB56:
 !byte 63 ; 14
 !byte 63 ; 15
 !byte 62 ; 16
 !byte 60 ; 17
 !byte 57 ; 18
 !byte 54 ; 19
 !byte 50 ; 20
 !byte 45 ; 21
 !byte 39 ; 22
 !byte 33 ; 23
 !byte 27 ; 24
 !byte 21 ; 25
 !byte 14 ; 26
 !byte 7 ; 27
 !byte 0 ; 28
 !byte -7 ; 29
 !byte -14 ; 30
 !byte -21 ; 31
 !byte -27 ; 32
 !byte -34 ; 33
 !byte -39 ; 34
 !byte -45 ; 35
 !byte -50 ; 36
 !byte -54 ; 37
 !byte -57 ; 38
 !byte -60 ; 39
 !byte -62 ; 40
 !byte -63 ; 41
 !byte -63 ; 42
 !byte -63 ; 43
 !byte -62 ; 44
 !byte -60 ; 45
 !byte -57 ; 46
 !byte -54 ; 47
 !byte -49 ; 48
 !byte -45 ; 49
 !byte -39 ; 50
 !byte -33 ; 51
 !byte -27 ; 52
 !byte -20 ; 53
 !byte -14 ; 54
 !byte -7 ; 55

 !byte 0 ; 0
 !byte 7 ; 1
 !byte 14 ; 2
 !byte 21 ; 3
 !byte 27 ; 4
 !byte 34 ; 5
 !byte 39 ; 6
 !byte 45 ; 7
 !byte 50 ; 8
 !byte 54 ; 9
 !byte 57 ; 10
 !byte 60 ; 11
 !byte 62 ; 12
 !byte 63 ; 13
 
*= 16384
!byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7f,$ff,$f0,$40,$00,$10,$80,$00,$08,$80,$00,$08,$80,$00,$08,$80,$00,$08,$80,$00,$08,$80,$00,$08,$80,$00,$08,$40,$00,$10,$7f,$ff,$f0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3f,$00,$00,$40,$fc,$00,$40,$03,$f0,$80,$00,$08,$80,$00,$08,$80,$00,$08,$80,$00,$08,$80,$00,$08,$80,$00,$08,$80,$00,$08,$7e,$00,$10,$01,$f8,$10,$00,$07,$e0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$1e,$00,$00,$21,$c0,$00,$40,$38,$00,$40,$07,$80,$80,$00,$78,$80,$9c,$08,$81,$90,$08,$80,$9c,$08,$80,$94,$08,$81,$dc,$08,$e0,$00,$08,$1e,$00,$10,$01,$e0,$10,$00,$1c,$20,$00,$03,$c0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$0e,$00,$00,$11,$c0,$00,$20,$30,$00,$40,$08,$00,$40,$06,$00,$80,$01,$c0,$80,$9c,$38,$81,$84,$08,$80,$84,$08,$80,$84,$08,$e1,$c4,$08,$1c,$00,$08,$03,$00,$10,$00,$80,$10,$00,$60,$20,$00,$1c,$40,$00,$03,$80,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$04,$00,$00,$0b,$00,$00,$10,$c0,$00,$20,$30,$00,$40,$0c,$00,$40,$03,$00,$80,$00,$c0,$80,$9c,$30,$81,$94,$08,$80,$9c,$08,$80,$94,$08,$61,$dc,$08,$18,$00,$08,$06,$00,$10,$01,$80,$10,$00,$60,$20,$00,$18,$40,$00,$06,$80,$00,$01,$00,$00,$00,$00,$01
!byte $00,$00,$00,$06,$00,$00,$09,$80,$00,$10,$40,$00,$20,$30,$00,$40,$0c,$00,$40,$02,$00,$80,$01,$80,$80,$9c,$40,$81,$94,$30,$80,$9c,$08,$60,$84,$08,$11,$dc,$08,$0c,$00,$08,$03,$00,$10,$00,$80,$10,$00,$60,$20,$00,$10,$40,$00,$0c,$80,$00,$03,$00,$00,$00,$00,$01
!byte $01,$00,$00,$06,$80,$00,$08,$40,$00,$10,$30,$00,$20,$08,$00,$40,$04,$00,$40,$02,$00,$80,$01,$00,$81,$cc,$c0,$80,$54,$20,$41,$d4,$10,$21,$14,$08,$19,$dc,$08,$04,$00,$08,$02,$00,$10,$01,$00,$10,$00,$80,$20,$00,$60,$40,$00,$10,$80,$00,$0b,$00,$00,$04,$00,$01
!byte $01,$80,$00,$06,$40,$00,$08,$20,$00,$10,$10,$00,$20,$08,$00,$40,$04,$00,$40,$02,$00,$80,$01,$00,$81,$c8,$80,$40,$58,$40,$21,$c8,$20,$11,$08,$10,$09,$dc,$08,$04,$00,$08,$02,$00,$10,$01,$00,$10,$00,$80,$20,$00,$40,$40,$00,$20,$80,$00,$13,$00,$00,$0c,$00,$01
!byte $01,$c0,$00,$06,$20,$00,$08,$10,$00,$10,$10,$00,$20,$08,$00,$40,$04,$00,$40,$02,$00,$80,$01,$00,$41,$dc,$80,$20,$44,$40,$21,$dc,$20,$11,$10,$20,$09,$dc,$10,$04,$00,$08,$02,$00,$10,$01,$00,$10,$00,$80,$20,$00,$40,$40,$00,$40,$80,$00,$23,$00,$00,$1c,$00,$01
!byte $01,$e0,$00,$06,$10,$00,$08,$10,$00,$10,$08,$00,$20,$08,$00,$40,$04,$00,$40,$02,$00,$20,$02,$00,$21,$dd,$00,$10,$44,$80,$09,$dc,$80,$09,$04,$40,$05,$dc,$20,$02,$00,$20,$02,$00,$10,$01,$00,$10,$00,$80,$20,$00,$80,$40,$00,$40,$80,$00,$43,$00,$00,$3c,$00,$01
!byte $01,$f0,$00,$06,$08,$00,$08,$08,$00,$10,$04,$00,$20,$04,$00,$40,$02,$00,$40,$02,$00,$20,$01,$00,$21,$d4,$80,$10,$54,$80,$11,$dc,$40,$09,$04,$40,$09,$c4,$20,$04,$00,$20,$02,$00,$10,$02,$00,$10,$01,$00,$20,$01,$00,$40,$00,$80,$80,$00,$83,$00,$00,$7c,$00,$01
!byte $01,$f8,$00,$06,$08,$00,$08,$08,$00,$10,$04,$00,$20,$04,$00,$20,$02,$00,$20,$02,$00,$10,$01,$00,$11,$dd,$00,$08,$51,$00,$09,$dc,$80,$05,$04,$80,$05,$dc,$40,$04,$00,$40,$02,$00,$20,$02,$00,$20,$01,$00,$20,$01,$00,$40,$00,$80,$80,$00,$83,$00,$00,$fc,$00,$01
!byte $01,$fc,$00,$06,$04,$00,$08,$04,$00,$10,$04,$00,$10,$02,$00,$10,$02,$00,$10,$02,$00,$08,$01,$00,$09,$dd,$00,$08,$51,$00,$05,$dd,$00,$05,$14,$80,$05,$dc,$80,$04,$00,$80,$02,$00,$40,$02,$00,$40,$02,$00,$40,$01,$00,$40,$01,$00,$80,$01,$03,$00,$01,$fc,$00,$01
!byte $01,$fc,$00,$06,$02,$00,$08,$02,$00,$08,$02,$00,$08,$02,$00,$08,$02,$00,$08,$02,$00,$08,$01,$00,$05,$dd,$00,$04,$45,$00,$05,$c5,$00,$05,$05,$00,$05,$c5,$00,$04,$00,$80,$02,$00,$80,$02,$00,$80,$02,$00,$80,$02,$00,$80,$02,$00,$80,$02,$03,$00,$01,$fc,$00,$01
!byte $01,$fc,$00,$06,$03,$00,$04,$01,$00,$04,$01,$00,$04,$01,$00,$04,$01,$00,$04,$01,$00,$04,$01,$00,$05,$dd,$00,$04,$55,$00,$05,$dd,$00,$05,$15,$00,$05,$dd,$00,$04,$01,$00,$04,$01,$00,$04,$01,$00,$04,$01,$00,$04,$01,$00,$04,$01,$00,$06,$03,$00,$01,$fc,$00,$01
!byte $01,$fc,$00,$02,$03,$00,$02,$00,$80,$02,$00,$80,$02,$00,$80,$02,$00,$80,$02,$00,$80,$04,$b8,$80,$04,$a9,$00,$04,$e9,$00,$04,$01,$00,$04,$09,$00,$04,$f9,$00,$08,$49,$00,$08,$02,$00,$08,$02,$00,$08,$02,$00,$08,$02,$00,$08,$02,$00,$06,$02,$00,$01,$fc,$00,$01
!byte $01,$fc,$00,$01,$03,$00,$01,$00,$80,$01,$00,$40,$02,$00,$40,$02,$00,$40,$02,$00,$40,$02,$b8,$80,$04,$a8,$80,$04,$f8,$80,$04,$01,$00,$08,$09,$00,$08,$f9,$00,$08,$49,$00,$10,$02,$00,$10,$02,$00,$10,$02,$00,$10,$02,$00,$08,$04,$00,$06,$04,$00,$01,$fc,$00,$01
!byte $00,$fc,$00,$00,$83,$00,$00,$80,$80,$01,$00,$40,$01,$00,$20,$01,$00,$20,$02,$00,$20,$02,$f8,$40,$04,$80,$40,$08,$80,$40,$08,$00,$80,$10,$08,$80,$10,$f9,$00,$10,$4a,$00,$20,$02,$00,$20,$04,$00,$20,$04,$00,$10,$04,$00,$08,$08,$00,$06,$08,$00,$01,$f8,$00,$01
!byte $00,$7c,$00,$00,$83,$00,$00,$80,$80,$01,$00,$40,$01,$00,$20,$02,$00,$10,$02,$00,$20,$04,$f8,$20,$04,$a8,$40,$08,$f8,$40,$08,$00,$80,$10,$08,$80,$10,$f9,$00,$20,$49,$00,$20,$02,$00,$40,$02,$00,$20,$04,$00,$10,$04,$00,$08,$08,$00,$06,$08,$00,$01,$f0,$00,$01
!byte $00,$3c,$00,$00,$43,$00,$00,$40,$80,$00,$80,$40,$01,$00,$20,$01,$00,$10,$02,$00,$10,$04,$f8,$20,$04,$a8,$20,$08,$e8,$40,$08,$00,$80,$10,$08,$80,$20,$f9,$00,$20,$4a,$00,$40,$02,$00,$40,$04,$00,$20,$04,$00,$10,$08,$00,$08,$10,$00,$06,$10,$00,$01,$e0,$00,$01
!byte $00,$1c,$00,$00,$23,$00,$00,$40,$80,$00,$80,$40,$00,$80,$20,$01,$00,$10,$02,$00,$10,$04,$f8,$08,$08,$88,$10,$10,$78,$20,$10,$00,$40,$20,$e8,$40,$40,$a8,$80,$80,$b9,$00,$40,$02,$00,$40,$04,$00,$20,$08,$00,$10,$08,$00,$08,$10,$00,$06,$20,$00,$01,$c0,$00,$01
!byte $00,$0c,$00,$00,$13,$00,$00,$20,$80,$00,$40,$40,$00,$80,$20,$01,$00,$10,$02,$00,$10,$04,$08,$08,$08,$f8,$08,$10,$48,$10,$20,$00,$20,$40,$e8,$40,$80,$a8,$80,$80,$b9,$00,$40,$02,$00,$40,$04,$00,$20,$08,$00,$10,$10,$00,$08,$20,$00,$06,$40,$00,$01,$80,$00,$01
!byte $00,$04,$00,$00,$0b,$00,$00,$30,$80,$00,$40,$40,$00,$80,$20,$01,$00,$10,$02,$00,$10,$04,$e8,$08,$08,$a8,$08,$30,$b8,$08,$40,$00,$10,$80,$e8,$60,$80,$a8,$80,$80,$b9,$00,$40,$02,$00,$40,$04,$00,$20,$08,$00,$10,$10,$00,$08,$60,$00,$06,$80,$00,$01,$00,$00,$01
!byte $00,$00,$00,$00,$03,$00,$00,$0c,$80,$00,$10,$40,$00,$60,$20,$00,$80,$10,$03,$00,$10,$04,$f8,$08,$18,$a8,$08,$60,$a8,$08,$80,$00,$08,$80,$e8,$30,$80,$a8,$c0,$80,$b9,$00,$40,$06,$00,$40,$08,$00,$20,$30,$00,$10,$40,$00,$09,$80,$00,$06,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$03,$00,$00,$0c,$80,$00,$30,$40,$00,$c0,$20,$01,$00,$10,$06,$00,$10,$18,$f8,$08,$60,$20,$08,$80,$e0,$08,$80,$00,$08,$80,$e8,$08,$80,$a8,$30,$80,$b8,$c0,$40,$03,$00,$40,$04,$00,$20,$18,$00,$10,$60,$00,$09,$80,$00,$06,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$03,$80,$00,$0c,$40,$00,$30,$20,$01,$c0,$10,$06,$00,$10,$18,$b8,$08,$e0,$a8,$08,$80,$e8,$08,$80,$00,$08,$80,$e8,$08,$80,$a8,$38,$80,$b8,$c0,$40,$03,$00,$40,$1c,$00,$20,$60,$00,$11,$80,$00,$0e,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$c0,$00,$1c,$20,$01,$e0,$10,$0e,$00,$10,$f0,$b8,$08,$80,$a8,$08,$80,$f8,$08,$80,$00,$08,$80,$e8,$08,$80,$a8,$08,$80,$b8,$78,$40,$03,$80,$40,$3c,$00,$21,$c0,$00,$1e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$e0,$01,$f8,$10,$7e,$00,$10,$80,$f8,$08,$80,$80,$08,$80,$80,$08,$80,$00,$08,$80,$e8,$08,$80,$a8,$08,$80,$b8,$08,$40,$03,$f0,$40,$fc,$00,$3f,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7f,$ff,$f0,$40,$00,$10,$80,$e8,$08,$80,$a8,$08,$80,$b8,$08,$80,$00,$08,$80,$f8,$08,$80,$a8,$08,$80,$f8,$08,$40,$00,$10,$7f,$ff,$f0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3f,$00,$00,$40,$fc,$00,$40,$03,$f0,$80,$00,$08,$80,$9c,$08,$81,$90,$08,$80,$9c,$08,$80,$84,$08,$81,$dc,$08,$80,$00,$08,$7e,$00,$10,$01,$f8,$10,$00,$07,$e0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$1e,$00,$00,$21,$c0,$00,$40,$38,$00,$40,$07,$80,$80,$00,$78,$80,$9c,$08,$81,$90,$08,$80,$9c,$08,$80,$94,$08,$81,$dc,$08,$e0,$00,$08,$1e,$00,$10,$01,$e0,$10,$00,$1c,$20,$00,$03,$c0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$0e,$00,$00,$11,$c0,$00,$20,$30,$00,$40,$08,$00,$40,$06,$00,$80,$01,$c0,$80,$9c,$38,$81,$84,$08,$80,$84,$08,$80,$84,$08,$e1,$c4,$08,$1c,$00,$08,$03,$00,$10,$00,$80,$10,$00,$60,$20,$00,$1c,$40,$00,$03,$80,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$04,$00,$00,$0b,$00,$00,$10,$c0,$00,$20,$30,$00,$40,$0c,$00,$40,$03,$00,$80,$00,$c0,$80,$9c,$30,$81,$94,$08,$80,$9c,$08,$80,$94,$08,$61,$dc,$08,$18,$00,$08,$06,$00,$10,$01,$80,$10,$00,$60,$20,$00,$18,$40,$00,$06,$80,$00,$01,$00,$00,$00,$00,$01
!byte $00,$00,$00,$06,$00,$00,$09,$80,$00,$10,$40,$00,$20,$30,$00,$40,$0c,$00,$40,$02,$00,$80,$01,$80,$80,$9c,$40,$81,$94,$30,$80,$9c,$08,$60,$84,$08,$11,$dc,$08,$0c,$00,$08,$03,$00,$10,$00,$80,$10,$00,$60,$20,$00,$10,$40,$00,$0c,$80,$00,$03,$00,$00,$00,$00,$01
!byte $01,$00,$00,$06,$80,$00,$08,$40,$00,$10,$30,$00,$20,$08,$00,$40,$04,$00,$40,$02,$00,$80,$01,$00,$81,$cc,$c0,$80,$54,$20,$41,$d4,$10,$21,$14,$08,$19,$dc,$08,$04,$00,$08,$02,$00,$10,$01,$00,$10,$00,$80,$20,$00,$60,$40,$00,$10,$80,$00,$0b,$00,$00,$04,$00,$01
!byte $01,$80,$00,$06,$40,$00,$08,$20,$00,$10,$10,$00,$20,$08,$00,$40,$04,$00,$40,$02,$00,$80,$01,$00,$81,$c8,$80,$40,$58,$40,$21,$c8,$20,$11,$08,$10,$09,$dc,$08,$04,$00,$08,$02,$00,$10,$01,$00,$10,$00,$80,$20,$00,$40,$40,$00,$20,$80,$00,$13,$00,$00,$0c,$00,$01
!byte $01,$c0,$00,$06,$20,$00,$08,$10,$00,$10,$10,$00,$20,$08,$00,$40,$04,$00,$40,$02,$00,$80,$01,$00,$41,$dc,$80,$20,$44,$40,$21,$dc,$20,$11,$10,$20,$09,$dc,$10,$04,$00,$08,$02,$00,$10,$01,$00,$10,$00,$80,$20,$00,$40,$40,$00,$40,$80,$00,$23,$00,$00,$1c,$00,$01
!byte $01,$e0,$00,$06,$10,$00,$08,$10,$00,$10,$08,$00,$20,$08,$00,$40,$04,$00,$40,$02,$00,$20,$02,$00,$21,$dd,$00,$10,$44,$80,$09,$dc,$80,$09,$04,$40,$05,$dc,$20,$02,$00,$20,$02,$00,$10,$01,$00,$10,$00,$80,$20,$00,$80,$40,$00,$40,$80,$00,$43,$00,$00,$3c,$00,$01
!byte $01,$f0,$00,$06,$08,$00,$08,$08,$00,$10,$04,$00,$20,$04,$00,$40,$02,$00,$40,$02,$00,$20,$01,$00,$21,$d4,$80,$10,$54,$80,$11,$dc,$40,$09,$04,$40,$09,$c4,$20,$04,$00,$20,$02,$00,$10,$02,$00,$10,$01,$00,$20,$01,$00,$40,$00,$80,$80,$00,$83,$00,$00,$7c,$00,$01
!byte $01,$f8,$00,$06,$08,$00,$08,$08,$00,$10,$04,$00,$20,$04,$00,$20,$02,$00,$20,$02,$00,$10,$01,$00,$11,$dd,$00,$08,$51,$00,$09,$dc,$80,$05,$04,$80,$05,$dc,$40,$04,$00,$40,$02,$00,$20,$02,$00,$20,$01,$00,$20,$01,$00,$40,$00,$80,$80,$00,$83,$00,$00,$fc,$00,$01
!byte $01,$fc,$00,$06,$04,$00,$08,$04,$00,$10,$04,$00,$10,$02,$00,$10,$02,$00,$10,$02,$00,$08,$01,$00,$09,$dd,$00,$08,$51,$00,$05,$dd,$00,$05,$14,$80,$05,$dc,$80,$04,$00,$80,$02,$00,$40,$02,$00,$40,$02,$00,$40,$01,$00,$40,$01,$00,$80,$01,$03,$00,$01,$fc,$00,$01
!byte $01,$fc,$00,$06,$02,$00,$08,$02,$00,$08,$02,$00,$08,$02,$00,$08,$02,$00,$08,$02,$00,$08,$01,$00,$05,$dd,$00,$04,$45,$00,$05,$c5,$00,$05,$05,$00,$05,$c5,$00,$04,$00,$80,$02,$00,$80,$02,$00,$80,$02,$00,$80,$02,$00,$80,$02,$00,$80,$02,$03,$00,$01,$fc,$00,$01
!byte $01,$fc,$00,$06,$03,$00,$04,$01,$00,$04,$01,$00,$04,$01,$00,$04,$01,$00,$04,$01,$00,$04,$01,$00,$05,$dd,$00,$05,$45,$00,$05,$dd,$00,$05,$51,$00,$05,$dd,$00,$04,$01,$00,$04,$01,$00,$04,$01,$00,$04,$01,$00,$04,$01,$00,$04,$01,$00,$06,$03,$00,$01,$fc,$00,$01
!byte $01,$fc,$00,$02,$03,$00,$02,$00,$80,$02,$00,$80,$02,$00,$80,$02,$00,$80,$02,$00,$80,$04,$90,$80,$04,$f9,$00,$04,$81,$00,$04,$01,$00,$04,$b9,$00,$04,$a9,$00,$08,$e9,$00,$08,$02,$00,$08,$02,$00,$08,$02,$00,$08,$02,$00,$08,$02,$00,$06,$02,$00,$01,$fc,$00,$01
!byte $01,$fc,$00,$01,$03,$00,$01,$00,$80,$02,$00,$40,$02,$00,$40,$02,$00,$40,$02,$00,$40,$04,$90,$80,$04,$f8,$80,$04,$80,$80,$04,$01,$00,$08,$f9,$00,$08,$a9,$00,$08,$ea,$00,$10,$02,$00,$10,$02,$00,$10,$02,$00,$10,$04,$00,$08,$04,$00,$06,$04,$00,$01,$fc,$00,$01
!byte $00,$fc,$00,$00,$83,$00,$00,$80,$80,$01,$00,$40,$01,$00,$20,$01,$00,$20,$02,$00,$20,$02,$90,$40,$04,$f8,$40,$08,$80,$40,$08,$00,$80,$10,$08,$80,$10,$09,$00,$10,$fa,$00,$20,$02,$00,$20,$04,$00,$20,$04,$00,$10,$04,$00,$08,$08,$00,$06,$08,$00,$01,$f8,$00,$01
!byte $00,$7c,$00,$00,$83,$00,$00,$80,$80,$01,$00,$40,$01,$00,$20,$02,$00,$10,$02,$00,$20,$04,$90,$20,$04,$f8,$40,$08,$80,$40,$08,$00,$80,$10,$f8,$80,$10,$a9,$00,$20,$f9,$00,$20,$02,$00,$40,$02,$00,$20,$04,$00,$10,$04,$00,$08,$08,$00,$06,$08,$00,$01,$f0,$00,$01
!byte $00,$3c,$00,$00,$43,$00,$00,$40,$80,$00,$80,$40,$01,$00,$20,$01,$00,$10,$02,$00,$10,$02,$90,$20,$04,$f8,$20,$08,$80,$40,$08,$00,$80,$10,$b8,$80,$20,$a9,$00,$20,$f9,$00,$40,$02,$00,$40,$04,$00,$20,$04,$00,$10,$08,$00,$08,$10,$00,$06,$10,$00,$01,$e0,$00,$01
!byte $00,$1c,$00,$00,$23,$00,$00,$40,$80,$00,$80,$40,$00,$80,$20,$01,$00,$10,$02,$00,$10,$04,$e8,$08,$08,$a8,$10,$10,$b8,$20,$10,$00,$40,$20,$f0,$40,$40,$88,$80,$80,$f9,$00,$40,$02,$00,$40,$04,$00,$20,$08,$00,$10,$08,$00,$08,$10,$00,$06,$20,$00,$01,$c0,$00,$01
!byte $00,$0c,$00,$00,$13,$00,$00,$20,$80,$00,$40,$40,$00,$80,$20,$01,$00,$10,$02,$00,$10,$04,$e8,$08,$08,$a8,$08,$10,$b8,$10,$20,$00,$20,$40,$90,$40,$80,$f8,$80,$80,$81,$00,$40,$02,$00,$40,$04,$00,$20,$08,$00,$10,$10,$00,$08,$20,$00,$06,$40,$00,$01,$80,$00,$01
!byte $00,$04,$00,$00,$0b,$00,$00,$30,$80,$00,$40,$40,$00,$80,$20,$01,$00,$10,$02,$00,$10,$04,$e8,$08,$08,$a8,$08,$30,$b8,$08,$40,$00,$10,$80,$e8,$60,$80,$a8,$80,$80,$b9,$00,$40,$02,$00,$40,$04,$00,$20,$08,$00,$10,$10,$00,$08,$60,$00,$06,$80,$00,$01,$00,$00,$01
!byte $00,$00,$00,$00,$03,$00,$00,$0c,$80,$00,$10,$40,$00,$60,$20,$00,$80,$10,$03,$00,$10,$04,$e8,$08,$18,$a8,$08,$60,$b8,$08,$80,$00,$08,$80,$a8,$30,$80,$a8,$c0,$80,$f9,$00,$40,$06,$00,$40,$08,$00,$20,$30,$00,$10,$40,$00,$09,$80,$00,$06,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$03,$00,$00,$0c,$80,$00,$30,$40,$00,$c0,$20,$01,$00,$10,$06,$00,$10,$18,$e8,$08,$60,$a8,$08,$80,$b8,$08,$80,$00,$08,$80,$38,$08,$80,$20,$30,$80,$f8,$c0,$40,$03,$00,$40,$04,$00,$20,$18,$00,$10,$60,$00,$09,$80,$00,$06,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$03,$80,$00,$0c,$40,$00,$30,$20,$01,$c0,$10,$06,$00,$10,$18,$e8,$08,$e0,$a8,$08,$80,$b8,$08,$80,$00,$08,$80,$b8,$08,$80,$a8,$38,$80,$e8,$c0,$40,$03,$00,$40,$1c,$00,$20,$60,$00,$11,$80,$00,$0e,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$c0,$00,$1c,$20,$01,$e0,$10,$0e,$00,$10,$f0,$e8,$08,$80,$a8,$08,$80,$b8,$08,$80,$00,$08,$80,$f8,$08,$80,$a8,$08,$80,$e8,$78,$40,$03,$80,$40,$3c,$00,$21,$c0,$00,$1e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$e0,$01,$f8,$10,$7e,$00,$10,$80,$e8,$08,$80,$a8,$08,$80,$b8,$08,$80,$00,$08,$80,$08,$08,$80,$08,$08,$80,$f8,$08,$40,$03,$f0,$40,$fc,$00,$3f,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3f,$ff,$e0,$7f,$ff,$f0,$7f,$ff,$f0,$7f,$ff,$f0,$7f,$ff,$f0,$7f,$ff,$f0,$7f,$ff,$f0,$7f,$ff,$f0,$3f,$ff,$e0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3f,$00,$00,$3f,$fc,$00,$7f,$ff,$f0,$7f,$ff,$f0,$7f,$ff,$f0,$7f,$ff,$f0,$7f,$ff,$f0,$7f,$ff,$f0,$7f,$ff,$f0,$01,$ff,$e0,$00,$07,$e0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$1e,$00,$00,$3f,$c0,$00,$7f,$f8,$00,$7f,$ff,$80,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$1f,$ff,$f0,$01,$ff,$f0,$00,$1f,$e0,$00,$03,$c0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$0e,$00,$00,$1f,$c0,$00,$3f,$f0,$00,$7f,$f8,$00,$7f,$fe,$00,$ff,$ff,$c0,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$1f,$ff,$f8,$03,$ff,$f0,$00,$ff,$f0,$00,$7f,$e0,$00,$1f,$c0,$00,$03,$80,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$04,$00,$00,$0f,$00,$00,$1f,$c0,$00,$3f,$f0,$00,$7f,$fc,$00,$7f,$ff,$00,$ff,$ff,$c0,$ff,$ff,$f0,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$7f,$ff,$f8,$1f,$ff,$f8,$07,$ff,$f0,$01,$ff,$f0,$00,$7f,$e0,$00,$1f,$c0,$00,$07,$80,$00,$01,$00,$00,$00,$00,$01
!byte $00,$00,$00,$06,$00,$00,$0f,$80,$00,$1f,$c0,$00,$3f,$f0,$00,$7f,$fc,$00,$7f,$fe,$00,$ff,$ff,$80,$ff,$ff,$c0,$ff,$ff,$f0,$ff,$ff,$f8,$7f,$ff,$f8,$1f,$ff,$f8,$0f,$ff,$f8,$03,$ff,$f0,$00,$ff,$f0,$00,$7f,$e0,$00,$1f,$c0,$00,$0f,$80,$00,$03,$00,$00,$00,$00,$01
!byte $01,$00,$00,$07,$80,$00,$0f,$c0,$00,$1f,$f0,$00,$3f,$f8,$00,$7f,$fc,$00,$7f,$fe,$00,$ff,$ff,$00,$ff,$ff,$c0,$ff,$ff,$e0,$7f,$ff,$f0,$3f,$ff,$f8,$1f,$ff,$f8,$07,$ff,$f8,$03,$ff,$f0,$01,$ff,$f0,$00,$ff,$e0,$00,$7f,$c0,$00,$1f,$80,$00,$0f,$00,$00,$04,$00,$01
!byte $01,$80,$00,$07,$c0,$00,$0f,$e0,$00,$1f,$f0,$00,$3f,$f8,$00,$7f,$fc,$00,$7f,$fe,$00,$ff,$ff,$00,$ff,$ff,$80,$7f,$ff,$c0,$3f,$ff,$e0,$1f,$ff,$f0,$0f,$ff,$f8,$07,$ff,$f8,$03,$ff,$f0,$01,$ff,$f0,$00,$ff,$e0,$00,$7f,$c0,$00,$3f,$80,$00,$1f,$00,$00,$0c,$00,$01
!byte $01,$c0,$00,$07,$e0,$00,$0f,$f0,$00,$1f,$f0,$00,$3f,$f8,$00,$7f,$fc,$00,$7f,$fe,$00,$ff,$ff,$00,$7f,$ff,$80,$3f,$ff,$c0,$3f,$ff,$e0,$1f,$ff,$e0,$0f,$ff,$f0,$07,$ff,$f8,$03,$ff,$f0,$01,$ff,$f0,$00,$ff,$e0,$00,$7f,$c0,$00,$7f,$80,$00,$3f,$00,$00,$1c,$00,$01
!byte $01,$e0,$00,$07,$f0,$00,$0f,$f0,$00,$1f,$f8,$00,$3f,$f8,$00,$7f,$fc,$00,$7f,$fe,$00,$3f,$fe,$00,$3f,$ff,$00,$1f,$ff,$80,$0f,$ff,$80,$0f,$ff,$c0,$07,$ff,$e0,$03,$ff,$e0,$03,$ff,$f0,$01,$ff,$f0,$00,$ff,$e0,$00,$ff,$c0,$00,$7f,$80,$00,$7f,$00,$00,$3c,$00,$01
!byte $01,$f0,$00,$07,$f8,$00,$0f,$f8,$00,$1f,$fc,$00,$3f,$fc,$00,$7f,$fe,$00,$7f,$fe,$00,$3f,$ff,$00,$3f,$ff,$80,$1f,$ff,$80,$1f,$ff,$c0,$0f,$ff,$c0,$0f,$ff,$e0,$07,$ff,$e0,$03,$ff,$f0,$03,$ff,$f0,$01,$ff,$e0,$01,$ff,$c0,$00,$ff,$80,$00,$ff,$00,$00,$7c,$00,$01
!byte $01,$f8,$00,$07,$f8,$00,$0f,$f8,$00,$1f,$fc,$00,$3f,$fc,$00,$3f,$fe,$00,$3f,$fe,$00,$1f,$ff,$00,$1f,$ff,$00,$0f,$ff,$00,$0f,$ff,$80,$07,$ff,$80,$07,$ff,$c0,$07,$ff,$c0,$03,$ff,$e0,$03,$ff,$e0,$01,$ff,$e0,$01,$ff,$c0,$00,$ff,$80,$00,$ff,$00,$00,$fc,$00,$01
!byte $01,$fc,$00,$07,$fc,$00,$0f,$fc,$00,$1f,$fc,$00,$1f,$fe,$00,$1f,$fe,$00,$1f,$fe,$00,$0f,$ff,$00,$0f,$ff,$00,$0f,$ff,$00,$07,$ff,$00,$07,$ff,$80,$07,$ff,$80,$07,$ff,$80,$03,$ff,$c0,$03,$ff,$c0,$03,$ff,$c0,$01,$ff,$c0,$01,$ff,$80,$01,$ff,$00,$01,$fc,$00,$01
!byte $01,$fc,$00,$07,$fe,$00,$0f,$fe,$00,$0f,$fe,$00,$0f,$fe,$00,$0f,$fe,$00,$0f,$fe,$00,$0f,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$80,$03,$ff,$80,$03,$ff,$80,$03,$ff,$80,$03,$ff,$80,$03,$ff,$80,$03,$ff,$00,$01,$fc,$00,$01
!byte $01,$fc,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$01,$fc,$00,$01
!byte $01,$fc,$00,$03,$ff,$00,$03,$ff,$80,$03,$ff,$80,$03,$ff,$80,$03,$ff,$80,$03,$ff,$80,$07,$ff,$80,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$0f,$ff,$00,$0f,$fe,$00,$0f,$fe,$00,$0f,$fe,$00,$0f,$fe,$00,$0f,$fe,$00,$07,$fe,$00,$01,$fc,$00,$01
!byte $01,$fc,$00,$01,$ff,$00,$01,$ff,$80,$01,$ff,$c0,$03,$ff,$c0,$03,$ff,$c0,$03,$ff,$c0,$03,$ff,$80,$07,$ff,$80,$07,$ff,$80,$07,$ff,$00,$0f,$ff,$00,$0f,$ff,$00,$0f,$ff,$00,$1f,$fe,$00,$1f,$fe,$00,$1f,$fe,$00,$1f,$fe,$00,$0f,$fc,$00,$07,$fc,$00,$01,$fc,$00,$01
!byte $00,$fc,$00,$00,$ff,$00,$00,$ff,$80,$01,$ff,$c0,$01,$ff,$e0,$01,$ff,$e0,$03,$ff,$e0,$03,$ff,$c0,$07,$ff,$c0,$0f,$ff,$c0,$0f,$ff,$80,$1f,$ff,$80,$1f,$ff,$00,$1f,$fe,$00,$3f,$fe,$00,$3f,$fc,$00,$3f,$fc,$00,$1f,$fc,$00,$0f,$f8,$00,$07,$f8,$00,$01,$f8,$00,$01
!byte $00,$7c,$00,$00,$ff,$00,$00,$ff,$80,$01,$ff,$c0,$01,$ff,$e0,$03,$ff,$f0,$03,$ff,$e0,$07,$ff,$e0,$07,$ff,$c0,$0f,$ff,$c0,$0f,$ff,$80,$1f,$ff,$80,$1f,$ff,$00,$3f,$ff,$00,$3f,$fe,$00,$7f,$fe,$00,$3f,$fc,$00,$1f,$fc,$00,$0f,$f8,$00,$07,$f8,$00,$01,$f0,$00,$01
!byte $00,$3c,$00,$00,$7f,$00,$00,$7f,$80,$00,$ff,$c0,$01,$ff,$e0,$01,$ff,$f0,$03,$ff,$f0,$07,$ff,$e0,$07,$ff,$e0,$0f,$ff,$c0,$0f,$ff,$80,$1f,$ff,$80,$3f,$ff,$00,$3f,$fe,$00,$7f,$fe,$00,$7f,$fc,$00,$3f,$fc,$00,$1f,$f8,$00,$0f,$f0,$00,$07,$f0,$00,$01,$e0,$00,$01
!byte $00,$1c,$00,$00,$3f,$00,$00,$7f,$80,$00,$ff,$c0,$00,$ff,$e0,$01,$ff,$f0,$03,$ff,$f0,$07,$ff,$f8,$0f,$ff,$f0,$1f,$ff,$e0,$1f,$ff,$c0,$3f,$ff,$c0,$7f,$ff,$80,$ff,$ff,$00,$7f,$fe,$00,$7f,$fc,$00,$3f,$f8,$00,$1f,$f8,$00,$0f,$f0,$00,$07,$e0,$00,$01,$c0,$00,$01
!byte $00,$0c,$00,$00,$1f,$00,$00,$3f,$80,$00,$7f,$c0,$00,$ff,$e0,$01,$ff,$f0,$03,$ff,$f0,$07,$ff,$f8,$0f,$ff,$f8,$1f,$ff,$f0,$3f,$ff,$e0,$7f,$ff,$c0,$ff,$ff,$80,$ff,$ff,$00,$7f,$fe,$00,$7f,$fc,$00,$3f,$f8,$00,$1f,$f0,$00,$0f,$e0,$00,$07,$c0,$00,$01,$80,$00,$01
!byte $00,$04,$00,$00,$0f,$00,$00,$3f,$80,$00,$7f,$c0,$00,$ff,$e0,$01,$ff,$f0,$03,$ff,$f0,$07,$ff,$f8,$0f,$ff,$f8,$3f,$ff,$f8,$7f,$ff,$f0,$ff,$ff,$e0,$ff,$ff,$80,$ff,$ff,$00,$7f,$fe,$00,$7f,$fc,$00,$3f,$f8,$00,$1f,$f0,$00,$0f,$e0,$00,$07,$80,$00,$01,$00,$00,$01
!byte $00,$00,$00,$00,$03,$00,$00,$0f,$80,$00,$1f,$c0,$00,$7f,$e0,$00,$ff,$f0,$03,$ff,$f0,$07,$ff,$f8,$1f,$ff,$f8,$7f,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f0,$ff,$ff,$c0,$ff,$ff,$00,$7f,$fe,$00,$7f,$f8,$00,$3f,$f0,$00,$1f,$c0,$00,$0f,$80,$00,$06,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$03,$00,$00,$0f,$80,$00,$3f,$c0,$00,$ff,$e0,$01,$ff,$f0,$07,$ff,$f0,$1f,$ff,$f8,$7f,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f0,$ff,$ff,$c0,$7f,$ff,$00,$7f,$fc,$00,$3f,$f8,$00,$1f,$e0,$00,$0f,$80,$00,$06,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$03,$80,$00,$0f,$c0,$00,$3f,$e0,$01,$ff,$f0,$07,$ff,$f0,$1f,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$c0,$7f,$ff,$00,$7f,$fc,$00,$3f,$e0,$00,$1f,$80,$00,$0e,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$c0,$00,$1f,$e0,$01,$ff,$f0,$0f,$ff,$f0,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$7f,$ff,$80,$7f,$fc,$00,$3f,$c0,$00,$1e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$e0,$01,$ff,$f0,$7f,$ff,$f0,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$7f,$ff,$f0,$7f,$fc,$00,$3f,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7f,$ff,$f0,$7f,$ff,$f0,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$7f,$ff,$f0,$7f,$ff,$f0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3f,$00,$00,$7f,$fc,$00,$7f,$ff,$f0,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$7f,$ff,$f0,$01,$ff,$f0,$00,$07,$e0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$1e,$00,$00,$3f,$c0,$00,$7f,$f8,$00,$7f,$ff,$80,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$1f,$ff,$f0,$01,$ff,$f0,$00,$1f,$e0,$00,$03,$c0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$0e,$00,$00,$1f,$c0,$00,$3f,$f0,$00,$7f,$f8,$00,$7f,$fe,$00,$ff,$ff,$c0,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$1f,$ff,$f8,$03,$ff,$f0,$00,$ff,$f0,$00,$7f,$e0,$00,$1f,$c0,$00,$03,$80,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$04,$00,$00,$0f,$00,$00,$1f,$c0,$00,$3f,$f0,$00,$7f,$fc,$00,$7f,$ff,$00,$ff,$ff,$c0,$ff,$ff,$f0,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$7f,$ff,$f8,$1f,$ff,$f8,$07,$ff,$f0,$01,$ff,$f0,$00,$7f,$e0,$00,$1f,$c0,$00,$07,$80,$00,$01,$00,$00,$00,$00,$01
!byte $00,$00,$00,$06,$00,$00,$0f,$80,$00,$1f,$c0,$00,$3f,$f0,$00,$7f,$fc,$00,$7f,$fe,$00,$ff,$ff,$80,$ff,$ff,$c0,$ff,$ff,$f0,$ff,$ff,$f8,$7f,$ff,$f8,$1f,$ff,$f8,$0f,$ff,$f8,$03,$ff,$f0,$00,$ff,$f0,$00,$7f,$e0,$00,$1f,$c0,$00,$0f,$80,$00,$03,$00,$00,$00,$00,$01
!byte $01,$00,$00,$07,$80,$00,$0f,$c0,$00,$1f,$f0,$00,$3f,$f8,$00,$7f,$fc,$00,$7f,$fe,$00,$ff,$ff,$00,$ff,$ff,$c0,$ff,$ff,$e0,$7f,$ff,$f0,$3f,$ff,$f8,$1f,$ff,$f8,$07,$ff,$f8,$03,$ff,$f0,$01,$ff,$f0,$00,$ff,$e0,$00,$7f,$c0,$00,$1f,$80,$00,$0f,$00,$00,$04,$00,$01
!byte $01,$80,$00,$07,$c0,$00,$0f,$e0,$00,$1f,$f0,$00,$3f,$f8,$00,$7f,$fc,$00,$7f,$fe,$00,$ff,$ff,$00,$ff,$ff,$80,$7f,$ff,$c0,$3f,$ff,$e0,$1f,$ff,$f0,$0f,$ff,$f8,$07,$ff,$f8,$03,$ff,$f0,$01,$ff,$f0,$00,$ff,$e0,$00,$7f,$c0,$00,$3f,$80,$00,$1f,$00,$00,$0c,$00,$01
!byte $01,$c0,$00,$07,$e0,$00,$0f,$f0,$00,$1f,$f0,$00,$3f,$f8,$00,$7f,$fc,$00,$7f,$fe,$00,$ff,$ff,$00,$7f,$ff,$80,$3f,$ff,$c0,$3f,$ff,$e0,$1f,$ff,$e0,$0f,$ff,$f0,$07,$ff,$f8,$03,$ff,$f0,$01,$ff,$f0,$00,$ff,$e0,$00,$7f,$c0,$00,$7f,$80,$00,$3f,$00,$00,$1c,$00,$01
!byte $01,$e0,$00,$07,$f0,$00,$0f,$f0,$00,$1f,$f8,$00,$3f,$f8,$00,$7f,$fc,$00,$7f,$fe,$00,$3f,$fe,$00,$3f,$ff,$00,$1f,$ff,$80,$0f,$ff,$80,$0f,$ff,$c0,$07,$ff,$e0,$03,$ff,$e0,$03,$ff,$f0,$01,$ff,$f0,$00,$ff,$e0,$00,$ff,$c0,$00,$7f,$80,$00,$7f,$00,$00,$3c,$00,$01
!byte $01,$f0,$00,$07,$f8,$00,$0f,$f8,$00,$1f,$fc,$00,$3f,$fc,$00,$7f,$fe,$00,$7f,$fe,$00,$3f,$ff,$00,$3f,$ff,$80,$1f,$ff,$80,$1f,$ff,$c0,$0f,$ff,$c0,$0f,$ff,$e0,$07,$ff,$e0,$03,$ff,$f0,$03,$ff,$f0,$01,$ff,$e0,$01,$ff,$c0,$00,$ff,$80,$00,$ff,$00,$00,$7c,$00,$01
!byte $01,$f8,$00,$07,$f8,$00,$0f,$f8,$00,$1f,$fc,$00,$3f,$fc,$00,$3f,$fe,$00,$3f,$fe,$00,$1f,$ff,$00,$1f,$ff,$00,$0f,$ff,$00,$0f,$ff,$80,$07,$ff,$80,$07,$ff,$c0,$07,$ff,$c0,$03,$ff,$e0,$03,$ff,$e0,$01,$ff,$e0,$01,$ff,$c0,$00,$ff,$80,$00,$ff,$00,$00,$fc,$00,$01
!byte $01,$fc,$00,$07,$fc,$00,$0f,$fc,$00,$1f,$fc,$00,$1f,$fe,$00,$1f,$fe,$00,$1f,$fe,$00,$0f,$ff,$00,$0f,$ff,$00,$0f,$ff,$00,$07,$ff,$00,$07,$ff,$80,$07,$ff,$80,$07,$ff,$80,$03,$ff,$c0,$03,$ff,$c0,$03,$ff,$c0,$01,$ff,$c0,$01,$ff,$80,$01,$ff,$00,$01,$fc,$00,$01
!byte $01,$fc,$00,$07,$fe,$00,$0f,$fe,$00,$0f,$fe,$00,$0f,$fe,$00,$0f,$fe,$00,$0f,$fe,$00,$0f,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$80,$03,$ff,$80,$03,$ff,$80,$03,$ff,$80,$03,$ff,$80,$03,$ff,$80,$03,$ff,$00,$01,$fc,$00,$01
!byte $01,$fc,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$01,$fc,$00,$01
!byte $01,$fc,$00,$03,$ff,$00,$03,$ff,$80,$03,$ff,$80,$03,$ff,$80,$03,$ff,$80,$03,$ff,$80,$07,$ff,$80,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$07,$ff,$00,$0f,$ff,$00,$0f,$fe,$00,$0f,$fe,$00,$0f,$fe,$00,$0f,$fe,$00,$0f,$fe,$00,$07,$fe,$00,$01,$fc,$00,$01
!byte $01,$fc,$00,$01,$ff,$00,$01,$ff,$80,$03,$ff,$c0,$03,$ff,$c0,$03,$ff,$c0,$03,$ff,$c0,$07,$ff,$80,$07,$ff,$80,$07,$ff,$80,$07,$ff,$00,$0f,$ff,$00,$0f,$ff,$00,$0f,$fe,$00,$1f,$fe,$00,$1f,$fe,$00,$1f,$fe,$00,$1f,$fc,$00,$0f,$fc,$00,$07,$fc,$00,$01,$fc,$00,$01
!byte $00,$fc,$00,$00,$ff,$00,$00,$ff,$80,$01,$ff,$c0,$01,$ff,$e0,$01,$ff,$e0,$03,$ff,$e0,$03,$ff,$c0,$07,$ff,$c0,$0f,$ff,$c0,$0f,$ff,$80,$1f,$ff,$80,$1f,$ff,$00,$1f,$fe,$00,$3f,$fe,$00,$3f,$fc,$00,$3f,$fc,$00,$1f,$fc,$00,$0f,$f8,$00,$07,$f8,$00,$01,$f8,$00,$01
!byte $00,$7c,$00,$00,$ff,$00,$00,$ff,$80,$01,$ff,$c0,$01,$ff,$e0,$03,$ff,$f0,$03,$ff,$e0,$07,$ff,$e0,$07,$ff,$c0,$0f,$ff,$c0,$0f,$ff,$80,$1f,$ff,$80,$1f,$ff,$00,$3f,$ff,$00,$3f,$fe,$00,$7f,$fe,$00,$3f,$fc,$00,$1f,$fc,$00,$0f,$f8,$00,$07,$f8,$00,$01,$f0,$00,$01
!byte $00,$3c,$00,$00,$7f,$00,$00,$7f,$80,$00,$ff,$c0,$01,$ff,$e0,$01,$ff,$f0,$03,$ff,$f0,$03,$ff,$e0,$07,$ff,$e0,$0f,$ff,$c0,$0f,$ff,$80,$1f,$ff,$80,$3f,$ff,$00,$3f,$ff,$00,$7f,$fe,$00,$7f,$fc,$00,$3f,$fc,$00,$1f,$f8,$00,$0f,$f0,$00,$07,$f0,$00,$01,$e0,$00,$01
!byte $00,$1c,$00,$00,$3f,$00,$00,$7f,$80,$00,$ff,$c0,$00,$ff,$e0,$01,$ff,$f0,$03,$ff,$f0,$07,$ff,$f8,$0f,$ff,$f0,$1f,$ff,$e0,$1f,$ff,$c0,$3f,$ff,$c0,$7f,$ff,$80,$ff,$ff,$00,$7f,$fe,$00,$7f,$fc,$00,$3f,$f8,$00,$1f,$f8,$00,$0f,$f0,$00,$07,$e0,$00,$01,$c0,$00,$01
!byte $00,$0c,$00,$00,$1f,$00,$00,$3f,$80,$00,$7f,$c0,$00,$ff,$e0,$01,$ff,$f0,$03,$ff,$f0,$07,$ff,$f8,$0f,$ff,$f8,$1f,$ff,$f0,$3f,$ff,$e0,$7f,$ff,$c0,$ff,$ff,$80,$ff,$ff,$00,$7f,$fe,$00,$7f,$fc,$00,$3f,$f8,$00,$1f,$f0,$00,$0f,$e0,$00,$07,$c0,$00,$01,$80,$00,$01
!byte $00,$04,$00,$00,$0f,$00,$00,$3f,$80,$00,$7f,$c0,$00,$ff,$e0,$01,$ff,$f0,$03,$ff,$f0,$07,$ff,$f8,$0f,$ff,$f8,$3f,$ff,$f8,$7f,$ff,$f0,$ff,$ff,$e0,$ff,$ff,$80,$ff,$ff,$00,$7f,$fe,$00,$7f,$fc,$00,$3f,$f8,$00,$1f,$f0,$00,$0f,$e0,$00,$07,$80,$00,$01,$00,$00,$01
!byte $00,$00,$00,$00,$03,$00,$00,$0f,$80,$00,$1f,$c0,$00,$7f,$e0,$00,$ff,$f0,$03,$ff,$f0,$07,$ff,$f8,$1f,$ff,$f8,$7f,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f0,$ff,$ff,$c0,$ff,$ff,$00,$7f,$fe,$00,$7f,$f8,$00,$3f,$f0,$00,$1f,$c0,$00,$0f,$80,$00,$06,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$03,$00,$00,$0f,$80,$00,$3f,$c0,$00,$ff,$e0,$01,$ff,$f0,$07,$ff,$f0,$1f,$ff,$f8,$7f,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f0,$ff,$ff,$c0,$7f,$ff,$00,$7f,$fc,$00,$3f,$f8,$00,$1f,$e0,$00,$0f,$80,$00,$06,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$03,$80,$00,$0f,$c0,$00,$3f,$e0,$01,$ff,$f0,$07,$ff,$f0,$1f,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$c0,$7f,$ff,$00,$7f,$fc,$00,$3f,$e0,$00,$1f,$80,$00,$0e,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$c0,$00,$1f,$e0,$01,$ff,$f0,$0f,$ff,$f0,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$7f,$ff,$80,$7f,$fc,$00,$3f,$c0,$00,$1e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$e0,$01,$ff,$f0,$7f,$ff,$f0,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$ff,$ff,$f8,$7f,$ff,$f0,$7f,$fc,$00,$3f,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01
!byte $00,$04,$00,$00,$03,$00,$00,$00,$80,$00,$00,$40,$00,$00,$20,$00,$00,$10,$00,$00,$10,$00,$00,$08,$01,$dc,$08,$01,$54,$08,$01,$5c,$00,$81,$54,$00,$81,$dc,$00,$80,$00,$00,$40,$00,$00,$40,$00,$00,$20,$00,$00,$10,$00,$00,$08,$00,$00,$06,$00,$00,$01,$00,$00,$01

