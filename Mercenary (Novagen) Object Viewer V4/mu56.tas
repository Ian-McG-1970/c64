
UNKNOWN_POINT_TAB_6 =$0100 ; UNKNOWN_POINT_TAB_6
b29EF = $29ef

; **** ZP FIELDS **** 
;
f03 = $03
f3F = $3F
f70 = $70
;
; **** ZP ABSOLUTE ADRESSES **** 
;
SCREEN_POS_LO = $02
SCREEN_POS_HI = $03
SCREEN_FLIP = $24
SCREEN_BANK = $25
LINE_INC = $66
SCREEN_POS_PTR = $02
SCREEN_0 = $40
SCREEN_1 = $60

X_POS_HI = $52
X_POS_LO = $53

Y_POS_HI = $54
Y_POS_LO = $55

Z_POS_HI = $56
Z_POS_LO = $57

OBJECT_TO_DRAW = $B8

LINE_JUMP_PTR_LO = $04
LINE_JUMP_PTR_HI = $05

ab06 = $06 ; math temp?
ab07 = $07 ; math temp?

LINE_FRACTION_ab08 = $08

ab08 = $08 ; math temp? line draw fraction?
ab09 = $09 ; math temp?

ab0A = $0A ; math temp?
ab0B = $0B ; math temp?

ab0C = $0C ; math temp?
ab0D = $0D ; math temp?

ab18 = $18 ; math temp?
ab19 = $19 ; current point pos - current line pos?
POINT_LINE_COUNT = ab19

ab21 = $21 ; used in line draw?
ab29 = $29
ROT_LO = $2C
ROT_HI = $2D

ab3C = $3C ; used in sin calcs?
ab3D = $3D ; used in sin calcs?
ab3E = $3E ; used in cos calcs?
ab3F = $3F ; used in cos calcs?

;ab51 = $51
ab58 = $58
ab59 = $59
ab5A = $5A
ab5B = $5B
ab5C = $5C
ab5D = $5D
ab5E = $5E
ab5F = $5F
ab60 = $60
ab61 = $61
ab62 = $62
ab63 = $63
ab64 = $64
ab65 = $65
ab67 = $67 ; line type?
ab68 = $68
ab69 = $69
LINE_START_HOR = $6A ; line start x?
LINE_START_VER = $6B ; line start y?
ab6C = $6C
ab6D = $6D
ab6E = $6E
ab6F = $6F

ab70 = $70 ; not used?
ab71 = $71 ; not used?
CURR_X_LSB = $72
CURR_X_MSB = $73
CURR_X_HSB = $74
CURR_Y_LSB = $75
CURR_Y_MSB = $76
CURR_Y_HSB = $77
CURR_Z_LSB = $78
CURR_Z_MSB = $79
CURR_Z_HSB = $7A
JOYSTICK_MOVEMENT = $80
ab89 = $89
ab8B = $8B
ab8E = $8E
ab8F = $8F

ab90 = $90
ab91 = $91
ab92 = $92
ab93 = $93
ab94 = $94
ab95 = $95
ab96 = $96
ab97 = $97
ab99 = $99
ab9A = $9A
abA2 = $A2 ; working backwards from here?
abA3 = $A3
abAA = $AA
abAB = $AB
ROT_SPD = $AC
OBJECT_POINTER_POS = $AD
CURRENT_OBJECT = $AF
NUMBER_OF_POINTS = $B0
abB1 = $B1
DRAW_OBJECT_COUNT = $B2
DRAW_OBJECT_COUNTER = $B3
abB7 = $B7
abB9 = $B9
VIC_SCREEN_BANK = $C7
ELEVATOR = $CA ; LIFT FLAG
abCD = $CD
abCF = $CF

abD0 = $D0
abD1 = $D1
abD2 = $D2
abD3 = $D3
abD4 = $D4
DIFF_X_LSB = $D5
DIFF_X_MSB = $D6
DIFF_X_HSB = $D7
DIFF_Y_LSB = $D8
DIFF_Y_MSB = $D9
DIFF_Y_HSB = $DA
DIFF_Z_LSB = $DB
DIFF_Z_MSB = $DC
DIFF_Z_HSB = $DD
abDE = $DE
abDF = $DF
abE0 = $E0
abE6 = $E6
abEB = $EB
abF1 = $F1
abF2 = $F2
abFA = $FA
abFC = $FC
OBJECT_POINTER = $1D

IRQ = $FFFE
LINE_JUMP_PTR = $0004 ; LINE_JUMP_PTR_LO

CLIP_TEST_BOTTOM = $88
CLIP_BOTTOM = $87
CLIP_TEST_RIGHT = $A0 ; $80
CLIP_RIGHT = $9F ; $7F
CLIP_TEST_TOP = $00
CLIP_TEST_LEFT = $00

;        CMP #$88 ; clip test?
;        LDA #$9F ; clip right ?
;        CMP #$A0 ; clip test
;        LDA #$87 ; clip bottom
;        CMP #$88 ; clip test
;        LDA #$00 ; clip off top
;        CMP #$A0 ; clip test
;        LDA #$00 ; clip off right
;        CMP #$88 ; clip test
;        CMP #$A0 ; clip test
;        CPX #$A0 ; clip test

        * = $2300

        JMP	STARTUP ; 3 bytes used taking UNKNOWN_POINT_TAB_7 from 64 bytes to 61 bytes
ZP .BYTE $2f,$35,$41,$62,$67,$96,$09,$00
 .BYTE $be,$fd,$9f,$10,$c0,$f5,$a0,$40
 .BYTE $a7,$54,$00,$00,$00,$00,$92,$f4
 .BYTE $0c,$ff,$78,$34,$30,$b1,$3c,$81
 .BYTE $0a,$18,$12,$0d,$09,$60,$8f,$88
 .BYTE $00,$00,$00,$02,$01,$01,$92,$dc
 .BYTE $00,$00,$92,$dc,$46,$20,$92,$dd
 .BYTE $00,$01,$92,$dc,$00,$00,$2e,$e5
 .BYTE $48,$fc,$e0,$29,$00,$1d,$39,$1c
 .BYTE $00,$01,$1b,$e1,$89,$fd,$92,$dd
 .BYTE $48,$fc,$e0,$29,$00,$1d,$39,$1c
 .BYTE $a6,$28,$00,$1d,$ee,$18,$89,$0d
 .BYTE $a3,$fd,$b6,$0c,$09,$01,$02,$07
 .BYTE $15,$e5,$00,$0a,$9f,$00,$04,$01
 .BYTE $1b,$1a,$42,$02,$00,$80,$00,$00
 .BYTE $01,$01,$00,$00,$a3,$01,$00,$3f
 .BYTE $0f,$01,$aa,$55,$ff,$03,$00,$00
 .BYTE $1c,$1c,$1f,$1f,$00,$e0,$50,$44
 .BYTE $40,$19,$3c,$18,$10,$19,$0c,$18
 .BYTE $ff,$b8,$2c,$ab,$fc,$1b,$fc,$00
 .BYTE $7b,$85,$18,$01,$06,$06,$0e,$a9
 .BYTE $01,$80,$40,$18,$10,$1c,$00,$11
 .BYTE $05,$00,$01,$00,$3f,$3c,$02,$03
 .BYTE $3f,$00,$00,$fe,$01,$00,$00,$15
 .BYTE $5a,$00,$01,$06,$06,$0e,$01,$70
 .BYTE $00,$00,$00,$44,$00,$03,$06,$00
 .BYTE $08,$c0,$08,$10,$0f,$75,$f7,$ff
 .BYTE $80,$f7,$ff,$71,$f8,$ff,$02,$00
 .BYTE $00,$7d,$19,$64,$0b,$02,$00,$03
 .BYTE $25,$3f,$ff,$00,$00,$88,$ff,$00
 .BYTE $00,$00,$43,$16,$00,$00,$7e,$09
 .BYTE $00,$00,$00,$00,$0a,$60,$21,$7d
	.FILL (16*8)-3,0
 	
UNKNOWN_POINT_TAB_7 = $0140
UNKNOWN_POINT_TAB_8 = $0180
UNKNOWN_POINT_TAB_9 = $02C0
UNKNOWN_POINT_TAB_10 = $0340 
UNKNOWN_POINT_TAB_1 = $0380
UNKNOWN_POINT_TAB_3 = $03C0
UNKNOWN_POINT_TAB_2 = $0600
UNKNOWN_POINT_TAB_5 = $0640
PERS_HOR = $0680
PERS_VER = $06C0

; 00 = point is onscreen
; 01 = point needs off left/right
; 02 = point is off top/bottom
; 03 = point is off left/right + top/bottom
; 80 / minus = point is behind

POINT_CLASSIFICATION = $0700

f0A5C = $0A5C   
f1512 = $1512   
f167A = $167A   
f20A0 = $20A0   
f20E0 = $20E0   
f2120 = $2120   
f2210 = $2210

OBJ_X_MSB 
.FILL 64,00 ;04
 
OBJ_Y_MSB  
.FILL 64,00

OBJ_Z_MSB   
.FILL 64,00 ; 01

OBJ_X_HSB   
.FILL 64,00

OBJ_Y_HSB
.FILL 64,00

OBJ_Z_HSB
.FILL 64,00

 OBJECT_SHAPE_PTR_LO
	.BYTE <OBJ_09,<OBJ_01,<OBJ_02,<OBJ_03,<OBJ_04,<OBJ_05,<OBJ_06,<OBJ_07
        .BYTE <OBJ_08,$25,$28,$25,$CA,$25,$5C,$CC
        .BYTE $82,$B1,$CE,$F4,$23,$52,$78,$B0
        .BYTE $E8,$06,$A6,$4C,$C4,$84,$54,$8E
        .BYTE $91,$5D,$5A,$17,$12,$C9,$6A,$90
        .BYTE $80,$06,$74,$76,$E5,$28,$B8,$87
        .BYTE $FA,$CF,$5E,$0C,$BE,$61,$8F,$BF
        .BYTE $45,$F8,$00,$00,$F8,$4A,$4A,$8D

OBJECT_SHAPE_PTR_HI
	.BYTE >OBJ_09,>OBJ_01,>OBJ_02,>OBJ_03,>OBJ_04,>OBJ_05,>OBJ_06,>OBJ_07
        .BYTE >OBJ_08,$3B,$20,$3B,$1B,$3B,$3C,$3B
        .BYTE $3C,$3C,$3C,$3C,$3D,$3D,$3D,$3D
        .BYTE $3D,$1E,$1B,$1C,$1D,$1C,$1E,$1E
        .BYTE $17,$18,$1A,$3E,$1A,$17,$1F,$1F
        .BYTE $1A,$19,$19,$1D,$1A,$1B,$1A,$18
        .BYTE $17,$1E,$1B,$1F,$1C,$3E,$3E,$3E
        .BYTE $1B,$3E,$17,$17,$3E,$3F,$3F,$3F

OBJ_X_LSB
.FILL 64,$E5
;		.BYTE $41,$A6,$2E,$57,$0E,$78,$A8,$00
;        .BYTE $E5,$9C,$00,$9C,$61,$3C,$AC,$E7
;        .BYTE $E5,$B7,$F1,$F6,$AE,$A7,$16,$C7
;        .BYTE $1D,$28,$53,$53,$28,$53,$02,$9E
;        .BYTE $11,$C0,$51,$B3,$B5,$D0,$87,$20
;        .BYTE $4F,$85,$2E,$0B,$10,$58,$60,$8C
;        .BYTE $6E,$CF,$05,$A6,$DF,$8C,$5A,$58
;        .BYTE $DA,$00,$80,$80,$00,$00,$00,$00

OBJ_Y_LSB
.FILL 64,00
;		.BYTE $01,$00,$00,$00,$00,$00,$00,$00
;        .BYTE $00,$00,$00,$00,$00,$00,$FF,$32
;        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
;        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
;        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
;        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
;        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
;        .BYTE $00,$00,$00,$00,$00,$00,$00,$C0

OBJ_Z_LSB
.FILL 64,$65
;		.BYTE $A4,$89,$44,$20,$4B,$90,$37,$00
;        .BYTE $65,$72,$00,$72,$D9,$FE,$5A,$C6
;        .BYTE $65,$72,$BA,$95,$15,$B0,$8A,$74
;        .BYTE $BA,$22,$27,$27,$22,$27,$FE,$8A
;        .BYTE $70,$28,$7A,$7B,$B1,$00,$A3,$67
;        .BYTE $2B,$5E,$8E,$5D,$3E,$13,$80,$B9
;        .BYTE $AB,$B9,$58,$20,$C4,$A2,$ED,$AC
;        .BYTE $69,$80,$00,$00,$80,$00,$00,$00

.FILL 8*8,0

OBJECTS_TO_DRAW   ; objects to draw
		.BYTE $00
		.BYTE $06 ; object being drawn
		.BYTE $3E,$3D,$38,$32,$0A,$02,$01
        .BYTE $00,$01,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00

f29C0   .BYTE $30,$20,$20,$20,$20,$20,$08,$24
		.BYTE $10,$10,$10,$10,$04,$10,$10,$10
        .BYTE $08,$00,$00,$00,$00,$00,$00,$00
        .BYTE $08,$08
		.BYTE $08
ab29DB  .BYTE $08,$08,$28,$08,$08,$08,$00,$08
        .BYTE $08,$00,$10,$08,$00,$08,$08,$08
        .BYTE $08,$08,$08
		.BYTE $08
		.BYTE $08
		.BYTE $10,$00,$10,$10,$10,$00,$00,$00
		.BYTE $10,$10,$10,$10,$10,$10,$10,$10

f2A00  
	.FILL 32*8,0
  
	.FILL 32*8,0
   
	.FILL 3,0
	.FILL 31*8,0
	.FILL 5,0


	.FILL 3,0
	.FILL 17*8,0
        .FILL 1,0

   
	.FILL 14*8,0
        .FILL 4,0

   .FILL 3,0
	.FILL 31*8,0
	.FILL 5,0

   .FILL 3,0
	.FILL 55*8,0
	.FILL 5,0

	.FILL 40*8,0

	.FILL 68*8,0
        .FILL 1,0
        
	.FILL 1798,0
        
OBJ_00 	.BYTE $00
		.BYTE $20
        .BYTE $10,$00,$20
		.BYTE $FD,$02,$20
		.BYTE $03,$02,$20
		.BYTE $00,$0C,$20
		.BYTE $00,$00,$E1
		.BYTE $09
        .BYTE $01,$13,$34,$42,$20,$05,$15,$25,$35,$45

OBJ_01	.BYTE $0F
		.BYTE $F8,$00,$10
		.BYTE $FA,$0C,$0C
		.BYTE $FA,$0C,$00
		.BYTE $F9,$06,$FD
		.BYTE $F9,$04,$F4
		.BYTE $FC,$04,$F0
		.BYTE $FC,$00,$F0
        .BYTE $F9,$00,$F4
		.BYTE $08,$00,$10
		.BYTE $06,$0C,$0C
		.BYTE $06,$0C,$00
		.BYTE $07,$06,$FD
		.BYTE $07,$04,$F4
		.BYTE $04,$04,$F0
		.BYTE $04,$00,$F0
        .BYTE $07,$00,$F4
		.BYTE $17
		.BYTE $01,$12,$23,$34,$45,$56,$67,$70,$89,$9A,$AB,$BC,$CD,$DE,$EF,$F8,$47,$CF,$08,$19,$2A,$3B,$5D,$6E

OBJ_02	.BYTE $0F
		.BYTE $F8,$04,$18
        .BYTE $08,$04,$18
		.BYTE $00,$04,$E8
		.BYTE $00,$0C,$18
		.BYTE $E2,$04,$18
		.BYTE $1E,$04,$18
		.BYTE $FC,$04,$00
		.BYTE $04,$04,$00
		.BYTE $00,$14,$18
        .BYTE $00,$0A,$0C
		.BYTE $F2,$04,$10
		.BYTE $F2,$00,$10
		.BYTE $0E,$04,$10
		.BYTE $0E,$00,$10
		.BYTE $00,$04,$F0
		.BYTE $00,$00,$F0
		.BYTE $0C
		.BYTE $20,$23,$21,$13,$03,$45,$46,$57,$38,$89,$AB,$CD,$EF

OBJ_03	.BYTE $07
		.BYTE $00,$00,$00
		.BYTE $EC,$07,$00
		.BYTE $F6,$07,$11
		.BYTE $0A,$07,$11
        .BYTE $14,$07,$00
		.BYTE $0A,$07,$EF
		.BYTE $F6,$07,$EF
		.BYTE $00,$10,$00
		.BYTE $11
		.BYTE $01,$02,$03,$04,$05,$06,$71,$72,$73,$74,$75,$76,$12,$23,$34,$45,$56,$61

OBJ_04	.BYTE $05
        .BYTE $F4,$00,$10
		.BYTE $00,$00,$F0
		.BYTE $0C,$00,$10
		.BYTE $F4,$0A,$10
		.BYTE $00,$0A,$F0
		.BYTE $0C,$0A,$10
		.BYTE $08
		.BYTE $01,$12,$20,$34,$45,$53,$03,$14,$25

OBJ_05	.BYTE $0F
		.BYTE $F0,$00,$10
        .BYTE $10,$00,$10
		.BYTE $00,$00,$EC
		.BYTE $FC,$00,$04
		.BYTE $04,$00,$04
		.BYTE $00,$00,$FC
		.BYTE $FD,$04,$03
		.BYTE $03,$04,$03
		.BYTE $00,$04,$FD
        .BYTE $FE,$14,$02
		.BYTE $02,$14,$02
		.BYTE $00,$14,$FE
		.BYTE $FF,$04,$01
		.BYTE $01,$04,$01
		.BYTE $00,$04,$FF
		.BYTE $00,$34,$00
		.BYTE $14
		.BYTE $F6,$F7,$F8,$90,$A1,$B2,$06,$17,$28,$C3,$D4,$E5,$34,$45,$53,$67,$78,$86,$CD,$DE,$EC

OBJ_06	.BYTE $07
		.BYTE $F8,$F8,$F8
		.BYTE $08,$F8,$F8
		.BYTE $08,$F8,$08
		.BYTE $F8,$F8,$08
		.BYTE $F8,$08,$F8
		.BYTE $08,$08,$F8
		.BYTE $08,$08,$08
		.BYTE $F8,$08,$08
		.BYTE $0B
		.BYTE $01,$12,$23,$30,$04,$15,$26,$37,$45,$56,$67,$74
		
OBJ_07	.BYTE $09
		.BYTE $FC,$07,$04
		.BYTE $04,$07,$04
        .BYTE $00,$07,$FC
		.BYTE $00,$0E,$00
		.BYTE $FF,$07,$01
		.BYTE $01,$07,$01
		.BYTE $00,$07,$FF
		.BYTE $FE,$00,$02
		.BYTE $02,$00,$02
		.BYTE $00,$00,$FE
        .BYTE $0E
		.BYTE $01,$12,$20, $03,$13,$23, $45,$56,$64, $78,$89,$97, $47,$58,$69

OBJ_08  .BYTE $05
        .BYTE $8B,$00,$8F
        .BYTE $75,$00,$8F
        .BYTE $00,$0C,$8F
        .BYTE $8B,$00,$71
        .BYTE $75,$00,$71
        .BYTE $00,$0C,$71
        .BYTE $08
        .BYTE $01,$12,$20, $34,$45,$53, $03,$14,$25

OBJ_09	.BYTE $07
		.BYTE 0,0,0
		.BYTE 0,0,255
		.BYTE 0,255,0
		.BYTE 0,255,255
		.BYTE 255,0,0
		.BYTE 255,0,255
		.BYTE 255,255,0
		.BYTE 255,255,255
        .BYTE $0B
        .BYTE $01,$13,$32,$20
        .BYTE $45,$57,$76,$64
        .BYTE $04,$15,$26,$37
		
        .FILL 817-38,0

		.BYTE $00
	
	.FILL 512,0
	
SCREEN0 .FILL 5440,0

VER_POS_HI
	.BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $01,$01,$01,$01,$01,$01,$01,$01
        .BYTE $02,$02,$02,$02,$02,$02,$02,$02
        .BYTE $03,$03,$03,$03,$03,$03,$03,$03
        .BYTE $05,$05,$05,$05,$05,$05,$05,$05
        .BYTE $06,$06,$06,$06,$06,$06,$06,$06
        .BYTE $07,$07,$07,$07,$07,$07,$07,$07
        .BYTE $08,$08,$08,$08,$08,$08,$08,$08
        .BYTE $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A
        .BYTE $0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B
        .BYTE $0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C
        .BYTE $0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D
        .BYTE $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F
        .BYTE $10,$10,$10,$10,$10,$10,$10,$10
        .BYTE $11,$11,$11,$11,$11,$11,$11,$11
        .BYTE $12,$12,$12,$12,$12,$12,$12,$12
        .BYTE $14,$14,$14,$14,$14,$14,$14,$14
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

VER_POS_LO
		.BYTE $00,$01,$02,$03,$04,$05,$06,$07
        .BYTE $40,$41,$42,$43,$44,$45,$46,$47
        .BYTE $80,$81,$82,$83,$84,$85,$86,$87
        .BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7
        .BYTE $00,$01,$02,$03,$04,$05,$06,$07
        .BYTE $40,$41,$42,$43,$44,$45,$46,$47
        .BYTE $80,$81,$82
	.BYTE $83,$84,$85,$86,$87,$C0,$C1,$C2
        .BYTE $C3,$C4,$C5,$C6,$C7,$00,$01,$02
        .BYTE $03,$04,$05,$06,$07,$40,$41,$42
        .BYTE $43,$44,$45,$46,$47,$80,$81,$82
        .BYTE $83,$84,$85,$86,$87,$C0,$C1,$C2
        .BYTE $C3,$C4,$C5,$C6,$C7,$00,$01,$02
        .BYTE $03,$04,$05,$06,$07,$40,$41,$42
        .BYTE $43,$44,$45,$46,$47,$80,$81,$82
        .BYTE $83,$84,$85,$86,$87,$C0,$C1,$C2
        .BYTE $C3,$C4,$C5,$C6,$C7,$00,$01,$02
        .BYTE $03,$04,$05,$06,$07,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01,$40,$10,$04
        .BYTE $01,$40,$10,$04,$01
f56E8  	.BYTE $40,$10,$04,$01,$40,$10,$04,$01
        .BYTE $40,$10,$04,$01,$40,$10,$04,$01
        .BYTE $40,$10,$04,$01,$40,$10,$04,$01

HOR_SCR_POS
		.BYTE $00,$00,$00,$00,$08,$08,$08,$08
        .BYTE $10,$10,$10,$10,$18,$18,$18,$18
        .BYTE $20,$20,$20,$20,$28,$28,$28,$28
        .BYTE $30,$30,$30,$30,$38,$38,$38,$38
        .BYTE $40,$40,$40,$40,$48,$48,$48,$48
        .BYTE $50,$50,$50,$50,$58,$58,$58,$58
        .BYTE $60,$60,$60,$60,$68,$68,$68,$68
        .BYTE $70,$70,$70,$70,$78,$78,$78,$78
        .BYTE $80,$80,$80,$80,$88,$88,$88,$88
        .BYTE $90,$90,$90,$90,$98,$98,$98,$98
        .BYTE $A0,$A0,$A0,$A0,$A8,$A8,$A8,$A8
        .BYTE $B0,$B0,$B0,$B0,$B8,$B8,$B8,$B8
        .BYTE $C0,$C0,$C0,$C0,$C8,$C8,$C8,$C8
        .BYTE $D0,$D0,$D0,$D0,$D8,$D8,$D8,$D8
        .BYTE $E0,$E0,$E0,$E0,$E8,$E8,$E8,$E8
        .BYTE $F0,$F0,$F0,$F0,$F8,$F8,$F8,$F8
        .BYTE $00,$00,$00,$00,$08,$08,$08,$08
        .BYTE $10,$10,$10,$10

		.BYTE $18,$18,$18,$18,$20,$20,$20,$20
        .BYTE $28,$28,$28,$28,$30,$30,$30,$30
        .BYTE $38,$38,$38,$38
		.BYTE $C0,$C0,$C0,$C0,$C0,$C0,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
		.BYTE $25,$25,$28,$29,$24,$24,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
		.BYTE $80,$80,$00,$00,$80,$80,$14,$15
        .BYTE $15,$16,$16,$17,$17,$0C,$00,$0C
		.BYTE $29,$28,$19,$18,$28,$29,$04,$10
        .BYTE $05,$11,$06,$12,$07,$13,$08,$14
		.BYTE $09,$15,$0A,$16,$0B,$17,$18,$19
        .BYTE $19,$1A,$1B,$1C,$1C,$1D
		.BYTE $01,$3D,$1B,$3D,$1A,$3C,$1D,$3C
        .BYTE $22,$E2,$22,$60,$1F,$60,$1F,$E2
        .BYTE $1D,$62

LOG_TABLE ; f5800
		.BYTE $00,$01,$03,$04,$06,$07,$09,$0A
        .BYTE $0B,$0D,$0E,$10,$11,$12,$14,$15
        .BYTE $16,$18,$19,$1A,$1C,$1D,$1E,$20
        .BYTE $21,$22,$24,$25,$26,$28,$29,$2A
        .BYTE $2C,$2D,$2E,$2F,$31,$32,$33,$34
        .BYTE $36,$37,$38,$39,$3B,$3C,$3D,$3E
        .BYTE $3F,$41,$42,$43,$44,$45,$47,$48
        .BYTE $49,$4A,$4B,$4D,$4E,$4F,$50,$51
        .BYTE $52,$54,$55,$56,$57,$58,$59,$5A
        .BYTE $5C,$5D,$5E,$5F,$60,$61,$62,$63
        .BYTE $64,$66,$67,$68,$69,$6A,$6B,$6C
        .BYTE $6D,$6E,$6F,$70,$71,$72,$74,$75
        .BYTE $76,$77,$78,$79,$7A,$7B,$7C,$7D
        .BYTE $7E,$7F,$80,$81,$82,$83,$84,$85
        .BYTE $86,$87,$88,$89,$8A,$8B,$8C,$8D
        .BYTE $8E,$8F,$90,$91,$92,$93,$94,$95
        .BYTE $96,$97,$98,$99,$9A,$9B,$9B,$9C
        .BYTE $9D,$9E,$9F,$A0,$A1,$A2,$A3,$A4
        .BYTE $A5,$A6,$A7,$A8,$A9,$A9,$AA,$AB
        .BYTE $AC,$AD,$AE,$AF,$B0,$B1,$B2,$B2
        .BYTE $B3,$B4,$B5,$B6,$B7,$B8,$B9,$B9
        .BYTE $BA,$BB,$BC,$BD,$BE,$BF,$C0,$C0
        .BYTE $C1,$C2,$C3,$C4,$C5,$C6,$C6,$C7
        .BYTE $C8,$C9,$CA,$CB,$CB,$CC,$CD,$CE
        .BYTE $CF,$D0,$D0,$D1,$D2,$D3,$D4,$D4
        .BYTE $D5,$D6,$D7,$D8,$D8,$D9,$DA,$DB
        .BYTE $DC,$DC,$DD,$DE,$DF,$E0,$E0,$E1
        .BYTE $E2,$E3,$E4,$E4,$E5,$E6,$E7,$E7
        .BYTE $E8,$E9,$EA,$EA,$EB,$EC,$ED,$EE
        .BYTE $EE,$EF,$F0,$F1,$F1,$F2,$F3,$F4
        .BYTE $F4,$F5,$F6,$F7,$F7,$F8,$F9,$F9
        .BYTE $FA,$FB,$FC,$FC,$FD,$FE,$FF,$FF

EXP_TABLE ; f5900
		.BYTE $00,$01,$01,$02,$03,$03,$04,$05
        .BYTE $06,$06,$07,$08,$08,$09,$0A,$0B
        .BYTE $0B,$0C,$0D,$0E,$0E,$0F,$10,$10
        .BYTE $11,$12,$13,$13,$14,$15,$16,$16
        .BYTE $17,$18,$19,$19,$1A,$1B,$1C,$1D
        .BYTE $1D,$1E,$1F,$20,$20,$21,$22,$23
        .BYTE $24,$24,$25,$26,$27,$28,$28,$29
        .BYTE $2A,$2B,$2C,$2C,$2D,$2E,$2F,$30
        .BYTE $30,$31,$32,$33,$34,$35,$35,$36
        .BYTE $37,$38,$39,$3A,$3A,$3B,$3C,$3D
        .BYTE $3E,$3F,$40,$41,$41,$42,$43,$44
        .BYTE $45,$46,$47,$48,$48,$49,$4A,$4B
        .BYTE $4C,$4D,$4E,$4F,$50,$51,$51,$52
        .BYTE $53,$54,$55,$56,$57,$58,$59,$5A
        .BYTE $5B,$5C,$5D,$5E,$5E,$5F,$60,$61
        .BYTE $62,$63,$64,$65,$66,$67,$68,$69
        .BYTE $6A,$6B,$6C,$6D,$6E,$6F,$70,$71
        .BYTE $72,$73,$74,$75,$76,$77,$78,$79
        .BYTE $7A,$7B,$7C,$7D,$7E,$7F,$80,$81
        .BYTE $82,$83,$84,$85,$87,$88,$89,$8A
        .BYTE $8B,$8C,$8D,$8E,$8F,$90,$91,$92
        .BYTE $93,$95,$96,$97,$98,$99,$9A,$9B
        .BYTE $9C,$9D,$9F,$A0,$A1,$A2,$A3,$A4
        .BYTE $A5,$A6,$A8,$A9,$AA,$AB,$AC,$AD
        .BYTE $AF,$B0,$B1,$B2,$B3,$B4,$B6,$B7
        .BYTE $B8,$B9,$BA,$BC,$BD,$BE,$BF,$C0
        .BYTE $C2,$C3,$C4,$C5,$C6,$C8,$C9,$CA
        .BYTE $CB,$CD,$CE,$CF,$D0,$D2,$D3,$D4
        .BYTE $D6,$D7,$D8,$D9,$DB,$DC,$DD,$DE
        .BYTE $E0,$E1,$E2,$E4,$E5,$E6,$E8,$E9
        .BYTE $EA,$EC,$ED,$EE,$F0,$F1,$F2,$F4
        .BYTE $F5,$F6,$F8,$F9,$FA,$FC,$FD,$FF

SIN_LSB   ; SIN/COS TABLE? f5A00
		.BYTE $92,$2E,$F7,$60,$C4,$14,$47,$79
        .BYTE $AB,$DD,$08,$21,$3A,$53,$6C,$85
        .BYTE $9E,$B7,$D0,$E9,$01,$0D,$1A,$26
        .BYTE $33,$3F,$4C,$58,$64,$71,$7D,$89
        .BYTE $96,$A2,$AE,$BB,$C7,$D3,$DF,$EC
        .BYTE $F8,$02,$08,$0E,$14,$1A,$20,$26
        .BYTE $2C,$32,$38,$3E,$44,$4A,$50,$56
        .BYTE $5C,$62,$68,$6E,$73,$79,$7F,$85
        .BYTE $8B,$91,$96,$9C,$A2,$A8,$AD,$B3
        .BYTE $B9,$BE,$C4,$CA,$CF,$D5,$DA,$E0
        .BYTE $E5,$EB,$F1,$F6,$FB,$00,$03,$06
        .BYTE $09,$0B,$0E,$11,$13,$16,$19,$1B
        .BYTE $1E,$20,$23,$26,$28,$2B,$2D,$30
        .BYTE $32,$35,$37,$3A,$3C,$3F,$41,$44
        .BYTE $46,$48,$4B,$4D,$50,$52,$54,$57
        .BYTE $59,$5B,$5E,$60,$62,$64,$67,$69
        .BYTE $6B,$6D,$70,$72,$74,$76,$78,$7A
        .BYTE $7C,$7F,$81,$83,$85,$87,$89,$8B
        .BYTE $8D,$8F,$91,$93,$95,$97,$98,$9A
        .BYTE $9C,$9E,$A0,$A2,$A4,$A5,$A7,$A9
        .BYTE $AB,$AC,$AE,$B0,$B1,$B3,$B5,$B6
        .BYTE $B8,$BA,$BB,$BD,$BE,$C0,$C1,$C3
        .BYTE $C4,$C6,$C7,$C9,$CA,$CB,$CD,$CE
        .BYTE $D0,$D1,$D2,$D3,$D5,$D6,$D7,$D8
        .BYTE $DA,$DB,$DC,$DD,$DE,$DF,$E0,$E2
        .BYTE $E3,$E4,$E5,$E6,$E7,$E8,$E9,$E9
        .BYTE $EA,$EB,$EC,$ED,$EE,$EF,$EF,$F0
        .BYTE $F1,$F2,$F3,$F3,$F4,$F5,$F5,$F6
        .BYTE $F6,$F7,$F8,$F8,$F9,$F9,$FA,$FA
        .BYTE $FB,$FB,$FC,$FC,$FC,$FD,$FD,$FD
        .BYTE $FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF
        .BYTE $FF,$00,$00,$00,$00,$00,$00,$00
 
SIN_MSB ; f5B00   ; SIN / COS TABLE?
		.BYTE $DC,$E4,$E4,$E8,$E8,$EC,$EC,$EC
        .BYTE $EC,$EC,$F0,$F0,$F0,$F0,$F0,$F0
        .BYTE $F0,$F0,$F0,$F0,$F4,$F4,$F4,$F4
        .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4
        .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4
        .BYTE $F4,$F8,$F8,$F8,$F8,$F8,$F8,$F8
        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8
        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8
        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8
        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8
        .BYTE $F8,$F8,$F8,$F8,$F8,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$00,$00,$00,$00,$00,$00,$00

ab5C00 ; SCREEN COLOUR 
		.BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66
		.BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66

	.BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66
  .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66
   .BYTE $66
  .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$66,$66,$66,$66,$66,$66,$66
        .BYTE $66,$A0,$A0,$A0,$A0,$A0,$A0,$A0
        .BYTE $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
        .BYTE $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
        .BYTE $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
        .BYTE $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
        .BYTE $A0

   .FILL 303,0
   .BYTE $AA

SCREEN1 .FILL 5440,0
.FILL 192,0
        
UNKNOWN_POINT_TAB_4 .FILL 64,0  ; 7600
        .BYTE $FF,$00,$FF,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $FC,$FC,$3C,$FC,$FC,$E0,$E4,$24
		.BYTE $E4,$E0,$FC,$FC,$3C,$FC,$FC
		.BYTE $E0,$FC,$20,$E7,$E0,$E0,$FC,$20
        .BYTE $FC,$E0,$E4,$E4,$20,$FC,$FC,$E0
        .BYTE $E7,$20,$FC,$E0,$E0,$E7,$20,$E4
        .BYTE $E0,$E0,$FC,$3C,$FC,$FC,$E0,$E4
        .BYTE $20,$E4,$E0,$E0,$E4,$20,$FC,$FC
        .BYTE $E0,$E4,$20,$E4,$E0,$E0,$FC,$3C
        .BYTE $FC,$FC,$E0,$E7,$20,$E4,$E0,$E0
        .BYTE $E7,$20,$FC,$E0,$E4,$E4,$20,$FC
        .BYTE $FC,$E0,$FC,$20,$FC,$E0,$E0,$FC
        .BYTE $20,$E7,$E0,$FC,$FC,$3C,$FC,$FC,$E0
   .BYTE $E4
   .BYTE $24
   .BYTE $E4
  .BYTE $E0,$FC,$FC,$3C,$FC
   .BYTE $FC,$C1,$C9,$C9,$C9,$C1,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
f7700   .BYTE $00,$00,$90,$00,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
f7720   .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

PIXEL_POS
		.BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

	.FILL 79*8,0
        .BYTE $00,$7E,$66,$66,$66
		.FILL 113*8,0
        .BYTE $33

        .FILL 26*8,0
        
        .BYTE $81,$FF
        
		.BYTE $FF
   .BYTE $0C,$4C,$0C,$4C,$0C,$FF,$FF
   .BYTE $FF,$1E,$9E,$9E,$9F,$1F,$FF,$FF
   .BYTE $FF,$0C,$4C,$0C,$CC,$CC,$FF,$FF
   .BYTE $FF,$1E,$9E,$9E,$9E,$1E,$FF,$FF
   .BYTE $FF,$0C,$4C,$0C,$4C,$0C,$FF,$FF
   .BYTE $FF,$10,$90,$90,$90,$10,$FF,$FF
        .BYTE $FF,$E1,$B1,$99,$8D,$87,$83,$FF
        .BYTE $FF,$E1,$B1,$99,$8D,$87,$83,$FF
        .BYTE $FF,$E1,$B1,$99,$8D,$87,$83,$FF
        .BYTE $FF,$E1,$B1,$99,$8D,$87,$83,$FF
        .BYTE $33,$FF,$60,$D0,$48,$C4,$42,$C1
        .BYTE $33,$FE,$07,$0A,$13,$22,$43,$82
        .BYTE $83,$42,$23,$12,$0B,$06,$FF,$CC
        .BYTE $41,$C2,$44,$C8,$50,$E0,$7F,$CC
        .BYTE $33,$FF,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$FF,$CC
        .BYTE $03,$02,$03,$02,$03,$02,$03,$02
        .BYTE $40,$C0,$40,$C0,$40,$C0,$40,$C0
        .BYTE $FF,$81,$99,$E1,$E7,$FF,$E7,$FF
        .BYTE $FF,$E7,$E7,$E7,$E7,$FF,$E7,$FF
        .BYTE $FF,$E7,$E7,$E7,$FF,$FF
   .BYTE $FF,$FF,$E7,$E7,$E7,$E7,$E7,$E7
        .BYTE $E7,$E7,$CF,$CF,$CF,$CF,$CF,$CF
        .BYTE $CF,$CF,$9F,$9F,$9F,$9F,$9F,$9F
        .BYTE $9F,$9F,$3F,$3F,$3F,$3F,$3F,$3F
        .BYTE $3F,$3F,$7E,$7E,$7E,$7E,$7E,$7E
        .BYTE $7E,$7E,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$F9,$F9,$F9,$F9,$F9,$F9
        .BYTE $F9,$F9,$F3,$F3,$F3,$F3,$F3,$F3
        .BYTE $F3,$F3,$00,$1E,$4E,$66,$72,$78
        .BYTE $7C,$00,$00,$7E,$7E,$7E,$7E,$7E
        .BYTE $7E
   .BYTE $00
   .BYTE $C9
   .BYTE $C1,$FF,$FF,$FF,$FF,$FF,$FF,$FF
        .BYTE $FF,$FF,$FF,$FF,$C1,$C9
   .BYTE $C9
  .BYTE $FC
   .BYTE $FC
   .BYTE $FF
   .BYTE $FF
   .BYTE $FF
   .BYTE $FF,$FF,$00,$FF,$FF,$FF
   .BYTE $FF
   .BYTE $FF
   .BYTE $E0
   .BYTE $E4
  .BYTE $24
  .BYTE $E4
   .BYTE $E0,$FF,$FF,$FF,$FF,$FF,$00,$FF
        .BYTE $FF,$FF,$FF,$FF,$FC,$FC
  .BYTE $3C
	.BYTE $00,$00,$00,$00,$00,$00,$00 ; CLEAR FROM 8000 UPTO 82FA = 672 TO CLEAR
        .BYTE $00,$00,$00
f800A   .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
f801A   .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
f802A   .BYTE $00,$00,$00,$00,$00,$00,$00,$00
        .BYTE $00,$00,$00,$00,$00,$00,$00,$00
.FILL 80*8,0
        .BYTE $00
		
; ** CODE BLOCK START **  TAKES IN X AND RETURNS 08 / 09   
        
FPMUL        ; fpMul - ; Input:  [08] = fp multiplier ;         XY   = fp multiplicand ; Output: [08] and XY = result
	LDA LOG_TABLE,X
        LDX ab08
        CLC 
        ADC LOG_TABLE,X
        TAX 
        TYA 
        BCC b830A
        ADC #$03
        CLC 
b830A   
	ADC ab09
        BVS MATH_LIMIT 
        AND #$FD
        STA ab09
        TAY 
        LDA EXP_TABLE,X
        TAX 
        STA ab08
        RTS 

MATH_LIMIT   
	BPL b8328
        AND #$01
        ORA #$78
        TAY 
        LDX #$00
        STX ab08
        STY ab09
        RTS 

b8328   
	AND #$01
        ORA #$84
b832C   
	TAY 
        LDX #$00
        STX ab08
        STY ab09
        RTS 

; ** CODE BLOCK END **        

; ** CODE BLOCK START ** TAKES IN 08 AND X AND Y AND RETURNS 08 AND 09

FPDIV ; fpDiv - Input:  [08] = fp divisor - XY   = fp dividend - Output: [08] and XY = result
	STY ab06
        LDY ab08
        LDA LOG_TABLE,Y
        SEC 
        SBC LOG_TABLE,X
        TAX 
        LDA ab09
        ORA #$02
        BCS b8349
        SBC #$03
        SEC 
b8349   
	SBC ab06
        BVS MATH_LIMIT 
        AND #$FD
        STA ab09
        TAY 
        LDA EXP_TABLE,X
        TAX 
        STA ab08
        RTS 

FPADD ; ($838B entry point)  
	LDA ab18
        LSR 
        BCS b8373
        TXA 
        ADC ab08
        ROR 
        INY 
        INY 
        INY 
        INY 
        TAX 
        STA ab08
        STY ab09
        RTS 

b836C   TYA 
        ASL 
        BCC b83CC
        JMP j8419

b8373   TXA 
        SBC ab08
        BEQ b8383
        BCS b83D5
        LDY ab09
        EOR #$FF
        ADC #$01
        JMP b83D5

b8383   TYA 
        SEC 
        SBC #$24
        BVS b8328
        BVC b832C
	
BIT16TOFP ; ? takes in x and y does something with 8 and 9 and outputs x and y? = test with x = 38 / y = 25 and check output then pass results into fpto16 and see if 38/25 is returned?
s838B   TYA			; looks like some fp conversion?
        SEC 
        SBC ab09
        BVS b836C
        STA ab18
        ADC #$01
        BVS b836C
        BMI b83F5
        LSR 
        LSR 
        BEQ FPADD
        CMP #$09
        BCS b83CC
        EOR #$0F
        STA ab83AB
        LDA ab08
        SEC 
        ROR 
ab83AB   =*+$01 ; looks like part of fp calculation?
        BNE b83B3
        NOP 
        NOP 
        NOP 
        NOP 
        NOP 
        NOP 
        NOP 
b83B3   LSR 
        LSR 
        LSR 
        LSR 
        LSR 
        LSR 
        LSR 
        STA ab06
        LDA ab18
        LSR 
        TXA 
        BCS b83D1
b83C2   ADC ab06
        BCC b83CB
        LSR 
        INY 
        INY 
        INY 
        INY 
b83CB   TAX 
b83CC   STX ab08
        STY ab09
        RTS 

b83D1   SBC ab06
        BCS b83CB
b83D5   STY ab06
        LDY #$00
b83D9   ASL 
        DEY 
        BCC b83D9
        TAX 
        TYA 
        ASL 
        ASL 
        CLC 
        ADC ab06
        BVS b83EC
        TAY 
        STX ab08
        STY ab09
        RTS 

b83EC   
	LDX #<p8400
        LDY #>p8400
        STX ab08
        STY ab09
        RTS 

b83F5   
	CMP #$E0
        BCC j8419
        LSR 
        LSR 
        AND #$07
        STA ab8404
p8400   TXA 
        SEC 
        ROR 
ab8404   =*+$01
        BNE b8408
        LSR 
        LSR 
        LSR 
b8408   LSR 
        LSR 
        LSR 
        LSR 
        STA ab06
        LDY ab09
        LDA ab18
        LSR 
        LDA ab08
        BCC b83C2
        BCS b83D1
j8419   LDX ab08
        LDY ab09
        RTS 

; ** CODE BLOCK END **

; ** CODE BLOCK START ** - TAKES IN XY AND LOOKS UP 5B00 AND 5A00 AND RETURNS XY

COS_FP	INY 
SIN_FP	TYA 
		LSR 
		BCC b8429
			TXA 
			EOR #$FF
			TAX 
			TYA 
			LSR 
b8429   AND #$01
		ORA SIN_MSB,X
		TAY 
		LDA SIN_LSB,X
		TAX 
		RTS 

; ** CODE BLOCK END **

; ** CODE BLOCK START ** - TAKES IN Y (and X?) Y as mantissa and X as exponent?

; Y format = floating point position 
; bit0 = ignored / shifted out - first bit can be set to show negative?
; bit1 = ignored / shifted out
; bit2 = 
; bit3 = 
; bit4 = 
; bit5 = 
; bit6 = 
; bit7 = must be 0 or if set value must be gt FC for 1 to be added to result?

; X format = actual number
; bit0 = 
; bit1 = 
; bit2 = 
; bit3 = 
; bit4 = 
; bit5 = 
; bit6 = 
; bit7 = 

FPTO8BIT
		TYA 			; transfer y (floating point position) to a
		BMI	b849F		; if negative
		LSR 			; divide and remove first bit
        LSR 			; divide and remove second bit
        CMP #$07		; is it greater than 7
        BCS b84A6		; yes so error so exit with carry set
        STA ab8487+1	; no so self modifying code to jump forward a number of divides
        TXA 			; transfer x (actual number) to a
        SEC 			; set carry
        ROR 			; /2 - putting 1 in top bit (and putting 0 in carry?) 
ab8487  BNE b848C		; jump forward self modifying code - always done as carry is set so ROR result is never 0
        LSR 			; /2
        LSR 			; /4
        LSR 			; /8
        LSR 			; /16
b848C   LSR 			; /32
        LSR 			; /64
        LSR 			; /128
b848F   ADC #$00		; add carry?
        BMI b84A5		; if minus then error?
        TAX 			; backup result
        TYA 			; transfer y to a
        LSR				; / 2
        TXA 			; restore result
        BCC b849E		; clear carry so ok?
		EOR #$FF		; negate?
			ADC #$00		; negete by adding carry that is already set?
			CLC 			; clear carry for ok?
b849E   RTS 			; exit

b849F   CMP #$FC		; sets the carry flag if greater than (11111100 binary)
        LDA #$00		; resets the output x value? 
        BEQ b848F		; jump back into code

b84A5   SEC 			; set carry for error?
b84A6   RTS 			; exit

; ** CODE BLOCK END **

; ** CODE BLOCK START **

FPTO16BIT
		TYA 
        BMI b8501
        LSR 
        LSR 
        CMP #$0F
        BCS b84A6
        STA ab06
        ASL 
        ADC ab06
        STA ab84C2
        LDA #$00
        STA ab06
        TXA 
        SEC 
        ROR 
        ROR ab06
ab84C2   =*+$01
        BCC b84D2
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
b84D2   LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
b84D9   ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        LSR 
        ROR ab06
        TAX 
        TYA 
        LDY ab06
        LSR 
        BCC b8500
        TXA 
        EOR #$FF
        TAX 
        TYA 
        EOR #$FF
        TAY 
        CLC 
b8500   RTS 

b8501   TYA 
        LSR 
        BCC b850B
        LDX #$FF
        LDY #$FF
        CLC 
        RTS 

b850B   LDX #$00
        LDY #$00
        RTS 

; ** CODE BLOCK END **

; ** CODE BLOCK START **


BIT24TOFP ; MATH_24BitToFP (FP.SetToObjectSpaceCoordinate24) ; Enter: A =    Coordinate.MSB ;        X =    Coordinate.PSB ;        [07] = Coordinate.LSB ; Usese: [06].b  Temporary store for coordinate MSB ; Exit:  [08].fp Result, also stored in X:A (exp:man)
		STA ab06 ; store msb
        ORA #$00 ; needed?
        BPL b8527 ; positive ?
			LDA #$00 ; negative so 
			SEC 
			SBC ab07 ; negate lsb
			STA ab07
			TXA 		; negate psb
			EOR #$FF
			ADC #$00
			TAX 
			LDA #$00
			SBC ab06	; negate msb
b8527   BNE b8538	; if msb not 0
			TXA 		; move psb to a
			BNE b854F	; if psb not 0
				LDA ab07	; get lsb
				BEQ b8553	; if lsb not 0
					LDX #$00
					STX ab07
					LDX #$08
					BNE b853C ; jump?
b8538   STX ab07
        LDX #$18
b853C   	DEX 
			ASL ab07 ; *2
			ROL 	 ; *2
			BCC b853C
        STA ab08
        TXA 
        ASL 
        ASL ab06
        ROL 
        TAX 
        STX ab09
        LDA ab08
        RTS 

b854F   LDX #$10
        BNE b853C ; jump?
		
b8553   LDA #<OVERFLOW ; overflow?
        LDX #>OVERFLOW
        STA ab08
        STX ab09
        RTS 

; ** CODE BLOCK END **

OVERFLOW = $E000 ; overflow?

MAIN_LOOP   JSR SIN_COS
			JSR DRAW_SCREEN
			JSR COLOUR_SETUP_WHITE
			JSR DRAW_OBJECTS
			JSR READ_JOYSTICK_KEYBOARD
			JSR MOVEMENT
			JMP MAIN_LOOP

STARTUP	; CALL STARTUP BEFORE CALLING MAIN - needs to setup vic pointers?
	SEI
	
	PHA
	TXA
	PHA
	TYA
	PHA

;    LDA #0
;	STA $08
;	STA $09
	
;	ldx #$fd ; #$38 ; #fd
;	ldy #$8f ; #$25 ; #8f
;	jsr	s838B

;	ldx #$38 ; #fd
;	ldy #$25 ; #8f
;	jsr	s838B

;	ldx #$fd ; #$38 ; #fd
;	ldy #$8f ; #$25 ; #8f
;	jsr FPTO8BIT

;	ldx #$38 ; #fd
;	ldy #$25 ; #8f
;	jsr FPTO8BIT

;	txa
;	tya
		
	LDA #$35
	STA $1
	LDA #$70
	STA $D018
	LDA #$3B
	STA $D011
	LDA #$00 
	STA $D021
	LDA #$18
	STA $D016
	LDA #<pBA1E
	STA $FFFE
	LDA #>pBA1E
	STA $FFFF

 LDA #$7F
 STA $DC0D  ; disable timer interrupts which can be generated by the two CIA chips
 STA $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

 LDA $DC0D  ; by reading this two registers we negate any pending CIA irqs.
 LDA $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

  LDA #$01   ; this is how to tell the VICII to generate a raster interrupt
 STA $D01A

;; LDA #<NMI_NOP ; lsb
;; STA $FFFA ; Create a nop, irq handler for NMI that gets called whenever RESTORE is pressed or similar.
;; LDA #>NMI_NOP ; msb
;; STA $FFFB ; We're putting our irq handler directly in the vector that usually points to the kernal's NMI handler since we have kernal banked out.

;; LDA #$00  ; Force an NMI by setting up a timer. This will cause an NMI, that won't be acked. Any subsequent NMI's from RESTORE will be essentially disabled.
;; STA $DD0E       ; Stop timer A
;; STA $DD04       ; Set timer A to 0, NMI will occure immediately after start
;; STA $DD0E

;; LDA #$81
;; STA $DD0D       ; Set timer A as source for NMI

;; LDA #$01
;; STA $DD0E       ; Start timer A -> NMI
	
 LDA #2 ; SCRNBANK
 STA $DD00 ; bank

	
	LDA #$BA
	STA $D012
	LDA #$01
	STA $D019



	LDX #253
ZP_LOOP	LDA ZP,X
	STA 00,X
	DEX 
	CPX #2
	BNE ZP_LOOP
	
	PLA
	TAY
	PLA
	TAX
	PLA
		
	CLI
	JMP MAIN_LOOP

pBA1E   PHA 
        TXA 
        PHA 
        TYA 
        PHA 
        LDA #<pB9BB
        STA IRQ   ;IRQ
        LDA #>pB9BB
        STA IRQ+1   ;IRQ
        LDA #$00
        STA $D012    ;Raster Position
        LDA #$01
        STA $D019    ;VIC Interrupt Request Register (IRR)
        LDA #$7E
        LDX #$1B
        LDY #$01
        STA $D018    ;VIC Memory Control Register
        STX $D011    ;VIC Control Register 1
        STY $D021    ;Background Color 0
        LDA #$08
        STA $D016    ;VIC Control Register 2
		PLA 
        TAY 
        PLA 
        TAX 
        PLA 
NMI_NOP	RTI ; This is the irq handler for the NMI. Just returns without acknowledge. This prevents subsequent NMI's from interfering.

pB9BB  	PHA
        LDA VIC_SCREEN_BANK
        STA $D018    ;VIC Memory Control Register
		LDA #$3B
        STA $D011    ;VIC Control Register 1
        LDA abA3 ; not needed?
        STA $D021    ;Background Color 0 ; not needed?
        LDA #$18
test    STA $D016    ;VIC Control Register 2
        LDA #<pBA1E
        STA IRQ   ;IRQ
        LDA #>pBA1E
        STA IRQ+1   ;IRQ
        LDA #$BA
        STA $D012    ;Raster Position
        LDA #$01
        STA $D019    ;VIC Interrupt Request Register (IRR)
        PLA 
        RTI
                        
s8DAA   LDA abE6
        BNE b8DC2
        LDA f20E0,X
        STA ab8E28
        LDA f20A0,X
        STA ab8E27
        LDA #$00
        STA abDE
        STA abDF
        DEC abE6
b8DC2   RTS 

b8E05   LDX abDF
        BEQ b8E1E
ab8E0A   =*+$01
ab8E0B   =*+$02
        LDA f1512,X
        TAX 
        ASL 
        CMP #$14
        ROR 
        STA abFC
        TXA 
        BPL b8E1B
b8E16   LDA #$00
        STA abDF
b8E1A   RTS 

b8E1B   INC abDF
        RTS 

b8E1E   LDA #$A0 ; right edge
        STA abFC
        INC abDE
        LDX abDE
ab8E27   =*+$01
ab8E28   =*+$02
        LDY f167A,X
        BEQ b8E50
        CPY #$EF
        BCC b8E3D
        BEQ b8E16
        CPY #$FF
        BEQ b8E55
        CPY #$F8
        BCS b8E74
        LDA f56E8,Y
        TAY 
b8E3D   LDA f2120,Y
        STA ab8E0A
        LDA f2210,Y
        STA ab8E0B
        INC abDF
        CPY #$08
        BCC b8E05
        RTS 

b8E50   LDY #$01
        STY abE6
        RTS 

b8E55   LDA ab8E27
        STA ab8E0A
        STA ab8E6D
        LDA ab8E28
        STA ab8E0B
        STA ab8E6E
        INX 
        STX abDF
        DEX 
b8E6B   INX 
ab8E6D   =*+$01
ab8E6E   =*+$02
        LDA f0A5C,X
        BPL b8E6B
        STX abDE
        RTS 

b8E74   TYA 
        AND #$07
        ASL 
        ASL 
        TAX 
        ASL 
        TAY 
        ADC #$1F
        STA ab8E0A
        LDA #$77
        ADC #$00
        STA ab8E0B
        LDA #$04
        STA ab06
b8E8C   LDA f7700,X
        AND #$F0
        BNE b8EA5
        LDA f7700,X
        AND #$0F
        BNE b8EB2
        INX 
        DEC ab06
        BNE b8E8C
        BEQ b8EBA
b8EA1   LDA f7700,X
        INY 
b8EA5   LSR 
        LSR 
        LSR 
        LSR 
        STA f7720,Y
        LDA f7700,X
        INY 
        AND #$0F
b8EB2   STA f7720,Y
        INX 
        DEC ab06
        BNE b8EA1
b8EBA   ORA #$80
        STA f7720,Y
        INC abDF
        RTS 

b950D   LDA #$FF
        STA abB9
        LDA CURR_Z_HSB
        ORA CURR_X_HSB
        AND #$F0
        BEQ b951D
        LDA #$00
        BEQ b952B
b951D   LDA CURR_Z_HSB
        ASL 
        ASL 
        ASL 
        ASL 
        STA ab06
        LDA CURR_X_HSB
        AND #$0F
        ORA ab06
b952B   STA abB7
        BEQ j9532
		RTS

j9532   LDA CURR_Y_HSB
        STA ab06
        CMP #$20
        BCC b9542
        LDY #$00
        NOP
        NOP
        NOP
        JMP j9560

b9542   LDA CURR_Y_MSB
        LSR ab06
        ROR 
        LSR ab06
        ROR 
        LSR ab06
        ROR 
        LDX ab06
        BEQ b9553
        LDA #$FF
b9553   TAX 
        LDA f2A00,X
        CMP abB9
        BEQ j9560
        STA abB9
        nop
        nop
        nop
j9560   LDA ab89
        STA ab70
        LDA ab8B
        STA ab71
        LDA CURR_X_HSB
;        STA ab85
        LDA CURR_Y_HSB
;        STA ab86
        LDA CURR_Z_HSB
;        STA ab87
		RTS 

DRAW_OBJECTS
	LDY DRAW_OBJECT_COUNT ; number of objects to draw
	BEQ DRAW_OBJECTS_EXIT ; exit if none
		STY DRAW_OBJECT_COUNTER ; store temp object count
DRAW_OBJECTS_LOOP   	
		LDX OBJECTS_TO_DRAW,Y 	; object number
		JSR DRAW_OBJECT
		DEC DRAW_OBJECT_COUNTER ; dec temp object count
		LDY DRAW_OBJECT_COUNTER ; get temp object count
		BNE DRAW_OBJECTS_LOOP 	; exit y/n
DRAW_OBJECTS_EXIT 
	RTS 	; exit

DRAW_OBJECT
	STX	CURRENT_OBJECT					; store object number 
	LDA	OBJECT_SHAPE_PTR_LO,X	; get object pos hi
	STA	OBJECT_POINTER			; store in pointer
	LDA	OBJECT_SHAPE_PTR_HI,X	; get object pos lo
	STA	OBJECT_POINTER+1		; store in pointer
	JSR	CAMERA_OBJECT_DIFF
	JSR	DRAW_OBJECT_SHAPE 		; draw object
        BCS	b973D
b973C   
	RTS 

b973D   
		LDX	#$00
        STX	ab19
        LDY	#$01
        JSR	s999A
        BCC	b978A
        LDA	DIFF_Y_HSB
        BPL	b9755
        LDY	abB9
        LDX	#$00
        JSR	s999A
        BCS	b973C

b9755 ; object is a point
		LDA	DIFF_X_LSB
        STA	ab07
        LDX	DIFF_X_MSB
        LDA	DIFF_X_HSB
        JSR	BIT24TOFP
        STA	X_POS_HI
        STX	X_POS_LO
        LDA	DIFF_Y_LSB
        STA	ab07
        LDX	DIFF_Y_MSB
        LDA	DIFF_Y_HSB
		RTS
		
        STA	Y_POS_HI
        STX	Y_POS_LO
        LDA	DIFF_Z_LSB
        STA	ab07
        LDX	DIFF_Z_MSB
        LDA	DIFF_Z_HSB
        JSR	BIT24TOFP
        STA	Z_POS_HI
        STX	Z_POS_LO
        JSR	PRSPCTV
        LDX	#$00
        JMP	PLOT_POINT 	; PLOT POINT

b978A   LDA DIFF_X_MSB
        SEC 
        SBC #$08
        STA DIFF_X_MSB
        BCS b9795
        DEC DIFF_X_HSB
		
b9795   LDA DIFF_Y_MSB
        SEC 
        SBC #$08
        STA DIFF_Y_MSB
        BCS b97A0
        DEC DIFF_Y_HSB

b97A0   LDA DIFF_Z_MSB
        SEC 
        SBC #$08
        STA DIFF_Z_MSB
        BCS b97AB
        DEC DIFF_Z_HSB

b97AB   LDY #$00
        STY POINT_LINE_COUNT ; start point count
        LDA (OBJECT_POINTER),Y ; object point count
        STA NUMBER_OF_POINTS ; number of points?
        STY OBJECT_POINTER_POS ; store mem pos

b97B5   JSR sA61F
        JSR PRSPCTV
        LDA POINT_LINE_COUNT ; get point count
        INC POINT_LINE_COUNT ; inc point count
        CMP NUMBER_OF_POINTS ; last point yn
        BNE b97B5  ; no so do next
        INC OBJECT_POINTER_POS ; inc mem pos
        LDY OBJECT_POINTER_POS ; get mem pos
        LDA (OBJECT_POINTER),Y  ; object line count
        STA POINT_LINE_COUNT  ; number of lines?
        BPL NEXT_COMPRESSED_LINE

NEXT_LINE  
		LDY OBJECT_POINTER_POS ; get mem pos
        INY  ; inc mem pos
        LDA (OBJECT_POINTER),Y ; get 1st point
        TAX ; 1st point
        INY ; inc mem pos
        LDA (OBJECT_POINTER),Y ; get 2nd point
        STY OBJECT_POINTER_POS ; store 2nd point?
        TAY ; 2nd point
        JSR LINE_DRAW ; draw line
        DEC POINT_LINE_COUNT ; dec line count
        BMI NEXT_LINE ; last line y/n
        RTS ; yes

NEXT_COMPRESSED_LINE    ; first and second point are stored in 1 byte as 2 nibbles
		LDY OBJECT_POINTER_POS ; get mem pos
        INY  ; inc mem pos
        STY OBJECT_POINTER_POS ; store mem pos
        LDA (OBJECT_POINTER),Y ; get point count
        TAX  ; store backup
        AND #$0F ; and with 15 = 1st point
        TAY ; y = first point
        TXA  ; get backup
        LSR  ; /2
        LSR  ; /2
        LSR  ; /2
        LSR  ; /2
        TAX  ; divide by 16 = 2nd point
        JSR LINE_DRAW       ; DRAW LINE
        DEC POINT_LINE_COUNT ; dec line count
        BPL NEXT_COMPRESSED_LINE ; last line yn
        RTS  ; yes

DRAW_OBJECT_SHAPE ; draw the object
        LDX #$01
        LDY #$00
        JSR s999A
        BCS b984D ; error so exit
        LDX CURRENT_OBJECT
        LDA b29EF
        BMI b9823
        LDA f29C0,X
        AND #$10
        BNE b984D ; error so exit
        LDA ab29DB
        BMI b9823
        LDA f29C0,X
        AND #$20
        BNE b9848
b9823   TXA
        LDX abEB
        INX 
        CPX #$0B
        BCS b984D ; error so exit
        STX abEB
        STA fBEB0,X
        TAX 
        LDA f29C0,X
        ORA #$80
        STA f29C0,X
;  		LDA #$FF
;        STA f2940,X
        CLC ; ok 
        RTS 

b9848   LDX #$02
        JSR s8DAA
b984D   SEC ; error so exit
        RTS 

CAMERA_OBJECT_DIFF ; calc diff between object pos and current pos  
		SEC 
        LDA OBJ_X_LSB,X		;
        SBC CURR_X_LSB		;
        STA DIFF_X_LSB		;
        LDA OBJ_X_MSB,X		;
        SBC CURR_X_MSB		;
        STA DIFF_X_MSB		;
        LDA OBJ_X_HSB,X		;
        SBC CURR_X_HSB		;
        STA DIFF_X_HSB		;
        SEC 
        LDA OBJ_Y_LSB,X		;
        SBC CURR_Y_LSB		;
        STA DIFF_Y_LSB		;
        LDA OBJ_Y_MSB,X		;
        SBC CURR_Y_MSB		;
        STA DIFF_Y_MSB		;
        LDA OBJ_Y_HSB,X		;
        SBC CURR_Y_HSB		;
        STA DIFF_Y_HSB		;
        SEC 
        LDA OBJ_Z_LSB,X		;
        SBC CURR_Z_LSB		;
        STA DIFF_Z_LSB		;
        LDA OBJ_Z_MSB,X		;
        SBC CURR_Z_MSB		;
        STA DIFF_Z_MSB		;
        LDA OBJ_Z_HSB,X		;
        SBC CURR_Z_HSB		;
        STA DIFF_Z_HSB		;
        RTS 

s999A   STX ab08
        STY ab09
        LDA DIFF_X_LSB
        LDX DIFF_X_MSB
        LDY DIFF_X_HSB
        JSR s99BE
        BCS b99BD ; error so exit
        LDA DIFF_Y_LSB
        LDX DIFF_Y_MSB
        LDY DIFF_Y_HSB
        JSR s99BE
        BCS b99BD ; error so exit
        LDA DIFF_Z_LSB
        LDX DIFF_Z_MSB
        LDY DIFF_Z_HSB
        JSR s99BE
b99BD   RTS 

s99BE   	; negate a/x/y which hold lsb/msb/hsb if needed and subtract 08 and 09 from msb/hsb 
			BPL CONTINUE1 	; if number is positive continue 
			EOR #$FF  		; negative so negate LSB
			PHA 			; backup LSB
			TXA       		; negate MSB
			EOR #$FF		;
			TAX 			;
			TYA 			; negate HSB
			EOR #$FF		;
			TAY 			;
			PLA 			; restore LSB
			CLC 
			ADC #$01		; inc LSB
			BCC CONTINUE1	; no overlow so continue
			INX 			; inc MSB
			BNE CONTINUE1	; no overlow so continue
			INY 			; inc HSB
CONTINUE1   SEC 
			TXA 
			SBC ab08		; subtract from MSB
			TYA 
			SBC ab09		; subtract from HSB
			RTS 
        
LINE_DRAW ; LINE_DRAW_04 - DRAW LINE - x is start index - y is end index
        LDA POINT_CLASSIFICATION,X ; point 1 classification
        BEQ b9A07 ; point onscreen
        BMI b99FB ; point behind
        LDA POINT_CLASSIFICATION,Y ; point 2 classification 
        BEQ b99FB ; point onscreen
        BMI b9A07 ; point behind
        LDA UNKNOWN_POINT_TAB_1,Y 
        EOR #$80
        STA ab06
        LDA UNKNOWN_POINT_TAB_1,X
        EOR #$80
        CMP ab06
        BCS b9A07

b99FB   TYA 
        STX ab06
        TAX 
		LDY ab06
        LDA POINT_CLASSIFICATION,X ; point 1 classification
        BPL b9A07 ; point infront
        RTS 

b9A07   LDA POINT_CLASSIFICATION,X ; point 1 classification
        STA ab6E
        BMI b9A2C ; point behind 
        LDA PERS_HOR,X
        STA LINE_START_HOR
        LDA PERS_VER,X
        STA LINE_START_VER
        LDA UNKNOWN_POINT_TAB_2,X
        STA ab5E
        LDA UNKNOWN_POINT_TAB_3,X
        STA ab5F
        LDA UNKNOWN_POINT_TAB_4,X
        STA ab60
        LDA UNKNOWN_POINT_TAB_5,X
        STA ab61

b9A2C   LDA UNKNOWN_POINT_TAB_6,X
        STA X_POS_HI
        LDA UNKNOWN_POINT_TAB_7,X
        STA X_POS_LO
        LDA UNKNOWN_POINT_TAB_8,X
        STA Y_POS_HI
        LDA UNKNOWN_POINT_TAB_9,X
        STA Y_POS_LO
        LDA UNKNOWN_POINT_TAB_10,X
        STA Z_POS_HI
        LDA UNKNOWN_POINT_TAB_1,X
        STA Z_POS_LO
        LDA POINT_CLASSIFICATION,Y
        STA ab6F
        BMI b9A6F
        LDA PERS_HOR,Y
        STA ab6C
        LDA PERS_VER,Y
        STA ab6D
        LDA UNKNOWN_POINT_TAB_2,Y
        STA ab62
        LDA UNKNOWN_POINT_TAB_3,Y
        STA ab63
        LDA UNKNOWN_POINT_TAB_4,Y
        STA ab64
        LDA UNKNOWN_POINT_TAB_5,Y
        STA ab65
		
b9A6F   LDA UNKNOWN_POINT_TAB_6,Y
        STA ab58
        LDA UNKNOWN_POINT_TAB_7,Y
        STA ab59
        LDA UNKNOWN_POINT_TAB_8,Y
        STA ab5A
        LDA UNKNOWN_POINT_TAB_9,Y
        STA ab5B
        LDA UNKNOWN_POINT_TAB_10,Y
        STA ab5C
        LDA UNKNOWN_POINT_TAB_1,Y
        STA ab5D
        LDA ab6F
        BPL b9A94
        JMP j9B2C ; LINE DRAW

b9A94   LDX ab5E
        LDA ab5F
        EOR #$01
        STX ab08
        STA ab09
        LDX ab62
        LDY ab63
        JSR s838B
        STX ab0A
        STY ab0B
        TYA 
        ASL 
        AND #$02
        STA ab67
        LDX ab60
        LDA ab61
        EOR #$01
        STX ab08
        STA ab09
        LDX ab64
        LDY ab65
        JSR s838B
        STX ab0C
        STY ab0D
        TYA 
        AND #$01
        ORA ab67
        STA ab67
        LDX ab08
        LDA LOG_TABLE,X
        LDX ab0A
        SEC 
        SBC LOG_TABLE,X
        TAY 
        LDA ab09
        ORA #$02
        BCS b9AE0
        SBC #$03
        SEC 

b9AE0   SBC ab0B
        AND #$FD
        STA ab69
        LDX EXP_TABLE,Y
        STX ab68
        TAY 
        BMI b9B14
        LDA ab67
        ORA #$04
        STA ab67
        LDX ab0A
        LDA LOG_TABLE,X
        LDX ab0C
        SEC 
        SBC LOG_TABLE,X
        TAY 
        LDA ab0B
        ORA #$02
        BCS b9B09
        SBC #$03
        SEC 

b9B09   SBC ab0D
        AND #$FD
        STA ab09
        LDX EXP_TABLE,Y
        STX ab08

b9B14   TAY 
        BMI b9B1E
        LDA #$FF
        STA LINE_INC
        JMP j9C10

b9B1E   CLC 
        ADC #$20
        AND #$FC
        TAY 
        JSR FPTO16BIT
        STY LINE_INC
        JMP j9C10

j9B2C   LDX ab5C ; LINE_DRAW_03
        LDA LOG_TABLE,X
        LDX Z_POS_HI
        SEC 
        SBC LOG_TABLE,X
        TAY 
        LDA ab5D
        ORA #$02
        BCS b9B41
        SBC #$03
        SEC 

b9B41   SBC Z_POS_LO
        AND #$FD
        STA ab0B
        LDX EXP_TABLE,Y
        STX ab0A
        EOR #$01
        STA ab0B
        LDX ab0A
        LDA LOG_TABLE,X
        LDX X_POS_HI
        CLC 
        ADC LOG_TABLE,X
        TAY 
        LDA ab0B
        BCC b9B63
        ADC #$03
        CLC 
b9B63   ADC X_POS_LO
        AND #$FD
        STA ab09
        LDX EXP_TABLE,Y
        STX ab08
        LDX ab58
        LDY ab59
        JSR s838B
        STX ab0C
        STY ab0D
        TYA 
        EOR Z_POS_LO
        ASL 
        AND #$02
        STA ab67
        LDX ab0A
        LDA LOG_TABLE,X
        LDX Y_POS_HI
        CLC 
        ADC LOG_TABLE,X
        TAY 
        LDA ab0B
        BCC b9B94
        ADC #$03
        CLC 
b9B94   ADC Y_POS_LO
        AND #$FD
        STA ab09

f9B9A   LDX EXP_TABLE,Y
        STX ab08
        LDX ab5A
        LDY ab5B
        JSR s838B
        STX ab0A
        STY ab0B
        TYA 
        EOR Z_POS_LO
        AND #$01
        ORA ab67
        STA ab67
        LDX ab08
        LDA LOG_TABLE,X
        LDX ab0C
        SEC 
        SBC LOG_TABLE,X
        TAY 
        LDA ab09
        ORA #$02
        BCS b9BC8
        SBC #$03
        SEC 

b9BC8   SBC ab0D
        AND #$FD
        STA ab69
        LDX EXP_TABLE,Y
        STX ab68
        TAY 
        BMI b9BFC
        LDA ab67
        ORA #$04
        STA ab67
        LDX ab0C
        LDA LOG_TABLE,X
        LDX ab0A
        SEC 
        SBC LOG_TABLE,X
        TAY 
        LDA ab0D
        ORA #$02
        BCS b9BF1
        SBC #$03
        SEC 

b9BF1   SBC ab0B
        AND #$FD
        STA ab09
        LDX EXP_TABLE,Y
        STX ab08
		
b9BFC   TAY 
        BMI b9C05
        LDA #$FF
        STA LINE_INC
        BNE j9C10

b9C05   CLC 
        ADC #$20
        AND #$FC
        TAY 
        JSR FPTO16BIT
        STY LINE_INC
		
j9C10   LDX ab67    ; GET LINE TYPE 0-7
        LDY LINE_DRAW_CONV_PTR,X ; CONVERT LINE TYPE TO POINTER TYPE
        STY ab67    ; GET POINTER TO LINE NEEDED
        LDA LINE_DRAW_PTR_LO,Y ; GET POINTER TO CORRECT LINE
        STA LINE_JUMP_PTR_LO    ; STORE AT JUMP TABLE ADDRESS
        LDA LINE_DRAW_PTR_HI,Y ; GET POINTER TO CORRECT LINE
        STA LINE_JUMP_PTR_HI    ; STORE AT JUMP TABLE ADDRESS
        LDA ab6F
        BEQ b9C2F
        LDA fBBD8,Y
        STA ab6C
        LDA fBBE0,Y
        STA ab6D

b9C2F   LDA ab6E
        BNE b9C36
        JMP LINE_DRAW_JMP

b9C36   LDA ab61
        ASL 
        ASL 
        AND #$04
        ORA ab6E
        STA ab06
        LDA ab5F
        ASL 
        ASL 
        ASL 
        AND #$08
        ORA ab06
        TAX 
        TYA 
        ORA fBBE8,X
        LSR 
        TAX 
        LDA fBBF8,X
        BNE b9C56
        RTS 

b9C56   STA ab6E
        LDA ab6F
        BMI b9C7C
        LDA ab65
        ASL 
        ASL 
        AND #$04
        ORA ab6F
        STA ab06
        LDA ab63
        ASL 
        ASL 
        ASL 
        AND #$08
        ORA ab06
        TAX 
        TYA 
        ORA fBBE8,X
        LSR 
        TAX 
        LDA fBC18,X
        BNE b9C7C
        RTS 

b9C7C   LDA ab6E
        AND #$01
        BEQ b9CC1
        LDX ab92
        LDA ab93
        SEC 
        SBC ab21
        STX ab08
        STA ab09
        LDX ab5E
        LDA ab5F
        EOR #$01
        TAY 
        JSR s838B
        LDX ab68
        LDY ab69
        JSR FPMUL
        LDX ab60
        LDY ab61
        JSR s838B
        TYA 
        CLC 
        ADC ab21
        BVS b9CC1
        TAY 
        JSR FPTO8BIT
        BCS b9CC1
        CLC 
        ADC ab8F
        CMP #CLIP_TEST_BOTTOM ; clip test?
        BCS b9CC1
        STA LINE_START_VER
        LDA #CLIP_RIGHT ; clip right ?
        STA LINE_START_HOR ; clip right ?
        JMP LINE_DRAW_JMP

b9CC1   LDA ab6E
        AND #$02
        BEQ b9D06
        LDX ab96
        LDA ab97
        SEC 
        SBC ab21
        STX ab08
        STA ab09
        LDX ab60
        LDA ab61
        EOR #$01
        TAY 
        JSR s838B
        LDX ab68
        LDY ab69
        JSR FPDIV
        LDX ab5E
        LDY ab5F
        JSR s838B
        TYA 
        CLC 
        ADC ab21
        BVS b9D06
        TAY 
        JSR FPTO8BIT
        BCS b9D06
        CLC 
        ADC ab8E
        CMP #CLIP_TEST_RIGHT ; clip test
        BCS b9D06
        STA LINE_START_HOR
        LDA #CLIP_BOTTOM ; clip bottom
        STA LINE_START_VER ; clip bottom
        JMP LINE_DRAW_JMP

b9D06   LDA ab6E ; LINE DRAW
        AND #$04
        BEQ b9D4B
        LDX ab90
        LDA ab91
        SEC 
        SBC ab21
        STX ab08
        STA ab09
        LDX ab5E
        LDA ab5F
        EOR #$01
        TAY 
        JSR s838B
        LDX ab68
        LDY ab69
        JSR FPMUL
        LDX ab60
        LDY ab61
        JSR s838B
        TYA 
        CLC 
        ADC ab21
        BVS b9D4B
        TAY 
        JSR FPTO8BIT
        BCS b9D4B
        CLC 
        ADC ab8F
        CMP #CLIP_TEST_BOTTOM ; clip test
        BCS b9D4B
        STA LINE_START_VER
        LDA #CLIP_TEST_TOP ; clip off top
        STA LINE_START_HOR ; clip off top 
        JMP LINE_DRAW_JMP

b9D4B   LDA ab6E ; LINE DRAW
        AND #$08
        BEQ b9D98
        LDX ab94
        LDA ab95
        SEC 
        SBC ab21
        STX ab08
        STA ab09
        LDX ab60
        LDA ab61
        EOR #$01
        TAY 
        JSR s838B
        LDX ab68
        LDY ab69
        JSR FPDIV
        LDX ab5E
        LDY ab5F
        JSR s838B
        TYA 
        CLC 
        ADC ab21
        BVS b9D98
        TAY 
        JSR FPTO8BIT
        BCS b9D98
        CLC 
        ADC ab8E
        CMP #CLIP_TEST_RIGHT ; clip test
        BCS b9D98
        STA LINE_START_HOR
        LDA #CLIP_TEST_LEFT ; clip off left
        STA LINE_START_VER ; clip off left

LINE_DRAW_JMP
		LDX LINE_START_HOR
        LDY LINE_START_VER
        LDA #$80 ; set fraction to half 
        STA LINE_FRACTION_ab08 ; set line fraction
        JMP (LINE_JUMP_PTR) ; LINE_DRAW_01
b9D98   RTS 

;        STX ab29 ; not needed?
;jA12B   LDA abF2 ; not needed?
;        BMI bA13C ; not needed?
;        LDA ab99 ; not needed?
;        CLC  ; not needed?
;        ADC abA2 ; not needed?
;        STA ab99 ; not needed?
;        LDA ab9A ; not needed?
;        ADC #$00 ; not needed?
;        STA ab9A ; not needed?

;bA13C   RTS ; not needed?

JOYSTICK_MOVEMENT_TAB .BYTE $00,$01,$02,$03,$08,$09,$0A,$0B,$04,$05,$06,$07,$0C,$0D,$0E,$0F

MOVEMENT
		LDA abF1
        BEQ bA192
        LDX JOYSTICK_MOVEMENT
        LDA JOYSTICK_MOVEMENT_TAB,X
        STA JOYSTICK_MOVEMENT
		
bA192   ; MOVEMENT
        LDA #$01                    ; UP
        BIT JOYSTICK_MOVEMENT
        BNE bA1A1
			LDA #$01 ; FORWARD
			JSR FORWARD_BACK
bA1A1   LDA #$02					; DOWN
        BIT JOYSTICK_MOVEMENT
        BNE bA1AC
			LDA #$00	; BACKWARD
			JSR FORWARD_BACK
bA1AC   LDA #$04					; LEFT
        BIT JOYSTICK_MOVEMENT
        BNE bA1C1
			LDA ROT_LO	; LEFT
			CLC 
			ADC ROT_SPD
			STA ROT_LO
			LDA ROT_HI
			ADC #$00
			AND #$03
			STA ROT_HI
bA1C1   LDA #$08					; RIGHT
        BIT JOYSTICK_MOVEMENT
        BNE bA1D6
			LDA ROT_LO	; RIGHT
			SEC 
			SBC ROT_SPD
			STA ROT_LO
			LDA ROT_HI
			SBC #$00
			AND #$03
			STA ROT_HI
bA1D6 	RTS

FORWARD_BACK ; MOVEMENT? ; possibly redundant?  
		PHA 
        LDX abAA
        EOR abAB
        STX ab08
        STA ab09
        LDX ab3E
        LDY ab3F
        JSR FPMUL
        JSR FPTO16BIT
        TYA 
        CLC 
        ADC CURR_Z_LSB
        STA CURR_Z_LSB
        TXA 
        ADC CURR_Z_MSB
        STA CURR_Z_MSB
        TXA 
        BPL bA212 ; if +
        LDA #$FF	; set to 255 for -
        BMI bA214	; jmp
bA212   LDA #$00	; set to 0 for +
bA214   ADC CURR_Z_HSB	; either add or sub depending on + or -
        STA CURR_Z_HSB
        PLA 
        LDX abAA
        EOR abAB
        STX ab08
        STA ab09
        LDX ab3C
        LDY ab3D
        JSR FPMUL
        JSR FPTO16BIT
        TYA 
        CLC 
        ADC CURR_X_LSB
        STA CURR_X_LSB
        TXA 
        ADC CURR_X_MSB
        STA CURR_X_MSB
        TXA 
        BPL bA23D
        LDA #$FF
        BMI bA23F
bA23D   LDA #$00
bA23F   ADC CURR_X_HSB
        STA CURR_X_HSB
        LDA abB1
        BEQ bA249
        DEC abB1
bA249   RTS 

SIN_COS	LDX ROT_LO
        LDY ROT_HI
        JSR SIN_FP
        STX ab3C
        STY ab3D
        LDX ROT_LO
        LDY ROT_HI
        JSR COS_FP
        STX ab3E
        STY ab3F
        RTS 

sA61F  	LDY OBJECT_POINTER_POS
        INY 
        LDA (OBJECT_POINTER),Y ; get x
        STA abCF
        INY 
        LDA (OBJECT_POINTER),Y ; get y
        STA abD1
        INY 
        LDA (OBJECT_POINTER),Y ; get z
        STA abD3
        STY OBJECT_POINTER_POS
        JSR sA6AD
        LDA DIFF_X_LSB
        CLC  ; clear
        ADC abCF ; x lsb
        STA ab07
        LDA DIFF_X_MSB
        ADC abD0
        TAX 
        LDA DIFF_X_HSB
        ADC #$00
        JSR BIT24TOFP
        STA X_POS_HI
        STX X_POS_LO
        LDA DIFF_Y_LSB
        CLC 
        ADC abD1 ; y lsb
        STA ab07
        LDA DIFF_Y_MSB
        ADC abD2
        TAX 
        LDA DIFF_Y_HSB
        ADC #$00
        JSR BIT24TOFP
        STA Y_POS_HI
        STX Y_POS_LO
        LDA DIFF_Z_LSB
        CLC 
        ADC abD3 ; z lsb
        STA ab07
        LDA DIFF_Z_MSB
        ADC abD4
        TAX 
        LDA DIFF_Z_HSB
        ADC #$00
        JSR BIT24TOFP
        STA Z_POS_HI
        STX Z_POS_LO
        RTS 

sA6AD ; ROTATE POINTS ? 
		LDA #$00
        STA abD0
        STA abD2
        STA abD4
        LDA CURRENT_OBJECT
        CMP #$10
        BCS bA6F1
        LDX CURRENT_OBJECT
        LDA f802A,X
        BEQ bA6CD
bA6CD   LDX CURRENT_OBJECT
        LDA f801A,X
        BEQ bA6DF
bA6DF   LDX CURRENT_OBJECT ; abAF
        LDA f800A,X
        BEQ bA6F1
bA6F1   LDA abCF
        EOR #$80
        ASL 
        ROL abD0
        ASL 
        ROL abD0
        ASL 
        ROL abD0
        ASL 
        ROL abD0
        STA abCF
        LDA abD1
        EOR #$80
        ASL 
        ROL abD2
        ASL 
        ROL abD2
        ASL 
        ROL abD2
        ASL 
        ROL abD2
        STA abD1
        LDA abD3
        EOR #$80
        ASL 
        ROL abD4
        ASL 
        ROL abD4
        ASL 
        ROL abD4
        ASL 
        ROL abD4
        STA abD3
        RTS 

jA8E9   STX ab5A
        TYA 
        CLC 
        ADC #$04
        BVS bA8F2
			TAY 
bA8F2   STY ab5B
        STY ab09
        LDA ab6E
        BMI bA933
        LDX ab08
        LDA LOG_TABLE,X
        LDX ab5C
        SEC 
        SBC LOG_TABLE,X
        TAY 
        LDA ab09
        ORA #$02
        BCS bA90F
			SBC #$03
			SEC 
bA90F   SBC ab5D
        AND #$FD
        STA ab61
        LDX EXP_TABLE,Y
        STX ab60
        CLC 
        ADC ab21
        BVS bA92D
			TAY 
			JSR FPTO8BIT
        BCS bA92D
			ADC ab8F
			STA LINE_START_VER
			CMP #CLIP_TEST_BOTTOM ; clip test
			BCC bA933
bA92D   LDA ab6E
        ORA #$02
        STA ab6E
bA933   LDY ab19
        LDA ab6E
        STA POINT_CLASSIFICATION,Y
        BMI bA95A
        LDA ab5E
        STA UNKNOWN_POINT_TAB_2,Y
        LDA ab5F
        STA UNKNOWN_POINT_TAB_3,Y
        LDA ab60
        STA UNKNOWN_POINT_TAB_4,Y
        LDA ab61
        STA UNKNOWN_POINT_TAB_5,Y
        LDA LINE_START_HOR ; get perspective ver
		STA PERS_HOR,Y ; put perspective ver
        LDA LINE_START_VER ; get perspective hor
        STA PERS_VER,Y ; put perspective hor
bA95A   LDA ab58
        STA UNKNOWN_POINT_TAB_6,Y
        LDA ab59
        STA UNKNOWN_POINT_TAB_7,Y
        LDA ab5A
        STA UNKNOWN_POINT_TAB_8,Y
        LDA ab5B
        STA UNKNOWN_POINT_TAB_9,Y
        LDA ab5C
        STA UNKNOWN_POINT_TAB_10,Y
        LDA ab5D
        STA UNKNOWN_POINT_TAB_1,Y
        RTS 

PRSPCTV LDX X_POS_HI			; perspective for underground / walking? todo?
        LDA LOG_TABLE,X
        LDX ab3C
        CLC 
        ADC LOG_TABLE,X
        TAY 
        LDA X_POS_LO
        BCC bA98C
        ADC #$03
        CLC 
bA98C   ADC ab3D
        AND #$FD
        STA ab0B
        LDX EXP_TABLE,Y
        STX ab0A
        LDX Z_POS_HI
        LDA LOG_TABLE,X
        LDX ab3E
        CLC 
        ADC LOG_TABLE,X
        TAY 
        LDA Z_POS_LO
        BCC bA9AA
        ADC #$03
        CLC 
bA9AA   ADC ab3F
        AND #$FD
        STA ab09
        LDX EXP_TABLE,Y
        STX ab08
        LDX ab0A
        LDY ab0B
        JSR s838B
        STX ab5C
        TYA 
        EOR #$01
        STA ab5D
        AND #$01
        LSR 
        ROR 
        STA ab6E
        LDX X_POS_HI
        LDA LOG_TABLE,X
        LDX ab3E
        CLC 
        ADC LOG_TABLE,X
        TAY 
        LDA X_POS_LO
        BCC bA9DC
        ADC #$03
        CLC 
bA9DC   ADC ab3F
        AND #$FD
        STA ab0B
        LDX EXP_TABLE,Y
        STX ab0A
        LDX Z_POS_HI
        LDA LOG_TABLE,X
        LDX ab3C
        CLC 
        ADC LOG_TABLE,X
        TAY 
        LDA Z_POS_LO
        BCC bA9FA
			ADC #$03
			CLC 
bA9FA   ADC ab3D
        AND #$FD
        STA ab09
        LDX EXP_TABLE,Y
        STX ab08
        EOR #$01
        STA ab09
        LDX ab0A
        LDY ab0B
        JSR s838B
        STX ab58
        TYA 
        EOR abF1
        STA ab59
        LDY ab6E
        BNE bAA54
        STA ab09
        LDX ab08
        LDA LOG_TABLE,X
        LDX ab5C
        SEC 
        SBC LOG_TABLE,X
        TAY 
        LDA ab09
        ORA #$02
        BCS bAA32
        SBC #$03
        SEC 
bAA32   SBC ab5D
        AND #$FD
        STA ab5F
        LDX EXP_TABLE,Y
        STX ab5E
        CLC 
        ADC ab21
        BVS bAA50
        TAY 
        JSR FPTO8BIT
        BCS bAA50
        ADC ab8E
        STA LINE_START_HOR
        CMP #CLIP_TEST_RIGHT ; clip test
        BCC bAA54
bAA50   LDA #$01
        STA ab6E
bAA54   LDX Y_POS_HI
        LDA Y_POS_LO
        EOR #$01
        TAY 
        STX ab08
        STY ab09
        JMP jA8E9

LINE_DRAW_0_LOOP  	INX 
					LDA LINE_FRACTION_ab08
					ADC LINE_INC
					STA LINE_FRACTION_ab08
					BCC LINE_DRAW_0
						INY 
						CPY #CLIP_TEST_BOTTOM
						BEQ LINE_DRAW_0_EXIT
LINE_DRAW_0			LDA VER_POS_LO,Y ; LINE-DRAW-START
					STA SCREEN_POS_LO
					TXA 
					ASL 
					LDA VER_POS_HI,Y
					ADC SCREEN_BANK
					STA SCREEN_POS_HI
					STY ab06
					LDY HOR_SCR_POS,X
					LDA (SCREEN_POS_PTR),Y
LINE_DRAW_0_TYPE	AND PIXEL_POS,X
					STA (SCREEN_POS_PTR),Y
					LDY ab06
					CPX ab6C
					BNE LINE_DRAW_0_LOOP
LINE_DRAW_0_EXIT   RTS 

LINE_DRAW_1_LOOP   INY  ; LINE-DRAW
					LDA LINE_FRACTION_ab08
					ADC LINE_INC
					STA LINE_FRACTION_ab08
					BCC LINE_DRAW_1
						INX 
						CPX #CLIP_TEST_RIGHT ; clip test
						BEQ LINE_DRAW_1_EXIT
LINE_DRAW_1			LDA VER_POS_LO,Y ; LINE-DRAW-START
					STA SCREEN_POS_LO
					TXA 
					ASL 
					LDA VER_POS_HI,Y
					ADC SCREEN_BANK
					STA SCREEN_POS_HI
					STY ab06
					LDY HOR_SCR_POS,X
					LDA (SCREEN_POS_PTR),Y
LINE_DRAW_1_TYPE	AND PIXEL_POS,X
					STA (SCREEN_POS_PTR),Y
					LDY ab06
					CPY ab6D
					BNE LINE_DRAW_1_LOOP ; GOTO LINE-DRAW
LINE_DRAW_1_EXIT   	RTS 

LINE_DRAW_2_LOOP   	INY  ; LINE-DRAW
					LDA LINE_FRACTION_ab08
					ADC LINE_INC
					STA LINE_FRACTION_ab08
					BCC LINE_DRAW_2
						DEX 
						CPX #$FF
						BEQ LINE_DRAW_2_EXIT
LINE_DRAW_2			LDA VER_POS_LO,Y ; LINE-DRAW-START
					STA SCREEN_POS_LO
					TXA 
					ASL 
					LDA VER_POS_HI,Y
					ADC SCREEN_BANK
					STA SCREEN_POS_HI
					STY ab06
					LDY HOR_SCR_POS,X
					LDA (SCREEN_POS_PTR),Y
LINE_DRAW_2_TYPE	AND PIXEL_POS,X
					STA (SCREEN_POS_PTR),Y
					LDY ab06
					CPY ab6D
					BNE LINE_DRAW_2_LOOP ; GOTO LINE-DRAW
LINE_DRAW_2_EXIT   	RTS 

LINE_DRAW_3_LOOP  	DEX ; LINE-DRAW
					LDA LINE_FRACTION_ab08
					SBC LINE_INC
					STA LINE_FRACTION_ab08
					BCS LINE_DRAW_3
						INY 
						CPY #CLIP_TEST_BOTTOM
						BEQ LINE_DRAW_3_EXIT
LINE_DRAW_3			LDA VER_POS_LO,Y ; LINE-DRAW-START
					STA SCREEN_POS_LO
					TXA 
					ASL 
					LDA VER_POS_HI,Y
					ADC SCREEN_BANK
					STA SCREEN_POS_HI
					STY ab06
					LDY HOR_SCR_POS,X
					LDA (SCREEN_POS_PTR),Y
LINE_DRAW_3_TYPE	AND PIXEL_POS,X
					STA (SCREEN_POS_PTR),Y
					LDY ab06
					CPX ab6C
					BNE LINE_DRAW_3_LOOP ; GOTO LINE-DRAW
LINE_DRAW_3_EXIT   	RTS 

LINE_DRAW_4_LOOP   	DEX  ; LINE-DRAW
					LDA LINE_FRACTION_ab08
					SBC LINE_INC
					STA LINE_FRACTION_ab08
					BCS LINE_DRAW_4
						DEY 
						CPY #$FF
						BEQ LINE_DRAW_4_EXIT
LINE_DRAW_4			LDA VER_POS_LO,Y ; LINE-DRAW-START
					STA SCREEN_POS_LO
					TXA 
					ASL 
					LDA VER_POS_HI,Y
					ADC SCREEN_BANK
					STA SCREEN_POS_HI
					STY ab06
					LDY HOR_SCR_POS,X
					LDA (SCREEN_POS_PTR),Y
LINE_DRAW_4_TYPE  	AND PIXEL_POS,X
					STA (SCREEN_POS_PTR),Y
					LDY ab06
					CPX ab6C
					BNE LINE_DRAW_4_LOOP ; GOTO LINE-DRAW
LINE_DRAW_4_EXIT   	RTS 

LINE_DRAW_5_LOOP   	DEY  ; LINE-DRAW
					LDA LINE_FRACTION_ab08
					ADC LINE_INC
					STA LINE_FRACTION_ab08
					BCC LINE_DRAW_5
						DEX 
						CPX #$FF
						BEQ LINE_DRAW_5_EXIT
LINE_DRAW_5			LDA VER_POS_LO,Y ; LINE-DRAW-START
					STA SCREEN_POS_LO
					TXA 
					ASL 
					LDA VER_POS_HI,Y
					ADC SCREEN_BANK
					STA SCREEN_POS_HI
					STY ab06
					LDY HOR_SCR_POS,X
					LDA (SCREEN_POS_PTR),Y
LINE_DRAW_5_TYPE  	AND PIXEL_POS,X
					STA (SCREEN_POS_PTR),Y
					LDY ab06
					CPY ab6D
					BNE LINE_DRAW_5_LOOP ; GOTO LINE-DRAW
LINE_DRAW_5_EXIT  	RTS

LINE_DRAW_6_LOOP   	DEY  ; LINE-DRAW
					LDA LINE_FRACTION_ab08
					SBC LINE_INC
					STA LINE_FRACTION_ab08
					BCS LINE_DRAW_6
						INX             ; NEXT VER
						CPX #$A0        ; OFF BOTTOM
						BEQ LINE_DRAW_6_EXIT       ; EXIT
LINE_DRAW_6			LDA VER_POS_LO,Y ; LINE-DRAW-START
					STA SCREEN_POS_LO
					TXA 
					ASL 
					LDA VER_POS_HI,Y
					ADC SCREEN_BANK
					STA SCREEN_POS_HI
					STY ab06
					LDY HOR_SCR_POS,X
					LDA (SCREEN_POS_PTR),Y
LINE_DRAW_6_TYPE	AND PIXEL_POS,X
					STA (SCREEN_POS_PTR),Y
					LDY ab06
					CPY ab6D
					BNE LINE_DRAW_6_LOOP ; GOTO LINE-DRAW 
LINE_DRAW_6_EXIT	RTS 

LINE_DRAW_7_LOOP   	INX	; LINE-DRAW
					LDA	LINE_FRACTION_ab08
					ADC	LINE_INC
					STA	LINE_FRACTION_ab08
					BCC	LINE_DRAW_7
						DEY 
						CPY	#$FF
						BEQ	LINE_DRAW_7_EXIT
LINE_DRAW_7			LDA	VER_POS_LO,Y ; LINE-DRAW-START
					STA	SCREEN_POS_LO
					TXA 
					ASL 
					LDA VER_POS_HI,Y
					ADC SCREEN_BANK
					STA SCREEN_POS_HI
					STY ab06
					LDY HOR_SCR_POS,X
					LDA (SCREEN_POS_PTR),Y
LINE_DRAW_7_TYPE	AND PIXEL_POS,X
					STA (SCREEN_POS_PTR),Y
					LDY ab06
					CPX ab6C
					BNE LINE_DRAW_7_LOOP ; GOTO LINE DRAW
LINE_DRAW_7_EXIT   	RTS 

PLOT_POINT			LDA	POINT_CLASSIFICATION,X	; GET POINT FROM PLOT POINT TABLE ?
					BNE	PLOT_POINT_EXIT	; EXIT IF ITS not ZERO - this being set to not zero plots a point - what sets it to 0?
					LDY	PERS_VER,X	; GET VER POS
					LDA	VER_POS_LO,Y 
					STA	SCREEN_POS_LO
					LDA	PERS_HOR,X	; GET HOR POS
					TAX 	
					ASL 
					LDA	VER_POS_HI,Y
					ADC	SCREEN_BANK
					STA	SCREEN_POS_HI
					LDY	HOR_SCR_POS,X
					LDA	(SCREEN_POS_PTR),Y	; GET SCREEN BYTE
					AND	PIXEL_POS,X			; AND PIXEL
					STA	(SCREEN_POS_PTR),Y	; PUT SCREEN BYTE
PLOT_POINT_EXIT   	RTS 

COLOUR_SETUP_WHITE	LDA #$77
					LDX #$3D
					BNE COLOUR_SETUP ; JUMP
COLOUR_SETUP_BLACK	LDA #$56
					LDX #$1D
COLOUR_SETUP		STA LINE_DRAW_0_TYPE +2
					STA LINE_DRAW_1_TYPE +2
					STA LINE_DRAW_2_TYPE +2
					STA LINE_DRAW_3_TYPE +2
					STA LINE_DRAW_4_TYPE +2
					STA LINE_DRAW_5_TYPE +2
					STA LINE_DRAW_6_TYPE +2
					STA LINE_DRAW_7_TYPE +2
					STX LINE_DRAW_0_TYPE
					STX LINE_DRAW_1_TYPE
					STX LINE_DRAW_2_TYPE
					STX LINE_DRAW_3_TYPE
					STX LINE_DRAW_4_TYPE
					STX LINE_DRAW_5_TYPE
					STX LINE_DRAW_6_TYPE
					STX LINE_DRAW_7_TYPE
					RTS

DRAW_SCREEN			LDA	#$E0
WAIT_RASTER			CMP	$D012
					BNE WAIT_RASTER

		INC	SCREEN_FLIP	; INCREMENT SCREEN FLIP
        LDA	SCREEN_FLIP	; GET SCREEN FLIP
        LSR 				; SHIFT BIT0 INTO CARRY
        BCS	SCRN_2			; CARRY SET ?

		LDA	#SCREEN_0			; SCREEN 1 OFFSET
		STA	SCREEN_BANK		; SCREEN 1 OFFSET
		LDA	#$78
		STA	VIC_SCREEN_BANK
		BNE	SCNCLR			; JUMP

SCRN_2  LDA	#SCREEN_1		; SCREEN 2 OFFSET
        STA	SCREEN_BANK		; SCREEN 2 OFFSET
        LDA	#$70
        STA	VIC_SCREEN_BANK

SCNCLR  LDA #$AA
        LDX #136
        LDY SCREEN_BANK
        CPY #SCREEN_1
        BEQ CLSN1LP
CLSN0LP	STA SCREEN0-1+(136*00),X ; 1
        STA SCREEN0-1+(136*01),X ;f40F7,X ; 2
        STA SCREEN0-1+(136*02),X ;f41EF,X ;3
        STA SCREEN0-1+(136*03),X ;f42E7,X ;4
        STA SCREEN0-1+(136*04),X ;f43DF,X ;5
        STA SCREEN0-1+(136*05),X ;f44D7,X ;6
        STA SCREEN0-1+(136*06),X ;f45CF,X ;7
        STA SCREEN0-1+(136*07),X ;f46C7,X ;8
        STA SCREEN0-1+(136*08),X ;f47BF,X ;9
        STA SCREEN0-1+(136*09),X ;f48B7,X ;10
        STA SCREEN0-1+(136*10),X ;f49AF,X ;11
        STA SCREEN0-1+(136*11),X ;f4AA7,X ;12
        STA SCREEN0-1+(136*12),X ;f4B9F,X ;13
        STA SCREEN0-1+(136*13),X ;f4C97,X ;14
        STA SCREEN0-1+(136*14),X ;f4D8F,X ;15
        STA SCREEN0-1+(136*15),X ;f4E87,X ;16
        STA SCREEN0-1+(136*16),X ;f4F7F,X ;17
        STA SCREEN0-1+(136*17),X ;f5077,X ;18
        STA SCREEN0-1+(136*18),X ;f516F,X ;19
        STA SCREEN0-1+(136*19),X ;f5267,X ;20
        STA SCREEN0-1+(136*20),X ;f535F,X ;21
        STA SCREEN0-1+(136*21),X ;f5447,X ;22
		sta SCREEN0-1+(136*22),X ;f5447,x ;23
		sta SCREEN0-1+(136*23),X ;f5447,x ;24
		sta SCREEN0-1+(136*24),X ;f5447,x ;25
		sta SCREEN0-1+(136*25),X ;f5447,x ;26
		sta SCREEN0-1+(136*26),X ;f5447,x ;27
		sta SCREEN0-1+(136*27),X ;f5447,x ;28
		sta SCREEN0-1+(136*28),X ;f5447,x ;29
		sta SCREEN0-1+(136*29),X ;f5447,x ;30
		sta SCREEN0-1+(136*30),X ;f5447,x ;31
		sta SCREEN0-1+(136*31),X ;f5447,x ;32
		sta SCREEN0-1+(136*32),X ;f5447,x ;33
		sta SCREEN0-1+(136*33),X ;f5447,x ;34
		sta SCREEN0-1+(136*34),X ;f5447,x ;35
		sta SCREEN0-1+(136*35),X ;f5447,x ;36
		sta SCREEN0-1+(136*36),X ;f5447,x ;37
		sta SCREEN0-1+(136*37),X ;f5447,x ;38
		sta SCREEN0-1+(136*38),X ;f5447,x ;39
		sta SCREEN0-1+(136*39),X ;f5447,x ;40
		
        DEX 
        BNE CLSN0LP
        RTS 

CLSN1LP	STA SCREEN1-1+(136*00),X ; 1
        STA SCREEN1-1+(136*01),X ;f40F7,X ; 2
        STA SCREEN1-1+(136*02),X ;f41EF,X ;3
        STA SCREEN1-1+(136*03),X ;f42E7,X ;4
        STA SCREEN1-1+(136*04),X ;f43DF,X ;5
        STA SCREEN1-1+(136*05),X ;f44D7,X ;6
        STA SCREEN1-1+(136*06),X ;f45CF,X ;7
        STA SCREEN1-1+(136*07),X ;f46C7,X ;8
        STA SCREEN1-1+(136*08),X ;f47BF,X ;9
        STA SCREEN1-1+(136*09),X ;f48B7,X ;10
        STA SCREEN1-1+(136*10),X ;f49AF,X ;11
        STA SCREEN1-1+(136*11),X ;f4AA7,X ;12
        STA SCREEN1-1+(136*12),X ;f4B9F,X ;13
        STA SCREEN1-1+(136*13),X ;f4C97,X ;14
        STA SCREEN1-1+(136*14),X ;f4D8F,X ;15
        STA SCREEN1-1+(136*15),X ;f4E87,X ;16
        STA SCREEN1-1+(136*16),X ;f4F7F,X ;17
        STA SCREEN1-1+(136*17),X ;f5077,X ;18
        STA SCREEN1-1+(136*18),X ;f516F,X ;19
        STA SCREEN1-1+(136*19),X ;f5267,X ;20
        STA SCREEN1-1+(136*20),X ;f535F,X ;21
        STA SCREEN1-1+(136*21),X ;f5447,X ;22
		sta SCREEN1-1+(136*22),X ;f5447,x ;23
		sta SCREEN1-1+(136*23),X ;f5447,x ;24
		sta SCREEN1-1+(136*24),X ;f5447,x ;25
		sta SCREEN1-1+(136*25),X ;f5447,x ;26
		sta SCREEN1-1+(136*26),X ;f5447,x ;27
		sta SCREEN1-1+(136*27),X ;f5447,x ;28
		sta SCREEN1-1+(136*28),X ;f5447,x ;29
		sta SCREEN1-1+(136*29),X ;f5447,x ;30
		sta SCREEN1-1+(136*30),X ;f5447,x ;31
		sta SCREEN1-1+(136*31),X ;f5447,x ;32
		sta SCREEN1-1+(136*32),X ;f5447,x ;33
		sta SCREEN1-1+(136*33),X ;f5447,x ;34
		sta SCREEN1-1+(136*34),X ;f5447,x ;35
		sta SCREEN1-1+(136*35),X ;f5447,x ;36
		sta SCREEN1-1+(136*36),X ;f5447,x ;37
		sta SCREEN1-1+(136*37),X ;f5447,x ;38
		sta SCREEN1-1+(136*38),X ;f5447,x ;39
		sta SCREEN1-1+(136*39),X ;f5447,x ;40
        DEX 
        BNE CLSN1LP
        RTS 

READ_JOYSTICK_KEYBOARD
        LDA #$00
        STA $DC02    ;CIA1: Data Direction Register A
        LDA $DC00    ;CIA1: Data Port Register A
        TAX 
        AND #$0F
        STA JOYSTICK_MOVEMENT ; JOYSTICK MOVEMENT
        TXA 
        LSR 
        LSR 
        LSR 
        LSR 
        AND #$01
;        STA ab81 ; FIRE BUTTON
		bne rjk
			lda OBJECTS_TO_DRAW+1
			clc
			adc #1
			and #7
			sta OBJECTS_TO_DRAW+1
rjk		RTS 

LINE_DRAW_CONV_PTR      .BYTE $00,$07,$03,$04,$01,$06,$02,$05
fBBD8   .BYTE $9F,$9F,$00,$00,$00,$00,$9F,$9F
fBBE0   .BYTE $87,$87,$87,$87,$00,$00,$00,$00
fBBE8   .BYTE $40,$38,$08,$00,$40,$38,$28,$30
  .BYTE $40,$18,$08,$10,$40,$18,$28,$20
fBBF8   .BYTE $00,$00,$03,$00,$00,$00,$02,$02
  .BYTE $00
  .BYTE $00,$00,$06,$04,$00,$00,$04,$0C
  .BYTE $00,$00,$00,$08,$08,$00,$00,$00
  .BYTE $09,$00,$00,$00,$01,$01,$00
fBC18   .BYTE $01,$00,$00,$00,$01,$01,$00,$00
  .BYTE $00,$01,$00,$00,$00,$01,$01,$00
  .BYTE $00,$00,$01,$00,$00,$00,$01,$01
  .BYTE $00,$00,$00,$01,$01
  .BYTE $00,$00,$01
fBEB0   .BYTE $00

LINE_DRAW_PTR_LO   .BYTE <LINE_DRAW_0,<LINE_DRAW_1,<LINE_DRAW_2,<LINE_DRAW_3,<LINE_DRAW_4,<LINE_DRAW_5,<LINE_DRAW_6,<LINE_DRAW_7 
LINE_DRAW_PTR_HI   .BYTE >LINE_DRAW_0,>LINE_DRAW_1,>LINE_DRAW_2,>LINE_DRAW_3,>LINE_DRAW_4,>LINE_DRAW_5,>LINE_DRAW_6,>LINE_DRAW_7 

; FPTO8BIT
; x 1e (0001 1110) 6b (0110 1011) e4 (1110 0100) 8d (1000 1101) 8d (1000 1101) 5d (0101 1101) db (1101 1011)
; y 14 (0001 0100) 08 (0000 1000) 10 (0001 0000) ec (1110 1101) 10 (0001 0000) 0d (0000 1101) 10 (0001 0000)
; a 24 (0010 0100) 06 (0000 0110) 1e (0001 1110) 00 (0000 0000) 19 (0001 1001) f5 (1111 0101) 1e (0001 1110)

; Y = 0001 0100
; X = 0001 1110
