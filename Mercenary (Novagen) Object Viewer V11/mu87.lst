
;6502/65C02/65816/CPU64/DTV Turbo Assembler V1.47 listing file of "mu87.tas"
;done on Thu Dec 15 10:22:27 2022

=0002					SCREEN_POS_LO = $02

=0003					SCREEN_POS_HI = $03

=0024					SCREEN_FLIP = $24

=0066					LINE_INC = $66

=0002					SCREEN_POS_PTR = $02

=0040					SCREEN_0 = $40

=0060					SCREEN_1 = $60

=0052					X_POS_HI = $52

=0053					X_POS_LO = $53

=0054					Y_POS_HI = $54

=0055					Y_POS_LO = $55

=0056					Z_POS_HI = $56

=0057					Z_POS_LO = $57

=00b8					OBJECT_TO_DRAW = $B8

=0006					ab06 = $06 ; math temp?

=0007					ab07 = $07 ; math temp?

=0008					LINE_FRACTION_ab08 = $08

=0008					ab08 = $08 ; math temp? line draw fraction?

=0009					ab09 = $09 ; math temp?

=0008					Z_ROT_LO = $08 ; math temp?

=0009					Z_ROT_HI = $09 

=000a					ab0A = $0A ; math temp?

=000b					ab0B = $0B ; math temp?

=000a					H_PERS_FP_LO_DIFF_ab0A = $0A

=000b					H_PERS_FP_HI_DIFF_ab0B = $0B

=000a					X_ROT_LO = $0A

=000b					X_ROT_HI = $0B

=000c					ab0C = $0C ; math temp?

=000d					ab0D = $0D ; math temp?

=000c					V_PERS_FP_LO_DIFF_ab0C = $0C

=000d					V_PERS_FP_HI_DIFF_ab0D = $0D

=0018					ab18 = $18 ; math temp?

=0019					POINT_LINE_COUNT = $19

=000e					REGA = $0E

=000f					REGX = $0F

=0020					REGY = $20

=0018					FOCUS = $18 ; focus value not location

=0022					FP_MULTIPLY_LO = $22

=0023					FP_MULTIPLY_HI = $23

=0022					FP_DIVIDE_LO = FP_MULTIPLY_LO

=0023					FP_DIVIDE_HI = FP_MULTIPLY_HI

=002c					ROT_LO = $2C

=002d					ROT_HI = $2D

=003c					SIN_LO = $3C

=003d					SIN_HI = $3D

=003e					COS_LO = $3E

=003f					COS_HI = $3F

=0058					X_ROTATION_LO = $58

=0059					X_ROTATION_HI = $59

=005a					Y_ROTATION_LO = $5A

=005b					Y_ROTATION_HI = $5B

=005c					Z_ROTATION_LO = $5C

=005d					Z_ROTATION_HI = $5D

=005e					H_PERS_FP_LO_ST = $5E	; hor pers pos lo fp point start

=005f					H_PERS_FP_HI_ST = $5F	; hor pers pos hi fp point start

=0060					V_PERS_FP_LO_ST = $60	; ver pers pos lo fp point start

=0061					V_PERS_FP_HI_ST = $61	; ver pers pos hi fp point start

=0062					H_PERS_FP_LO_EN = $62	; hor pers pos lo fp point end

=0063					H_PERS_FP_HI_EN = $63	; hor pers pos hi fp point end

=0064					V_PERS_FP_LO_EN = $64	; ver pers pos lo fp point end

=0065					V_PERS_FP_HI_EN = $65	; ver pers pos hi fp point end

=0067					LINE_TYPE_POINTER = $67 ; line type?

=0068					ab68 = $68

=0069					ab69 = $69

=006a					LINE_START_HOR = $6A ; line start x?

=006b					LINE_START_VER = $6B ; line start y?

=006c					PERS_HOR_ab6C = $6C	; pers?

=006d					PERS_VER_ab6D = $6D  ; pers?

=006e					POINT_CLASSIFY_ST = $6E	; start point classification of this point?

=006f					POINT_CLASSIFY_EN = $6F  ; end point classification

=0072					CURR_X_LSB = $72

=0073					CURR_X_MSB = $73

=0074					CURR_X_HSB = $74

=0075					CURR_Y_LSB = $75

=0076					CURR_Y_MSB = $76

=0077					CURR_Y_HSB = $77

=0078					CURR_Z_LSB = $78

=0079					CURR_Z_MSB = $79

=007a					CURR_Z_HSB = $7A

=0050					SCR_HOR_MID = 160/2

=0044					SCR_VER_MID = 136/2

=0040					ab90_VAL = $40

=0019					ab91_VAL = $19

=003c					ab92_VAL = $3C

=0018					ab93_VAL = $18

=0010					ab94_VAL = $10

=0019					ab95_VAL = $19

=000c					ab96_VAL = $0c

=0018					ab97_VAL = $18

=00aa					SPEED_LO = $AA

=00ab					SPEED_HI = $AB

=00ac					ROT_SPD = $AC

=00ad					OBJECT_POINTER_POS = $AD

=00af					CURRENT_OBJECT = $AF

=00b0					NUMBER_OF_POINTS = $B0

=00b2					DRAW_OBJECT_COUNT = $B2

=00b3					DRAW_OBJECT_COUNTER = $B3

=00cf					OBJ_PNT_X_LSB 	= $CF

=00d0					OBJ_PNT_X_MSB 	= $D0

=00d1					OBJ_PNT_Y_LSB 	= $D1

=00d2					OBJ_PNT_Y_MSB 	= $D2

=00d3					OBJ_PNT_Z_LSB 	= $D3

=00d4					OBJ_PNT_Z_MSB 	= $D4

=00d5					DIFF_X_LSB = $D5

=00d6					DIFF_X_MSB = $D6

=00d7					DIFF_X_HSB = $D7

=00d8					DIFF_Y_LSB = $D8

=00d9					DIFF_Y_MSB = $D9

=00da					DIFF_Y_HSB = $DA

=00db					DIFF_Z_LSB = $DB

=00dc					DIFF_Z_MSB = $DC

=00dd					DIFF_Z_HSB = $DD

=001d					OBJECT_POINTER = $1D

=fffe					IRQ = $FFFE

=0088					CLIP_TEST_BOTTOM = $88

=0087					CLIP_BOTTOM = $87

=00a0					CLIP_TEST_RIGHT = $A0 ; $80

=009f					CLIP_RIGHT = $9F ; $7F

=0000					CLIP_TEST_TOP = $00

=0000					CLIP_TEST_LEFT = $00

=0001					PNT_OFF_HOR = $01	; PNT_OFF_RIGHT = $01

=0002					PNT_OFF_VER = $02	; PNT_OFF_BOTTOM = $02

=e000					OVERFLOW = $E000 ; overflow?

.0801					startup

.0801	 78		sei			SEI

.0802	 a9 00		lda #$00	 LDA #$00

.0804	 8d 20 d0	sta $d020	 STA $D020

.0807	 a9 01		lda #$01	 LDA #$01 ; $00

.0809	 8d 21 d0	sta $d021	 STA $D021

.080c	 a9 0b		lda #$0b	 LDA #$0B ; $00

.080e	 8d 22 d0	sta $d022	 STA $D022

.0811	 a9 0c		lda #$0c	 LDA #$0C ; $00

.0813	 8d 23 d0	sta $d023	 STA $D023

.0816	 a9 00		lda #$00	 LDA #$00 ; $01 ; colour 11 

.0818	 a2 00		ldx #$00	 LDX #<$D800

.081a	 a0 d8		ldy #$d8	 LDY #>$D800

.081c	 86 02		stx $02		 STX SCREEN_POS_LO+0

.081e	 84 03		sty $03		 STY SCREEN_POS_LO+1

.0820	 a2 03		ldx #$03	 LDX #>1000 

.0822	 a0 e8		ldy #$e8	 LDY #<1000

.0824	 20 38 09	jsr $0938	 JSR MEMSET

.0827	 a9 bc		lda #$bc	 LDA #$BC ;$65 ; colour 01 (0000????) and colour 10 (????0000) - bank 1

.0829	 a2 00		ldx #$00	 LDX #<(SCREEN_COLOUR)

.082b	 a0 5c		ldy #$5c	 LDY #>(SCREEN_COLOUR)

.082d	 86 02		stx $02		 STX SCREEN_POS_LO+0

.082f	 84 03		sty $03		 STY SCREEN_POS_LO+1

.0831	 a2 03		ldx #$03	 LDX #>1000 

.0833	 a0 e8		ldy #$e8	 LDY #<1000

.0835	 20 38 09	jsr $0938	 JSR MEMSET

.0838	 a9 35		lda #$35		LDA #$35

.083a	 85 01		sta $01			STA $1

.083c	 a9 70		lda #$70		LDA #$70

.083e	 8d 18 d0	sta $d018		STA $D018

.0841	 a9 3b		lda #$3b		LDA #$3B

.0843	 8d 11 d0	sta $d011		STA $D011

.0846	 a9 00		lda #$00		LDA #$00 

.0848	 8d 21 d0	sta $d021		STA $D021

.084b	 a9 18		lda #$18		LDA #$18

.084d	 8d 16 d0	sta $d016		STA $D016

.0850	 a9 e7		lda #$e7		LDA #<IRQ_1

.0852	 8d fe ff	sta $fffe		STA $FFFE

.0855	 a9 08		lda #$08		LDA #>IRQ_1

.0857	 8d ff ff	sta $ffff		STA $FFFF

.085a	 a9 7f		lda #$7f	 LDA #$7F

.085c	 8d 0d dc	sta $dc0d	 STA $DC0D  ; disable timer interrupts which can be generated by the two CIA chips

.085f	 8d 0d dd	sta $dd0d	 STA $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

.0862	 ad 0d dc	lda $dc0d	 LDA $DC0D  ; by reading this two registers we negate any pending CIA irqs.

.0865	 ad 0d dd	lda $dd0d	 LDA $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

.0868	 a9 01		lda #$01	  LDA #$01   ; this is how to tell the VICII to generate a raster interrupt

.086a	 8d 1a d0	sta $d01a	 STA $D01A

.086d	 a9 02		lda #$02	 LDA #2 ; SCRNBANK

.086f	 8d 00 dd	sta $dd00	 STA $DD00 ; bank

.0872	 a9 ba		lda #$ba		LDA #$BA

.0874	 8d 12 d0	sta $d012		STA $D012

.0877	 a9 01		lda #$01		LDA #$01

.0879	 8d 19 d0	sta $d019		STA $D019

.087c	 a9 07		lda #$07		LDA		#7

.087e	 85 ac		sta $ac			STA		ROT_SPD

.0880	 a9 40		lda #$40		LDA		#$40

.0882	 85 aa		sta $aa			STA		SPEED_LO

.0884	 a9 18		lda #$18		LDA		#$18

.0886	 85 ab		sta $ab			STA		SPEED_HI

.0888	 a9 01		lda #$01		LDA		#1 ;7

.088a	 85 b2		sta $b2			STA		DRAW_OBJECT_COUNT

.088c	 a9 00		lda #$00		LDA		#0

.088e	 85 2c		sta $2c			STA		ROT_LO

.0890	 85 2d		sta $2d			STA		ROT_HI

.0892	 85 73		sta $73			STA		CURR_X_MSB

.0894	 85 74		sta $74			STA		CURR_X_HSB

.0896	 85 76		sta $76			STA		CURR_Y_MSB

.0898	 85 77		sta $77			STA		CURR_Y_HSB

.089a	 85 79		sta $79			STA		CURR_Z_MSB

.089c	 85 7a		sta $7a			STA		CURR_Z_HSB

.089e	 58		cli			CLI

.089f					main_loop
.089f	 20 9a 15	jsr $159a				JSR 	READ_JOYSTICK_KEYBOARD

.08a2	 20 cb 10	jsr $10cb				JSR		SIN_COS

.08a5	 20 55 14	jsr $1455				JSR 	DRAW_SCREEN

.08a8	 20 14 14	jsr $1414				JSR 	COLOUR_SETUP_WHITE ; BLACK

.08ab	 20 ab 0b	jsr $0bab				JSR 	DRAW_OBJECTS

.08ae	 a6 73		ldx $73					LDX CURR_X_MSB

.08b0	 a5 74		lda $74					LDA CURR_X_HSB

.08b2	 a0 00		ldy #$00				LDY	#0

.08b4	 20 07 16	jsr $1607				JSR	HEX16

.08b7	 a5 72		lda $72					LDA CURR_X_LSB

.08b9	 a2 20		ldx #$20				LDX #32

.08bb	 a0 00		ldy #$00				LDY	#0

.08bd	 20 1a 16	jsr $161a				JSR	HEX8

.08c0	 a6 76		ldx $76					LDX CURR_Y_MSB

.08c2	 a5 77		lda $77					LDA CURR_Y_HSB

.08c4	 a0 06		ldy #$06				LDY	#6

.08c6	 20 07 16	jsr $1607				JSR	HEX16

.08c9	 a5 75		lda $75					LDA CURR_Y_LSB

.08cb	 a2 20		ldx #$20				LDX #32

.08cd	 a0 06		ldy #$06				LDY	#6

.08cf	 20 1a 16	jsr $161a				JSR	HEX8

.08d2	 a6 79		ldx $79					LDX CURR_Z_MSB

.08d4	 a5 7a		lda $7a					LDA CURR_Z_HSB

.08d6	 a0 0c		ldy #$0c				LDY	#12

.08d8	 20 07 16	jsr $1607				JSR	HEX16

.08db	 a5 78		lda $78					LDA CURR_Z_LSB

.08dd	 a2 20		ldx #$20				LDX #32

.08df	 a0 0c		ldy #$0c				LDY	#12

.08e1	 20 1a 16	jsr $161a				JSR	HEX8

.08e4	 4c 9f 08	jmp $089f				JMP MAIN_LOOP

.08e7	 48		pha		IRQ_1   		PHA

.08e8	 a9 12		lda #$12					LDA 	#<IRQ_2

.08ea	 8d fe ff	sta $fffe					STA 	IRQ   	;IRQ

.08ed	 a9 09		lda #$09					LDA 	#>IRQ_2

.08ef	 8d ff ff	sta $ffff					STA 	IRQ+1   ;IRQ

.08f2	 a9 00		lda #$00					LDA 	#$00

.08f4	 8d 12 d0	sta $d012					STA 	$D012	;Raster Position

.08f7	 a9 01		lda #$01					LDA 	#$01

.08f9	 8d 19 d0	sta $d019					STA 	$D019   ;VIC Interrupt Request Register (IRR)

.08fc	 a9 7e		lda #$7e					LDA 	#$7E

.08fe	 8d 18 d0	sta $d018					STA 	$D018   ;VIC Memory Control Register

.0901	 a9 1b		lda #$1b					LDA 	#$1B

.0903	 8d 11 d0	sta $d011					STA 	$D011   ;VIC Control Register 1

.0906	 a9 01		lda #$01					LDA 	#$01

.0908	 8d 21 d0	sta $d021					STA 	$D021   ;Background Color 0

.090b	 a9 08		lda #$08					LDA 	#$08

.090d	 8d 16 d0	sta $d016					STA 	$D016   ;VIC Control Register 2

.0910	 68		pla						PLA 

.0911	 40		rti		NMI_NOP			RTI ; This is the irq handler for the NMI. Just returns without acknowledge. This prevents subsequent NMI's from interfering.

.0912	 48		pha		IRQ_2  			PHA

.0913	 a9 00		lda #$00	VIC_SCREEN_BANK	LDA 	#0

.0915	 8d 18 d0	sta $d018					STA 	$D018    ;VIC Memory Control Register

.0918	 a9 3b		lda #$3b					LDA 	#$3B

.091a	 8d 11 d0	sta $d011					STA 	$D011    ;VIC Control Register 1

.091d	 a9 18		lda #$18					LDA 	#$18

.091f	 8d 16 d0	sta $d016					STA 	$D016    ;VIC Control Register 2

.0922	 a9 e7		lda #$e7					LDA 	#<IRQ_1

.0924	 8d fe ff	sta $fffe					STA 	IRQ   ;IRQ

.0927	 a9 08		lda #$08					LDA 	#>IRQ_1

.0929	 8d ff ff	sta $ffff					STA 	IRQ+1   ;IRQ

.092c	 a9 ba		lda #$ba					LDA 	#$BA

.092e	 8d 12 d0	sta $d012					STA 	$D012    ;Raster Position

.0931	 a9 01		lda #$01					LDA 	#$01

.0933	 8d 19 d0	sta $d019					STA 	$D019    ;VIC Interrupt Request Register (IRR)

.0936	 68		pla						PLA 

.0937	 40		rti						RTI

.0938	 8c 4c 09	sty $094c	MEMSET       STY    LSB_ONLY+1 ; store LSB count

.093b	 e0 00		cpx #$00	             CPX    #0          ; MSB?     

.093d	 f0 0c		beq $094b	             BEQ    LSB_ONLY   ; no

.093f	 a0 00		ldy #$00	             LDY    #0          ; yes so reset LSB

.0941					msb_loop
.0941	 91 02		sta ($02),y	LSB_LOOP      STA    (SCREEN_POS_LO),Y   ; clear whole MSB

.0943	 88		dey		               DEY 

.0944	 d0 fb		bne $0941	               BNE    LSB_LOOP

.0946	 e6 03		inc $03		              INC    SCREEN_POS_LO+1      ; inc MSB

.0948	 ca		dex		              DEX               ; dec MSB count

.0949	 d0 f6		bne $0941	              BNE    MSB_LOOP

.094b	 a0 00		ldy #$00	LSB_ONLY    LDY    #0          ; LSB count 

.094d	 f0 07		beq $0956	             BEQ    MS_END

.094f	 91 02		sta ($02),y	LAST_LSB_LOOP STA   (SCREEN_POS_LO),Y

.0951	 88		dey		               DEY 

.0952	 d0 fb		bne $094f	               BNE   LAST_LSB_LOOP               

.0954	 91 02		sta ($02),y	              STA   (SCREEN_POS_LO),Y     ; clear last Y (0)

.0956	 60		rts		MS_END      RTS

.0957	 85 23		sta $23		FP_DIVIDE	STA		FP_DIVIDE_HI	; inputs = X-(LO) + Y-(HI) + A (HI) + FP_MULTILPLY_LO - outputs = AY

.0959	 b9 00 1f	lda $1f00,y				LDA 	LOG_TABLE,Y

.095c	 a4 22		ldy $22					LDY 	FP_DIVIDE_LO

.095e	 38		sec					SEC 

.095f	 f9 00 1f	sbc $1f00,y				SBC 	LOG_TABLE,Y

.0962	 a8		tay					TAY

.0963	 8a		txa					TXA

.0964	 09 02		ora #$02				ORA 	#$02

.0966	 b0 03		bcs $096b				BCS 	_FP_DIV_CNT

.0968	 e9 03		sbc #$03						SBC 	#$03	; subtract 4?

.096a	 38		sec							SEC 

.096b	 e5 23		sbc $23		_FP_DIV_CNT SBC 	FP_DIVIDE_HI

.096d	 29 fd		and #$fd				AND 	#$FD

.096f	 be 00 20	ldx $2000,y				LDX 	EXP_TABLE,Y

.0972	 60		rts					RTS

.0973	 85 23		sta $23		FP_MULTIPLY	STA		FP_MULTIPLY_HI	; inputs = X-(LO) + Y-(HI) + A (HI) + FP_MULTILPLY_LO - outputs = AY

.0975	 bd 00 1f	lda $1f00,x				LDA 	LOG_TABLE,X		

.0978	 a6 22		ldx $22					LDX 	FP_MULTIPLY_LO

.097a	 18		clc					CLC 

.097b	 7d 00 1f	adc $1f00,x				ADC 	LOG_TABLE,X

.097e	 aa		tax					TAX 

.097f	 98		tya					TYA 

.0980	 90 03		bcc $0985				BCC 	_FP_MUL_CNT

.0982	 69 03		adc #$03						ADC 	#$03	; add 4?

.0984	 18		clc							CLC 

.0985	 65 23		adc $23		_FP_MUL_CNT	ADC 	FP_MULTIPLY_HI

.0987	 29 fd		and #$fd				AND 	#$FD

.0989	 bc 00 20	ldy $2000,x				LDY 	EXP_TABLE,X

.098c	 60		rts					RTS 

.098d	 bd 00 1f	lda $1f00,x	FPMUL		LDA LOG_TABLE,X		; fpMul - ; Input:  [08] = fp multiplier ;         XY   = fp multiplicand ; Output: [08] and XY = result

.0990	 a6 08		ldx $08					LDX ab08

.0992	 18		clc					CLC 

.0993	 7d 00 1f	adc $1f00,x				ADC LOG_TABLE,X

.0996	 aa		tax					TAX 

.0997	 98		tya					TYA 

.0998	 90 03		bcc $099d				BCC _PF_MUL_CNT

.099a	 69 03		adc #$03					ADC #$03			; add 4?

.099c	 18		clc						CLC 

.099d	 65 09		adc $09		_PF_MUL_CNT   	ADC ab09

.099f	 70 0c		bvs $09ad				BVS MATH_LIMIT 

.09a1	 29 fd		and #$fd				AND #$FD

.09a3	 85 09		sta $09					STA ab09

.09a5	 a8		tay					TAY 

.09a6	 bd 00 20	lda $2000,x				LDA EXP_TABLE,X

.09a9	 aa		tax					TAX 

.09aa	 85 08		sta $08					STA ab08

.09ac	 60		rts					RTS 

.09ad	 10 0c		bpl $09bb	MATH_LIMIT	BPL _MATH_LIMIT_POS

.09af	 29 01		and #$01				AND #$01

.09b1	 09 78		ora #$78				ORA #$78

.09b3	 a8		tay					TAY 

.09b4	 a2 00		ldx #$00				LDX #$00

.09b6	 86 08		stx $08					STX ab08

.09b8	 84 09		sty $09					STY ab09

.09ba	 60		rts					RTS 

.09bb	 29 01		and #$01	_MATH_LIMIT_POS	AND #$01

.09bd	 09 84		ora #$84					ORA #$84

.09bf	 a8		tay		MATH_LIMIT_EXIT	TAY 

.09c0	 a2 00		ldx #$00					LDX #$00

.09c2	 86 08		stx $08						STX ab08

.09c4	 84 09		sty $09						STY ab09

.09c6	 60		rts						RTS 

.09c7	 84 06		sty $06		FPDIV	STY 	ab06	 ; fpDiv - Input:  [08] = fp divisor - XY   = fp dividend - Output: [08] and XY = result

.09c9	 a4 08		ldy $08		        LDY 	ab08

.09cb	 b9 00 1f	lda $1f00,y	        LDA 	LOG_TABLE,Y

.09ce	 38		sec		        SEC 

.09cf	 fd 00 1f	sbc $1f00,x	        SBC 	LOG_TABLE,X

.09d2	 aa		tax		        TAX 

.09d3	 a5 09		lda $09		        LDA 	ab09

.09d5	 09 02		ora #$02	        ORA 	#$02

.09d7	 b0 03		bcs $09dc	        BCS 	b8349

.09d9	 e9 03		sbc #$03				SBC 	#$03		; subtract 4?

.09db	 38		sec					SEC 

.09dc	 e5 06		sbc $06		b8349   SBC 	ab06

.09de	 70 cd		bvs $09ad	        BVS 	MATH_LIMIT 

.09e0	 29 fd		and #$fd	        AND 	#$FD

.09e2	 85 09		sta $09		        STA 	ab09

.09e4	 a8		tay		        TAY 

.09e5	 bd 00 20	lda $2000,x	        LDA 	EXP_TABLE,X

.09e8	 aa		tax		        TAX 

.09e9	 85 08		sta $08		        STA 	ab08

.09eb	 60		rts		        RTS 

.09ec	 a5 18		lda $18		FPADD_CONT	LDA		ab18	; ($838B entry point)  

.09ee	 4a		lsr					LSR 

.09ef	 b0 15		bcs $0a06				BCS 	b8373

.09f1	 8a		txa		        TXA 

.09f2	 65 08		adc $08		        ADC 	ab08

.09f4	 6a		ror		        ROR 

.09f5	 c8		iny		        INY 

.09f6	 c8		iny		        INY 

.09f7	 c8		iny		        INY 

.09f8	 c8		iny		        INY 

.09f9	 aa		tax		        TAX 

.09fa	 85 08		sta $08		        STA 	ab08

.09fc	 84 09		sty $09		        STY 	ab09

.09fe	 60		rts		        RTS 

.09ff	 98		tya		b836C   TYA 

.0a00	 0a		asl		        ASL 

.0a01	 90 5c		bcc $0a5f	        BCC 	b83CC

.0a03	 4c ac 0a	jmp $0aac	        JMP 	j8419

.0a06	 8a		txa		b8373   TXA 

.0a07	 e5 08		sbc $08		        SBC 	ab08

.0a09	 f0 0b		beq $0a16	        BEQ 	b8383

.0a0b	 b0 5b		bcs $0a68				BCS 	b83D5

.0a0d	 a4 09		ldy $09					LDY 	ab09

.0a0f	 49 ff		eor #$ff				EOR 	#$FF

.0a11	 69 01		adc #$01				ADC 	#$01

.0a13	 4c 68 0a	jmp $0a68				JMP 	b83D5

.0a16	 98		tya		b8383   TYA 

.0a17	 38		sec		        SEC 

.0a18	 e9 24		sbc #$24	        SBC 	#$24

.0a1a	 70 9f		bvs $09bb			BVS 	_MATH_LIMIT_POS

.0a1c	 50 a1		bvc $09bf				BVC 	MATH_LIMIT_EXIT

.0a1e	 98		tya		FP_ADD  TYA			; XY + 89

.0a1f	 38		sec		        SEC 

.0a20	 e5 09		sbc $09		        SBC 	ab09

.0a22	 70 db		bvs $09ff	        BVS 	b836C

.0a24	 85 18		sta $18		        STA 	ab18

.0a26	 69 01		adc #$01	        ADC 	#$01

.0a28	 70 d5		bvs $09ff	        BVS 	b836C

.0a2a	 30 5c		bmi $0a88	        BMI 	b83F5

.0a2c	 4a		lsr		        LSR 

.0a2d	 4a		lsr		        LSR 

.0a2e	 f0 bc		beq $09ec	        BEQ 	FPADD_CONT

.0a30	 c9 09		cmp #$09	        CMP 	#$09

.0a32	 b0 2b		bcs $0a5f	        BCS 	b83CC

.0a34	 49 0f		eor #$0f	        EOR 	#$0F

.0a36	 8d 3e 0a	sta $0a3e	        STA 	ab83AB +1

.0a39	 a5 08		lda $08		        LDA		ab08

.0a3b	 38		sec		        SEC 

.0a3c	 6a		ror		        ROR 

.0a3d	 d0 07		bne $0a46	ab83AB 	BNE		b83B3 	; self modifiction code shift

.0a3f	 ea		nop		        NOP 

.0a40	 ea		nop		        NOP 

.0a41	 ea		nop		        NOP 

.0a42	 ea		nop		        NOP 

.0a43	 ea		nop		        NOP 

.0a44	 ea		nop		        NOP 

.0a45	 ea		nop		        NOP 

.0a46	 4a		lsr		b83B3   LSR 

.0a47	 4a		lsr		        LSR 

.0a48	 4a		lsr		        LSR 

.0a49	 4a		lsr		        LSR 

.0a4a	 4a		lsr		        LSR 

.0a4b	 4a		lsr		        LSR 

.0a4c	 4a		lsr		        LSR 

.0a4d	 85 06		sta $06		        STA 	ab06

.0a4f	 a5 18		lda $18		        LDA 	ab18

.0a51	 4a		lsr		        LSR 

.0a52	 8a		txa		        TXA 

.0a53	 b0 0f		bcs $0a64	        BCS 	b83D1

.0a55	 65 06		adc $06		b83C2   ADC 	ab06

.0a57	 90 05		bcc $0a5e	        BCC 	b83CB

.0a59	 4a		lsr					LSR 

.0a5a	 c8		iny					INY 

.0a5b	 c8		iny					INY 

.0a5c	 c8		iny					INY 

.0a5d	 c8		iny					INY 

.0a5e	 aa		tax		b83CB   TAX 

.0a5f	 86 08		stx $08		b83CC   STX 	ab08

.0a61	 84 09		sty $09		        STY 	ab09

.0a63	 60		rts		        RTS 

.0a64	 e5 06		sbc $06		b83D1   SBC ab06

.0a66	 b0 f6		bcs $0a5e	        BCS b83CB

.0a68	 84 06		sty $06		b83D5   STY ab06

.0a6a	 a0 00		ldy #$00	        LDY #$00

.0a6c	 0a		asl		b83D9   ASL 

.0a6d	 88		dey		        DEY 

.0a6e	 90 fc		bcc $0a6c	        BCC b83D9

.0a70	 aa		tax		        TAX 

.0a71	 98		tya		        TYA 

.0a72	 0a		asl		        ASL 

.0a73	 0a		asl		        ASL 

.0a74	 18		clc		        CLC 

.0a75	 65 06		adc $06		        ADC ab06

.0a77	 70 06		bvs $0a7f	        BVS b83EC

.0a79	 a8		tay		        TAY 

.0a7a	 86 08		stx $08		        STX ab08

.0a7c	 84 09		sty $09		        STY ab09

.0a7e	 60		rts		        RTS 

.0a7f	 a2 93		ldx #$93	b83EC   LDX #<p8400

.0a81	 a0 0a		ldy #$0a	        LDY #>p8400

.0a83	 86 08		stx $08		        STX ab08

.0a85	 84 09		sty $09		        STY ab09

.0a87	 60		rts		        RTS 

.0a88	 c9 e0		cmp #$e0	b83F5   CMP #$E0

.0a8a	 90 20		bcc $0aac	        BCC j8419

.0a8c	 4a		lsr		        LSR 

.0a8d	 4a		lsr		        LSR 

.0a8e	 29 07		and #$07	        AND #$07

.0a90	 8d 97 0a	sta $0a97	        STA ab8404 +1

.0a93	 8a		txa		p8400   TXA 

.0a94	 38		sec		        SEC 

.0a95	 6a		ror		        ROR 

.0a96	 d0 03		bne $0a9b	ab8404  BNE b8408

.0a98	 4a		lsr		        LSR 

.0a99	 4a		lsr		        LSR 

.0a9a	 4a		lsr		        LSR 

.0a9b	 4a		lsr		b8408   LSR 

.0a9c	 4a		lsr		        LSR 

.0a9d	 4a		lsr		        LSR 

.0a9e	 4a		lsr		        LSR 

.0a9f	 85 06		sta $06		        STA ab06

.0aa1	 a4 09		ldy $09		        LDY ab09

.0aa3	 a5 18		lda $18		        LDA ab18

.0aa5	 4a		lsr		        LSR 

.0aa6	 a5 08		lda $08		        LDA ab08

.0aa8	 90 ab		bcc $0a55	        BCC b83C2

.0aaa	 b0 b8		bcs $0a64	        BCS b83D1

.0aac	 a6 08		ldx $08		j8419   LDX ab08

.0aae	 a4 09		ldy $09		        LDY ab09

.0ab0	 60		rts		        RTS 

.0ab1	 c8		iny		COS_FP	INY 

.0ab2	 98		tya		SIN_FP	TYA 

.0ab3	 4a		lsr				LSR 

.0ab4	 90 06		bcc $0abc			BCC 	SIN_CNT

.0ab6	 8a		txa						TXA 

.0ab7	 49 ff		eor #$ff					EOR #$FF

.0ab9	 aa		tax						TAX 

.0aba	 98		tya						TYA 

.0abb	 4a		lsr						LSR 

.0abc	 29 01		and #$01	SIN_CNT AND 	#$01

.0abe	 1d 00 1e	ora $1e00,x			ORA 	SIN_MSB,X

.0ac1	 a8		tay				TAY 

.0ac2	 bd 00 1d	lda $1d00,x			LDA 	SIN_LSB,X

.0ac5	 aa		tax				TAX 

.0ac6	 60		rts				RTS 

.0ac7	 98		tya		FPTO8BIT	TYA 				; input X/Y (mantisa/exponent) -  output X=HI/Y=LO ; transfer exponent? to a

.0ac8	 30 25		bmi $0aef				BMI		b849F		; if negative

.0aca	 4a		lsr					LSR 				; half and put bit into carry

.0acb	 4a		lsr					LSR 				; half and put bit into carry

.0acc	 c9 07		cmp #$07				CMP 	#$07		; is it greater than 7

.0ace	 b0 26		bcs $0af6				BCS 	FP8BIT_ERR		; yes so error so exit with carry set

.0ad0	 8d d7 0a	sta $0ad7				STA 	FP8BIT_JMP +1	; no so self modifying code to jump forward a number of divides

.0ad3	 8a		txa					TXA 				; transfer mantisa? to a

.0ad4	 38		sec					SEC 				; set carry

.0ad5	 6a		ror					ROR 				; /2 - putting 1 in top bit (and putting 0 in carry?) 

.0ad6	 d0 04		bne $0adc	FP8BIT_JMP	BNE 	b848C		; jump forward self modifying code - always done as carry is set so ROR result is never 0

.0ad8	 4a		lsr					LSR 				; /2

.0ad9	 4a		lsr					LSR 				; /4

.0ada	 4a		lsr					LSR 				; /8

.0adb	 4a		lsr					LSR 				; /16

.0adc	 4a		lsr		b848C   	LSR 				; /32

.0add	 4a		lsr					LSR 				; /64

.0ade	 4a		lsr					LSR 				; /128

.0adf	 69 00		adc #$00	b848F   	ADC 	#0			; add carry?

.0ae1	 30 12		bmi $0af5				BMI 	b84A5		; if minus then error?

.0ae3	 aa		tax					TAX 				; backup result

.0ae4	 98		tya					TYA 				; transfer y to a

.0ae5	 4a		lsr					LSR					; / 2

.0ae6	 8a		txa					TXA 				; restore result

.0ae7	 90 05		bcc $0aee				BCC 	b849E		; clear carry so ok?

.0ae9	 49 ff		eor #$ff					EOR 	#$FF	; negate?

.0aeb	 69 00		adc #$00					ADC 	#$00	; negate by adding carry that is already set?

.0aed	 18		clc						CLC 			; clear carry for ok?

.0aee	 60		rts		b849E   	RTS 				; exit

.0aef	 c9 fc		cmp #$fc	b849F   	CMP 	#$FC		; sets the carry flag if greater than (11111100 binary)

.0af1	 a9 00		lda #$00				LDA 	#$00		; resets the output x value? 

.0af3	 f0 ea		beq $0adf				BEQ 	b848F		; jump back into code

.0af5	 38		sec		b84A5   	SEC 				; set carry for error?

.0af6	 60		rts		FP8BIT_ERR	RTS 				; exit

.0af7	 98		tya		FPTO16BIT	TYA					; input X/Y (mantisa/exponent) -  output X=HI/Y=LO	; transfer exponent? to a

.0af8	 30 57		bmi $0b51				BMI 	b8501 		; if negative

.0afa	 4a		lsr					LSR 				; half and put bit into carry

.0afb	 4a		lsr					LSR 				; half and put bit into carry

.0afc	 c9 0f		cmp #$0f				CMP 	#15			; is it greater than 15

.0afe	 b0 f6		bcs $0af6				BCS 	FP8BIT_ERR		; yes so error so exit with carry set

.0b00	 85 06		sta $06					STA 	ab06		; store intermediate in temp var

.0b02	 0a		asl					ASL 				; *2

.0b03	 65 06		adc $06					ADC 	ab06		; *3 

.0b05	 8d 12 0b	sta $0b12				STA 	FP16BIT_JMP +1	; number of bytes to jump

.0b08	 a9 00		lda #$00				LDA 	#0

.0b0a	 85 06		sta $06					STA 	ab06		; clear result

.0b0c	 8a		txa					TXA 				; get input (mantisa?)

.0b0d	 38		sec					SEC 				; set carry to move 1 into result

.0b0e	 6a		ror					ROR 				; rotate carry into high bit and low bit into carry

.0b0f	 66 06		ror $06					ROR 	ab06		; rotate carry into result

.0b11	 90 0f		bcc $0b22	FP16BIT_JMP BCC 	b84D2		; jump forward

.0b13	 4a		lsr					LSR 				; half and shift lowest bit into carry  

.0b14	 66 06		ror $06					ROR 	ab06		; half and rotate carry bit into result

.0b16	 4a		lsr					LSR 

.0b17	 66 06		ror $06					ROR 	ab06

.0b19	 4a		lsr					LSR 

.0b1a	 66 06		ror $06					ROR 	ab06

.0b1c	 4a		lsr					LSR 

.0b1d	 66 06		ror $06					ROR 	ab06

.0b1f	 4a		lsr					LSR 

.0b20	 66 06		ror $06					ROR 	ab06

.0b22	 4a		lsr		b84D2   	LSR 

.0b23	 66 06		ror $06					ROR 	ab06

.0b25	 4a		lsr					LSR 

.0b26	 66 06		ror $06					ROR 	ab06

.0b28	 4a		lsr					LSR 

.0b29	 66 06		ror $06					ROR 	ab06

.0b2b	 4a		lsr					LSR 

.0b2c	 66 06		ror $06					ROR		ab06

.0b2e	 4a		lsr					LSR 

.0b2f	 66 06		ror $06					ROR 	ab06

.0b31	 4a		lsr					LSR 

.0b32	 66 06		ror $06					ROR 	ab06

.0b34	 4a		lsr					LSR 

.0b35	 66 06		ror $06					ROR 	ab06

.0b37	 4a		lsr					LSR 

.0b38	 66 06		ror $06					ROR 	ab06

.0b3a	 4a		lsr					LSR 

.0b3b	 66 06		ror $06					ROR 	ab06

.0b3d	 4a		lsr					LSR 

.0b3e	 66 06		ror $06					ROR 	ab06

.0b40	 aa		tax					TAX 				; store low byte of result?

.0b41	 98		tya					TYA 				; get input (exponent?)

.0b42	 a4 06		ldy $06					LDY 	ab06		; store high byte of result?

.0b44	 4a		lsr					LSR 				; move 1st bit of input (sign) into carry

.0b45	 90 09		bcc $0b50				BCC 	b8500		; clear so positive

.0b47	 8a		txa						TXA 			; negtive so

.0b48	 49 ff		eor #$ff					EOR 	#$FF	; negate x

.0b4a	 aa		tax						TAX 

.0b4b	 98		tya						TYA 

.0b4c	 49 ff		eor #$ff					EOR 	#$FF	; negate y

.0b4e	 a8		tay						TAY 

.0b4f	 18		clc						CLC 

.0b50	 60		rts		b8500   RTS 					; no

.0b51	 4a		lsr		b8501 		LSR 				; move 1st bit to carry

.0b52	 90 06		bcc $0b5a				BCC 	b850B		; set y/n

.0b54	 a2 ff		ldx #$ff					LDX 	#$FF	; yes

.0b56	 a0 ff		ldy #$ff					LDY 	#$FF

.0b58	 18		clc						CLC 

.0b59	 60		rts					RTS 

.0b5a	 a2 00		ldx #$00	b850B   	LDX 	#0			; no

.0b5c	 a0 00		ldy #$00				LDY 	#0

.0b5e	 60		rts					RTS 

.0b5f	 84 07		sty $07		BIT24TOFP 	STY		ab07 	; store lsb	; MATH_24BitToFP (FP.SetToObjectSpaceCoordinate24) ; Enter: A = Coordinate.MSB X = Coordinate.PSB Y = Coordinate.LSB ; Usese: [06].b  Temporary store for coordinate MSB ; Exit:  [08].fp Result, also stored in X:A (exp:man)

.0b61	 85 06		sta $06					STA 	ab06 	; store msb

.0b63	 10 11		bpl $0b76				BPL 	b8527	 ; positive ?

.0b65	 a9 00		lda #$00					LDA 	#0	 	; negative so 

.0b67	 38		sec						SEC 

.0b68	 e5 07		sbc $07						SBC 	ab07 	; negate lsb

.0b6a	 85 07		sta $07						STA 	ab07

.0b6c	 8a		txa						TXA 			; negate psb

.0b6d	 49 ff		eor #$ff					EOR 	#$FF

.0b6f	 69 00		adc #$00					ADC 	#0

.0b71	 aa		tax						TAX 

.0b72	 a9 00		lda #$00					LDA 	#0

.0b74	 e5 06		sbc $06						SBC 	ab06	; negate msb

.0b76	 d0 0f		bne $0b87	b8527   	BNE 	b8538			; if msb not 0 - jump to set loop counter to 24 ($18)?

.0b78	 8a		txa						TXA 				; move psb to a

.0b79	 d0 23		bne $0b9e					BNE 	b854F			; if psb not 0 - jump to set loop counter to 16 ($10)?

.0b7b	 a5 07		lda $07							LDA 	ab07			; get lsb

.0b7d	 f0 23		beq $0ba2						BEQ 	b8553			; if lsb is 0 - jump to overflow and exit

.0b7f	 a2 00		ldx #$00							LDX 	#0

.0b81	 86 07		stx $07								STX 	ab07

.0b83	 a2 08		ldx #$08							LDX 	#8			; set loop counter to 8?

.0b85	 d0 04		bne $0b8b							BNE 	b853C 		; jump?

.0b87	 86 07		stx $07		b8538   	STX 	ab07	; store psb?

.0b89	 a2 18		ldx #$18				LDX 	#24		; set loop counter to 24?

.0b8b	 ca		dex		b853C   		DEX 			; find exponent - start from whatever x is passed in and reduce until x a bit set found 

.0b8c	 06 07		asl $07						ASL 	ab07 	; shift lsb up into carry

.0b8e	 2a		rol						ROL 	 		; shift msb up with carry - mantisa?

.0b8f	 90 fa		bcc $0b8b					BCC 	b853C	; as soon as first bit is set then exit

.0b91	 85 08		sta $08					STA 	ab08		; store mantisa?

.0b93	 8a		txa					TXA 				; x is exponent?

.0b94	 0a		asl					ASL 				; exponent *2?

.0b95	 06 06		asl $06					ASL 	ab06		; shift msb putting sign into carry 

.0b97	 2a		rol					ROL 				; rotate carry into first bit of exponent

.0b98	 aa		tax					TAX 				; copy exponent to x - bit 0 is sign

.0b99	 86 09		stx $09					STX 	ab09

.0b9b	 a5 08		lda $08					LDA 	ab08		; copy mantisa to a

.0b9d	 60		rts					RTS

.0b9e	 a2 10		ldx #$10	b854F   	LDX 	#16		; set loop counter to 16?

.0ba0	 d0 e9		bne $0b8b				BNE 	b853C 	; jump?

.0ba2	 a9 00		lda #$00	b8553   	LDA 	#<OVERFLOW ; overflow?

.0ba4	 a2 e0		ldx #$e0				LDX 	#>OVERFLOW

.0ba6	 85 08		sta $08					STA 	ab08

.0ba8	 86 09		stx $09					STX 	ab09

.0baa	 60		rts					RTS 

.0bab	 a4 b2		ldy $b2		DRAW_OBJECTS	LDY 	DRAW_OBJECT_COUNT 			; number of objects to draw

.0bad	 f0 0e		beq $0bbd					BEQ 	DRAW_OBJECTS_EXIT 			; exit if none

.0baf	 84 b3		sty $b3						STY 	DRAW_OBJECT_COUNTER 		; store temp object count

.0bb1	 be 90 18	ldx $1890,y	DRAW_OBJECTS_LOOP   LDX 	OBJECTS_TO_DRAW,Y 		; object number

.0bb4	 20 be 0b	jsr $0bbe						JSR 	DRAW_OBJECT

.0bb7	 c6 b3		dec $b3							DEC 	DRAW_OBJECT_COUNTER 	; dec temp object count

.0bb9	 a4 b3		ldy $b3							LDY 	DRAW_OBJECT_COUNTER 	; get temp object count

.0bbb	 d0 f4		bne $0bb1						BNE 	DRAW_OBJECTS_LOOP 		; exit y/n

.0bbd	 60		rts		DRAW_OBJECTS_EXIT 	RTS 							; exit

.0bbe	 86 af		stx $af		DRAW_OBJECT			STX		CURRENT_OBJECT					; store object number 

.0bc0	 bd 50 18	lda $1850,x						LDA		OBJECT_SHAPE_PTR_LO,X	; get object pos hi

.0bc3	 85 1d		sta $1d							STA		OBJECT_POINTER			; store in pointer

.0bc5	 bd 70 18	lda $1870,x						LDA		OBJECT_SHAPE_PTR_HI,X	; get object pos lo

.0bc8	 85 1e		sta $1e							STA		OBJECT_POINTER+1		; store in pointer

.0bca	 20 a3 0c	jsr $0ca3						JSR		CAMERA_OBJECT_DIFF

.0bcd	 a2 00		ldx #$00	DRAW_OBJECT_CONT   	LDX		#$00

.0bcf	 86 19		stx $19							STX		POINT_LINE_COUNT

.0bd1	 a0 01		ldy #$01						LDY		#$01

.0bd3	 20 e6 0c	jsr $0ce6						JSR		CHK_ABS_DIST

.0bd6	 90 5d		bcc $0c35						BCC		DRAW_OBJECT_LINES	; draw the object

.0bd8	 a5 da		lda $da							LDA		DIFF_Y_HSB			; above ground?

.0bda	 10 09		bpl $0be5						BPL		DRAW_OBJECT_POINT	; not underground?

.0bdc	 a0 00		ldy #$00						LDY		#$00

.0bde	 a2 00		ldx #$00						LDX		#$00

.0be0	 20 e6 0c	jsr $0ce6						JSR		CHK_ABS_DIST

.0be3	 b0 d8		bcs $0bbd						BCS		DRAW_OBJECTS_EXIT

.0be5	 a4 d5		ldy $d5		DRAW_OBJECT_POINT	LDY		DIFF_X_LSB		; object is a point

.0be7	 a6 d6		ldx $d6							LDX		DIFF_X_MSB

.0be9	 a5 d7		lda $d7							LDA		DIFF_X_HSB

.0beb	 20 5f 0b	jsr $0b5f						JSR		BIT24TOFP

.0bee	 85 52		sta $52							STA		X_POS_HI

.0bf0	 86 53		stx $53							STX		X_POS_LO

.0bf2	 a4 d8		ldy $d8							LDY		DIFF_Y_LSB

.0bf4	 a6 d9		ldx $d9							LDX		DIFF_Y_MSB

.0bf6	 a5 da		lda $da							LDA		DIFF_Y_HSB

.0bf8	 20 5f 0b	jsr $0b5f						JSR		BIT24TOFP	; ????

.0bfb	 85 54		sta $54							STA		Y_POS_HI

.0bfd	 86 55		stx $55							STX		Y_POS_LO

.0bff	 a4 db		ldy $db							LDY		DIFF_Z_LSB

.0c01	 a6 dc		ldx $dc							LDX		DIFF_Z_MSB

.0c03	 a5 dd		lda $dd							LDA		DIFF_Z_HSB

.0c05	 20 5f 0b	jsr $0b5f						JSR		BIT24TOFP

.0c08	 85 56		sta $56							STA		Z_POS_HI

.0c0a	 86 57		stx $57							STX		Z_POS_LO

.0c0c	 20 7c 11	jsr $117c						JSR		ROTATE_PERS

.0c0f	 a2 00		ldx #$00						LDX		#$00

.0c11	 bd 40 07	lda $0740,x	PLOT_POINT_CHK		LDA		POINT_CLASSIFICATION,X	; GET POINT FROM PLOT POINT TABLE ?

.0c14	 d0 1e		bne $0c34						BNE		PLOT_POINT_EXIT			; EXIT IF ITS not ZERO - this being set to not zero plots a point - what sets it to 0?

.0c16	 bc c0 06	ldy $06c0,x	PLOT_POINT				LDY		PERS_VER_TAB,X			; GET VER POS

.0c19	 b9 30 23	lda $2330,y							LDA		VER_POS_LO,Y 

.0c1c	 85 02		sta $02								STA		SCREEN_POS_LO

.0c1e	 bd 80 06	lda $0680,x							LDA		PERS_HOR_TAB,X			; GET HOR POS into A and X

.0c21	 aa		tax								TAX 	

.0c22	 0a		asl								ASL 

.0c23	 b9 a0 22	lda $22a0,y							LDA		VER_POS_HI,Y

.0c26	 69 40		adc #$40	PLOT_POINT_BANK			ADC		#SCREEN_0

.0c28	 85 03		sta $03								STA		SCREEN_POS_HI

.0c2a	 bc c0 23	ldy $23c0,x							LDY		HOR_SCR_POS,X

.0c2d	 b1 02		lda ($02),y							LDA		(SCREEN_POS_PTR),Y	; GET SCREEN BYTE

.0c2f	 1d 00 22	ora $2200,x	LINE_DRAW_8_TYPE		ORA		ORA_PIXEL_POS,X		; AND PIXEL

.0c32	 91 02		sta ($02),y							STA		(SCREEN_POS_PTR),Y	; PUT SCREEN BYTE

.0c34	 60		rts		PLOT_POINT_EXIT 	RTS 

.0c35	 a5 d6		lda $d6		DRAW_OBJECT_LINES	LDA 	DIFF_X_MSB

.0c37	 38		sec							SEC 

.0c38	 e9 08		sbc #$08						SBC 	#$08

.0c3a	 85 d6		sta $d6							STA 	DIFF_X_MSB

.0c3c	 b0 02		bcs $0c40						BCS 	b9795

.0c3e	 c6 d7		dec $d7								DEC 	DIFF_X_HSB		

.0c40	 a5 d9		lda $d9		b9795   			LDA 	DIFF_Y_MSB

.0c42	 38		sec							SEC 

.0c43	 e9 08		sbc #$08						SBC 	#$08

.0c45	 85 d9		sta $d9							STA 	DIFF_Y_MSB

.0c47	 b0 02		bcs $0c4b						BCS 	b97A0

.0c49	 c6 da		dec $da								DEC 	DIFF_Y_HSB

.0c4b	 a5 dc		lda $dc		b97A0   			LDA 	DIFF_Z_MSB

.0c4d	 38		sec							SEC 

.0c4e	 e9 08		sbc #$08						SBC 	#$08

.0c50	 85 dc		sta $dc							STA 	DIFF_Z_MSB

.0c52	 b0 02		bcs $0c56						BCS 	b97AB

.0c54	 c6 dd		dec $dd								DEC 	DIFF_Z_HSB

.0c56	 a0 00		ldy #$00	b97AB   			LDY 	#0

.0c58	 84 19		sty $19							STY 	POINT_LINE_COUNT 	; start point count

.0c5a	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y 	; object point count

.0c5c	 85 b0		sta $b0							STA 	NUMBER_OF_POINTS 	; number of points?

.0c5e	 84 ad		sty $ad							STY 	OBJECT_POINTER_POS 	; store mem pos

.0c60	 20 e2 10	jsr $10e2	PROCESS_POINT_LOOP		JSR 	PROCESS_POINT_TO_FP		; get point then *16 then convert to 24bit fp

.0c63	 20 7c 11	jsr $117c							JSR 	ROTATE_PERS

.0c66	 a5 19		lda $19								LDA 	POINT_LINE_COUNT		; get point count

.0c68	 e6 19		inc $19								INC 	POINT_LINE_COUNT		; inc point count

.0c6a	 c5 b0		cmp $b0								CMP 	NUMBER_OF_POINTS	 	; last point yn

.0c6c	 d0 f2		bne $0c60							BNE 	PROCESS_POINT_LOOP  	; no so do next

.0c6e	 e6 ad		inc $ad							INC 	OBJECT_POINTER_POS 			; inc mem pos

.0c70	 a4 ad		ldy $ad							LDY 	OBJECT_POINTER_POS 			; get mem pos

.0c72	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y  		; object line count

.0c74	 85 19		sta $19							STA 	POINT_LINE_COUNT  			; number of lines?

.0c76	 10 13		bpl $0c8b						BPL 	NEXT_COMPRESSED_LINE

.0c78	 a4 ad		ldy $ad		NEXT_LINE				LDY 	OBJECT_POINTER_POS 	; get mem pos

.0c7a	 c8		iny								INY  						; inc mem pos

.0c7b	 b3 1d		lax ($1d),y							LAX 	(OBJECT_POINTER),Y 	; get 1st point into a and x

.0c7d	 c8		iny								INY 						; inc mem pos

.0c7e	 b1 1d		lda ($1d),y							LDA 	(OBJECT_POINTER),Y 	; get 2nd point

.0c80	 84 ad		sty $ad								STY 	OBJECT_POINTER_POS 	; store 2nd point?

.0c82	 a8		tay								TAY 						; 2nd point

.0c83	 20 29 0d	jsr $0d29							JSR 	LINE_DRAW 			; draw line

.0c86	 c6 19		dec $19								DEC 	POINT_LINE_COUNT 	; dec line count

.0c88	 30 ee		bmi $0c78							BMI 	NEXT_LINE 			; last line y/n

.0c8a	 60		rts							RTS 						; yes

.0c8b	 a4 ad		ldy $ad		NEXT_COMPRESSED_LINE 	LDY 	OBJECT_POINTER_POS 	; get mem pos ; first and second point are stored in 1 byte as 2 nibbles

.0c8d	 c8		iny								INY  						; inc mem pos

.0c8e	 84 ad		sty $ad								STY 	OBJECT_POINTER_POS 	; store mem pos

.0c90	 b3 1d		lax ($1d),y							LAX 	(OBJECT_POINTER),Y 	; get point count into a and x

.0c92	 29 0f		and #$0f							AND 	#$0F 				; and with 15 = 1st point

.0c94	 a8		tay								TAY 						; y = first point

.0c95	 8a		txa								TXA  						; get backup

.0c96	 4a		lsr								LSR  						; /2

.0c97	 4a		lsr								LSR  						; /2

.0c98	 4a		lsr								LSR  						; /2

.0c99	 4a		lsr								LSR  						; /2

.0c9a	 aa		tax								TAX  						; divide by 16 = 2nd point

.0c9b	 20 29 0d	jsr $0d29							JSR 	LINE_DRAW       	; DRAW LINE

.0c9e	 c6 19		dec $19								DEC 	POINT_LINE_COUNT 	; dec line count

.0ca0	 10 e9		bpl $0c8b							BPL 	NEXT_COMPRESSED_LINE ; last line yn

.0ca2	 60		rts							RTS  						; yes

.0ca3	 38		sec		CAMERA_OBJECT_DIFF	SEC 						; calc diff between object pos and current pos

.0ca4	 bd 80 07	lda $0780,x						LDA 	OBJ_X_LSB,X		;

.0ca7	 e5 72		sbc $72							SBC 	CURR_X_LSB		;

.0ca9	 85 d5		sta $d5							STA 	DIFF_X_LSB		;

.0cab	 bd d0 16	lda $16d0,x						LDA 	OBJ_X_MSB,X		;

.0cae	 e5 73		sbc $73							SBC 	CURR_X_MSB		;

.0cb0	 85 d6		sta $d6							STA 	DIFF_X_MSB		;

.0cb2	 bd 90 17	lda $1790,x						LDA 	OBJ_X_HSB,X		;

.0cb5	 e5 74		sbc $74							SBC 	CURR_X_HSB		;

.0cb7	 85 d7		sta $d7							STA 	DIFF_X_HSB		;

.0cb9	 38		sec							SEC 

.0cba	 bd c0 07	lda $07c0,x						LDA 	OBJ_Y_LSB,X		;

.0cbd	 e5 75		sbc $75							SBC 	CURR_Y_LSB		;

.0cbf	 85 d8		sta $d8							STA 	DIFF_Y_LSB		;

.0cc1	 bd 10 17	lda $1710,x						LDA 	OBJ_Y_MSB,X		;

.0cc4	 e5 76		sbc $76							SBC 	CURR_Y_MSB		;

.0cc6	 85 d9		sta $d9							STA 	DIFF_Y_MSB		;

.0cc8	 bd d0 17	lda $17d0,x						LDA 	OBJ_Y_HSB,X		;

.0ccb	 e5 77		sbc $77							SBC 	CURR_Y_HSB		;

.0ccd	 85 da		sta $da							STA 	DIFF_Y_HSB		;

.0ccf	 38		sec							SEC 

.0cd0	 bd 00 03	lda $0300,x						LDA 	OBJ_Z_LSB,X		;

.0cd3	 e5 78		sbc $78							SBC 	CURR_Z_LSB		;

.0cd5	 85 db		sta $db							STA 	DIFF_Z_LSB		;

.0cd7	 bd 50 17	lda $1750,x						LDA 	OBJ_Z_MSB,X		;

.0cda	 e5 79		sbc $79							SBC 	CURR_Z_MSB		;

.0cdc	 85 dc		sta $dc							STA 	DIFF_Z_MSB		;

.0cde	 bd 10 18	lda $1810,x						LDA 	OBJ_Z_HSB,X		;

.0ce1	 e5 7a		sbc $7a							SBC 	CURR_Z_HSB		;

.0ce3	 85 dd		sta $dd							STA 	DIFF_Z_HSB		;

.0ce5	 60		rts							RTS 

.0ce6	 86 08		stx $08		CHK_ABS_DIST	STX 	ab08

.0ce8	 84 09		sty $09						STY 	ab09

.0cea	 a5 d5		lda $d5						LDA 	DIFF_X_LSB

.0cec	 a6 d6		ldx $d6						LDX 	DIFF_X_MSB

.0cee	 a4 d7		ldy $d7						LDY 	DIFF_X_HSB

.0cf0	 20 0a 0d	jsr $0d0a					JSR 	ABS_DIFF

.0cf3	 b0 14		bcs $0d09					BCS 	b99BD 		; return carry set

.0cf5	 a5 d8		lda $d8						LDA 	DIFF_Y_LSB

.0cf7	 a6 d9		ldx $d9						LDX 	DIFF_Y_MSB

.0cf9	 a4 da		ldy $da						LDY 	DIFF_Y_HSB

.0cfb	 20 0a 0d	jsr $0d0a					JSR 	ABS_DIFF

.0cfe	 b0 09		bcs $0d09					BCS 	b99BD 		; return carry set

.0d00	 a5 db		lda $db						LDA 	DIFF_Z_LSB

.0d02	 a6 dc		ldx $dc						LDX 	DIFF_Z_MSB

.0d04	 a4 dd		ldy $dd						LDY 	DIFF_Z_HSB

.0d06	 20 0a 0d	jsr $0d0a					JSR 	ABS_DIFF

.0d09	 60		rts		b99BD   		RTS

.0d0a	 10 15		bpl $0d21	ABS_DIFF   	BPL 	CONTINUE1 	; calc absolute difference returning carry if too far away?  if number is positive continue ; negate a/x/y which hold lsb/msb/hsb if needed and subtract 08 and 09 from msb/hsb 

.0d0c	 49 ff		eor #$ff					EOR 	#$FF  	; negative so negate LSB

.0d0e	 48		pha						PHA 			; backup LSB

.0d0f	 8a		txa						TXA       		; negate MSB

.0d10	 49 ff		eor #$ff					EOR 	#$FF	;

.0d12	 aa		tax						TAX 			;

.0d13	 98		tya						TYA 			; negate HSB

.0d14	 49 ff		eor #$ff					EOR 	#$FF	;

.0d16	 a8		tay						TAY 			;

.0d17	 68		pla						PLA 			; restore LSB

.0d18	 18		clc						CLC 

.0d19	 69 01		adc #$01					ADC 	#$01		; inc LSB

.0d1b	 90 04		bcc $0d21					BCC 	CONTINUE1	; no overlow so continue

.0d1d	 e8		inx							INX 			; inc MSB

.0d1e	 d0 01		bne $0d21						BNE 	CONTINUE1	; no overlow so continue

.0d20	 c8		iny								INY 			; inc HSB

.0d21	 38		sec		CONTINUE1   SEC 				; subtract 

.0d22	 8a		txa					TXA 

.0d23	 e5 08		sbc $08					SBC 	ab08		; subtract from MSB

.0d25	 98		tya					TYA 

.0d26	 e5 09		sbc $09					SBC 	ab09		; subtract from HSB

.0d28	 60		rts					RTS 

.0d29	 bd 40 07	lda $0740,x	LINE_DRAW		LDA		POINT_CLASSIFICATION,X 		; start point X classification ; LINE_DRAW_04 - DRAW LINE - x is start index - y is end index

.0d2c	 f0 25		beq $0d53					BEQ 	POINT_X_INFRONT 			; start point X onscreen

.0d2e	 30 17		bmi $0d47					BMI 	POINT_X_BEHIND 				; start point X behind

.0d30	 b9 40 07	lda $0740,y					LDA 	POINT_CLASSIFICATION,Y 		; end point Y classification 

.0d33	 f0 12		beq $0d47					BEQ 	POINT_X_BEHIND 				; end point Y onscreen

.0d35	 30 1c		bmi $0d53					BMI 	POINT_X_INFRONT 			; end point Y behind	

.0d37	 b9 80 03	lda $0380,y					LDA 	Z_ROT_TAB_HI,Y 

.0d3a	 49 80		eor #$80					EOR 	#$80

.0d3c	 85 06		sta $06						STA 	ab06

.0d3e	 bd 80 03	lda $0380,x					LDA 	Z_ROT_TAB_HI,X

.0d41	 49 80		eor #$80					EOR 	#$80

.0d43	 c5 06		cmp $06						CMP 	ab06

.0d45	 b0 0c		bcs $0d53					BCS	 	POINT_X_INFRONT

.0d47	 98		tya		POINT_X_BEHIND 	TYA 			; start X is behind so swap start X and end Y pointer so that Y is behind and X start might be behind? so swap start and end - so Y is behind?

.0d48	 86 06		stx $06						STX 	ab06	; swap start / end

.0d4a	 aa		tax						TAX 			; swap start / end

.0d4b	 a4 06		ldy $06						LDY 	ab06	; swap start / end

.0d4d	 bd 40 07	lda $0740,x					LDA 	POINT_CLASSIFICATION,X 	; start point X which was end point Y classification

.0d50	 10 01		bpl $0d53					BPL 	POINT_X_INFRONT 		; end point X point infront

.0d52	 60		rts								RTS 					; both points behind

.0d53	 bd 40 07	lda $0740,x	POINT_X_INFRONT	LDA 	POINT_CLASSIFICATION,X 	; at least 1 point is in front ; point 1 classification

.0d56	 85 6e		sta $6e						STA 	POINT_CLASSIFY_ST

.0d58	 30 1e		bmi $0d78					BMI 	X_ROT_COPY 				; point X is behind so x rotation points need to be copied and pers doesnt

.0d5a	 bd 80 06	lda $0680,x						LDA 	PERS_HOR_TAB,X

.0d5d	 85 6a		sta $6a							STA 	LINE_START_HOR

.0d5f	 bd c0 06	lda $06c0,x						LDA 	PERS_VER_TAB,X

.0d62	 85 6b		sta $6b							STA 	LINE_START_VER

.0d64	 bd 00 06	lda $0600,x						LDA 	H_PERS_FP_LO,X

.0d67	 85 5e		sta $5e							STA 	H_PERS_FP_LO_ST

.0d69	 bd c0 03	lda $03c0,x						LDA 	H_PERS_FP_HI,X

.0d6c	 85 5f		sta $5f							STA 	H_PERS_FP_HI_ST

.0d6e	 bd 00 07	lda $0700,x						LDA 	V_PERS_FP_LO,X

.0d71	 85 60		sta $60							STA 	V_PERS_FP_LO_ST

.0d73	 bd 40 06	lda $0640,x						LDA 	V_PERS_FP_HI,X

.0d76	 85 61		sta $61							STA 	V_PERS_FP_HI_ST

.0d78	 bd 00 01	lda $0100,x	X_ROT_COPY		LDA 	X_ROT_TAB_LO,X ; a point is behind? so x and y rotation needs to be copied to be used in z clip

.0d7b	 85 52		sta $52						STA 	X_POS_HI

.0d7d	 bd 40 01	lda $0140,x					LDA 	X_ROT_TAB_HI,X

.0d80	 85 53		sta $53						STA 	X_POS_LO

.0d82	 bd 80 01	lda $0180,x					LDA 	Y_ROT_TAB_LO,X

.0d85	 85 54		sta $54						STA 	Y_POS_HI

.0d87	 bd c0 02	lda $02c0,x					LDA 	Y_ROT_TAB_HI,X

.0d8a	 85 55		sta $55						STA 	Y_POS_LO

.0d8c	 bd 40 03	lda $0340,x					LDA 	Z_ROT_TAB_LO,X

.0d8f	 85 56		sta $56						STA 	Z_POS_HI

.0d91	 bd 80 03	lda $0380,x					LDA 	Z_ROT_TAB_HI,X

.0d94	 85 57		sta $57						STA 	Z_POS_LO

.0d96	 b9 40 07	lda $0740,y					LDA 	POINT_CLASSIFICATION,Y

.0d99	 85 6f		sta $6f						STA 	POINT_CLASSIFY_EN

.0d9b	 30 1e		bmi $0dbb					BMI 	Y_ROT_COPY				; Y is behind so y rotation points need to be copied and pers doesnt

.0d9d	 b9 80 06	lda $0680,y						LDA 	PERS_HOR_TAB,Y

.0da0	 85 6c		sta $6c							STA 	PERS_HOR_ab6C

.0da2	 b9 c0 06	lda $06c0,y						LDA 	PERS_VER_TAB,Y

.0da5	 85 6d		sta $6d							STA 	PERS_VER_ab6D

.0da7	 b9 00 06	lda $0600,y						LDA 	H_PERS_FP_LO,Y

.0daa	 85 62		sta $62							STA 	H_PERS_FP_LO_EN

.0dac	 b9 c0 03	lda $03c0,y						LDA 	H_PERS_FP_HI,Y

.0daf	 85 63		sta $63							STA 	H_PERS_FP_HI_EN

.0db1	 b9 00 07	lda $0700,y						LDA 	V_PERS_FP_LO,Y

.0db4	 85 64		sta $64							STA 	V_PERS_FP_LO_EN

.0db6	 b9 40 06	lda $0640,y						LDA 	V_PERS_FP_HI,Y

.0db9	 85 65		sta $65							STA 	V_PERS_FP_HI_EN

.0dbb	 b9 00 01	lda $0100,y	Y_ROT_COPY		LDA 	X_ROT_TAB_LO,Y

.0dbe	 85 58		sta $58						STA 	X_ROTATION_LO

.0dc0	 b9 40 01	lda $0140,y					LDA 	X_ROT_TAB_HI,Y

.0dc3	 85 59		sta $59						STA 	X_ROTATION_HI

.0dc5	 b9 80 01	lda $0180,y					LDA 	Y_ROT_TAB_LO,Y

.0dc8	 85 5a		sta $5a						STA 	Y_ROTATION_LO

.0dca	 b9 c0 02	lda $02c0,y					LDA 	Y_ROT_TAB_HI,Y

.0dcd	 85 5b		sta $5b						STA 	Y_ROTATION_HI

.0dcf	 b9 40 03	lda $0340,y					LDA 	Z_ROT_TAB_LO,Y

.0dd2	 85 5c		sta $5c						STA 	Z_ROTATION_LO

.0dd4	 b9 80 03	lda $0380,y					LDA 	Z_ROT_TAB_HI,Y

.0dd7	 85 5d		sta $5d						STA 	Z_ROTATION_HI

.0dd9	 a5 6f		lda $6f						LDA 	POINT_CLASSIFY_EN

.0ddb	 10 03		bpl $0de0					BPL 	b9A94

.0ddd	 4c 56 0e	jmp $0e56						JMP 	j9B2C ; LINE DRAW

.0de0	 a6 5e		ldx $5e		b9A94   LDX H_PERS_FP_LO_ST

.0de2	 a5 5f		lda $5f		        LDA H_PERS_FP_HI_ST

.0de4	 49 01		eor #$01	        EOR #$01				; reverses the sign?

.0de6	 86 08		stx $08		        STX ab08

.0de8	 85 09		sta $09		        STA ab09

.0dea	 a6 62		ldx $62		        LDX H_PERS_FP_LO_EN

.0dec	 a4 63		ldy $63		        LDY H_PERS_FP_HI_EN

.0dee	 20 1e 0a	jsr $0a1e	        JSR FP_ADD 					; H_PERS_FP_HI_EN + (-H_PERS_FP_HI_ST) ? 

.0df1	 86 0a		stx $0a		        STX H_PERS_FP_LO_DIFF_ab0A	; h line difference?

.0df3	 84 0b		sty $0b		        STY H_PERS_FP_HI_DIFF_ab0B

.0df5	 98		tya		        TYA 

.0df6	 0a		asl		        ASL 

.0df7	 29 02		and #$02	        AND #$02

.0df9	 85 67		sta $67		        STA LINE_TYPE_POINTER 	; sign? *2? ; does the sign show the line direction?

.0dfb	 a6 60		ldx $60		        LDX V_PERS_FP_LO_ST

.0dfd	 a5 61		lda $61		        LDA V_PERS_FP_HI_ST

.0dff	 49 01		eor #$01	        EOR #$01				; reverses the sign?

.0e01	 86 08		stx $08		        STX ab08

.0e03	 85 09		sta $09		        STA ab09

.0e05	 a6 64		ldx $64		        LDX V_PERS_FP_LO_EN

.0e07	 a4 65		ldy $65		        LDY V_PERS_FP_HI_EN

.0e09	 20 1e 0a	jsr $0a1e	        JSR FP_ADD					; V_PERS_FP_HI_EN + (-V_PERS_FP_HI_ST) ? 

.0e0c	 86 0c		stx $0c		        STX V_PERS_FP_LO_DIFF_ab0C	; v line difference?

.0e0e	 84 0d		sty $0d		        STY V_PERS_FP_HI_DIFF_ab0D

.0e10	 98		tya		        TYA 

.0e11	 29 01		and #$01	        AND #$01				; sign? ; does the sign show the line direction?

.0e13	 05 67		ora $67		        ORA LINE_TYPE_POINTER

.0e15	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0e17	 a5 0a		lda $0a				LDA		H_PERS_FP_LO_DIFF_ab0A

.0e19	 85 22		sta $22				STA		FP_DIVIDE_LO

.0e1b	 a6 09		ldx $09				LDX		ab09

.0e1d	 a4 08		ldy $08				LDY		ab08

.0e1f	 a5 0b		lda $0b				LDA		H_PERS_FP_HI_DIFF_ab0B

.0e21	 20 57 09	jsr $0957			JSR		FP_DIVIDE		; 0A-0B / 08-09 -> 68-69

.0e24	 86 68		stx $68				STx		ab68

.0e26	 85 69		sta $69				STA		ab69

.0e28	 a8		tay		        TAY

.0e29	 30 17		bmi $0e42	        BMI b9B14

.0e2b	 a5 67		lda $67					LDA LINE_TYPE_POINTER

.0e2d	 09 04		ora #$04				ORA #$04

.0e2f	 85 67		sta $67					STA LINE_TYPE_POINTER

.0e31	 a5 0c		lda $0c					LDA		V_PERS_FP_LO_DIFF_ab0C

.0e33	 85 22		sta $22					STA		FP_DIVIDE_LO

.0e35	 a6 0b		ldx $0b					LDX		H_PERS_FP_HI_DIFF_ab0B

.0e37	 a4 0a		ldy $0a					LDY		H_PERS_FP_LO_DIFF_ab0A

.0e39	 a5 0d		lda $0d					LDA		V_PERS_FP_HI_DIFF_ab0D

.0e3b	 20 57 09	jsr $0957				JSR		FP_DIVIDE		; 0A-0B / 0C-0D -> 08-09

.0e3e	 86 08		stx $08					STX		ab08

.0e40	 85 09		sta $09					STA		ab09

.0e42	 a8		tay		b9B14	TAY

.0e43	 30 05		bmi $0e4a	        BMI 	b9B1E

.0e45	 a0 ff		ldy #$ff				LDY 	#$FF		; straight line?	LDA 	#$FF

.0e47	 4c ed 0e	jmp $0eed				JMP 	STORE_LINE_INC

.0e4a	 18		clc		b9B1E   CLC 

.0e4b	 69 20		adc #$20	        ADC #$20		; possible *128 ?

.0e4d	 29 fc		and #$fc	        AND #$FC

.0e4f	 a8		tay		        TAY 

.0e50	 20 f7 0a	jsr $0af7	        JSR FPTO16BIT

.0e53	 4c ed 0e	jmp $0eed			JMP 	STORE_LINE_INC

.0e56	 a5 56		lda $56		j9B2C	LDA		Z_POS_HI			 

.0e58	 85 22		sta $22				STA		FP_DIVIDE_LO

.0e5a	 a6 5d		ldx $5d				LDX		Z_ROTATION_HI

.0e5c	 a4 5c		ldy $5c				LDY		Z_ROTATION_LO

.0e5e	 a5 57		lda $57				LDA		Z_POS_LO

.0e60	 20 57 09	jsr $0957			JSR		FP_DIVIDE		; ZPOS HI-LO / Z_ROTATION HI-LO -> 0A-0B

.0e63	 86 0a		stx $0a				STX		ab0A

.0e65	 49 01		eor #$01			EOR #$01				; swap sign?

.0e67	 85 0b		sta $0b		        STA ab0B

.0e69	 a5 52		lda $52				LDA 	X_POS_HI

.0e6b	 85 22		sta $22				STA		FP_MULTIPLY_LO

.0e6d	 a5 53		lda $53				LDA 	X_POS_LO

.0e6f	 a4 0b		ldy $0b				LDY 	ab0B

.0e71	 a6 0a		ldx $0a		        LDX 	ab0A

.0e73	 20 73 09	jsr $0973			JSR		FP_MULTIPLY		; XPOS HI-LO * 0A-0B -> 08-09

.0e76	 84 08		sty $08		        STy 	ab08

.0e78	 85 09		sta $09		        STA 	ab09

.0e7a	 a6 58		ldx $58		        LDX X_ROTATION_LO

.0e7c	 a4 59		ldy $59		        LDY X_ROTATION_HI

.0e7e	 20 1e 0a	jsr $0a1e	        JSR FP_ADD				; XROT HI-LO + 08-09 -> 0c-0D

.0e81	 86 0c		stx $0c		        STX ab0C

.0e83	 84 0d		sty $0d		        STY ab0D

.0e85	 98		tya		        TYA 

.0e86	 45 57		eor $57		        EOR Z_POS_LO

.0e88	 0a		asl		        ASL 

.0e89	 29 02		and #$02	        AND #$02

.0e8b	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0e8d	 a5 54		lda $54				LDA 	Y_POS_HI

.0e8f	 85 22		sta $22				STA		FP_MULTIPLY_LO

.0e91	 a5 55		lda $55				LDA 	Y_POS_LO

.0e93	 a4 0b		ldy $0b				LDY 	ab0B

.0e95	 a6 0a		ldx $0a		        LDX 	ab0A

.0e97	 20 73 09	jsr $0973			JSR		FP_MULTIPLY		; Y_POS HI-LO * 0A-0B -> 08-09

.0e9a	 84 08		sty $08		        STy 	ab08

.0e9c	 85 09		sta $09		        STA 	ab09

.0e9e	 a6 5a		ldx $5a		        LDX Y_ROTATION_LO

.0ea0	 a4 5b		ldy $5b		        LDY Y_ROTATION_HI

.0ea2	 20 1e 0a	jsr $0a1e	        JSR FP_ADD				; YROT HI-LO + 08-09 -> 0A-0B

.0ea5	 86 0a		stx $0a		        STX ab0A

.0ea7	 84 0b		sty $0b		        STY ab0B

.0ea9	 98		tya		        TYA 

.0eaa	 45 57		eor $57		        EOR Z_POS_LO

.0eac	 29 01		and #$01	        AND #$01

.0eae	 05 67		ora $67		        ORA LINE_TYPE_POINTER

.0eb0	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0eb2	 a5 0c		lda $0c				LDA		ab0C

.0eb4	 85 22		sta $22				STA		FP_DIVIDE_LO

.0eb6	 a6 09		ldx $09				LDX		ab09

.0eb8	 a4 08		ldy $08				LDY		ab08

.0eba	 a5 0d		lda $0d				LDA		ab0D

.0ebc	 20 57 09	jsr $0957			JSR		FP_DIVIDE		; 0C-0D / 08-09 -> 68-69

.0ebf	 86 68		stx $68				STX		ab68

.0ec1	 85 69		sta $69				STA		ab69

.0ec3	 a8		tay		        TAY 

.0ec4	 30 17		bmi $0edd	        BMI b9BFC

.0ec6	 a5 67		lda $67		        LDA LINE_TYPE_POINTER

.0ec8	 09 04		ora #$04	        ORA #$04

.0eca	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0ecc	 a5 0a		lda $0a				LDA		ab0A

.0ece	 85 22		sta $22				STA		FP_DIVIDE_LO

.0ed0	 a6 0d		ldx $0d				LDX		ab0D

.0ed2	 a4 0c		ldy $0c				LDY		ab0C

.0ed4	 a5 0b		lda $0b				LDA		ab0B

.0ed6	 20 57 09	jsr $0957			JSR		FP_DIVIDE		; 0A-0B / 0C-0D -> 08-09

.0ed9	 86 08		stx $08				STX		ab08

.0edb	 85 09		sta $09				STA		ab09

.0edd	 a8		tay		b9BFC   TAY 

.0ede	 30 04		bmi $0ee4	        BMI 	b9C05

.0ee0	 a0 ff		ldy #$ff					LDY 	#$FF			; straight line?

.0ee2	 d0 09		bne $0eed					BNE 	STORE_LINE_INC ; jump

.0ee4	 18		clc		b9C05   CLC 

.0ee5	 69 20		adc #$20	        ADC #$20	; *128 ?

.0ee7	 29 fc		and #$fc	        AND #$FC

.0ee9	 a8		tay		        TAY 

.0eea	 20 f7 0a	jsr $0af7	        JSR 	FPTO16BIT

.0eed	 84 66		sty $66		STORE_LINE_INC	STY 	LINE_INC

.0eef	 a6 67		ldx $67		GET_LINE_TYPE	LDX 	LINE_TYPE_POINTER    	; GET LINE TYPE 0-7

.0ef1	 bc 70 24	ldy $2470,x					LDY 	LINE_DRAW_CONV_PTR,X 	; CONVERT LINE TYPE TO POINTER TYPE

.0ef4	 b9 60 24	lda $2460,y					LDA 	LINE_DRAW_PTR_LO,Y 		; GET POINTER TO CORRECT LINE

.0ef7	 8d 71 10	sta $1071					STA 	LINE_JP_PTR +1    		; STORE AT JUMP TABLE ADDRESS

.0efa	 b9 68 24	lda $2468,y					LDA 	LINE_DRAW_PTR_HI,Y		; GET POINTER TO CORRECT LINE

.0efd	 8d 72 10	sta $1072					STA 	LINE_JP_PTR +2    		; STORE AT JUMP TABLE ADDRESS

.0f00	 a5 6f		lda $6f						LDA 	POINT_CLASSIFY_EN

.0f02	 f0 0a		beq $0f0e					BEQ 	b9C2F

.0f04	 b9 78 24	lda $2478,y					LDA 	PERS_HOR_fBBD8,Y

.0f07	 85 6c		sta $6c						STA 	PERS_HOR_ab6C

.0f09	 b9 80 24	lda $2480,y					LDA 	PERS_VER_fBBE0,Y

.0f0c	 85 6d		sta $6d						STA 	PERS_VER_ab6D

.0f0e	 a5 6e		lda $6e		b9C2F   		LDA 	POINT_CLASSIFY_ST

.0f10	 d0 03		bne $0f15					BNE 	b9C36				; point off screen

.0f12	 4c 6c 10	jmp $106c					JMP		LINE_DRW_JP

.0f15	 a5 61		lda $61		b9C36   LDA V_PERS_FP_HI_ST

.0f17	 0a		asl		        ASL 

.0f18	 0a		asl		        ASL 

.0f19	 29 04		and #$04	        AND #$04

.0f1b	 05 6e		ora $6e		        ORA POINT_CLASSIFY_ST

.0f1d	 85 06		sta $06		        STA ab06

.0f1f	 a5 5f		lda $5f		        LDA H_PERS_FP_HI_ST

.0f21	 0a		asl		        ASL 

.0f22	 0a		asl		        ASL 

.0f23	 0a		asl		        ASL 

.0f24	 29 08		and #$08	        AND #$08

.0f26	 05 06		ora $06		        ORA ab06

.0f28	 aa		tax		        TAX 

.0f29	 98		tya		        TYA 

.0f2a	 1d 88 24	ora $2488,x	        ORA fBBE8,X

.0f2d	 4a		lsr		        LSR 

.0f2e	 aa		tax		        TAX 

.0f2f	 bd 98 24	lda $2498,x	        LDA fBBF8,X

.0f32	 d0 01		bne $0f35	        BNE b9C56

.0f34	 60		rts					RTS 

.0f35	 85 6e		sta $6e		b9C56   STA POINT_CLASSIFY_ST

.0f37	 a5 6f		lda $6f		        LDA POINT_CLASSIFY_EN

.0f39	 30 20		bmi $0f5b	        BMI b9C7C

.0f3b	 a5 65		lda $65					LDA V_PERS_FP_HI_EN

.0f3d	 0a		asl					ASL 

.0f3e	 0a		asl					ASL 

.0f3f	 29 04		and #$04				AND #$04

.0f41	 05 6f		ora $6f					ORA POINT_CLASSIFY_EN

.0f43	 85 06		sta $06					STA ab06

.0f45	 a5 63		lda $63					LDA H_PERS_FP_HI_EN

.0f47	 0a		asl					ASL 

.0f48	 0a		asl					ASL 

.0f49	 0a		asl					ASL 

.0f4a	 29 08		and #$08				AND #$08

.0f4c	 05 06		ora $06					ORA ab06

.0f4e	 aa		tax					TAX 

.0f4f	 98		tya					TYA 

.0f50	 1d 88 24	ora $2488,x				ORA fBBE8,X

.0f53	 4a		lsr					LSR 

.0f54	 aa		tax					TAX 

.0f55	 bd b8 24	lda $24b8,x				LDA fBC18,X

.0f58	 d0 01		bne $0f5b				BNE b9C7C

.0f5a	 60		rts						RTS 

.0f5b	 a5 6e		lda $6e		b9C7C   LDA 	POINT_CLASSIFY_ST

.0f5d	 29 01		and #$01	        AND 	#$01 ; off this edge

.0f5f	 f0 3f		beq $0fa0	        BEQ 	b9CC1 ; no

.0f61	 a2 3c		ldx #$3c				LDX 	#ab92_VAL ; ab92 ; yes

.0f63	 a9 18		lda #$18				LDA 	#ab93_VAL ; ab93

.0f65	 38		sec					SEC 

.0f66	 e9 18		sbc #$18				SBC 	#FOCUS ; ab21

.0f68	 86 08		stx $08					STX 	ab08

.0f6a	 85 09		sta $09					STA 	ab09

.0f6c	 a6 5e		ldx $5e					LDX 	H_PERS_FP_LO_ST

.0f6e	 a5 5f		lda $5f					LDA 	H_PERS_FP_HI_ST

.0f70	 49 01		eor #$01				EOR 	#$01			; swap sign

.0f72	 a8		tay					TAY 

.0f73	 20 1e 0a	jsr $0a1e				JSR 	FP_ADD			; 5E-5F + 92-93 -> 68-69 (due to sign swap its actually fp minus?)

.0f76	 a6 68		ldx $68					LDX 	ab68

.0f78	 a4 69		ldy $69					LDY 	ab69

.0f7a	 20 8d 09	jsr $098d				JSR 	FPMUL			; 92-93 * 68-69 -> 60-61

.0f7d	 a6 60		ldx $60					LDX 	V_PERS_FP_LO_ST

.0f7f	 a4 61		ldy $61					LDY 	V_PERS_FP_HI_ST

.0f81	 20 1e 0a	jsr $0a1e				JSR 	FP_ADD			; 68-69 + 60-61 -> 

.0f84	 98		tya					TYA 

.0f85	 18		clc					CLC 

.0f86	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.0f88	 70 16		bvs $0fa0				BVS 	b9CC1

.0f8a	 a8		tay					TAY 

.0f8b	 20 c7 0a	jsr $0ac7				JSR 	FPTO8BIT

.0f8e	 b0 10		bcs $0fa0				BCS 	b9CC1

.0f90	 18		clc					CLC 

.0f91	 69 44		adc #$44				ADC 	#SCR_VER_MID

.0f93	 c9 88		cmp #$88				CMP 	#CLIP_TEST_BOTTOM 	; clip test?

.0f95	 b0 09		bcs $0fa0				BCS 	b9CC1

.0f97	 85 6b		sta $6b						STA 	LINE_START_VER

.0f99	 a9 9f		lda #$9f					LDA 	#CLIP_RIGHT 		; clip right ?

.0f9b	 85 6a		sta $6a						STA 	LINE_START_HOR 		; clip right ?

.0f9d	 4c 6c 10	jmp $106c					JMP 	LINE_DRW_JP

.0fa0	 a5 6e		lda $6e		b9CC1   LDA 	POINT_CLASSIFY_ST

.0fa2	 29 02		and #$02	        AND 	#$02 ; off this edge

.0fa4	 f0 3f		beq $0fe5	        BEQ 	b9D06 ; no

.0fa6	 a2 0c		ldx #$0c				LDX 	#ab96_VAL ; ab96 ; yes

.0fa8	 a9 18		lda #$18				LDA 	#ab97_VAL ; ab97

.0faa	 38		sec					SEC 

.0fab	 e9 18		sbc #$18				SBC 	#FOCUS ; ab21

.0fad	 86 08		stx $08					STX 	ab08

.0faf	 85 09		sta $09					STA 	ab09

.0fb1	 a6 60		ldx $60					LDX 	V_PERS_FP_LO_ST

.0fb3	 a5 61		lda $61					LDA 	V_PERS_FP_HI_ST

.0fb5	 49 01		eor #$01				EOR 	#$01				; sign swap?

.0fb7	 a8		tay					TAY 

.0fb8	 20 1e 0a	jsr $0a1e				JSR 	FP_ADD				; 60-61 + 96-97 -> 68-69 (due to sign swap actually fp minus?)

.0fbb	 a6 68		ldx $68					LDX 	ab68

.0fbd	 a4 69		ldy $69					LDY 	ab69

.0fbf	 20 c7 09	jsr $09c7				JSR 	FPDIV				; 96-97 / 68-69 -> 5E-5F

.0fc2	 a6 5e		ldx $5e					LDX 	H_PERS_FP_LO_ST

.0fc4	 a4 5f		ldy $5f					LDY 	H_PERS_FP_HI_ST

.0fc6	 20 1e 0a	jsr $0a1e				JSR 	FP_ADD				; 5E-5F + 96-97 ->

.0fc9	 98		tya					TYA 

.0fca	 18		clc					CLC 

.0fcb	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.0fcd	 70 16		bvs $0fe5				BVS 	b9D06

.0fcf	 a8		tay					TAY 

.0fd0	 20 c7 0a	jsr $0ac7				JSR 	FPTO8BIT

.0fd3	 b0 10		bcs $0fe5				BCS 	b9D06

.0fd5	 18		clc					CLC 

.0fd6	 69 50		adc #$50				ADC 	#SCR_HOR_MID

.0fd8	 c9 a0		cmp #$a0				CMP 	#CLIP_TEST_RIGHT 		; clip test

.0fda	 b0 09		bcs $0fe5				BCS 	b9D06

.0fdc	 85 6a		sta $6a						STA 	LINE_START_HOR

.0fde	 a9 87		lda #$87					LDA 	#CLIP_BOTTOM 			; clip bottom

.0fe0	 85 6b		sta $6b						STA 	LINE_START_VER 			; clip bottom

.0fe2	 4c 6c 10	jmp $106c					JMP 	LINE_DRW_JP

.0fe5	 a5 6e		lda $6e		b9D06   LDA 	POINT_CLASSIFY_ST ; LINE DRAW

.0fe7	 29 04		and #$04	        AND 	#$04 ; off this edge

.0fe9	 f0 3f		beq $102a	        BEQ 	b9D4B ; no

.0feb	 a2 40		ldx #$40				LDX 	#ab90_VAL ; ab90 ; yes

.0fed	 a9 19		lda #$19				LDA 	#ab91_VAL ; ab91

.0fef	 38		sec					SEC 

.0ff0	 e9 18		sbc #$18				SBC 	#FOCUS ; ab21

.0ff2	 86 08		stx $08					STX 	ab08

.0ff4	 85 09		sta $09					STA 	ab09

.0ff6	 a6 5e		ldx $5e					LDX 	H_PERS_FP_LO_ST

.0ff8	 a5 5f		lda $5f					LDA 	H_PERS_FP_HI_ST

.0ffa	 49 01		eor #$01				EOR 	#$01				; swap sign?

.0ffc	 a8		tay					TAY 

.0ffd	 20 1e 0a	jsr $0a1e				JSR 	FP_ADD				; 90-91 + 5E+5F -> 68-69 (its actually fp minus due to sign swap?)

.1000	 a6 68		ldx $68					LDX 	ab68

.1002	 a4 69		ldy $69					LDY 	ab69

.1004	 20 8d 09	jsr $098d				JSR 	FPMUL				; 68-69 * 90-91 -> 60-61

.1007	 a6 60		ldx $60					LDX 	V_PERS_FP_LO_ST

.1009	 a4 61		ldy $61					LDY 	V_PERS_FP_HI_ST

.100b	 20 1e 0a	jsr $0a1e				JSR 	FP_ADD				; 60-61 + 90-91 -> 

.100e	 98		tya					TYA 

.100f	 18		clc					CLC 

.1010	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.1012	 70 16		bvs $102a				BVS 	b9D4B

.1014	 a8		tay					TAY 

.1015	 20 c7 0a	jsr $0ac7				JSR 	FPTO8BIT

.1018	 b0 10		bcs $102a				BCS 	b9D4B

.101a	 18		clc					CLC 

.101b	 69 44		adc #$44				ADC 	#SCR_VER_MID

.101d	 c9 88		cmp #$88				CMP 	#CLIP_TEST_BOTTOM ; clip test

.101f	 b0 09		bcs $102a				BCS 	b9D4B

.1021	 85 6b		sta $6b						STA 	LINE_START_VER

.1023	 a9 00		lda #$00					LDA 	#CLIP_TEST_TOP 	; clip off top

.1025	 85 6a		sta $6a						STA 	LINE_START_HOR 	; clip off top 

.1027	 4c 6c 10	jmp $106c					JMP 	LINE_DRW_JP

.102a	 a5 6e		lda $6e		b9D4B   LDA 	POINT_CLASSIFY_ST ; LINE DRAW

.102c	 29 08		and #$08	        AND 	#$08 ; off this edge

.102e	 f0 43		beq $1073			BEQ 	b9D98 ; no

.1030	 a2 10		ldx #$10				LDX 	#ab94_VAL ; ab94 ; yes

.1032	 a9 19		lda #$19				LDA 	#ab95_VAL ; ab95

.1034	 38		sec					SEC 

.1035	 e9 18		sbc #$18				SBC 	#FOCUS ; ab21

.1037	 86 08		stx $08					STX 	ab08

.1039	 85 09		sta $09					STA 	ab09

.103b	 a6 60		ldx $60					LDX 	V_PERS_FP_LO_ST

.103d	 a5 61		lda $61					LDA 	V_PERS_FP_HI_ST

.103f	 49 01		eor #$01				EOR 	#$01				; sign swap

.1041	 a8		tay					TAY 

.1042	 20 1e 0a	jsr $0a1e				JSR 	FP_ADD				; 94-95 + 60-61 -> 68-69 (due to sign swap actually fp minus?)

.1045	 a6 68		ldx $68					LDX 	ab68

.1047	 a4 69		ldy $69					LDY 	ab69

.1049	 20 c7 09	jsr $09c7				JSR 	FPDIV				; 94-95 / 68-69 -> 5E-5F

.104c	 a6 5e		ldx $5e					LDX 	H_PERS_FP_LO_ST

.104e	 a4 5f		ldy $5f					LDY 	H_PERS_FP_HI_ST

.1050	 20 1e 0a	jsr $0a1e				JSR 	FP_ADD				; 94-95 + 5E-5F ->

.1053	 98		tya					TYA 

.1054	 18		clc					CLC 

.1055	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.1057	 70 1a		bvs $1073				BVS 	b9D98

.1059	 a8		tay					TAY 

.105a	 20 c7 0a	jsr $0ac7				JSR 	FPTO8BIT

.105d	 b0 14		bcs $1073				BCS 	b9D98

.105f	 18		clc					CLC 

.1060	 69 50		adc #$50				ADC 	#SCR_HOR_MID

.1062	 c9 a0		cmp #$a0				CMP 	#CLIP_TEST_RIGHT 	; clip test

.1064	 b0 0d		bcs $1073				BCS 	b9D98

.1066	 85 6a		sta $6a						STA 	LINE_START_HOR

.1068	 a9 00		lda #$00					LDA 	#CLIP_TEST_LEFT 	; clip off left

.106a	 85 6b		sta $6b						STA 	LINE_START_VER 		; clip off left

.106c	 a6 6a		ldx $6a		LINE_DRW_JP	LDX 	LINE_START_HOR

.106e	 a4 6b		ldy $6b					LDY 	LINE_START_VER

.1070	 4c cd ab	jmp $abcd	LINE_JP_PTR	JMP 	$ABCD 					; LINE_DRAW_01

.1073	 60		rts		b9D98   	RTS 

.1074	 48		pha		FORWARD_BACK	PHA 			; push sign/direction

.1075	 a6 aa		ldx $aa						LDX 	SPEED_LO

.1077	 45 ab		eor $ab						EOR 	SPEED_HI 	; set direction

.1079	 86 08		stx $08						STX 	ab08

.107b	 85 09		sta $09						STA 	ab09

.107d	 a6 3e		ldx $3e						LDX 	COS_LO

.107f	 a4 3f		ldy $3f						LDY 	COS_HI

.1081	 20 8d 09	jsr $098d					JSR 	FPMUL

.1084	 20 f7 0a	jsr $0af7					JSR 	FPTO16BIT

.1087	 98		tya						TYA 

.1088	 18		clc						CLC 

.1089	 65 78		adc $78						ADC 	CURR_Z_LSB

.108b	 85 78		sta $78						STA 	CURR_Z_LSB

.108d	 8a		txa						TXA 

.108e	 65 79		adc $79						ADC 	CURR_Z_MSB

.1090	 85 79		sta $79						STA 	CURR_Z_MSB

.1092	 8a		txa						TXA 

.1093	 10 04		bpl $1099					BPL 	_Z_PLUS 		; if +

.1095	 a9 ff		lda #$ff						LDA 	#$FF		; set to 255 for -

.1097	 30 02		bmi $109b						BMI 	_Z_NEG_CONT	; jmp

.1099	 a9 00		lda #$00	_Z_PLUS   		LDA 	#$00			; set to 0 for +

.109b	 65 7a		adc $7a		_Z_NEG_CONT 	ADC 	CURR_Z_HSB		; either add or sub depending on + or -

.109d	 85 7a		sta $7a						STA 	CURR_Z_HSB

.109f	 68		pla						PLA 			; pop sign

.10a0	 a6 aa		ldx $aa						LDX 	SPEED_LO

.10a2	 45 ab		eor $ab						EOR 	SPEED_HI	; set direction

.10a4	 86 08		stx $08						STX 	ab08

.10a6	 85 09		sta $09						STA 	ab09

.10a8	 a6 3c		ldx $3c						LDX 	SIN_LO

.10aa	 a4 3d		ldy $3d						LDY 	SIN_HI

.10ac	 20 8d 09	jsr $098d					JSR 	FPMUL

.10af	 20 f7 0a	jsr $0af7					JSR 	FPTO16BIT

.10b2	 98		tya						TYA 

.10b3	 18		clc						CLC 

.10b4	 65 72		adc $72						ADC 	CURR_X_LSB

.10b6	 85 72		sta $72						STA 	CURR_X_LSB

.10b8	 8a		txa						TXA 

.10b9	 65 73		adc $73						ADC 	CURR_X_MSB

.10bb	 85 73		sta $73						STA 	CURR_X_MSB

.10bd	 8a		txa						TXA 

.10be	 10 04		bpl $10c4					BPL 	_X_PLUS			; positive

.10c0	 a9 ff		lda #$ff						LDA 	#$FF		; negative so set to 255

.10c2	 30 02		bmi $10c6						BMI 	_X_NEG_CONT ; jump to calc

.10c4	 a9 00		lda #$00	_X_PLUS	   		LDA 	#$00			; positive so set to 0

.10c6	 65 74		adc $74		_X_NEG_CONT    	ADC 	CURR_X_HSB		; calc

.10c8	 85 74		sta $74						STA 	CURR_X_HSB

.10ca	 60		rts						RTS 

.10cb	 a6 2c		ldx $2c		SIN_COS	LDX 	ROT_LO

.10cd	 a4 2d		ldy $2d		        LDY 	ROT_HI

.10cf	 20 b2 0a	jsr $0ab2	        JSR 	SIN_FP

.10d2	 86 3c		stx $3c		        STX 	SIN_LO ; sin_lo

.10d4	 84 3d		sty $3d		        STY 	SIN_HI ; sin_hi

.10d6	 a6 2c		ldx $2c		        LDX 	ROT_LO

.10d8	 a4 2d		ldy $2d		        LDY 	ROT_HI

.10da	 20 b1 0a	jsr $0ab1	        JSR 	COS_FP

.10dd	 86 3e		stx $3e		        STX 	COS_LO ; cos_lo

.10df	 84 3f		sty $3f		        STY 	COS_HI ; cos_hi

.10e1	 60		rts		        RTS 

.10e2	 a4 ad		ldy $ad		PROCESS_POINT_TO_FP	LDY 	OBJECT_POINTER_POS 	; get point then *16 then conveert to 24bit fp

.10e4	 c8		iny							INY 

.10e5	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y ; get x

.10e7	 85 cf		sta $cf							STA 	OBJ_PNT_X_LSB

.10e9	 c8		iny							INY 

.10ea	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y ; get y

.10ec	 85 d1		sta $d1							STA 	OBJ_PNT_Y_LSB

.10ee	 c8		iny							INY 

.10ef	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y ; get z

.10f1	 85 d3		sta $d3							STA 	OBJ_PNT_Z_LSB

.10f3	 84 ad		sty $ad							STY 	OBJECT_POINTER_POS

.10f5	 20 3b 11	jsr $113b						JSR 	POINT_X16

.10f8	 a5 d5		lda $d5							LDA 	DIFF_X_LSB

.10fa	 18		clc							CLC 	 			; clear

.10fb	 65 cf		adc $cf							ADC 	OBJ_PNT_X_LSB

.10fd	 a8		tay							TAY

.10fe	 a5 d6		lda $d6							LDA 	DIFF_X_MSB

.1100	 65 d0		adc $d0							ADC 	OBJ_PNT_X_MSB

.1102	 aa		tax							TAX 

.1103	 a5 d7		lda $d7							LDA 	DIFF_X_HSB

.1105	 69 00		adc #$00						ADC 	#$00

.1107	 20 5f 0b	jsr $0b5f						JSR 	BIT24TOFP

.110a	 85 52		sta $52							STA 	X_POS_HI

.110c	 86 53		stx $53							STX 	X_POS_LO

.110e	 a5 d8		lda $d8							LDA 	DIFF_Y_LSB

.1110	 18		clc							CLC 

.1111	 65 d1		adc $d1							ADC 	OBJ_PNT_Y_LSB

.1113	 a8		tay							TAY

.1114	 a5 d9		lda $d9							LDA 	DIFF_Y_MSB

.1116	 65 d2		adc $d2							ADC 	OBJ_PNT_Y_MSB

.1118	 aa		tax							TAX 

.1119	 a5 da		lda $da							LDA 	DIFF_Y_HSB

.111b	 69 00		adc #$00						ADC 	#$00

.111d	 20 5f 0b	jsr $0b5f						JSR 	BIT24TOFP

.1120	 85 54		sta $54							STA 	Y_POS_HI

.1122	 86 55		stx $55							STX 	Y_POS_LO

.1124	 a5 db		lda $db							LDA 	DIFF_Z_LSB

.1126	 18		clc							CLC 

.1127	 65 d3		adc $d3							ADC 	OBJ_PNT_Z_LSB

.1129	 a8		tay							TAY

.112a	 a5 dc		lda $dc							LDA 	DIFF_Z_MSB

.112c	 65 d4		adc $d4							ADC 	OBJ_PNT_Z_MSB

.112e	 aa		tax							TAX 

.112f	 a5 dd		lda $dd							LDA 	DIFF_Z_HSB

.1131	 69 00		adc #$00						ADC 	#$00

.1133	 20 5f 0b	jsr $0b5f						JSR 	BIT24TOFP

.1136	 85 56		sta $56							STA 	Z_POS_HI

.1138	 86 57		stx $57							STX 	Z_POS_LO

.113a	 60		rts							RTS 

.113b	 a9 00		lda #$00	POINT_X16	LDA 	#0				; MULTIPLY POINT *16 ?

.113d	 85 d0		sta $d0					STA 	OBJ_PNT_X_MSB

.113f	 85 d2		sta $d2					STA 	OBJ_PNT_Y_MSB

.1141	 85 d4		sta $d4					STA 	OBJ_PNT_Z_MSB

.1143	 a5 cf		lda $cf					LDA 	OBJ_PNT_X_LSB

.1145	 49 80		eor #$80				EOR 	#$80 			; reverse the sign?

.1147	 0a		asl					ASL 

.1148	 26 d0		rol $d0					ROL 	OBJ_PNT_X_MSB ; *2

.114a	 0a		asl					ASL 

.114b	 26 d0		rol $d0					ROL 	OBJ_PNT_X_MSB ; *4

.114d	 0a		asl					ASL 

.114e	 26 d0		rol $d0					ROL 	OBJ_PNT_X_MSB ; *8

.1150	 0a		asl					ASL 

.1151	 26 d0		rol $d0					ROL 	OBJ_PNT_X_MSB ; *16

.1153	 85 cf		sta $cf					STA 	OBJ_PNT_X_LSB

.1155	 a5 d0		lda $d0					LDA OBJ_PNT_X_MSB ; *16

.1157	 a5 d1		lda $d1					LDA 	OBJ_PNT_Y_LSB

.1159	 49 80		eor #$80				EOR 	#$80

.115b	 0a		asl					ASL 

.115c	 26 d2		rol $d2					ROL 	OBJ_PNT_Y_MSB

.115e	 0a		asl					ASL 

.115f	 26 d2		rol $d2					ROL 	OBJ_PNT_Y_MSB

.1161	 0a		asl					ASL 

.1162	 26 d2		rol $d2					ROL 	OBJ_PNT_Y_MSB

.1164	 0a		asl					ASL 

.1165	 26 d2		rol $d2					ROL 	OBJ_PNT_Y_MSB

.1167	 85 d1		sta $d1					STA 	OBJ_PNT_Y_LSB

.1169	 a5 d3		lda $d3					LDA 	OBJ_PNT_Z_LSB

.116b	 49 80		eor #$80				EOR 	#$80

.116d	 0a		asl					ASL 

.116e	 26 d4		rol $d4					ROL 	OBJ_PNT_Z_MSB

.1170	 0a		asl					ASL 

.1171	 26 d4		rol $d4					ROL 	OBJ_PNT_Z_MSB

.1173	 0a		asl					ASL 

.1174	 26 d4		rol $d4					ROL 	OBJ_PNT_Z_MSB

.1176	 0a		asl					ASL 

.1177	 26 d4		rol $d4					ROL 	OBJ_PNT_Z_MSB

.1179	 85 d3		sta $d3					STA 	OBJ_PNT_Z_LSB

.117b	 60		rts					RTS 

.117c	 a5 3c		lda $3c		ROTATE_PERS LDA 	SIN_LO

.117e	 85 22		sta $22					STA		FP_MULTIPLY_LO

.1180	 a5 3d		lda $3d					LDA 	SIN_HI

.1182	 a6 52		ldx $52					LDX		X_POS_HI

.1184	 a4 53		ldy $53					LDY		X_POS_LO

.1186	 20 73 09	jsr $0973				JSR		FP_MULTIPLY			; X * SIN

.1189	 84 0a		sty $0a					STy 	X_ROT_LO

.118b	 85 0b		sta $0b					STA		X_ROT_HI

.118d	 a5 3e		lda $3e					LDA 	COS_LO

.118f	 85 22		sta $22					STA		FP_MULTIPLY_LO

.1191	 a5 3f		lda $3f					LDA 	COS_HI

.1193	 a6 56		ldx $56					LDX		Z_POS_HI

.1195	 a4 57		ldy $57					LDY		Z_POS_LO

.1197	 20 73 09	jsr $0973				JSR		FP_MULTIPLY			; Z * COS

.119a	 84 08		sty $08					STy 	Z_ROT_LO

.119c	 85 09		sta $09					STA		Z_ROT_HI

.119e	 a6 0a		ldx $0a					LDX 	X_ROT_LO

.11a0	 a4 0b		ldy $0b					LDY 	X_ROT_HI

.11a2	 20 1e 0a	jsr $0a1e				JSR 	FP_ADD				; Z = (X * SIN) + (Z * COS)

.11a5	 86 5c		stx $5c					STX 	Z_ROTATION_LO		; Z rotation result?

.11a7	 98		tya					TYA 

.11a8	 49 01		eor #$01				EOR 	#$01				; swap sign?

.11aa	 85 5d		sta $5d					STA 	Z_ROTATION_HI		; Z rotation result?

.11ac	 29 01		and #$01				AND 	#$01				; keep fp sign

.11ae	 4a		lsr					LSR 						; shift sign

.11af	 6a		ror					ROR 						; rotate sign into top bit

.11b0	 85 6e		sta $6e					STA 	POINT_CLASSIFY_ST	; so -ve = $80 / +ve = $00 ? = behind point classification?

.11b2	 a5 3e		lda $3e					LDA 	COS_LO

.11b4	 85 22		sta $22					STA		FP_MULTIPLY_LO

.11b6	 a5 3f		lda $3f					LDA 	COS_HI

.11b8	 a6 52		ldx $52					LDX		X_POS_HI

.11ba	 a4 53		ldy $53					LDY		X_POS_LO

.11bc	 20 73 09	jsr $0973				JSR		FP_MULTIPLY			; X * COS

.11bf	 84 0a		sty $0a					STy 	X_ROT_LO

.11c1	 85 0b		sta $0b					STA		X_ROT_HI

.11c3	 a5 3c		lda $3c					LDA 	SIN_LO

.11c5	 85 22		sta $22					STA		FP_MULTIPLY_LO

.11c7	 a5 3d		lda $3d					LDA 	SIN_HI

.11c9	 a6 56		ldx $56					LDX		Z_POS_HI

.11cb	 a4 57		ldy $57					LDY		Z_POS_LO

.11cd	 20 73 09	jsr $0973				JSR		FP_MULTIPLY			; Z * SIN

.11d0	 84 08		sty $08					STy 	Z_ROT_LO

.11d2	 49 01		eor #$01				EOR 	#$01 				; -Z * SIN

.11d4	 85 09		sta $09					STA 	Z_ROT_HI

.11d6	 a6 0a		ldx $0a					LDX 	X_ROT_LO

.11d8	 a4 0b		ldy $0b					LDY 	X_ROT_HI

.11da	 20 1e 0a	jsr $0a1e				JSR 	FP_ADD 				; X = (X * COS) + (-Z * SIN)

.11dd	 86 58		stx $58					STX 	X_ROTATION_LO		; X rotation result?

.11df	 98		tya					TYA 

.11e0	 85 59		sta $59					STA 	X_ROTATION_HI		; X rotation result?

.11e2	 a4 6e		ldy $6e		        LDY POINT_CLASSIFY_ST	; z classification? (see #1 above) 0 is infront - !0 is behind

.11e4	 d0 2a		bne $1210	        BNE bAA54				; behind?

.11e6	 85 09		sta $09		        STA ab09

.11e8	 a5 5c		lda $5c				LDA		Z_ROTATION_LO

.11ea	 85 22		sta $22				STA		FP_DIVIDE_LO

.11ec	 a6 09		ldx $09				LDX		ab09

.11ee	 a4 08		ldy $08				LDY		ab08

.11f0	 a5 5d		lda $5d				LDA		Z_ROTATION_HI

.11f2	 20 57 09	jsr $0957			JSR		FP_DIVIDE		; Z_ROTATION LO-HI / 08-09 -> 5E-5F

.11f5	 86 5e		stx $5e				STX		H_PERS_FP_LO_ST			; hor pers pos

.11f7	 85 5f		sta $5f				STA		H_PERS_FP_HI_ST			; hor pers pos

.11f9	 18		clc		        CLC 

.11fa	 69 18		adc #$18	        ADC #FOCUS ; ab21		; add focus to mantisa?

.11fc	 70 0e		bvs $120c	        BVS bAA50

.11fe	 a8		tay		        TAY 					; copy to mantisa?

.11ff	 20 c7 0a	jsr $0ac7	        JSR FPTO8BIT			; convert X/Y back to 

.1202	 b0 08		bcs $120c	        BCS bAA50

.1204	 69 50		adc #$50	        ADC #SCR_HOR_MID		; add hor middle

.1206	 85 6a		sta $6a		        STA LINE_START_HOR

.1208	 c9 a0		cmp #$a0	        CMP #CLIP_TEST_RIGHT 	; clip test

.120a	 90 04		bcc $1210	        BCC bAA54 				; off right

.120c	 a9 01		lda #$01	bAA50   	LDA 	#PNT_OFF_HOR		; PNT_OFF_RIGHT 		; right clip

.120e	 85 6e		sta $6e					STA 	POINT_CLASSIFY_ST

.1210	 a6 54		ldx $54		bAA54   LDX Y_POS_HI

.1212	 a5 55		lda $55		        LDA Y_POS_LO

.1214	 49 01		eor #$01	        EOR #$01				; reverses the sign?

.1216	 a8		tay		        TAY 

.1217	 86 08		stx $08		        STX ab08

.1219	 84 09		sty $09		        STY ab09

.121b	 86 5a		stx $5a		jA8E9   STX 	Y_ROTATION_LO

.121d	 98		tya		        TYA 

.121e	 18		clc		        CLC 

.121f	 69 04		adc #$04	        ADC #$04

.1221	 70 01		bvs $1224	        BVS bA8F2

.1223	 a8		tay					TAY 

.1224	 84 5b		sty $5b		bA8F2   STY 	Y_ROTATION_HI

.1226	 84 09		sty $09		        STY ab09

.1228	 a5 6e		lda $6e		        LDA 	POINT_CLASSIFY_ST

.122a	 30 2a		bmi $1256	        BMI 	bA933

.122c	 a5 5c		lda $5c					LDA		Z_ROTATION_LO

.122e	 85 22		sta $22					STA		FP_DIVIDE_LO

.1230	 a6 09		ldx $09					LDX		ab09

.1232	 a4 08		ldy $08					LDY		ab08

.1234	 a5 5d		lda $5d					LDA		Z_ROTATION_HI

.1236	 20 57 09	jsr $0957				JSR		FP_DIVIDE		; Z_ROTATION LO-HI / 08-09 -> 60-61

.1239	 86 60		stx $60					STX		V_PERS_FP_LO_ST			; ver pers pos

.123b	 85 61		sta $61					STA		V_PERS_FP_HI_ST			; ver pers pos

.123d	 18		clc					CLC 

.123e	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.1240	 70 0e		bvs $1250				BVS 	bA92D

.1242	 a8		tay						TAY 

.1243	 20 c7 0a	jsr $0ac7					JSR 	FPTO8BIT

.1246	 b0 08		bcs $1250				BCS 	bA92D

.1248	 69 44		adc #$44					ADC 	#SCR_VER_MID

.124a	 85 6b		sta $6b						STA 	LINE_START_VER

.124c	 c9 88		cmp #$88					CMP 	#CLIP_TEST_BOTTOM ; clip test

.124e	 90 06		bcc $1256					BCC 	bA933

.1250	 a5 6e		lda $6e		bA92D   			LDA 	POINT_CLASSIFY_ST

.1252	 09 02		ora #$02						ORA 	#PNT_OFF_VER

.1254	 85 6e		sta $6e							STA 	POINT_CLASSIFY_ST

.1256	 a4 19		ldy $19		bA933   LDY 	POINT_LINE_COUNT						; point position?

.1258	 a5 6e		lda $6e		        LDA 	POINT_CLASSIFY_ST

.125a	 99 40 07	sta $0740,y	        STA 	POINT_CLASSIFICATION,Y

.125d	 30 1e		bmi $127d	        BMI 	bA95A					; behind

.125f	 a5 5e		lda $5e					LDA 	H_PERS_FP_LO_ST

.1261	 99 00 06	sta $0600,y				STA 	H_PERS_FP_LO,Y	; pers point?

.1264	 a5 5f		lda $5f					LDA 	H_PERS_FP_HI_ST

.1266	 99 c0 03	sta $03c0,y				STA 	H_PERS_FP_HI,Y	; pers point?

.1269	 a5 60		lda $60					LDA 	V_PERS_FP_LO_ST

.126b	 99 00 07	sta $0700,y				STA 	V_PERS_FP_LO,Y	; pers point?

.126e	 a5 61		lda $61					LDA 	V_PERS_FP_HI_ST

.1270	 99 40 06	sta $0640,y				STA 	V_PERS_FP_HI,Y	; pers point?

.1273	 a5 6a		lda $6a					LDA 	LINE_START_HOR 			; get perspective ver

.1275	 99 80 06	sta $0680,y				STA 	PERS_HOR_TAB,Y 				; put perspective ver

.1278	 a5 6b		lda $6b					LDA 	LINE_START_VER 			; get perspective hor

.127a	 99 c0 06	sta $06c0,y				STA 	PERS_VER_TAB,Y 				; put perspective hor

.127d	 a5 58		lda $58		bA95A   LDA 	X_ROTATION_LO

.127f	 99 00 01	sta $0100,y	        STA 	X_ROT_TAB_LO,Y 	; X rotation result x pos lo

.1282	 a5 59		lda $59		        LDA 	X_ROTATION_HI

.1284	 99 40 01	sta $0140,y	        STA 	X_ROT_TAB_HI,Y 	; X rotation result x pos hi

.1287	 a5 5a		lda $5a		        LDA 	Y_ROTATION_LO

.1289	 99 80 01	sta $0180,y	        STA 	Y_ROT_TAB_LO,Y	; rotation result y pos lo

.128c	 a5 5b		lda $5b		        LDA 	Y_ROTATION_HI

.128e	 99 c0 02	sta $02c0,y	        STA 	Y_ROT_TAB_HI,Y	; rotation result y pos hi

.1291	 a5 5c		lda $5c		        LDA 	Z_ROTATION_LO

.1293	 99 40 03	sta $0340,y	        STA 	Z_ROT_TAB_LO,Y	; rotation result z pos lo

.1296	 a5 5d		lda $5d		        LDA 	Z_ROTATION_HI

.1298	 99 80 03	sta $0380,y	        STA 	Z_ROT_TAB_HI,Y	; rotation result z pos hi

.129b	 60		rts		        RTS 

.129c	 e8		inx		LINE_DRAW_0_LOOP  	INX 

.129d	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.129f	 65 66		adc $66							ADC 	LINE_INC

.12a1	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.12a3	 90 05		bcc $12aa						BCC 	LINE_DRAW_0

.12a5	 c8		iny								INY 

.12a6	 c0 88		cpy #$88							CPY 	#CLIP_TEST_BOTTOM

.12a8	 f0 20		beq $12ca							BEQ 	LINE_DRAW_0_EXIT

.12aa	 b9 30 23	lda $2330,y	LINE_DRAW_0			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.12ad	 85 02		sta $02							STA 	SCREEN_POS_LO

.12af	 8a		txa							TXA 

.12b0	 0a		asl							ASL 

.12b1	 b9 a0 22	lda $22a0,y						LDA 	VER_POS_HI,Y

.12b4	 69 40		adc #$40	LINE_DRAW_0_BANK	ADC 	#SCREEN_0

.12b6	 85 03		sta $03							STA 	SCREEN_POS_HI

.12b8	 84 06		sty $06							STY 	ab06

.12ba	 bc c0 23	ldy $23c0,x						LDY 	HOR_SCR_POS,X

.12bd	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.12bf	 1d 00 22	ora $2200,x	LINE_DRAW_0_TYPE	ORA 	ORA_PIXEL_POS,X

.12c2	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.12c4	 a4 06		ldy $06							LDY 	ab06

.12c6	 e4 6c		cpx $6c							CPX 	PERS_HOR_ab6C

.12c8	 d0 d2		bne $129c						BNE 	LINE_DRAW_0_LOOP

.12ca	 60		rts		LINE_DRAW_0_EXIT   RTS 

.12cb	 c8		iny		LINE_DRAW_1_LOOP   INY  ; LINE-DRAW

.12cc	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.12ce	 65 66		adc $66							ADC 	LINE_INC

.12d0	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.12d2	 90 05		bcc $12d9						BCC 	LINE_DRAW_1

.12d4	 e8		inx								INX 

.12d5	 e0 a0		cpx #$a0							CPX 	#CLIP_TEST_RIGHT ; clip test

.12d7	 f0 20		beq $12f9							BEQ 	LINE_DRAW_1_EXIT

.12d9	 b9 30 23	lda $2330,y	LINE_DRAW_1			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.12dc	 85 02		sta $02							STA 	SCREEN_POS_LO

.12de	 8a		txa							TXA 

.12df	 0a		asl							ASL 

.12e0	 b9 a0 22	lda $22a0,y						LDA 	VER_POS_HI,Y

.12e3	 69 40		adc #$40	LINE_DRAW_1_BANK	ADC 	#SCREEN_0

.12e5	 85 03		sta $03							STA 	SCREEN_POS_HI

.12e7	 84 06		sty $06							STY 	ab06

.12e9	 bc c0 23	ldy $23c0,x						LDY 	HOR_SCR_POS,X

.12ec	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.12ee	 1d 00 22	ora $2200,x	LINE_DRAW_1_TYPE	ORA 	ORA_PIXEL_POS,X

.12f1	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.12f3	 a4 06		ldy $06							LDY 	ab06

.12f5	 c4 6d		cpy $6d							CPY 	PERS_VER_ab6D

.12f7	 d0 d2		bne $12cb						BNE 	LINE_DRAW_1_LOOP ; GOTO LINE-DRAW

.12f9	 60		rts		LINE_DRAW_1_EXIT   	RTS 

.12fa	 c8		iny		LINE_DRAW_2_LOOP   	INY  ; LINE-DRAW

.12fb	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.12fd	 65 66		adc $66							ADC 	LINE_INC

.12ff	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.1301	 90 05		bcc $1308						BCC 	LINE_DRAW_2

.1303	 ca		dex								DEX 

.1304	 e0 ff		cpx #$ff							CPX 	#$FF

.1306	 f0 20		beq $1328							BEQ 	LINE_DRAW_2_EXIT

.1308	 b9 30 23	lda $2330,y	LINE_DRAW_2			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.130b	 85 02		sta $02							STA 	SCREEN_POS_LO

.130d	 8a		txa							TXA 

.130e	 0a		asl							ASL 

.130f	 b9 a0 22	lda $22a0,y						LDA 	VER_POS_HI,Y

.1312	 69 40		adc #$40	LINE_DRAW_2_BANK	ADC 	#SCREEN_0

.1314	 85 03		sta $03							STA 	SCREEN_POS_HI

.1316	 84 06		sty $06							STY 	ab06

.1318	 bc c0 23	ldy $23c0,x						LDY 	HOR_SCR_POS,X

.131b	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.131d	 1d 00 22	ora $2200,x	LINE_DRAW_2_TYPE	ORA 	ORA_PIXEL_POS,X

.1320	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.1322	 a4 06		ldy $06							LDY 	ab06

.1324	 c4 6d		cpy $6d							CPY 	PERS_VER_ab6D

.1326	 d0 d2		bne $12fa						BNE 	LINE_DRAW_2_LOOP ; GOTO LINE-DRAW

.1328	 60		rts		LINE_DRAW_2_EXIT   	RTS 

.1329	 ca		dex		LINE_DRAW_3_LOOP  	DEX ; LINE-DRAW

.132a	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.132c	 e5 66		sbc $66							SBC 	LINE_INC

.132e	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.1330	 b0 05		bcs $1337						BCS 	LINE_DRAW_3

.1332	 c8		iny								INY 

.1333	 c0 88		cpy #$88							CPY 	#CLIP_TEST_BOTTOM

.1335	 f0 20		beq $1357							BEQ 	LINE_DRAW_3_EXIT

.1337	 b9 30 23	lda $2330,y	LINE_DRAW_3			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.133a	 85 02		sta $02							STA 	SCREEN_POS_LO

.133c	 8a		txa							TXA 

.133d	 0a		asl							ASL 

.133e	 b9 a0 22	lda $22a0,y						LDA 	VER_POS_HI,Y

.1341	 69 40		adc #$40	LINE_DRAW_3_BANK	ADC 	#SCREEN_0

.1343	 85 03		sta $03							STA 	SCREEN_POS_HI

.1345	 84 06		sty $06							STY 	ab06

.1347	 bc c0 23	ldy $23c0,x						LDY 	HOR_SCR_POS,X

.134a	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.134c	 1d 00 22	ora $2200,x	LINE_DRAW_3_TYPE	ORA 	ORA_PIXEL_POS,X

.134f	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.1351	 a4 06		ldy $06							LDY 	ab06

.1353	 e4 6c		cpx $6c							CPX 	PERS_HOR_ab6C

.1355	 d0 d2		bne $1329						BNE 	LINE_DRAW_3_LOOP ; GOTO LINE-DRAW

.1357	 60		rts		LINE_DRAW_3_EXIT   	RTS 

.1358	 ca		dex		LINE_DRAW_4_LOOP   	DEX  ; LINE-DRAW

.1359	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.135b	 e5 66		sbc $66							SBC 	LINE_INC

.135d	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.135f	 b0 05		bcs $1366						BCS 	LINE_DRAW_4

.1361	 88		dey								DEY 

.1362	 c0 ff		cpy #$ff							CPY 	#$FF

.1364	 f0 20		beq $1386							BEQ 	LINE_DRAW_4_EXIT

.1366	 b9 30 23	lda $2330,y	LINE_DRAW_4			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.1369	 85 02		sta $02							STA 	SCREEN_POS_LO

.136b	 8a		txa							TXA 

.136c	 0a		asl							ASL 

.136d	 b9 a0 22	lda $22a0,y						LDA 	VER_POS_HI,Y

.1370	 69 40		adc #$40	LINE_DRAW_4_BANK	ADC 	#SCREEN_0

.1372	 85 03		sta $03							STA 	SCREEN_POS_HI

.1374	 84 06		sty $06							STY 	ab06

.1376	 bc c0 23	ldy $23c0,x						LDY 	HOR_SCR_POS,X

.1379	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.137b	 1d 00 22	ora $2200,x	LINE_DRAW_4_TYPE  	ORA 	ORA_PIXEL_POS,X

.137e	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.1380	 a4 06		ldy $06							LDY 	ab06

.1382	 e4 6c		cpx $6c							CPX 	PERS_HOR_ab6C

.1384	 d0 d2		bne $1358						BNE 	LINE_DRAW_4_LOOP ; GOTO LINE-DRAW

.1386	 60		rts		LINE_DRAW_4_EXIT   	RTS 

.1387	 88		dey		LINE_DRAW_5_LOOP   	DEY  ; LINE-DRAW

.1388	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.138a	 65 66		adc $66							ADC 	LINE_INC

.138c	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.138e	 90 05		bcc $1395						BCC 	LINE_DRAW_5

.1390	 ca		dex								DEX 

.1391	 e0 ff		cpx #$ff							CPX 	#$FF

.1393	 f0 20		beq $13b5							BEQ 	LINE_DRAW_5_EXIT

.1395	 b9 30 23	lda $2330,y	LINE_DRAW_5			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.1398	 85 02		sta $02							STA 	SCREEN_POS_LO

.139a	 8a		txa							TXA 

.139b	 0a		asl							ASL 

.139c	 b9 a0 22	lda $22a0,y						LDA 	VER_POS_HI,Y

.139f	 69 40		adc #$40	LINE_DRAW_5_BANK	ADC 	#SCREEN_0

.13a1	 85 03		sta $03							STA 	SCREEN_POS_HI

.13a3	 84 06		sty $06							STY 	ab06

.13a5	 bc c0 23	ldy $23c0,x						LDY 	HOR_SCR_POS,X

.13a8	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.13aa	 1d 00 22	ora $2200,x	LINE_DRAW_5_TYPE  	ORA 	ORA_PIXEL_POS,X

.13ad	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.13af	 a4 06		ldy $06							LDY 	ab06

.13b1	 c4 6d		cpy $6d							CPY 	PERS_VER_ab6D

.13b3	 d0 d2		bne $1387						BNE 	LINE_DRAW_5_LOOP ; GOTO LINE-DRAW

.13b5	 60		rts		LINE_DRAW_5_EXIT  	RTS

.13b6	 88		dey		LINE_DRAW_6_LOOP   	DEY  ; LINE-DRAW

.13b7	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.13b9	 e5 66		sbc $66							SBC 	LINE_INC

.13bb	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.13bd	 b0 05		bcs $13c4						BCS 	LINE_DRAW_6

.13bf	 e8		inx								INX             ; NEXT VER

.13c0	 e0 a0		cpx #$a0							CPX 	#$A0        ; OFF BOTTOM

.13c2	 f0 20		beq $13e4							BEQ 	LINE_DRAW_6_EXIT       ; EXIT

.13c4	 b9 30 23	lda $2330,y	LINE_DRAW_6			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.13c7	 85 02		sta $02							STA 	SCREEN_POS_LO

.13c9	 8a		txa							TXA 

.13ca	 0a		asl							ASL 

.13cb	 b9 a0 22	lda $22a0,y						LDA 	VER_POS_HI,Y

.13ce	 69 40		adc #$40	LINE_DRAW_6_BANK	ADC 	#SCREEN_0

.13d0	 85 03		sta $03							STA 	SCREEN_POS_HI

.13d2	 84 06		sty $06							STY 	ab06

.13d4	 bc c0 23	ldy $23c0,x						LDY 	HOR_SCR_POS,X

.13d7	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.13d9	 1d 00 22	ora $2200,x	LINE_DRAW_6_TYPE	ORA 	ORA_PIXEL_POS,X

.13dc	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.13de	 a4 06		ldy $06							LDY 	ab06

.13e0	 c4 6d		cpy $6d							CPY 	PERS_VER_ab6D

.13e2	 d0 d2		bne $13b6						BNE 	LINE_DRAW_6_LOOP ; GOTO LINE-DRAW 

.13e4	 60		rts		LINE_DRAW_6_EXIT	RTS 

.13e5	 e8		inx		LINE_DRAW_7_LOOP   	INX	; LINE-DRAW

.13e6	 a5 08		lda $08							LDA		LINE_FRACTION_ab08

.13e8	 65 66		adc $66							ADC		LINE_INC

.13ea	 85 08		sta $08							STA		LINE_FRACTION_ab08

.13ec	 90 05		bcc $13f3						BCC		LINE_DRAW_7

.13ee	 88		dey								DEY 

.13ef	 c0 ff		cpy #$ff							CPY		#$FF

.13f1	 f0 20		beq $1413							BEQ		LINE_DRAW_7_EXIT

.13f3	 b9 30 23	lda $2330,y	LINE_DRAW_7			LDA		VER_POS_LO,Y ; LINE-DRAW-START

.13f6	 85 02		sta $02							STA		SCREEN_POS_LO

.13f8	 8a		txa							TXA 

.13f9	 0a		asl							ASL 

.13fa	 b9 a0 22	lda $22a0,y						LDA 	VER_POS_HI,Y

.13fd	 69 40		adc #$40	LINE_DRAW_7_BANK	ADC 	#SCREEN_0

.13ff	 85 03		sta $03							STA 	SCREEN_POS_HI

.1401	 84 06		sty $06							STY 	ab06

.1403	 bc c0 23	ldy $23c0,x						LDY 	HOR_SCR_POS,X

.1406	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.1408	 1d 00 22	ora $2200,x	LINE_DRAW_7_TYPE	ORA 	ORA_PIXEL_POS,X

.140b	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.140d	 a4 06		ldy $06							LDY 	ab06

.140f	 e4 6c		cpx $6c							CPX 	PERS_HOR_ab6C

.1411	 d0 d2		bne $13e5						BNE 	LINE_DRAW_7_LOOP ; GOTO LINE DRAW

.1413	 60		rts		LINE_DRAW_7_EXIT   	RTS 

.1414	 a9 21		lda #$21	COLOUR_SETUP_WHITE	LDA 	#>AND_PIXEL_POS

.1416	 a2 3d		ldx #$3d						LDX 	#$3D				; AND

.1418	 d0 04		bne $141e						BNE 	COLOUR_SETUP 		; JUMP

.141a	 a9 22		lda #$22	COLOUR_SETUP_BLACK	LDA 	#>ORA_PIXEL_POS

.141c	 a2 1d		ldx #$1d						LDX 	#$1D				; ORA

.141e	 8d c1 12	sta $12c1	COLOUR_SETUP		STA 	LINE_DRAW_0_TYPE +2

.1421	 8d f0 12	sta $12f0						STA 	LINE_DRAW_1_TYPE +2

.1424	 8d 1f 13	sta $131f						STA 	LINE_DRAW_2_TYPE +2

.1427	 8d 4e 13	sta $134e						STA 	LINE_DRAW_3_TYPE +2

.142a	 8d 7d 13	sta $137d						STA 	LINE_DRAW_4_TYPE +2

.142d	 8d ac 13	sta $13ac						STA 	LINE_DRAW_5_TYPE +2

.1430	 8d db 13	sta $13db						STA 	LINE_DRAW_6_TYPE +2

.1433	 8d 0a 14	sta $140a						STA 	LINE_DRAW_7_TYPE +2

.1436	 8d 31 0c	sta $0c31						STA 	LINE_DRAW_8_TYPE +2

.1439	 8e bf 12	stx $12bf						STX 	LINE_DRAW_0_TYPE

.143c	 8e ee 12	stx $12ee						STX 	LINE_DRAW_1_TYPE

.143f	 8e 1d 13	stx $131d						STX 	LINE_DRAW_2_TYPE

.1442	 8e 4c 13	stx $134c						STX 	LINE_DRAW_3_TYPE

.1445	 8e 7b 13	stx $137b						STX 	LINE_DRAW_4_TYPE

.1448	 8e aa 13	stx $13aa						STX 	LINE_DRAW_5_TYPE

.144b	 8e d9 13	stx $13d9						STX 	LINE_DRAW_6_TYPE

.144e	 8e 08 14	stx $1408						STX 	LINE_DRAW_7_TYPE

.1451	 8e 2f 0c	stx $0c2f						STX 	LINE_DRAW_8_TYPE

.1454	 60		rts							RTS

.1455	 a9 e0		lda #$e0	DRAW_SCREEN	LDA		#$E0

.1457	 cd 12 d0	cmp $d012	WAIT_RASTER	CMP		$D012

.145a	 d0 fb		bne $1457				BNE 	WAIT_RASTER

.145c	 e6 24		inc $24					INC		SCREEN_FLIP		; INCREMENT SCREEN FLIP

.145e	 a5 24		lda $24					LDA		SCREEN_FLIP		; GET SCREEN FLIP

.1460	 4a		lsr					LSR 					; SHIFT BIT0 INTO CARRY

.1461	 b0 06		bcs $1469				BCS		SCRN_2			; CARRY SET ?

.1463	 a0 40		ldy #$40				LDY		#SCREEN_0		; SCREEN 1 OFFSET

.1465	 a2 78		ldx #$78				LDX		#$78

.1467	 d0 04		bne $146d				BNE		SCNCLR			; JUMP

.1469	 a0 60		ldy #$60	SCRN_2  	LDY		#SCREEN_1		; SCREEN 2 OFFSET

.146b	 a2 70		ldx #$70				LDX		#$70

.146d	 8c 28 16	sty $1628	SCNCLR		STY		HEX8_1_BANK +1

.1470	 8c 37 16	sty $1637				STY		HEX8_2_BANK +1

.1473	 8c 46 16	sty $1646				STY		HEX8_3_BANK +1

.1476	 8c 55 16	sty $1655				STY		HEX8_4_BANK +1

.1479	 8c 64 16	sty $1664				STY		HEX8_5_BANK +1

.147c	 8c 27 0c	sty $0c27				STY		PLOT_POINT_BANK +1

.147f	 8c b5 12	sty $12b5				STY		LINE_DRAW_0_BANK +1

.1482	 8c e4 12	sty $12e4				STY		LINE_DRAW_1_BANK +1

.1485	 8c 13 13	sty $1313				STY		LINE_DRAW_2_BANK +1

.1488	 8c 42 13	sty $1342				STY		LINE_DRAW_3_BANK +1

.148b	 8c 71 13	sty $1371				STY		LINE_DRAW_4_BANK +1

.148e	 8c a0 13	sty $13a0				STY		LINE_DRAW_5_BANK +1

.1491	 8c cf 13	sty $13cf				STY		LINE_DRAW_6_BANK +1

.1494	 8c fe 13	sty $13fe				STY		LINE_DRAW_7_BANK +1			

.1497	 8e 14 09	stx $0914				STX		VIC_SCREEN_BANK +1

.149a	 a9 a5		lda #$a5				LDA 	#$A5

.149c	 a2 88		ldx #$88				LDX 	#136

.149e	 c0 60		cpy #$60				CPY 	#SCREEN_1

.14a0	 f0 7c		beq $151e				BEQ 	CLSN1LP

.14a2	 9d ff 3f	sta $3fff,x	CLSN0LP		STA 	SCREEN0-1+(136*00),X ; 1

.14a5	 9d 87 40	sta $4087,x				STA 	SCREEN0-1+(136*01),X ;f40F7,X ; 2

.14a8	 9d 0f 41	sta $410f,x				STA 	SCREEN0-1+(136*02),X ;f41EF,X ;3

.14ab	 9d 97 41	sta $4197,x				STA 	SCREEN0-1+(136*03),X ;f42E7,X ;4

.14ae	 9d 1f 42	sta $421f,x				STA 	SCREEN0-1+(136*04),X ;f43DF,X ;5

.14b1	 9d a7 42	sta $42a7,x				STA 	SCREEN0-1+(136*05),X ;f44D7,X ;6

.14b4	 9d 2f 43	sta $432f,x				STA 	SCREEN0-1+(136*06),X ;f45CF,X ;7

.14b7	 9d b7 43	sta $43b7,x				STA 	SCREEN0-1+(136*07),X ;f46C7,X ;8

.14ba	 9d 3f 44	sta $443f,x				STA 	SCREEN0-1+(136*08),X ;f47BF,X ;9

.14bd	 9d c7 44	sta $44c7,x				STA 	SCREEN0-1+(136*09),X ;f48B7,X ;10

.14c0	 9d 4f 45	sta $454f,x				STA 	SCREEN0-1+(136*10),X ;f49AF,X ;11

.14c3	 9d d7 45	sta $45d7,x				STA 	SCREEN0-1+(136*11),X ;f4AA7,X ;12

.14c6	 9d 5f 46	sta $465f,x				STA 	SCREEN0-1+(136*12),X ;f4B9F,X ;13

.14c9	 9d e7 46	sta $46e7,x				STA 	SCREEN0-1+(136*13),X ;f4C97,X ;14

.14cc	 9d 6f 47	sta $476f,x				STA 	SCREEN0-1+(136*14),X ;f4D8F,X ;15

.14cf	 9d f7 47	sta $47f7,x				STA 	SCREEN0-1+(136*15),X ;f4E87,X ;16

.14d2	 9d 7f 48	sta $487f,x				STA 	SCREEN0-1+(136*16),X ;f4F7F,X ;17

.14d5	 9d 07 49	sta $4907,x				STA 	SCREEN0-1+(136*17),X ;f5077,X ;18

.14d8	 9d 8f 49	sta $498f,x				STA 	SCREEN0-1+(136*18),X ;f516F,X ;19

.14db	 9d 17 4a	sta $4a17,x				STA 	SCREEN0-1+(136*19),X ;f5267,X ;20

.14de	 9d 9f 4a	sta $4a9f,x				STA 	SCREEN0-1+(136*20),X ;f535F,X ;21

.14e1	 9d 27 4b	sta $4b27,x				STA 	SCREEN0-1+(136*21),X ;f5447,X ;22

.14e4	 9d af 4b	sta $4baf,x				sta 	SCREEN0-1+(136*22),X ;f5447,x ;23

.14e7	 9d 37 4c	sta $4c37,x				sta 	SCREEN0-1+(136*23),X ;f5447,x ;24

.14ea	 9d bf 4c	sta $4cbf,x				sta 	SCREEN0-1+(136*24),X ;f5447,x ;25

.14ed	 9d 47 4d	sta $4d47,x				sta 	SCREEN0-1+(136*25),X ;f5447,x ;26

.14f0	 9d cf 4d	sta $4dcf,x				sta 	SCREEN0-1+(136*26),X ;f5447,x ;27

.14f3	 9d 57 4e	sta $4e57,x				sta 	SCREEN0-1+(136*27),X ;f5447,x ;28

.14f6	 9d df 4e	sta $4edf,x				sta 	SCREEN0-1+(136*28),X ;f5447,x ;29

.14f9	 9d 67 4f	sta $4f67,x				sta 	SCREEN0-1+(136*29),X ;f5447,x ;30

.14fc	 9d ef 4f	sta $4fef,x				sta 	SCREEN0-1+(136*30),X ;f5447,x ;31

.14ff	 9d 77 50	sta $5077,x				sta 	SCREEN0-1+(136*31),X ;f5447,x ;32

.1502	 9d ff 50	sta $50ff,x				sta 	SCREEN0-1+(136*32),X ;f5447,x ;33

.1505	 9d 87 51	sta $5187,x				sta 	SCREEN0-1+(136*33),X ;f5447,x ;34

.1508	 9d 0f 52	sta $520f,x				sta 	SCREEN0-1+(136*34),X ;f5447,x ;35

.150b	 9d 97 52	sta $5297,x				sta 	SCREEN0-1+(136*35),X ;f5447,x ;36

.150e	 9d 1f 53	sta $531f,x				sta 	SCREEN0-1+(136*36),X ;f5447,x ;37

.1511	 9d a7 53	sta $53a7,x				sta 	SCREEN0-1+(136*37),X ;f5447,x ;38

.1514	 9d 2f 54	sta $542f,x				sta 	SCREEN0-1+(136*38),X ;f5447,x ;39

.1517	 9d b7 54	sta $54b7,x				sta 	SCREEN0-1+(136*39),X ;f5447,x ;40

.151a	 ca		dex					DEX 

.151b	 d0 85		bne $14a2				BNE 	CLSN0LP

.151d	 60		rts					RTS 

.151e	 9d ff 5f	sta $5fff,x	CLSN1LP		STA 	SCREEN1-1+(136*00),X ; 1

.1521	 9d 87 60	sta $6087,x				STA 	SCREEN1-1+(136*01),X ;f40F7,X ; 2

.1524	 9d 0f 61	sta $610f,x				STA 	SCREEN1-1+(136*02),X ;f41EF,X ;3

.1527	 9d 97 61	sta $6197,x				STA 	SCREEN1-1+(136*03),X ;f42E7,X ;4

.152a	 9d 1f 62	sta $621f,x				STA 	SCREEN1-1+(136*04),X ;f43DF,X ;5

.152d	 9d a7 62	sta $62a7,x				STA 	SCREEN1-1+(136*05),X ;f44D7,X ;6

.1530	 9d 2f 63	sta $632f,x				STA 	SCREEN1-1+(136*06),X ;f45CF,X ;7

.1533	 9d b7 63	sta $63b7,x				STA 	SCREEN1-1+(136*07),X ;f46C7,X ;8

.1536	 9d 3f 64	sta $643f,x				STA 	SCREEN1-1+(136*08),X ;f47BF,X ;9

.1539	 9d c7 64	sta $64c7,x				STA 	SCREEN1-1+(136*09),X ;f48B7,X ;10

.153c	 9d 4f 65	sta $654f,x				STA 	SCREEN1-1+(136*10),X ;f49AF,X ;11

.153f	 9d d7 65	sta $65d7,x				STA 	SCREEN1-1+(136*11),X ;f4AA7,X ;12

.1542	 9d 5f 66	sta $665f,x				STA 	SCREEN1-1+(136*12),X ;f4B9F,X ;13

.1545	 9d e7 66	sta $66e7,x				STA 	SCREEN1-1+(136*13),X ;f4C97,X ;14

.1548	 9d 6f 67	sta $676f,x				STA 	SCREEN1-1+(136*14),X ;f4D8F,X ;15

.154b	 9d f7 67	sta $67f7,x				STA 	SCREEN1-1+(136*15),X ;f4E87,X ;16

.154e	 9d 7f 68	sta $687f,x				STA 	SCREEN1-1+(136*16),X ;f4F7F,X ;17

.1551	 9d 07 69	sta $6907,x				STA 	SCREEN1-1+(136*17),X ;f5077,X ;18

.1554	 9d 8f 69	sta $698f,x				STA 	SCREEN1-1+(136*18),X ;f516F,X ;19

.1557	 9d 17 6a	sta $6a17,x				STA 	SCREEN1-1+(136*19),X ;f5267,X ;20

.155a	 9d 9f 6a	sta $6a9f,x				STA 	SCREEN1-1+(136*20),X ;f535F,X ;21

.155d	 9d 27 6b	sta $6b27,x				STA 	SCREEN1-1+(136*21),X ;f5447,X ;22

.1560	 9d af 6b	sta $6baf,x				sta 	SCREEN1-1+(136*22),X ;f5447,x ;23

.1563	 9d 37 6c	sta $6c37,x				sta 	SCREEN1-1+(136*23),X ;f5447,x ;24

.1566	 9d bf 6c	sta $6cbf,x				sta 	SCREEN1-1+(136*24),X ;f5447,x ;25

.1569	 9d 47 6d	sta $6d47,x				sta 	SCREEN1-1+(136*25),X ;f5447,x ;26

.156c	 9d cf 6d	sta $6dcf,x				sta 	SCREEN1-1+(136*26),X ;f5447,x ;27

.156f	 9d 57 6e	sta $6e57,x				sta 	SCREEN1-1+(136*27),X ;f5447,x ;28

.1572	 9d df 6e	sta $6edf,x				sta 	SCREEN1-1+(136*28),X ;f5447,x ;29

.1575	 9d 67 6f	sta $6f67,x				sta 	SCREEN1-1+(136*29),X ;f5447,x ;30

.1578	 9d ef 6f	sta $6fef,x				sta 	SCREEN1-1+(136*30),X ;f5447,x ;31

.157b	 9d 77 70	sta $7077,x				sta 	SCREEN1-1+(136*31),X ;f5447,x ;32

.157e	 9d ff 70	sta $70ff,x				sta 	SCREEN1-1+(136*32),X ;f5447,x ;33

.1581	 9d 87 71	sta $7187,x				sta 	SCREEN1-1+(136*33),X ;f5447,x ;34

.1584	 9d 0f 72	sta $720f,x				sta 	SCREEN1-1+(136*34),X ;f5447,x ;35

.1587	 9d 97 72	sta $7297,x				sta 	SCREEN1-1+(136*35),X ;f5447,x ;36

.158a	 9d 1f 73	sta $731f,x				sta 	SCREEN1-1+(136*36),X ;f5447,x ;37

.158d	 9d a7 73	sta $73a7,x				sta 	SCREEN1-1+(136*37),X ;f5447,x ;38

.1590	 9d 2f 74	sta $742f,x				sta 	SCREEN1-1+(136*38),X ;f5447,x ;39

.1593	 9d b7 74	sta $74b7,x				sta 	SCREEN1-1+(136*39),X ;f5447,x ;40

.1596	 ca		dex					DEX 

.1597	 d0 85		bne $151e				BNE 	CLSN1LP

.1599	 60		rts					RTS 

.159a					read_joystick_keyboard
.159a	 ad 00 dc	lda $dc00	        LDA 	$DC00    ;CIA1: Data Port Register A into A and X

.159d	 4a		lsr		MVMENT	LSR

.159e	 b0 07		bcs $15a7			BCS 	MVE_DWN

.15a0	 48		pha					PHA

.15a1	 a9 01		lda #$01				LDA 	#$01 ; FORWARD

.15a3	 20 74 10	jsr $1074				JSR 	FORWARD_BACK

.15a6	 68		pla					PLA

.15a7	 4a		lsr		MVE_DWN LSR

.15a8	 b0 07		bcs $15b1			BCS 	MVE_LFT

.15aa	 48		pha					PHA

.15ab	 a9 00		lda #$00				LDA 	#$00	; BACKWARD

.15ad	 20 74 10	jsr $1074				JSR 	FORWARD_BACK

.15b0	 68		pla					PLA

.15b1	 4a		lsr		MVE_LFT LSR

.15b2	 b0 11		bcs $15c5			BCS 	MVE_RGT

.15b4	 a8		tay					TAY

.15b5	 a5 2c		lda $2c					LDA 	ROT_LO	; LEFT

.15b7	 18		clc					CLC 

.15b8	 65 ac		adc $ac					ADC 	ROT_SPD

.15ba	 85 2c		sta $2c					STA 	ROT_LO

.15bc	 a5 2d		lda $2d					LDA 	ROT_HI

.15be	 69 00		adc #$00				ADC 	#$00

.15c0	 29 03		and #$03				AND 	#$03

.15c2	 85 2d		sta $2d					STA 	ROT_HI

.15c4	 98		tya					TYA

.15c5	 4a		lsr		MVE_RGT LSR

.15c6	 b0 11		bcs $15d9			BCS 	MVE_FRE

.15c8	 a8		tay					TAY

.15c9	 a5 2c		lda $2c					LDA 	ROT_LO	; RIGHT

.15cb	 38		sec					SEC 

.15cc	 e5 ac		sbc $ac					SBC 	ROT_SPD

.15ce	 85 2c		sta $2c					STA 	ROT_LO

.15d0	 a5 2d		lda $2d					LDA 	ROT_HI

.15d2	 e9 00		sbc #$00				SBC 	#$00

.15d4	 29 03		and #$03				AND 	#$03

.15d6	 85 2d		sta $2d					STA 	ROT_HI

.15d8	 98		tya					TYA

.15d9	 4a		lsr		MVE_FRE LSR

.15da	 b0 0b		bcs $15e7			BCS 	MVE_EXT

.15dc	 ad 91 18	lda $1891				lda 	OBJECTS_TO_DRAW+1

.15df	 18		clc					clc

.15e0	 69 01		adc #$01				adc 	#1

.15e2	 29 1f		and #$1f				and 	#31

.15e4	 8d 91 18	sta $1891				sta 	OBJECTS_TO_DRAW+1

.15e7	 60		rts		MVE_EXT	RTS

.15e8	 b9 80 16	lda $1680,y	HEXCHAR		LDA		HEX0,Y

.15eb	 9d cd ab	sta $abcd,x	HEX_NUMBER0	STA		$ABCD,X

.15ee	 b9 90 16	lda $1690,y				LDA		HEX1,Y

.15f1	 9d cd ab	sta $abcd,x	HEX_NUMBER1	STA		$ABCD,X

.15f4	 b9 a0 16	lda $16a0,y				LDA		HEX2,Y

.15f7	 9d cd ab	sta $abcd,x	HEX_NUMBER2	STA		$ABCD,X

.15fa	 b9 b0 16	lda $16b0,y				LDA		HEX3,Y

.15fd	 9d cd ab	sta $abcd,x	HEX_NUMBER3	STA		$ABCD,X

.1600	 b9 c0 16	lda $16c0,y				LDA		HEX4,Y

.1603	 9d cd ab	sta $abcd,x	HEX_NUMBER4	STA		$ABCD,X

.1606	 60		rts					RTS

.1607	 84 20		sty $20		HEX16		STY		REGY	; Y = YPOS / A = HI / X = LO

.1609	 86 0f		stx $0f					STX		REGX		

.160b	 a2 00		ldx #$00				LDX		#0

.160d	 20 1a 16	jsr $161a				JSR		HEX8

.1610	 a5 0f		lda $0f					LDA		REGX

.1612	 a4 20		ldy $20					LDY		REGY

.1614	 a2 10		ldx #$10				LDX		#16

.1616	 20 1a 16	jsr $161a				JSR		HEX8

.1619	 60		rts					RTS

.161a	 18		clc		HEX8		CLC		; A = NUM / Y = YPOS / X = XPOS

.161b	 85 0e		sta $0e					STA		REGA

.161d	 b9 30 23	lda $2330,y				LDA		VER_POS_LO+0,Y

.1620	 8d ec 15	sta $15ec				STA		HEX_NUMBER0+1

.1623	 b9 a0 22	lda $22a0,y				LDA		VER_POS_HI+0,Y

.1626	 18		clc					CLC

.1627	 69 40		adc #$40	HEX8_1_BANK	ADC 	#SCREEN_0

.1629	 8d ed 15	sta $15ed				STA		HEX_NUMBER0+2

.162c	 b9 31 23	lda $2331,y				LDA		VER_POS_LO+1,Y

.162f	 8d f2 15	sta $15f2				STA		HEX_NUMBER1+1

.1632	 b9 a1 22	lda $22a1,y				LDA		VER_POS_HI+1,Y 

.1635	 18		clc					CLC

.1636	 69 40		adc #$40	HEX8_2_BANK	ADC 	#SCREEN_0

.1638	 8d f3 15	sta $15f3				STA		HEX_NUMBER1+2

.163b	 b9 32 23	lda $2332,y				LDA		VER_POS_LO+2,Y

.163e	 8d f8 15	sta $15f8				STA		HEX_NUMBER2+1

.1641	 b9 a2 22	lda $22a2,y				LDA		VER_POS_HI+2,Y 

.1644	 18		clc					CLC

.1645	 69 40		adc #$40	HEX8_3_BANK	ADC 	#SCREEN_0

.1647	 8d f9 15	sta $15f9				STA		HEX_NUMBER2+2

.164a	 b9 33 23	lda $2333,y				LDA		VER_POS_LO+3,Y

.164d	 8d fe 15	sta $15fe				STA		HEX_NUMBER3+1

.1650	 b9 a3 22	lda $22a3,y				LDA		VER_POS_HI+3,Y 

.1653	 18		clc					CLC

.1654	 69 40		adc #$40	HEX8_4_BANK	ADC 	#SCREEN_0

.1656	 8d ff 15	sta $15ff				STA		HEX_NUMBER3+2

.1659	 b9 34 23	lda $2334,y				LDA		VER_POS_LO+4,Y

.165c	 8d 04 16	sta $1604				STA		HEX_NUMBER4+1

.165f	 b9 a4 22	lda $22a4,y				LDA		VER_POS_HI+4,Y 

.1662	 18		clc					CLC

.1663	 69 40		adc #$40	HEX8_5_BANK	ADC 	#SCREEN_0

.1665	 8d 05 16	sta $1605				STA		HEX_NUMBER4+2

.1668	 a5 0e		lda $0e					LDA		REGA

.166a	 4a		lsr					LSR

.166b	 4a		lsr					LSR

.166c	 4a		lsr					LSR

.166d	 4a		lsr					LSR

.166e	 a8		tay					TAY

.166f	 20 e8 15	jsr $15e8				JSR		HEXCHAR

.1672	 8a		txa					TXA

.1673	 18		clc					CLC

.1674	 69 08		adc #$08				ADC 	#8

.1676	 aa		tax					TAX

.1677	 a5 0e		lda $0e					LDA		REGA

.1679	 29 0f		and #$0f				AND		#15

.167b	 a8		tay					TAY

.167c	 20 e8 15	jsr $15e8				JSR		HEXCHAR

.167f	 60		rts					RTS

=0100					X_ROT_TAB_LO = $0100 ; UNKNOWN_POINT_TAB_6

=0140					X_ROT_TAB_HI = $0140

=0180					Y_ROT_TAB_LO = $0180

=02c0					Y_ROT_TAB_HI = $02C0

=0340					Z_ROT_TAB_LO = $0340 

=0380					Z_ROT_TAB_HI = $0380

=0600					H_PERS_FP_LO = $0600

=03c0					H_PERS_FP_HI = $03C0

=0700					V_PERS_FP_LO = $0700

=0640					V_PERS_FP_HI = $0640

=0680					PERS_HOR_TAB = $0680

=06c0					PERS_VER_TAB = $06C0

=0740					POINT_CLASSIFICATION = $0740 ; 00 = point is onscreen - 01 = point needs off left/right - 02 = point is off top/bottom - 03 = point is off left/right + top/bottom - 80 / minus = point is behind

=0780					OBJ_X_LSB = $0780

=07c0					OBJ_Y_LSB = $07C0

=0300					OBJ_Z_LSB = $0300


>1680	 80 a2 80 80 88 80 80 80 	HEX0	.BYTE %10000000,%10100010,%10000000,%10000000,%10001000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000010,%10000000,%10000000 

>1688	 80 80 80 80 80 82 80 80 
>1690	 88 82 a8 a8 88 8a 8a a8 	HEX1	.BYTE %10001000,%10000010,%10101000,%10101000,%10001000,%10001010,%10001010,%10101000,%10001000,%10001000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010 

>1698	 88 88 88 88 8a 88 8a 8a 
>16a0	 88 a2 80 80 80 80 80 a8 	HEX2	.BYTE %10001000,%10100010,%10000000,%10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10000000,%10000010,%10001010,%10001000,%10000000,%10000000

>16a8	 80 80 80 82 8a 88 80 80 
>16b0	 88 a2 8a a8 a8 a8 88 a8 	HEX3	.BYTE %10001000,%10100010,%10001010,%10101000,%10101000,%10101000,%10001000,%10101000,%10001000,%10101000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010

>16b8	 88 a8 88 88 8a 88 8a 8a 
>16c0	 80 80 80 80 a8 80 80 a8 	HEX4	.BYTE %10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10101000,%10000000,%10000000,%10001000,%10000000,%10100000,%10000010,%10000000,%10001010

>16c8	 80 80 88 80 a0 82 80 8a 

.16d0					obj_x_msb

>16d0	 00 14 28 3c 50 64 78 8c 	.BYTE 00,20,40,60,80,100,120,140,160,180,200,220

>16d8	 a0 b4 c8 dc 

.1710					obj_y_msb
.1750					obj_z_msb

>1750	 00 14 28 3c 50 64 78 8c 	.BYTE 00,20,40,60,80,100,120,140,160,180,200,220

>1758	 a0 b4 c8 dc 

.1790					obj_x_hsb
.17d0					obj_y_hsb
.1810					obj_z_hsb
.1850					object_shape_ptr_lo

>1850	 d0 1a 59 85 a2 bf 06 2c  		.BYTE <OBJ_01,<OBJ_02,<OBJ_03,<OBJ_04,<OBJ_05,<OBJ_06,<OBJ_07,<OBJ_08

>1858	 5d 7a 98 c0 e6 15 44 6a  	    .BYTE <OBJ_09,<OBJ_10,<OBJ_11,<OBJ_12,<OBJ_13,<OBJ_14,<OBJ_15,<OBJ_16

>1860	 a2 da 08 38 71 85 59 85  		.BYTE <OBJ_17,<OBJ_18,<OBJ_19,<OBJ_20,<OBJ_21,<OBJ_99,<OBJ_03,<OBJ_04

>1868	 a2 bf 06 2c 5d 7a 98 c0  		.BYTE <OBJ_05,<OBJ_06,<OBJ_07,<OBJ_08,<OBJ_09,<OBJ_10,<OBJ_11,<OBJ_12


.1870					object_shape_ptr_hi

>1870	 18 19 19 19 19 19 1a 1a  		.BYTE >OBJ_01,>OBJ_02,>OBJ_03,>OBJ_04,>OBJ_05,>OBJ_06,>OBJ_07,>OBJ_08

>1878	 1a 1a 1a 1a 1a 1b 1b 1b  	    .BYTE >OBJ_09,>OBJ_10,>OBJ_11,>OBJ_12,>OBJ_13,>OBJ_14,>OBJ_15,>OBJ_16

>1880	 1b 1b 1c 1c 1c 1c 19 19  		.BYTE >OBJ_17,>OBJ_18,>OBJ_19,>OBJ_20,>OBJ_21,>OBJ_99,>OBJ_03,>OBJ_04

>1888	 19 19 1a 1a 1a 1a 1a 1a  		.BYTE >OBJ_05,>OBJ_06,>OBJ_07,>OBJ_08,>OBJ_09,>OBJ_10,>OBJ_11,>OBJ_12


.1890					objects_to_draw

>1890	 00                       			.BYTE 00

>1891	 01                       			.BYTE 01 ; object being drawn

>1892	 02 03 04 05 06 07        			.BYTE 02,03,04,05,06,07

>1898	 08 09 0a 0b 0c 0d 0e 0f  	        .BYTE 08,09,10,11,12,13,14,15

>18a0	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>18a8	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>18b0	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>18b8	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>18c0	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>18c8	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>18d0	 0f                       	OBJ_01	.BYTE $0F

>18d1	 f8 00 10                 			.BYTE $F8,$00,$10

>18d4	 fa 0c 0c                 			.BYTE $FA,$0C,$0C

>18d7	 fa 0c 00                 			.BYTE $FA,$0C,$00

>18da	 f9 06 fd                 			.BYTE $F9,$06,$FD

>18dd	 f9 04 f4                 			.BYTE $F9,$04,$F4

>18e0	 fc 04 f0                 			.BYTE $FC,$04,$F0

>18e3	 fc 00 f0                 			.BYTE $FC,$00,$F0

>18e6	 f9 00 f4                 	        .BYTE $F9,$00,$F4

>18e9	 08 00 10                 			.BYTE $08,$00,$10

>18ec	 06 0c 0c                 			.BYTE $06,$0C,$0C

>18ef	 06 0c 00                 			.BYTE $06,$0C,$00

>18f2	 07 06 fd                 			.BYTE $07,$06,$FD

>18f5	 07 04 f4                 			.BYTE $07,$04,$F4

>18f8	 04 04 f0                 			.BYTE $04,$04,$F0

>18fb	 04 00 f0                 			.BYTE $04,$00,$F0

>18fe	 07 00 f4                 	        .BYTE $07,$00,$F4

>1901	 17                       			.BYTE $17

>1902	 01 12 23 34 45 56 67 70 			.BYTE $01,$12,$23,$34,$45,$56,$67,$70,$89,$9A,$AB,$BC,$CD,$DE,$EF,$F8,$47,$CF,$08,$19,$2A,$3B,$5D,$6E

>190a	 89 9a ab bc cd de ef f8 
>1912	 47 cf 08 19 2a 3b 5d 6e 
>191a	 0f                       	OBJ_02	.BYTE $0F

>191b	 f8 04 18                 			.BYTE $F8,$04,$18

>191e	 08 04 18                 	        .BYTE $08,$04,$18

>1921	 00 04 e8                 			.BYTE $00,$04,$E8

>1924	 00 0c 18                 			.BYTE $00,$0C,$18

>1927	 e2 04 18                 			.BYTE $E2,$04,$18

>192a	 1e 04 18                 			.BYTE $1E,$04,$18

>192d	 fc 04 00                 			.BYTE $FC,$04,$00

>1930	 04 04 00                 			.BYTE $04,$04,$00

>1933	 00 14 18                 			.BYTE $00,$14,$18

>1936	 00 0a 0c                 	        .BYTE $00,$0A,$0C

>1939	 f2 04 10                 			.BYTE $F2,$04,$10

>193c	 f2 00 10                 			.BYTE $F2,$00,$10

>193f	 0e 04 10                 			.BYTE $0E,$04,$10

>1942	 0e 00 10                 			.BYTE $0E,$00,$10

>1945	 00 04 f0                 			.BYTE $00,$04,$F0

>1948	 00 00 f0                 			.BYTE $00,$00,$F0

>194b	 0c                       			.BYTE $0C

>194c	 20 23 21 13 03 45 46 57 			.BYTE $20,$23,$21,$13,$03,$45,$46,$57,$38,$89,$AB,$CD,$EF

>1954	 38 89 ab cd ef 
>1959	 07                       	OBJ_03	.BYTE $07

>195a	 00 00 00                 			.BYTE $00,$00,$00

>195d	 ec 07 00                 			.BYTE $EC,$07,$00

>1960	 f6 07 11                 			.BYTE $F6,$07,$11

>1963	 0a 07 11                 			.BYTE $0A,$07,$11

>1966	 14 07 00                 	        .BYTE $14,$07,$00

>1969	 0a 07 ef                 			.BYTE $0A,$07,$EF

>196c	 f6 07 ef                 			.BYTE $F6,$07,$EF

>196f	 00 10 00                 			.BYTE $00,$10,$00

>1972	 11                       			.BYTE $11

>1973	 01 02 03 04 05 06 71 72 			.BYTE $01,$02,$03,$04,$05,$06,$71,$72,$73,$74,$75,$76,$12,$23,$34,$45,$56,$61

>197b	 73 74 75 76 12 23 34 45 
>1983	 56 61 
>1985	 05                       	OBJ_04	.BYTE $05

>1986	 f4 00 10                 	        .BYTE $F4,$00,$10

>1989	 00 00 f0                 			.BYTE $00,$00,$F0

>198c	 0c 00 10                 			.BYTE $0C,$00,$10

>198f	 f4 0a 10                 			.BYTE $F4,$0A,$10

>1992	 00 0a f0                 			.BYTE $00,$0A,$F0

>1995	 0c 0a 10                 			.BYTE $0C,$0A,$10

>1998	 08                       			.BYTE $08

>1999	 01 12 20 34 45 53 03 14 			.BYTE $01,$12,$20,$34,$45,$53,$03,$14,$25

>19a1	 25 
>19a2	 05                       	OBJ_05	.BYTE $05

>19a3	 fb 00 ff                 			.BYTE $FB,$00,$FF

>19a6	 05 00 ff                 			.BYTE $05,$00,$FF

>19a9	 00 0c ff                 			.BYTE $00,$0C,$FF

>19ac	 fb 00 01                 			.BYTE $FB,$00,$01

>19af	 05 00 01                 			.BYTE $05,$00,$01

>19b2	 00 0c 01                 			.BYTE $00,$0C,$01

>19b5	 08                       			.BYTE $08

>19b6	 01 12 20 34 45 53 03 14 			.BYTE $01,$12,$20,$34,$45,$53,$03,$14,$25

>19be	 25 
>19bf	 0f                       	OBJ_06	.BYTE $0F

>19c0	 f0 00 10                 			.BYTE $F0,$00,$10

>19c3	 10 00 10                 	        .BYTE $10,$00,$10

>19c6	 00 00 ec                 			.BYTE $00,$00,$EC

>19c9	 fc 00 04                 			.BYTE $FC,$00,$04

>19cc	 04 00 04                 			.BYTE $04,$00,$04

>19cf	 00 00 fc                 			.BYTE $00,$00,$FC

>19d2	 fd 04 03                 			.BYTE $FD,$04,$03

>19d5	 03 04 03                 			.BYTE $03,$04,$03

>19d8	 00 04 fd                 			.BYTE $00,$04,$FD

>19db	 fe 14 02                 	        .BYTE $FE,$14,$02

>19de	 02 14 02                 			.BYTE $02,$14,$02

>19e1	 00 14 fe                 			.BYTE $00,$14,$FE

>19e4	 ff 04 01                 			.BYTE $FF,$04,$01

>19e7	 01 04 01                 			.BYTE $01,$04,$01

>19ea	 00 04 ff                 			.BYTE $00,$04,$FF

>19ed	 00 34 00                 			.BYTE $00,$34,$00

>19f0	 14                       			.BYTE $14

>19f1	 f6 f7 f8 90 a1 b2 06 17 			.BYTE $F6,$F7,$F8,$90,$A1,$B2,$06,$17,$28,$C3,$D4,$E5,$34,$45,$53,$67,$78,$86,$CD,$DE,$EC

>19f9	 28 c3 d4 e5 34 45 53 67 
>1a01	 78 86 cd de ec 
>1a06	 07                       	OBJ_07	.BYTE $07

>1a07	 f8 f8 f8                 			.BYTE $F8,$F8,$F8

>1a0a	 08 f8 f8                 			.BYTE $08,$F8,$F8

>1a0d	 08 f8 08                 			.BYTE $08,$F8,$08

>1a10	 f8 f8 08                 			.BYTE $F8,$F8,$08

>1a13	 f8 08 f8                 			.BYTE $F8,$08,$F8

>1a16	 08 08 f8                 			.BYTE $08,$08,$F8

>1a19	 08 08 08                 			.BYTE $08,$08,$08

>1a1c	 f8 08 08                 			.BYTE $F8,$08,$08

>1a1f	 0b                       			.BYTE $0B

>1a20	 01 12 23 30 04 15 26 37 			.BYTE $01,$12,$23,$30,$04,$15,$26,$37,$45,$56,$67,$74

>1a28	 45 56 67 74 
>1a2c	 09                       	OBJ_08	.BYTE $09

>1a2d	 fc 07 04                 			.BYTE $FC,$07,$04

>1a30	 04 07 04                 			.BYTE $04,$07,$04

>1a33	 00 07 fc                 	        .BYTE $00,$07,$FC

>1a36	 00 0e 00                 			.BYTE $00,$0E,$00

>1a39	 ff 07 01                 			.BYTE $FF,$07,$01

>1a3c	 01 07 01                 			.BYTE $01,$07,$01

>1a3f	 00 07 ff                 			.BYTE $00,$07,$FF

>1a42	 fe 00 02                 			.BYTE $FE,$00,$02

>1a45	 02 00 02                 			.BYTE $02,$00,$02

>1a48	 00 00 fe                 			.BYTE $00,$00,$FE

>1a4b	 0e                       	        .BYTE $0E

>1a4c	 01 12 20 03 13 23 45 56 			.BYTE $01,$12,$20,$03,$13,$23,$45,$56,$64,$78,$89,$97,$47,$58,$69,$0F,$F9

>1a54	 64 78 89 97 47 58 69 0f 
>1a5c	 f9 
>1a5d	 05                       	OBJ_09  .BYTE $05

>1a5e	 8b 00 8f                 	        .BYTE $8B,$00,$8F

>1a61	 75 00 8f                 	        .BYTE $75,$00,$8F

>1a64	 00 0c 8f                 	        .BYTE $00,$0C,$8F

>1a67	 8b 00 71                 	        .BYTE $8B,$00,$71

>1a6a	 75 00 71                 	        .BYTE $75,$00,$71

>1a6d	 00 0c 71                 	        .BYTE $00,$0C,$71

>1a70	 08                       	        .BYTE $08

>1a71	 01 12 20 34 45 53 03 14 	        .BYTE $01,$12,$20, $34,$45,$53, $03,$14,$25

>1a79	 25 
>1a7a	 05                       	OBJ_10  .BYTE $05

>1a7b	 f0 00 20                 			.BYTE $F0,$00,$20

>1a7e	 10 00 20                 			.BYTE $10,$00,$20

>1a81	 fd 02 20                 			.BYTE $FD,$02,$20

>1a84	 03 02 20                 			.BYTE $03,$02,$20

>1a87	 00 0c 20                 			.BYTE $00,$0C,$20

>1a8a	 00 00 e1                 			.BYTE $00,$00,$E1

>1a8d	 09                       			.BYTE $09

>1a8e	 01 13 34 42 20 05 15 25 			.BYTE $01,$13,$34,$42,$20,$05,$15,$25,$35,$45

>1a96	 35 45 
>1a98	 07                       	OBJ_11	.BYTE $07

>1a99	 f8 f8 f8                 			.BYTE $F8,$F8,$F8

>1a9c	 08 f8 f8                 			.BYTE $08,$F8,$F8

>1a9f	 08 f8 08                 			.BYTE $08,$F8,$08

>1aa2	 f8 f8 08                 			.BYTE $F8,$F8,$08

>1aa5	 f8 08 f8                 			.BYTE $F8,$08,$F8

>1aa8	 08 08 f8                 			.BYTE $08,$08,$F8

>1aab	 08 08 08                 			.BYTE $08,$08,$08

>1aae	 f8 08 08                 			.BYTE $F8,$08,$08

>1ab1	 0b                       			.BYTE $0B

>1ab2	 01 12 23 30 04 15 26 37 			.BYTE $01,$12,$23,$30,$04,$15,$26,$37,$45,$56,$67,$74,$09,$FC

>1aba	 45 56 67 74 09 fc 
>1ac0	 07                       	OBJ_12	.BYTE $07

>1ac1	 ff 00 fc                 			.BYTE $FF,$00,$FC

>1ac4	 ff 00 04                 			.BYTE $FF,$00,$04

>1ac7	 ff 0c 02                 			.BYTE $FF,$0C,$02

>1aca	 ff 0c fe                 			.BYTE $FF,$0C,$FE

>1acd	 01 00 fc                 			.BYTE $01,$00,$FC

>1ad0	 01 00 04                 			.BYTE $01,$00,$04

>1ad3	 01 0c 02                 			.BYTE $01,$0C,$02

>1ad6	 01 0c fe                 			.BYTE $01,$0C,$FE

>1ad9	 0b                       			.BYTE $0B

>1ada	 01 12 23 30 45 56 67 74 			.BYTE $01,$12,$23,$30,$45,$56,$67,$74,$04,$15,$26,$37

>1ae2	 04 15 26 37 
>1ae6	 09                       	OBJ_13	.BYTE $09

>1ae7	 04 00 ff                 			.BYTE $04,$00,$FF

>1aea	 fc 00 ff                 			.BYTE $FC,$00,$FF

>1aed	 fa 08 ff                 			.BYTE $FA,$08,$FF

>1af0	 00 0c ff                 			.BYTE $00,$0C,$FF

>1af3	 06 08 ff                 			.BYTE $06,$08,$FF

>1af6	 04 00 01                 			.BYTE $04,$00,$01

>1af9	 fc 00 01                 			.BYTE $FC,$00,$01

>1afc	 fa 08 01                 			.BYTE $FA,$08,$01

>1aff	 00 0c 01                 			.BYTE $00,$0C,$01

>1b02	 06 08 01                 			.BYTE $06,$08,$01

>1b05	 0e                       			.BYTE $0E

>1b06	 01 12 23 34 40 56 67 78 			.BYTE $01,$12,$23,$34,$40,$56,$67,$78,$89,$95,$05,$16,$27,$38,$49

>1b0e	 89 95 05 16 27 38 49 

.1b15					obj_14

>1b15	 09                       			.BYTE $09

>1b16	 fd 00 ff                 			.BYTE $FD,$00,$FF

>1b19	 03 00 ff                 			.BYTE $03,$00,$FF

>1b1c	 03 0a ff                 			.BYTE $03,$0A,$FF

>1b1f	 00 0c ff                 			.BYTE $00,$0C,$FF

>1b22	 fd 0a ff                 			.BYTE $FD,$0A,$FF

>1b25	 fd 00 01                 			.BYTE $FD,$00,$01

>1b28	 03 00 01                 			.BYTE $03,$00,$01

>1b2b	 03 0a 01                 			.BYTE $03,$0A,$01

>1b2e	 00 0c 01                 			.BYTE $00,$0C,$01

>1b31	 fd 0a 01                 			.BYTE $FD,$0A,$01

>1b34	 0e                       			.BYTE $0E

>1b35	 01 12 23 34 40 56 67 78 			.BYTE $01,$12,$23,$34,$40,$56,$67,$78,$89,$95,$05,$16,$27,$38,$49

>1b3d	 89 95 05 16 27 38 49 
>1b44	 07                       	OBJ_15	.BYTE $07

>1b45	 fe 00 ff                 			.BYTE $FE,$00,$FF

>1b48	 02 00 ff                 			.BYTE $02,$00,$FF

>1b4b	 04 0c ff                 			.BYTE $04,$0C,$FF

>1b4e	 fc 0c ff                 			.BYTE $FC,$0C,$FF

>1b51	 fe 00 01                 			.BYTE $FE,$00,$01

>1b54	 02 00 01                 			.BYTE $02,$00,$01

>1b57	 04 0c 01                 			.BYTE $04,$0C,$01

>1b5a	 fc 0c 01                 			.BYTE $FC,$0C,$01

>1b5d	 0b                       			.BYTE $0B

>1b5e	 01 12 23 30 45 56 67 74 			.BYTE $01,$12,$23,$30,$45,$56,$67,$74,$04,$15,$26,$37

>1b66	 04 15 26 37 
>1b6a	 0b                       	OBJ_16	.BYTE $0B

>1b6b	 02 00 ff                 			.BYTE $02,$00,$FF

>1b6e	 04 06 ff                 			.BYTE $04,$06,$FF

>1b71	 02 0c ff                 			.BYTE $02,$0C,$FF

>1b74	 fe 0c ff                 			.BYTE $FE,$0C,$FF

>1b77	 fc 06 ff                 			.BYTE $FC,$06,$FF

>1b7a	 fe 00 ff                 			.BYTE $FE,$00,$FF

>1b7d	 02 00 01                 			.BYTE $02,$00,$01

>1b80	 04 06 01                 			.BYTE $04,$06,$01

>1b83	 02 0c 01                 			.BYTE $02,$0C,$01

>1b86	 fe 0c 01                 			.BYTE $FE,$0C,$01

>1b89	 fc 06 01                 			.BYTE $FC,$06,$01

>1b8c	 fe 00 01                 			.BYTE $FE,$00,$01

>1b8f	 11                       			.BYTE $11

>1b90	 01 12 23 34 45 50 67 78 			.BYTE $01,$12,$23,$34,$45,$50,$67,$78,$89,$9A,$AB,$B6,$06,$17,$28,$39,$4A,$5B

>1b98	 89 9a ab b6 06 17 28 39 
>1ba0	 4a 5b 
>1ba2	 0b                       	OBJ_17	.BYTE $0B

>1ba3	 03 00 ff                 			.BYTE $03,$00,$FF

>1ba6	 03 08 ff                 			.BYTE $03,$08,$FF

>1ba9	 01 0c ff                 			.BYTE $01,$0C,$FF

>1bac	 ff 0c ff                 			.BYTE $FF,$0C,$FF

>1baf	 fd 08 ff                 			.BYTE $FD,$08,$FF

>1bb2	 fd 00 ff                 			.BYTE $FD,$00,$FF

>1bb5	 03 00 01                 			.BYTE $03,$00,$01

>1bb8	 03 08 01                 			.BYTE $03,$08,$01

>1bbb	 01 0c 01                 			.BYTE $01,$0C,$01

>1bbe	 ff 0c 01                 			.BYTE $FF,$0C,$01

>1bc1	 fd 08 01                 			.BYTE $FD,$08,$01

>1bc4	 fd 00 01                 			.BYTE $FD,$00,$01

>1bc7	 11                       			.BYTE $11

>1bc8	 01 12 23 34 45 50 67 78 			.BYTE $01,$12,$23,$34,$45,$50,$67,$78,$89,$9A,$AB,$B6,$06,$17,$28,$39,$4A,$5B

>1bd0	 89 9a ab b6 06 17 28 39 
>1bd8	 4a 5b 
>1bda	 0b                       	OBJ_18	.BYTE $0B

>1bdb	 f9 00 f3                 			.BYTE $F9,$00,$F3

>1bde	 07 00 f3                 			.BYTE $07,$00,$F3

>1be1	 07 00 0d                 			.BYTE $07,$00,$0D

>1be4	 f9 00 0d                 			.BYTE $F9,$00,$0D

>1be7	 f9 06 f3                 			.BYTE $F9,$06,$F3

>1bea	 07 06 f3                 			.BYTE $07,$06,$F3

>1bed	 07 06 0d                 			.BYTE $07,$06,$0D

>1bf0	 f9 06 0d                 			.BYTE $F9,$06,$0D

>1bf3	 f6 06 f0                 			.BYTE $F6,$06,$F0

>1bf6	 0a 06 f0                 			.BYTE $0A,$06,$F0

>1bf9	 0a 06 10                 			.BYTE $0A,$06,$10

>1bfc	 f6 06 10                 			.BYTE $F6,$06,$10

>1bff	 07                       			.BYTE $07

>1c00	 04 15 26 37 89 9a ab b8  			.BYTE $04,$15,$26,$37,$89,$9A,$AB,$B8

>1c08	 0b                       	OBJ_19	.BYTE $0B

>1c09	 fe 00 fe                 			.BYTE $FE,$00,$FE

>1c0c	 fe 00 02                 			.BYTE $FE,$00,$02

>1c0f	 02 00 02                 			.BYTE $02,$00,$02

>1c12	 02 00 fe                 			.BYTE $02,$00,$FE

>1c15	 fe 04 fe                 			.BYTE $FE,$04,$FE

>1c18	 fe 04 02                 			.BYTE $FE,$04,$02

>1c1b	 02 04 02                 			.BYTE $02,$04,$02

>1c1e	 02 04 fe                 			.BYTE $02,$04,$FE

>1c21	 02 06 02                 			.BYTE $02,$06,$02

>1c24	 02 06 fe                 			.BYTE $02,$06,$FE

>1c27	 02 07 02                 			.BYTE $02,$07,$02

>1c2a	 02 07 fe                 			.BYTE $02,$07,$FE

>1c2d	 09                       			.BYTE $09

>1c2e	 04 15 2a 3b 45 56 67 74 			.BYTE $04,$15,$2A,$3B,$45,$56,$67,$74,$89,$AB

>1c36	 89 ab 
>1c38	 0d                       	OBJ_20	.BYTE $0D

>1c39	 f6 00 fb                 			.BYTE $F6,$00,$FB

>1c3c	 f6 00 05                 			.BYTE $F6,$00,$05

>1c3f	 0a 00 05                 			.BYTE $0A,$00,$05

>1c42	 0a 00 fb                 			.BYTE $0A,$00,$FB

>1c45	 f6 02 fb                 			.BYTE $F6,$02,$FB

>1c48	 f6 02 05                 			.BYTE $F6,$02,$05

>1c4b	 0a 02 05                 			.BYTE $0A,$02,$05

>1c4e	 0a 02 fb                 			.BYTE $0A,$02,$FB

>1c51	 f6 04 fb                 			.BYTE $F6,$04,$FB

>1c54	 f6 04 05                 			.BYTE $F6,$04,$05

>1c57	 0a 04 05                 			.BYTE $0A,$04,$05

>1c5a	 0a 04 fb                 			.BYTE $0A,$04,$FB

>1c5d	 0a 08 05                 			.BYTE $0A,$08,$05

>1c60	 0a 08 fb                 			.BYTE $0A,$08,$FB

>1c63	 0c                       			.BYTE $0C

>1c64	 08 19 2c 3d 45 56 67 74 			.BYTE $08,$19,$2C,$3D,$45,$56,$67,$74,$89,$9A,$AB,$B8,$CD

>1c6c	 89 9a ab b8 cd 
>1c71	 03                       	OBJ_21	.BYTE 4-1

>1c72	 80 a5 00                 			.BYTE 255-127, 255-90, 0

>1c75	 7f a5 00                 			.BYTE 127, 255-90, 0

>1c78	 00 5a 80                 			.BYTE 0, 90, 255-127

>1c7b	 00 5a 7f                 			.BYTE 0, 90, 127

>1c7e	 05                       			.BYTE 6-1

>1c7f	 01 02 03 12 13 23        			.BYTE $01,$02,$03,$12,$13,$23

>1c85	 07                       	OBJ_99	.BYTE $07

>1c86	 80 80 80                 			.BYTE 255-127,255-127,255-127

>1c89	 80 80 7f                 			.BYTE 255-127,255-127,127

>1c8c	 80 7f 80                 			.BYTE 255-127,127,255-127

>1c8f	 80 7f 7f                 			.BYTE 255-127,127,127

>1c92	 7f 80 80                 			.BYTE 127,255-127,255-127

>1c95	 7f 80 7f                 			.BYTE 127,255-127,127

>1c98	 7f 7f 80                 			.BYTE 127,127,255-127

>1c9b	 7f 7f 7f                 			.BYTE 127,127,127

>1c9e	 0b                       	        .BYTE $0B

>1c9f	 01 13 32 20              	        .BYTE $01,$13,$32,$20

>1ca3	 45 57 76 64              	        .BYTE $45,$57,$76,$64

>1ca7	 04 15 26 37              	        .BYTE $04,$15,$26,$37


.1d00					sin_lsb

>1d00	 92 2e f7 60 c4 14 47 79  			.BYTE $92,$2E,$F7,$60,$C4,$14,$47,$79

>1d08	 ab dd 08 21 3a 53 6c 85  	        .BYTE $AB,$DD,$08,$21,$3A,$53,$6C,$85

>1d10	 9e b7 d0 e9 01 0d 1a 26  	        .BYTE $9E,$B7,$D0,$E9,$01,$0D,$1A,$26

>1d18	 33 3f 4c 58 64 71 7d 89  	        .BYTE $33,$3F,$4C,$58,$64,$71,$7D,$89

>1d20	 96 a2 ae bb c7 d3 df ec  	        .BYTE $96,$A2,$AE,$BB,$C7,$D3,$DF,$EC

>1d28	 f8 02 08 0e 14 1a 20 26  	        .BYTE $F8,$02,$08,$0E,$14,$1A,$20,$26

>1d30	 2c 32 38 3e 44 4a 50 56  	        .BYTE $2C,$32,$38,$3E,$44,$4A,$50,$56

>1d38	 5c 62 68 6e 73 79 7f 85  	        .BYTE $5C,$62,$68,$6E,$73,$79,$7F,$85

>1d40	 8b 91 96 9c a2 a8 ad b3  	        .BYTE $8B,$91,$96,$9C,$A2,$A8,$AD,$B3

>1d48	 b9 be c4 ca cf d5 da e0  	        .BYTE $B9,$BE,$C4,$CA,$CF,$D5,$DA,$E0

>1d50	 e5 eb f1 f6 fb 00 03 06  	        .BYTE $E5,$EB,$F1,$F6,$FB,$00,$03,$06

>1d58	 09 0b 0e 11 13 16 19 1b  	        .BYTE $09,$0B,$0E,$11,$13,$16,$19,$1B

>1d60	 1e 20 23 26 28 2b 2d 30  	        .BYTE $1E,$20,$23,$26,$28,$2B,$2D,$30

>1d68	 32 35 37 3a 3c 3f 41 44  	        .BYTE $32,$35,$37,$3A,$3C,$3F,$41,$44

>1d70	 46 48 4b 4d 50 52 54 57  	        .BYTE $46,$48,$4B,$4D,$50,$52,$54,$57

>1d78	 59 5b 5e 60 62 64 67 69  	        .BYTE $59,$5B,$5E,$60,$62,$64,$67,$69

>1d80	 6b 6d 70 72 74 76 78 7a  	        .BYTE $6B,$6D,$70,$72,$74,$76,$78,$7A

>1d88	 7c 7f 81 83 85 87 89 8b  	        .BYTE $7C,$7F,$81,$83,$85,$87,$89,$8B

>1d90	 8d 8f 91 93 95 97 98 9a  	        .BYTE $8D,$8F,$91,$93,$95,$97,$98,$9A

>1d98	 9c 9e a0 a2 a4 a5 a7 a9  	        .BYTE $9C,$9E,$A0,$A2,$A4,$A5,$A7,$A9

>1da0	 ab ac ae b0 b1 b3 b5 b6  	        .BYTE $AB,$AC,$AE,$B0,$B1,$B3,$B5,$B6

>1da8	 b8 ba bb bd be c0 c1 c3  	        .BYTE $B8,$BA,$BB,$BD,$BE,$C0,$C1,$C3

>1db0	 c4 c6 c7 c9 ca cb cd ce  	        .BYTE $C4,$C6,$C7,$C9,$CA,$CB,$CD,$CE

>1db8	 d0 d1 d2 d3 d5 d6 d7 d8  	        .BYTE $D0,$D1,$D2,$D3,$D5,$D6,$D7,$D8

>1dc0	 da db dc dd de df e0 e2  	        .BYTE $DA,$DB,$DC,$DD,$DE,$DF,$E0,$E2

>1dc8	 e3 e4 e5 e6 e7 e8 e9 e9  	        .BYTE $E3,$E4,$E5,$E6,$E7,$E8,$E9,$E9

>1dd0	 ea eb ec ed ee ef ef f0  	        .BYTE $EA,$EB,$EC,$ED,$EE,$EF,$EF,$F0

>1dd8	 f1 f2 f3 f3 f4 f5 f5 f6  	        .BYTE $F1,$F2,$F3,$F3,$F4,$F5,$F5,$F6

>1de0	 f6 f7 f8 f8 f9 f9 fa fa  	        .BYTE $F6,$F7,$F8,$F8,$F9,$F9,$FA,$FA

>1de8	 fb fb fc fc fc fd fd fd  	        .BYTE $FB,$FB,$FC,$FC,$FC,$FD,$FD,$FD

>1df0	 fe fe fe fe ff ff ff ff  	        .BYTE $FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF

>1df8	 ff 00 00 00 00 00 00 00  	        .BYTE $FF,$00,$00,$00,$00,$00,$00,$00


.1e00					sin_msb

>1e00	 dc e4 e4 e8 e8 ec ec ec  			.BYTE $DC,$E4,$E4,$E8,$E8,$EC,$EC,$EC

>1e08	 ec ec f0 f0 f0 f0 f0 f0  	        .BYTE $EC,$EC,$F0,$F0,$F0,$F0,$F0,$F0

>1e10	 f0 f0 f0 f0 f4 f4 f4 f4  	        .BYTE $F0,$F0,$F0,$F0,$F4,$F4,$F4,$F4

>1e18	 f4 f4 f4 f4 f4 f4 f4 f4  	        .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4

>1e20	 f4 f4 f4 f4 f4 f4 f4 f4  	        .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4

>1e28	 f4 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F4,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>1e30	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>1e38	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>1e40	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>1e48	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>1e50	 f8 f8 f8 f8 f8 fc fc fc  	        .BYTE $F8,$F8,$F8,$F8,$F8,$FC,$FC,$FC

>1e58	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>1e60	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>1e68	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>1e70	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>1e78	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>1e80	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>1e88	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>1e90	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>1e98	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>1ea0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>1ea8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>1eb0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>1eb8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>1ec0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>1ec8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>1ed0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>1ed8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>1ee0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>1ee8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>1ef0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>1ef8	 fc 00 00 00 00 00 00 00  	        .BYTE $FC,$00,$00,$00,$00,$00,$00,$00


.1f00					log_table

>1f00	 00 01 03 04 06 07 09 0a  			.BYTE $00,$01,$03,$04,$06,$07,$09,$0A

>1f08	 0b 0d 0e 10 11 12 14 15  	        .BYTE $0B,$0D,$0E,$10,$11,$12,$14,$15

>1f10	 16 18 19 1a 1c 1d 1e 20  	        .BYTE $16,$18,$19,$1A,$1C,$1D,$1E,$20

>1f18	 21 22 24 25 26 28 29 2a  	        .BYTE $21,$22,$24,$25,$26,$28,$29,$2A

>1f20	 2c 2d 2e 2f 31 32 33 34  	        .BYTE $2C,$2D,$2E,$2F,$31,$32,$33,$34

>1f28	 36 37 38 39 3b 3c 3d 3e  	        .BYTE $36,$37,$38,$39,$3B,$3C,$3D,$3E

>1f30	 3f 41 42 43 44 45 47 48  	        .BYTE $3F,$41,$42,$43,$44,$45,$47,$48

>1f38	 49 4a 4b 4d 4e 4f 50 51  	        .BYTE $49,$4A,$4B,$4D,$4E,$4F,$50,$51

>1f40	 52 54 55 56 57 58 59 5a  	        .BYTE $52,$54,$55,$56,$57,$58,$59,$5A

>1f48	 5c 5d 5e 5f 60 61 62 63  	        .BYTE $5C,$5D,$5E,$5F,$60,$61,$62,$63

>1f50	 64 66 67 68 69 6a 6b 6c  	        .BYTE $64,$66,$67,$68,$69,$6A,$6B,$6C

>1f58	 6d 6e 6f 70 71 72 74 75  	        .BYTE $6D,$6E,$6F,$70,$71,$72,$74,$75

>1f60	 76 77 78 79 7a 7b 7c 7d  	        .BYTE $76,$77,$78,$79,$7A,$7B,$7C,$7D

>1f68	 7e 7f 80 81 82 83 84 85  	        .BYTE $7E,$7F,$80,$81,$82,$83,$84,$85

>1f70	 86 87 88 89 8a 8b 8c 8d  	        .BYTE $86,$87,$88,$89,$8A,$8B,$8C,$8D

>1f78	 8e 8f 90 91 92 93 94 95  	        .BYTE $8E,$8F,$90,$91,$92,$93,$94,$95

>1f80	 96 97 98 99 9a 9b 9b 9c  	        .BYTE $96,$97,$98,$99,$9A,$9B,$9B,$9C

>1f88	 9d 9e 9f a0 a1 a2 a3 a4  	        .BYTE $9D,$9E,$9F,$A0,$A1,$A2,$A3,$A4

>1f90	 a5 a6 a7 a8 a9 a9 aa ab  	        .BYTE $A5,$A6,$A7,$A8,$A9,$A9,$AA,$AB

>1f98	 ac ad ae af b0 b1 b2 b2  	        .BYTE $AC,$AD,$AE,$AF,$B0,$B1,$B2,$B2

>1fa0	 b3 b4 b5 b6 b7 b8 b9 b9  	        .BYTE $B3,$B4,$B5,$B6,$B7,$B8,$B9,$B9

>1fa8	 ba bb bc bd be bf c0 c0  	        .BYTE $BA,$BB,$BC,$BD,$BE,$BF,$C0,$C0

>1fb0	 c1 c2 c3 c4 c5 c6 c6 c7  	        .BYTE $C1,$C2,$C3,$C4,$C5,$C6,$C6,$C7

>1fb8	 c8 c9 ca cb cb cc cd ce  	        .BYTE $C8,$C9,$CA,$CB,$CB,$CC,$CD,$CE

>1fc0	 cf d0 d0 d1 d2 d3 d4 d4  	        .BYTE $CF,$D0,$D0,$D1,$D2,$D3,$D4,$D4

>1fc8	 d5 d6 d7 d8 d8 d9 da db  	        .BYTE $D5,$D6,$D7,$D8,$D8,$D9,$DA,$DB

>1fd0	 dc dc dd de df e0 e0 e1  	        .BYTE $DC,$DC,$DD,$DE,$DF,$E0,$E0,$E1

>1fd8	 e2 e3 e4 e4 e5 e6 e7 e7  	        .BYTE $E2,$E3,$E4,$E4,$E5,$E6,$E7,$E7

>1fe0	 e8 e9 ea ea eb ec ed ee  	        .BYTE $E8,$E9,$EA,$EA,$EB,$EC,$ED,$EE

>1fe8	 ee ef f0 f1 f1 f2 f3 f4  	        .BYTE $EE,$EF,$F0,$F1,$F1,$F2,$F3,$F4

>1ff0	 f4 f5 f6 f7 f7 f8 f9 f9  	        .BYTE $F4,$F5,$F6,$F7,$F7,$F8,$F9,$F9

>1ff8	 fa fb fc fc fd fe ff ff  	        .BYTE $FA,$FB,$FC,$FC,$FD,$FE,$FF,$FF


.2000					exp_table

>2000	 00 01 01 02 03 03 04 05  			.BYTE $00,$01,$01,$02,$03,$03,$04,$05

>2008	 06 06 07 08 08 09 0a 0b  	        .BYTE $06,$06,$07,$08,$08,$09,$0A,$0B

>2010	 0b 0c 0d 0e 0e 0f 10 10  	        .BYTE $0B,$0C,$0D,$0E,$0E,$0F,$10,$10

>2018	 11 12 13 13 14 15 16 16  	        .BYTE $11,$12,$13,$13,$14,$15,$16,$16

>2020	 17 18 19 19 1a 1b 1c 1d  	        .BYTE $17,$18,$19,$19,$1A,$1B,$1C,$1D

>2028	 1d 1e 1f 20 20 21 22 23  	        .BYTE $1D,$1E,$1F,$20,$20,$21,$22,$23

>2030	 24 24 25 26 27 28 28 29  	        .BYTE $24,$24,$25,$26,$27,$28,$28,$29

>2038	 2a 2b 2c 2c 2d 2e 2f 30  	        .BYTE $2A,$2B,$2C,$2C,$2D,$2E,$2F,$30

>2040	 30 31 32 33 34 35 35 36  	        .BYTE $30,$31,$32,$33,$34,$35,$35,$36

>2048	 37 38 39 3a 3a 3b 3c 3d  	        .BYTE $37,$38,$39,$3A,$3A,$3B,$3C,$3D

>2050	 3e 3f 40 41 41 42 43 44  	        .BYTE $3E,$3F,$40,$41,$41,$42,$43,$44

>2058	 45 46 47 48 48 49 4a 4b  	        .BYTE $45,$46,$47,$48,$48,$49,$4A,$4B

>2060	 4c 4d 4e 4f 50 51 51 52  	        .BYTE $4C,$4D,$4E,$4F,$50,$51,$51,$52

>2068	 53 54 55 56 57 58 59 5a  	        .BYTE $53,$54,$55,$56,$57,$58,$59,$5A

>2070	 5b 5c 5d 5e 5e 5f 60 61  	        .BYTE $5B,$5C,$5D,$5E,$5E,$5F,$60,$61

>2078	 62 63 64 65 66 67 68 69  	        .BYTE $62,$63,$64,$65,$66,$67,$68,$69

>2080	 6a 6b 6c 6d 6e 6f 70 71  	        .BYTE $6A,$6B,$6C,$6D,$6E,$6F,$70,$71

>2088	 72 73 74 75 76 77 78 79  	        .BYTE $72,$73,$74,$75,$76,$77,$78,$79

>2090	 7a 7b 7c 7d 7e 7f 80 81  	        .BYTE $7A,$7B,$7C,$7D,$7E,$7F,$80,$81

>2098	 82 83 84 85 87 88 89 8a  	        .BYTE $82,$83,$84,$85,$87,$88,$89,$8A

>20a0	 8b 8c 8d 8e 8f 90 91 92  	        .BYTE $8B,$8C,$8D,$8E,$8F,$90,$91,$92

>20a8	 93 95 96 97 98 99 9a 9b  	        .BYTE $93,$95,$96,$97,$98,$99,$9A,$9B

>20b0	 9c 9d 9f a0 a1 a2 a3 a4  	        .BYTE $9C,$9D,$9F,$A0,$A1,$A2,$A3,$A4

>20b8	 a5 a6 a8 a9 aa ab ac ad  	        .BYTE $A5,$A6,$A8,$A9,$AA,$AB,$AC,$AD

>20c0	 af b0 b1 b2 b3 b4 b6 b7  	        .BYTE $AF,$B0,$B1,$B2,$B3,$B4,$B6,$B7

>20c8	 b8 b9 ba bc bd be bf c0  	        .BYTE $B8,$B9,$BA,$BC,$BD,$BE,$BF,$C0

>20d0	 c2 c3 c4 c5 c6 c8 c9 ca  	        .BYTE $C2,$C3,$C4,$C5,$C6,$C8,$C9,$CA

>20d8	 cb cd ce cf d0 d2 d3 d4  	        .BYTE $CB,$CD,$CE,$CF,$D0,$D2,$D3,$D4

>20e0	 d6 d7 d8 d9 db dc dd de  	        .BYTE $D6,$D7,$D8,$D9,$DB,$DC,$DD,$DE

>20e8	 e0 e1 e2 e4 e5 e6 e8 e9  	        .BYTE $E0,$E1,$E2,$E4,$E5,$E6,$E8,$E9

>20f0	 ea ec ed ee f0 f1 f2 f4  	        .BYTE $EA,$EC,$ED,$EE,$F0,$F1,$F2,$F4

>20f8	 f5 f6 f8 f9 fa fc fd ff  	        .BYTE $F5,$F6,$F8,$F9,$FA,$FC,$FD,$FF


.2100					and_pixel_pos

>2100	 3f cf f3 fc 3f cf f3 fc  			.BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2108	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2110	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2118	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2120	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2128	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2130	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2138	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2140	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2148	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2150	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2158	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2160	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2168	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2170	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2178	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2180	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2188	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2190	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2198	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC


.2200					ora_pixel_pos

>2200	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2208	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2210	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2218	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2220	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2228	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2230	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2238	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2240	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2248	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2250	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2258	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2260	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2268	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2270	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2278	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2280	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2288	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2290	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2298	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03


.22a0					ver_pos_hi

>22a0	 00 00 00 00 00 00 00 00  			.BYTE $00,$00,$00,$00,$00,$00,$00,$00

>22a8	 01 01 01 01 01 01 01 01  	        .BYTE $01,$01,$01,$01,$01,$01,$01,$01

>22b0	 02 02 02 02 02 02 02 02  	        .BYTE $02,$02,$02,$02,$02,$02,$02,$02

>22b8	 03 03 03 03 03 03 03 03  	        .BYTE $03,$03,$03,$03,$03,$03,$03,$03

>22c0	 05 05 05 05 05 05 05 05  	        .BYTE $05,$05,$05,$05,$05,$05,$05,$05

>22c8	 06 06 06 06 06 06 06 06  	        .BYTE $06,$06,$06,$06,$06,$06,$06,$06

>22d0	 07 07 07 07 07 07 07 07  	        .BYTE $07,$07,$07,$07,$07,$07,$07,$07

>22d8	 08 08 08 08 08 08 08 08  	        .BYTE $08,$08,$08,$08,$08,$08,$08,$08

>22e0	 0a 0a 0a 0a 0a 0a 0a 0a  	        .BYTE $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A

>22e8	 0b 0b 0b 0b 0b 0b 0b 0b  	        .BYTE $0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B

>22f0	 0c 0c 0c 0c 0c 0c 0c 0c  	        .BYTE $0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C

>22f8	 0d 0d 0d 0d 0d 0d 0d 0d  	        .BYTE $0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D

>2300	 0f 0f 0f 0f 0f 0f 0f 0f  	        .BYTE $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F

>2308	 10 10 10 10 10 10 10 10  	        .BYTE $10,$10,$10,$10,$10,$10,$10,$10

>2310	 11 11 11 11 11 11 11 11  	        .BYTE $11,$11,$11,$11,$11,$11,$11,$11

>2318	 12 12 12 12 12 12 12 12  	        .BYTE $12,$12,$12,$12,$12,$12,$12,$12

>2320	 14 14 14 14 14 14 14 14  	        .BYTE $14,$14,$14,$14,$14,$14,$14,$14

>2328	 aa aa aa aa aa aa aa aa  	        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA


.2330					ver_pos_lo

>2330	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>2338	 40 41 42 43 44 45 46 47  	        .BYTE $40,$41,$42,$43,$44,$45,$46,$47

>2340	 80 81 82 83 84 85 86 87  	        .BYTE $80,$81,$82,$83,$84,$85,$86,$87

>2348	 c0 c1 c2 c3 c4 c5 c6 c7  	        .BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>2350	 00 01 02 03 04 05 06 07  	        .BYTE $00,$01,$02,$03,$04,$05,$06,$07

>2358	 40 41 42 43 44 45 46 47  	        .BYTE $40,$41,$42,$43,$44,$45,$46,$47

>2360	 80 81 82 83 84 85 86 87  	        .BYTE $80,$81,$82,$83,$84,$85,$86,$87

>2368	 c0 c1 c2 c3 c4 c5 c6 c7  			.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>2370	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>2378	 40 41 42 43 44 45 46 47  			.BYTE $40,$41,$42,$43,$44,$45,$46,$47

>2380	 80 81 82 83 84 85 86 87  			.BYTE $80,$81,$82,$83,$84,$85,$86,$87

>2388	 c0 c1 c2 c3 c4 c5 c6 c7  			.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>2390	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>2398	 40 41 42 43 44 45 46 47  			.BYTE $40,$41,$42,$43,$44,$45,$46,$47

>23a0	 80 81 82 83 84 85 86 87  			.BYTE $80,$81,$82,$83,$84,$85,$86,$87

>23a8	 c0 c1 c2 c3 c4 c5 c6 c7  			.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>23b0	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>23b8	 aa aa aa aa aa aa aa aa  			.BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA


.23c0					hor_scr_pos

>23c0	 00 00 00 00 08 08 08 08  			.BYTE $00,$00,$00,$00,$08,$08,$08,$08

>23c8	 10 10 10 10 18 18 18 18  	        .BYTE $10,$10,$10,$10,$18,$18,$18,$18

>23d0	 20 20 20 20 28 28 28 28  	        .BYTE $20,$20,$20,$20,$28,$28,$28,$28

>23d8	 30 30 30 30 38 38 38 38  	        .BYTE $30,$30,$30,$30,$38,$38,$38,$38

>23e0	 40 40 40 40 48 48 48 48  	        .BYTE $40,$40,$40,$40,$48,$48,$48,$48

>23e8	 50 50 50 50 58 58 58 58  	        .BYTE $50,$50,$50,$50,$58,$58,$58,$58

>23f0	 60 60 60 60 68 68 68 68  	        .BYTE $60,$60,$60,$60,$68,$68,$68,$68

>23f8	 70 70 70 70 78 78 78 78  	        .BYTE $70,$70,$70,$70,$78,$78,$78,$78

>2400	 80 80 80 80 88 88 88 88  	        .BYTE $80,$80,$80,$80,$88,$88,$88,$88

>2408	 90 90 90 90 98 98 98 98  	        .BYTE $90,$90,$90,$90,$98,$98,$98,$98

>2410	 a0 a0 a0 a0 a8 a8 a8 a8  	        .BYTE $A0,$A0,$A0,$A0,$A8,$A8,$A8,$A8

>2418	 b0 b0 b0 b0 b8 b8 b8 b8  	        .BYTE $B0,$B0,$B0,$B0,$B8,$B8,$B8,$B8

>2420	 c0 c0 c0 c0 c8 c8 c8 c8  	        .BYTE $C0,$C0,$C0,$C0,$C8,$C8,$C8,$C8

>2428	 d0 d0 d0 d0 d8 d8 d8 d8  	        .BYTE $D0,$D0,$D0,$D0,$D8,$D8,$D8,$D8

>2430	 e0 e0 e0 e0 e8 e8 e8 e8  	        .BYTE $E0,$E0,$E0,$E0,$E8,$E8,$E8,$E8

>2438	 f0 f0 f0 f0 f8 f8 f8 f8  	        .BYTE $F0,$F0,$F0,$F0,$F8,$F8,$F8,$F8

>2440	 00 00 00 00 08 08 08 08  	        .BYTE $00,$00,$00,$00,$08,$08,$08,$08

>2448	 10 10 10 10 18 18 18 18  	        .BYTE $10,$10,$10,$10,$18,$18,$18,$18

>2450	 20 20 20 20 28 28 28 28  			.BYTE $20,$20,$20,$20,$28,$28,$28,$28

>2458	 30 30 30 30 38 38 38 38  			.BYTE $30,$30,$30,$30,$38,$38,$38,$38

>2460	 aa d9 08 37 66 95 c4 f3  	LINE_DRAW_PTR_LO   .BYTE <LINE_DRAW_0,<LINE_DRAW_1,<LINE_DRAW_2,<LINE_DRAW_3,<LINE_DRAW_4,<LINE_DRAW_5,<LINE_DRAW_6,<LINE_DRAW_7 

>2468	 12 12 13 13 13 13 13 13  	LINE_DRAW_PTR_HI   .BYTE >LINE_DRAW_0,>LINE_DRAW_1,>LINE_DRAW_2,>LINE_DRAW_3,>LINE_DRAW_4,>LINE_DRAW_5,>LINE_DRAW_6,>LINE_DRAW_7 

>2470	 00 07 03 04 01 06 02 05  	LINE_DRAW_CONV_PTR .BYTE $00,$07,$03,$04,$01,$06,$02,$05

>2478	 9f 9f 00 00 00 00 9f 9f  	PERS_HOR_fBBD8   .BYTE $9F,$9F,$00,$00,$00,$00,$9F,$9F

>2480	 87 87 87 87 00 00 00 00  	PERS_VER_fBBE0   .BYTE $87,$87,$87,$87,$00,$00,$00,$00

>2488	 40 38 08 00 40 38 28 30  	fBBE8   .BYTE $40,$38,$08,$00,$40,$38,$28,$30

>2490	 40 18 08 10 40 18 28 20  			.BYTE $40,$18,$08,$10,$40,$18,$28,$20

>2498	 00 00 03 00 00 00 02 02  	fBBF8   .BYTE $00,$00,$03,$00,$00,$00,$02,$02

>24a0	 00 00 00 06 04 00 00 04  			.BYTE $00,$00,$00,$06,$04,$00,$00,$04

>24a8	 0c 00 00 00 08 08 00 00  			.BYTE $0C,$00,$00,$00,$08,$08,$00,$00

>24b0	 00 09 00 00 00 01 01 00  			.BYTE $00,$09,$00,$00,$00,$01,$01,$00	

>24b8	 01 00 00 00 01 01 00 00  	fBC18   .BYTE $01,$00,$00,$00,$01,$01,$00,$00

>24c0	 00 01 00 00 00 01 01 00  			.BYTE $00,$01,$00,$00,$00,$01,$01,$00

>24c8	 00 00 01 00 00 00 01 01  			.BYTE $00,$00,$01,$00,$00,$00,$01,$01

>24d0	 00 00 00 01 01 00 00 01  			.BYTE $00,$00,$00,$01,$01,$00,$00,$01

=4000					SCREEN0 = $4000

=5c00					SCREEN_COLOUR =  $5C00

=6000					SCREEN1 = $6000


;******  end of code
