
;6502/65C02/65816/CPU64/DTV Turbo Assembler V1.47 listing file of "mf_land_sky_v12.tas"
;done on Tue Aug 29 16:21:18 2023

=0001					ab01 = $01

=0002					SCREEN_POS_LO = $02

=0003					SCREEN_POS_HI = $03

=0006					ab06 = $06

=0007					ab07 = $07

=0008					ab08 = $08

=0009					ab09 = $09

=000a					ab0A = $0A

=000b					ab0B = $0B

=000e					FP_MULTIPLY_LO = $0E

=000f					FP_MULTIPLY_HI = $0F

=000e					FP_DIVIDE_LO = FP_MULTIPLY_LO

=000f					FP_DIVIDE_HI = FP_MULTIPLY_HI

=0016					ab16 = $16

=0017					ab17 = $17

=0018					ab18 = $18

=001a					SCREEN_LINE_ab1A = $1A

=0021					ab21 = $21 ; CONST

=0022					ab22 = $22

=0023					ab23 = $23

=0024					SCREEN_FLIP = $24

=0025					SCREEN_BANK = $25

=0026					ab26 = $26

=0027					ab27 = $27

=0028					ROLL_LO = $28 ; ROLL_LO

=0029					ROLL_HI = $29 ; ROLL_HI

=002a					PITCH_LO = $2A ; PITCH_LO

=002b					PITCH_HI = $2B ; PITCH_HI

=002c					YAW_LO = $2C ; YAW_LO 

=002d					YAW_HI = $2D ; YAW_HI

=002e					ROLL_SIN_FP_LO_ab2E = $2E

=002f					ROLL_SIN_FP_HI_ab2F = $2F

=0030					ROLL_COS_FP_LO_ab30 = $30

=0031					ROLL_COS_FP_HI_ab31 = $31

=0032					ab32 = $32

=0033					ab33 = $33

=0034					ab34 = $34

=0035					ab35 = $35

=0036					PITCH_SIN_FP_LO_ab36 = $36

=0037					PITCH_SIN_FP_HI_ab37 = $37

=0038					PITCH_COS_FP_LO_ab38 = $38

=0039					PITCH_COS_FP_HI_ab39 = $39

=003a					ab3A = $3A

=003b					ab3B = $3B

=003c					YAW_SIN_FP_LO_ab3C = $3C

=003d					YAW_SIN_FP_HI_ab3D = $3D

=003e					YAW_COS_FP_LO_ab3E = $3E

=003f					YAW_COS_FP_HI_ab3F = $3F

=0072					CURR_X_LSB = $72

=0073					CURR_X_MSB = $73

=0074					CURR_X_HSB = $74

=0075					CURR_Y_LSB = $75

=0076					CURR_Y_MSB = $76

=0077					CURR_Y_HSB = $77

=0078					CURR_Z_LSB = $78

=0079					CURR_Z_MSB = $79

=007a					CURR_Z_HSB = $7A

=007b					ab7B = $7B ; slope

=007c					HORIZON_SLOPE_ab7C = $7C ; horizon slope?

=007d					SIGN_ab7D = $7D

=007f					ab7F = $7F

=0080					ab80 = $80

=0082					SCREEN_TOP_COL_ab82 = $82

=0083					SCREEN_BOT_COL_ab83 = $83

=0085					REGA = $85

=0086					REGX = $86

=0087					REGY = $87

=00c1					abBEC0_JOYSTICK = $C1

=00c7					VIC_SCREEN_BANK = $C7

=00ec					abEC = $EC

=00ed					abED = $ED

=00fa					abFA = $FA

=0002					SCREEN_POS_PTR = $02

=fffe					fFFFE = $FFFE

=ffff					fFFFF = $FFFF

=29dc					b29DC = $29dc

=140c					p140C = $140c

=0200					f0200 = $0200

=0088					SCREEN_VER_BOTTOM = $88

=0044					SCREEN_VER_HALF = $44

=00a0					SCREEN_HOR_RIGHT = $A0

=0050					SCREEN_HOR_HALF = $50


.0801	 78		sei			SEI

.0802	 b8		clv			CLV

.0803	 d8		cld			CLD

.0804	 a9 00		lda #$00	 LDA #$00

.0806	 8d 20 d0	sta $d020	 STA $D020

.0809	 a9 01		lda #$01	 LDA #$01 ; $00

.080b	 8d 21 d0	sta $d021	 STA $D021

.080e	 a9 0b		lda #$0b	 LDA #$0B ; $00

.0810	 8d 22 d0	sta $d022	 STA $D022

.0813	 a9 0c		lda #$0c	 LDA #$0C ; $00

.0815	 8d 23 d0	sta $d023	 STA $D023

.0818	 a9 00		lda #$00	  LDA #$00 ; $01 ; colour 11 

.081a	 a2 00		ldx #$00	 LDX #<$D800

.081c	 a0 d8		ldy #$d8	 LDY #>$D800

.081e	 86 02		stx $02		 STX SCREEN_POS_LO+0

.0820	 84 03		sty $03		 STY SCREEN_POS_LO+1

.0822	 a2 03		ldx #$03	 LDX #>1000 

.0824	 a0 e8		ldy #$e8	 LDY #<1000

.0826	 20 9f 14	jsr $149f	 JSR MEMSET

.0829	 a9 bc		lda #$bc	 LDA #$BC ;$65 ; colour 01 (0000????) and colour 10 (????0000) - bank 1

.082b	 a2 00		ldx #$00	 LDX #<(SCREEN_COLOUR)

.082d	 a0 5c		ldy #$5c	 LDY #>(SCREEN_COLOUR)

.082f	 86 02		stx $02		 STX SCREEN_POS_LO+0

.0831	 84 03		sty $03		 STY SCREEN_POS_LO+1

.0833	 a2 03		ldx #$03	 LDX #>1000 

.0835	 a0 e8		ldy #$e8	 LDY #<1000

.0837	 20 9f 14	jsr $149f	 JSR MEMSET

.083a	 a9 35		lda #$35		LDA #$35

.083c	 85 01		sta $01			STA $1

.083e	 a9 70		lda #$70		LDA #$70

.0840	 8d 18 d0	sta $d018		STA $D018

.0843	 a9 3b		lda #$3b		LDA #$3B

.0845	 8d 11 d0	sta $d011		STA $D011

.0848	 a9 18		lda #$18		LDA #$18

.084a	 8d 16 d0	sta $d016		STA $D016

.084d	 a9 d4		lda #$d4		LDA #<IRQ1

.084f	 8d fe ff	sta $fffe		STA $FFFE

.0852	 a9 14		lda #$14		LDA #>IRQ1

.0854	 8d ff ff	sta $ffff		STA $FFFF

.0857	 a2 02		ldx #$02	 ldx #2

.0859	 bd d3 08	lda $08d3,x	zp_loop lda zp,x

.085c	 95 00		sta $00,x			sta 0,x

.085e	 e8		inx				inx

.085f	 d0 f8		bne $0859			 bne zp_loop

.0861	 a9 7f		lda #$7f	 LDA #$7F

.0863	 8d 0d dc	sta $dc0d	 STA $DC0D  ; disable timer interrupts which can be generated by the two CIA chips

.0866	 8d 0d dd	sta $dd0d	 STA $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

.0869	 ad 0d dc	lda $dc0d	 LDA $DC0D  ; by reading this two registers we negate any pending CIA irqs.

.086c	 ad 0d dd	lda $dd0d	 LDA $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

.086f	 a9 01		lda #$01	  LDA #$01   ; this is how to tell the VICII to generate a raster interrupt

.0871	 8d 1a d0	sta $d01a	 STA $D01A

.0874	 a9 02		lda #$02	 LDA #2 ; SCRNBANK

.0876	 8d 00 dd	sta $dd00	 STA $DD00 ; bank

.0879	 a9 ba		lda #$ba		LDA #$BA

.087b	 8d 12 d0	sta $d012		STA $D012

.087e	 a9 01		lda #$01		LDA #$01

.0880	 8d 19 d0	sta $d019		STA $D019

.0883	 58		cli			CLI

.0884					main_loop
.0884	 20 48 13	jsr $1348	        JSR GET_ROT

.0887	 20 a3 15	jsr $15a3	        JSR DRAW_SCREEN

.088a	 20 40 13	jsr $1340	        JSR READ_JOYSTICK_KEYBOARD

.088d	 20 78 17	jsr $1778	        JSR MOVMENT

.0890	 a6 73		ldx $73			LDX CURR_X_MSB

.0892	 a5 74		lda $74			LDA CURR_X_HSB

.0894	 a0 00		ldy #$00		LDY	#0

.0896	 a5 72		lda $72			LDA CURR_X_LSB

.0898	 a2 20		ldx #$20		LDX #32

.089a	 a0 00		ldy #$00		LDY	#0

.089c	 a6 76		ldx $76			LDX CURR_Y_MSB

.089e	 a5 77		lda $77			LDA CURR_Y_HSB

.08a0	 a0 06		ldy #$06		LDY	#6

.08a2	 a5 75		lda $75			LDA CURR_Y_LSB

.08a4	 a2 20		ldx #$20		LDX #32

.08a6	 a0 06		ldy #$06		LDY	#6

.08a8	 a6 79		ldx $79			LDX CURR_Z_MSB

.08aa	 a5 7a		lda $7a			LDA CURR_Z_HSB

.08ac	 a0 0c		ldy #$0c		LDY	#12

.08ae	 a5 78		lda $78			LDA CURR_Z_LSB

.08b0	 a2 20		ldx #$20		LDX #32

.08b2	 a0 0c		ldy #$0c		LDY	#12

.08b4	 ad 74 17	lda $1774		LDA temp1

.08b7	 a2 00		ldx #$00		LDX #0

.08b9	 a0 18		ldy #$18		LDY	#24

.08bb	 ad 75 17	lda $1775		LDA temp2

.08be	 a2 10		ldx #$10		LDX #16

.08c0	 a0 18		ldy #$18		LDY	#24

.08c2	 ad 76 17	lda $1776		LDA temp3

.08c5	 a2 00		ldx #$00		LDX #0

.08c7	 a0 1e		ldy #$1e		LDY	#30

.08c9	 ad 77 17	lda $1777		LDA temp4

.08cc	 a2 10		ldx #$10		LDX #16

.08ce	 a0 1e		ldy #$1e		LDY	#30

.08d0	 4c 84 08	jmp $0884	        JMP MAIN_LOOP

.08d3					zp

>08d3	 2f 35 81 51 7b ad 01 00  	 .byte $2f, $35, $81, $51, $7b, $ad, $01, $00

>08db	 00 81 37 40 ea 55 a0 40  	 .byte $00, $81, $37, $40, $ea, $55, $a0, $40

>08e3	 a7 54 00 00 00 00 5d 10  	 .byte $a7, $54, $00, $00, $00, $00, $5d, $10

>08eb	 00 00 00 34 30 88 28 81  	 .byte $00, $00, $00, $34, $30, $88, $28, $81

>08f3	 0a 18 4d f9 7e 40 76 84  	 .byte $0a, $18, $4d, $f9, $7e, $40, $76, $84

>08fb	 fe ff 35 02 3c df 2e e5  	 .byte $fe, $ff, $35, $02, $3c, $df, $2e, $e5

>0903	 00 00 2e e5 b2 19 4a f9  	 .byte $00, $00, $2e, $e5, $b2, $19, $4a, $f9

>090b	 e5 fd 5d f8 dd fd 73 f8  	 .byte $e5, $fd, $5d, $f8, $dd, $fd, $73, $f8

>0913	 71 f8 1e e5 dd fc 37 f9  	 .byte $71, $f8, $1e, $e5, $dd, $fc, $37, $f9

>091b	 e5 fd bb f0 c4 fc 4a f9  	 .byte $e5, $fd, $bb, $f0, $c4, $fc, $4a, $f9

>0923	 5f f9 00 49 03 58 47 49  	 .byte $5f, $f9, $00, $49, $03, $58, $47, $49

>092b	 b0 49 e5 59 6a 51 5f 49  	 .byte $b0, $49, $e5, $59, $6a, $51, $5f, $49

>0933	 84 fc 51 f9 76 fc 80 06  	 .byte $84, $fc, $51, $f9, $76, $fc, $80, $06

>093b	 00 05 3a 73 3b 71 80 00  	 .byte $00, $05, $3a, $73, $3b, $71, $80, $00

>0943	 1b 20 7d 71 0c 2c 0e 00  	 .byte $1b, $20, $7d, $71, $0c, $2c, $0e, $00

>094b	 49 8c 0d 40 36 00 00 00  	 .byte $49, $8c, $0d, $40, $36, $00, $00, $00

>0953	 0f 01 55 aa 00 0c 00 0d  	 .byte $0f, $01, $55, $aa, $00, $0c, $00, $0d

>095b	 1b 1b 20 20 38 04 50 42  	 .byte $1b, $1b, $20, $20, $38, $04, $50, $42

>0963	 40 19 3c 18 07 19 16 18  	 .byte $40, $19, $3c, $18, $07, $19, $16, $18

>096b	 0b a8 de 8d fd 44 fd 00  	 .byte $0b, $a8, $de, $8d, $fd, $44, $fd, $00

>0973	 74 8f 18 01 06 05 0b a9  	 .byte $74, $8f, $18, $01, $06, $05, $0b, $a9

>097b	 00 01 40 18 10 49 00 3f  	 .byte $00, $01, $40, $18, $10, $49, $00, $3f

>0983	 0f 00 08 00 3f 35 06 dc  	 .byte $0f, $00, $08, $00, $3f, $35, $06, $dc

>098b	 04 02 03 f6 03 00 87 df  	 .byte $04, $02, $03, $f6, $03, $00, $87, $df

>0993	 af 80 01 06 05 0b 00 78  	 .byte $af, $80, $01, $06, $05, $0b, $00, $78

>099b	 00 00 00 00 0e 00 06 70  	 .byte $00, $00, $00, $00, $0e, $00, $06, $70

>09a3	 08 00 08 40 07 83 fe fb  	 .byte $08, $00, $08, $40, $07, $83, $fe, $fb

>09ab	 93 ee 40 b6 e3 fa 02 00  	 .byte $93, $ee, $40, $b6, $e3, $fa, $02, $00

>09b3	 00 7d 14 59 2a 02 00 03  	 .byte $00, $7d, $14, $59, $2a, $02, $00, $03

>09bb	 70 04 ff 00 00 84 ff 00  	 .byte $70, $04, $ff, $00, $00, $84, $ff, $00

>09c3	 00 00 0c f9 00 00 7e 09  	 .byte $00, $00, $0c, $f9, $00, $00, $7e, $09

>09cb	 00 00 00 00 a0 60 21 7d  	 .byte $00, $00, $00, $00, $a0, $60, $21, $7d


.0a00					log_table

>0a00	 00 01 03 04 06 07 09 0a  	  .BYTE $00,$01,$03,$04,$06,$07,$09,$0A

>0a08	 0b 0d 0e 10 11 12 14 15  	  .BYTE $0B,$0D,$0E,$10,$11,$12,$14,$15

>0a10	 16 18 19 1a 1c 1d 1e 20  	  .BYTE $16,$18,$19,$1A,$1C,$1D,$1E,$20

>0a18	 21 22 24 25 26 28 29 2a  	  .BYTE $21,$22,$24,$25,$26,$28,$29,$2A

>0a20	 2c 2d 2e 2f 31 32 33 34  	  .BYTE $2C,$2D,$2E,$2F,$31,$32,$33,$34

>0a28	 36 37 38 39 3b 3c 3d 3e  	  .BYTE $36,$37,$38,$39,$3B,$3C,$3D,$3E

>0a30	 3f 41 42 43 44 45 47 48  	  .BYTE $3F,$41,$42,$43,$44,$45,$47,$48

>0a38	 49 4a 4b 4d 4e 4f 50 51  	  .BYTE $49,$4A,$4B,$4D,$4E,$4F,$50,$51

>0a40	 52 54 55 56 57 58 59 5a  	  .BYTE $52,$54,$55,$56,$57,$58,$59,$5A

>0a48	 5c 5d 5e 5f 60 61 62 63  	  .BYTE $5C,$5D,$5E,$5F,$60,$61,$62,$63

>0a50	 64 66 67 68 69 6a 6b 6c  	  .BYTE $64,$66,$67,$68,$69,$6A,$6B,$6C

>0a58	 6d 6e 6f 70 71 72 74 75  	  .BYTE $6D,$6E,$6F,$70,$71,$72,$74,$75

>0a60	 76 77 78 79 7a 7b 7c 7d  	  .BYTE $76,$77,$78,$79,$7A,$7B,$7C,$7D

>0a68	 7e 7f 80 81 82 83 84 85  	  .BYTE $7E,$7F,$80,$81,$82,$83,$84,$85

>0a70	 86 87 88 89 8a 8b 8c 8d  	  .BYTE $86,$87,$88,$89,$8A,$8B,$8C,$8D

>0a78	 8e 8f 90 91 92 93 94 95  	  .BYTE $8E,$8F,$90,$91,$92,$93,$94,$95

>0a80	 96 97 98 99 9a 9b 9b 9c  	  .BYTE $96,$97,$98,$99,$9A,$9B,$9B,$9C

>0a88	 9d 9e 9f a0 a1 a2 a3 a4  	  .BYTE $9D,$9E,$9F,$A0,$A1,$A2,$A3,$A4

>0a90	 a5 a6 a7 a8 a9 a9 aa ab  	  .BYTE $A5,$A6,$A7,$A8,$A9,$A9,$AA,$AB

>0a98	 ac ad ae af b0 b1 b2 b2  	  .BYTE $AC,$AD,$AE,$AF,$B0,$B1,$B2,$B2

>0aa0	 b3 b4 b5 b6 b7 b8 b9 b9  	  .BYTE $B3,$B4,$B5,$B6,$B7,$B8,$B9,$B9

>0aa8	 ba bb bc bd be bf c0 c0  	  .BYTE $BA,$BB,$BC,$BD,$BE,$BF,$C0,$C0

>0ab0	 c1 c2 c3 c4 c5 c6 c6 c7  	  .BYTE $C1,$C2,$C3,$C4,$C5,$C6,$C6,$C7

>0ab8	 c8 c9 ca cb cb cc cd ce  	  .BYTE $C8,$C9,$CA,$CB,$CB,$CC,$CD,$CE

>0ac0	 cf d0 d0 d1 d2 d3 d4 d4  	  .BYTE $CF,$D0,$D0,$D1,$D2,$D3,$D4,$D4

>0ac8	 d5 d6 d7 d8 d8 d9 da db  	  .BYTE $D5,$D6,$D7,$D8,$D8,$D9,$DA,$DB

>0ad0	 dc dc dd de df e0 e0 e1  	  .BYTE $DC,$DC,$DD,$DE,$DF,$E0,$E0,$E1

>0ad8	 e2 e3 e4 e4 e5 e6 e7 e7  	  .BYTE $E2,$E3,$E4,$E4,$E5,$E6,$E7,$E7

>0ae0	 e8 e9 ea ea eb ec ed ee  	  .BYTE $E8,$E9,$EA,$EA,$EB,$EC,$ED,$EE

>0ae8	 ee ef f0 f1 f1 f2 f3 f4  	  .BYTE $EE,$EF,$F0,$F1,$F1,$F2,$F3,$F4

>0af0	 f4 f5 f6 f7 f7 f8 f9 f9  	  .BYTE $F4,$F5,$F6,$F7,$F7,$F8,$F9,$F9

>0af8	 fa fb fc fc fd fe ff ff  	  .BYTE $FA,$FB,$FC,$FC,$FD,$FE,$FF,$FF


.0b00					exp_table

>0b00	 00 01 01 02 03 03 04 05  	  .BYTE $00,$01,$01,$02,$03,$03,$04,$05

>0b08	 06 06 07 08 08 09 0a 0b  	  .BYTE $06,$06,$07,$08,$08,$09,$0A,$0B

>0b10	 0b 0c 0d 0e 0e 0f 10 10  	  .BYTE $0B,$0C,$0D,$0E,$0E,$0F,$10,$10

>0b18	 11 12 13 13 14 15 16 16  	  .BYTE $11,$12,$13,$13,$14,$15,$16,$16

>0b20	 17 18 19 19 1a 1b 1c 1d  	  .BYTE $17,$18,$19,$19,$1A,$1B,$1C,$1D

>0b28	 1d 1e 1f 20 20 21 22 23  	  .BYTE $1D,$1E,$1F,$20,$20,$21,$22,$23

>0b30	 24 24 25 26 27 28 28 29  	  .BYTE $24,$24,$25,$26,$27,$28,$28,$29

>0b38	 2a 2b 2c 2c 2d 2e 2f 30  	  .BYTE $2A,$2B,$2C,$2C,$2D,$2E,$2F,$30

>0b40	 30 31 32 33 34 35 35 36  	  .BYTE $30,$31,$32,$33,$34,$35,$35,$36

>0b48	 37 38 39 3a 3a 3b 3c 3d  	  .BYTE $37,$38,$39,$3A,$3A,$3B,$3C,$3D

>0b50	 3e 3f 40 41 41 42 43 44  	  .BYTE $3E,$3F,$40,$41,$41,$42,$43,$44

>0b58	 45 46 47 48 48 49 4a 4b  	  .BYTE $45,$46,$47,$48,$48,$49,$4A,$4B

>0b60	 4c 4d 4e 4f 50 51 51 52  	  .BYTE $4C,$4D,$4E,$4F,$50,$51,$51,$52

>0b68	 53 54 55 56 57 58 59 5a  	  .BYTE $53,$54,$55,$56,$57,$58,$59,$5A

>0b70	 5b 5c 5d 5e 5e 5f 60 61  	  .BYTE $5B,$5C,$5D,$5E,$5E,$5F,$60,$61

>0b78	 62 63 64 65 66 67 68 69  	  .BYTE $62,$63,$64,$65,$66,$67,$68,$69

>0b80	 6a 6b 6c 6d 6e 6f 70 71  	  .BYTE $6A,$6B,$6C,$6D,$6E,$6F,$70,$71

>0b88	 72 73 74 75 76 77 78 79  	  .BYTE $72,$73,$74,$75,$76,$77,$78,$79

>0b90	 7a 7b 7c 7d 7e 7f 80 81  	  .BYTE $7A,$7B,$7C,$7D,$7E,$7F,$80,$81

>0b98	 82 83 84 85 87 88 89 8a  	  .BYTE $82,$83,$84,$85,$87,$88,$89,$8A

>0ba0	 8b 8c 8d 8e 8f 90 91 92  	  .BYTE $8B,$8C,$8D,$8E,$8F,$90,$91,$92

>0ba8	 93 95 96 97 98 99 9a 9b  	  .BYTE $93,$95,$96,$97,$98,$99,$9A,$9B

>0bb0	 9c 9d 9f a0 a1 a2 a3 a4  	  .BYTE $9C,$9D,$9F,$A0,$A1,$A2,$A3,$A4

>0bb8	 a5 a6 a8 a9 aa ab ac ad  	  .BYTE $A5,$A6,$A8,$A9,$AA,$AB,$AC,$AD

>0bc0	 af b0 b1 b2 b3 b4 b6 b7  	  .BYTE $AF,$B0,$B1,$B2,$B3,$B4,$B6,$B7

>0bc8	 b8 b9 ba bc bd be bf c0  	  .BYTE $B8,$B9,$BA,$BC,$BD,$BE,$BF,$C0

>0bd0	 c2 c3 c4 c5 c6 c8 c9 ca  	  .BYTE $C2,$C3,$C4,$C5,$C6,$C8,$C9,$CA

>0bd8	 cb cd ce cf d0 d2 d3 d4  	  .BYTE $CB,$CD,$CE,$CF,$D0,$D2,$D3,$D4

>0be0	 d6 d7 d8 d9 db dc dd de  	  .BYTE $D6,$D7,$D8,$D9,$DB,$DC,$DD,$DE

>0be8	 e0 e1 e2 e4 e5 e6 e8 e9  	  .BYTE $E0,$E1,$E2,$E4,$E5,$E6,$E8,$E9

>0bf0	 ea ec ed ee f0 f1 f2 f4  	  .BYTE $EA,$EC,$ED,$EE,$F0,$F1,$F2,$F4

>0bf8	 f5 f6 f8 f9 fa fc fd ff  	  .BYTE $F5,$F6,$F8,$F9,$FA,$FC,$FD,$FF


.0c00					sin_lsb

>0c00	 92 2e f7 60 c4 14 47 79  	  .BYTE $92,$2E,$F7,$60,$C4,$14,$47,$79

>0c08	 ab dd 08 21 3a 53 6c 85  	  .BYTE $AB,$DD,$08,$21,$3A,$53,$6C,$85

>0c10	 9e b7 d0 e9 01 0d 1a 26  	  .BYTE $9E,$B7,$D0,$E9,$01,$0D,$1A,$26

>0c18	 33 3f 4c 58 64 71 7d 89  	  .BYTE $33,$3F,$4C,$58,$64,$71,$7D,$89

>0c20	 96 a2 ae bb c7 d3 df ec  	  .BYTE $96,$A2,$AE,$BB,$C7,$D3,$DF,$EC

>0c28	 f8 02 08 0e 14 1a 20 26  	  .BYTE $F8,$02,$08,$0E,$14,$1A,$20,$26

>0c30	 2c 32 38 3e 44 4a 50 56  	  .BYTE $2C,$32,$38,$3E,$44,$4A,$50,$56

>0c38	 5c 62 68 6e 73 79 7f 85  	  .BYTE $5C,$62,$68,$6E,$73,$79,$7F,$85

>0c40	 8b 91 96 9c a2 a8 ad b3  	  .BYTE $8B,$91,$96,$9C,$A2,$A8,$AD,$B3

>0c48	 b9 be c4 ca cf d5 da e0  	  .BYTE $B9,$BE,$C4,$CA,$CF,$D5,$DA,$E0

>0c50	 e5 eb f1 f6 fb 00 03 06  	  .BYTE $E5,$EB,$F1,$F6,$FB,$00,$03,$06

>0c58	 09 0b 0e 11 13 16 19 1b  	  .BYTE $09,$0B,$0E,$11,$13,$16,$19,$1B

>0c60	 1e 20 23 26 28 2b 2d 30  	  .BYTE $1E,$20,$23,$26,$28,$2B,$2D,$30

>0c68	 32 35 37 3a 3c 3f 41 44  	  .BYTE $32,$35,$37,$3A,$3C,$3F,$41,$44

>0c70	 46 48 4b 4d 50 52 54 57  	  .BYTE $46,$48,$4B,$4D,$50,$52,$54,$57

>0c78	 59 5b 5e 60 62 64 67 69  	  .BYTE $59,$5B,$5E,$60,$62,$64,$67,$69

>0c80	 6b 6d 70 72 74 76 78 7a  	  .BYTE $6B,$6D,$70,$72,$74,$76,$78,$7A

>0c88	 7c 7f 81 83 85 87 89 8b  	  .BYTE $7C,$7F,$81,$83,$85,$87,$89,$8B

>0c90	 8d 8f 91 93 95 97 98 9a  	  .BYTE $8D,$8F,$91,$93,$95,$97,$98,$9A

>0c98	 9c 9e a0 a2 a4 a5 a7 a9  	  .BYTE $9C,$9E,$A0,$A2,$A4,$A5,$A7,$A9

>0ca0	 ab ac ae b0 b1 b3 b5 b6  	  .BYTE $AB,$AC,$AE,$B0,$B1,$B3,$B5,$B6

>0ca8	 b8 ba bb bd be c0 c1 c3  	  .BYTE $B8,$BA,$BB,$BD,$BE,$C0,$C1,$C3

>0cb0	 c4 c6 c7 c9 ca cb cd ce  	  .BYTE $C4,$C6,$C7,$C9,$CA,$CB,$CD,$CE

>0cb8	 d0 d1 d2 d3 d5 d6 d7 d8  	  .BYTE $D0,$D1,$D2,$D3,$D5,$D6,$D7,$D8

>0cc0	 da db dc dd de df e0 e2  	  .BYTE $DA,$DB,$DC,$DD,$DE,$DF,$E0,$E2

>0cc8	 e3 e4 e5 e6 e7 e8 e9 e9  	  .BYTE $E3,$E4,$E5,$E6,$E7,$E8,$E9,$E9

>0cd0	 ea eb ec ed ee ef ef f0  	  .BYTE $EA,$EB,$EC,$ED,$EE,$EF,$EF,$F0

>0cd8	 f1 f2 f3 f3 f4 f5 f5 f6  	  .BYTE $F1,$F2,$F3,$F3,$F4,$F5,$F5,$F6

>0ce0	 f6 f7 f8 f8 f9 f9 fa fa  	  .BYTE $F6,$F7,$F8,$F8,$F9,$F9,$FA,$FA

>0ce8	 fb fb fc fc fc fd fd fd  	  .BYTE $FB,$FB,$FC,$FC,$FC,$FD,$FD,$FD

>0cf0	 fe fe fe fe ff ff ff ff  	  .BYTE $FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF

>0cf8	 ff 00 00 00 00 00 00 00  	  .BYTE $FF,$00,$00,$00,$00,$00,$00,$00


.0d00					sin_msb

>0d00	 dc e4 e4 e8 e8 ec ec ec  	  .BYTE $DC,$E4,$E4,$E8,$E8,$EC,$EC,$EC

>0d08	 ec ec f0 f0 f0 f0 f0 f0  	  .BYTE $EC,$EC,$F0,$F0,$F0,$F0,$F0,$F0

>0d10	 f0 f0 f0 f0 f4 f4 f4 f4  	  .BYTE $F0,$F0,$F0,$F0,$F4,$F4,$F4,$F4

>0d18	 f4 f4 f4 f4 f4 f4 f4 f4  	  .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4

>0d20	 f4 f4 f4 f4 f4 f4 f4 f4  	  .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4

>0d28	 f4 f8 f8 f8 f8 f8 f8 f8  	  .BYTE $F4,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>0d30	 f8 f8 f8 f8 f8 f8 f8 f8  	  .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>0d38	 f8 f8 f8 f8 f8 f8 f8 f8  	  .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>0d40	 f8 f8 f8 f8 f8 f8 f8 f8  	  .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>0d48	 f8 f8 f8 f8 f8 f8 f8 f8  	  .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>0d50	 f8 f8 f8 f8 f8 fc fc fc  	  .BYTE $F8,$F8,$F8,$F8,$F8,$FC,$FC,$FC

>0d58	 fc fc fc fc fc fc fc fc  	  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>0d60	 fc fc fc fc fc fc fc fc  	  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>0d68	 fc fc fc fc fc fc fc fc  	  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>0d70	 fc fc fc fc fc fc fc fc  	  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>0d78	 fc fc fc fc fc fc fc fc  	  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>0d80	 fc fc fc fc fc fc fc fc  	  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>0d88	 fc fc fc fc fc fc fc fc  	  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>0d90	 fc fc fc fc fc fc fc fc  	  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>0d98	 fc fc fc fc fc fc fc fc  	  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>0da0	 fc fc fc fc fc fc fc fc  	  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>0da8	 fc fc fc fc fc fc fc fc  	  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>0db0	 fc fc fc fc fc fc fc fc  	  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>0db8	 fc fc fc fc fc fc fc fc  	  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>0dc0	 fc fc fc fc fc fc fc fc  	  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>0dc8	 fc fc fc fc fc fc fc fc  	  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>0dd0	 fc fc fc fc fc fc fc fc  	  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>0dd8	 fc fc fc fc fc fc fc fc  	  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>0de0	 fc fc fc fc fc fc fc fc  	  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>0de8	 fc fc fc fc fc fc fc fc  	  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>0df0	 fc fc fc fc fc fc fc fc  	  .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>0df8	 fc 00 00 00 00 00 00 00  	  .BYTE $FC,$00,$00,$00,$00,$00,$00,$00


.0e00					horizon_columns_hi

>0e00	 aa aa aa aa aa aa aa aa  	  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA 

>0e08	 aa aa aa aa aa aa aa aa  	  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

>0e10	 aa aa aa aa aa aa aa aa  	  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

>0e18	 aa aa aa aa aa aa aa aa  	  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

>0e20	 aa aa aa aa aa aa aa aa  	  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

>0e28	 aa aa aa aa aa aa aa aa  	  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

>0e30	 aa aa aa aa aa aa aa aa  	  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

>0e38	 aa aa aa aa aa aa aa aa  	  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

>0e40	 aa aa aa aa aa aa aa aa  	  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

>0e48	 aa aa aa aa aa aa aa aa  	  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

>0e50	 aa aa aa aa aa aa aa aa  	  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

>0e58	 aa aa aa aa aa aa aa aa  	  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

>0e60	 aa aa aa aa aa aa aa aa  	  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

>0e68	 aa aa aa aa aa aa aa aa  	  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

>0e70	 aa aa aa aa aa aa aa aa  	  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA


.0e78					ver_pos_hi

>0e78	 00 00 00 00 00 00 00 00  	  .BYTE $00,$00,$00,$00,$00,$00,$00,$00

>0e80	 01 01 01 01 01 01 01 01  	  .BYTE $01,$01,$01,$01,$01,$01,$01,$01

>0e88	 02 02 02 02 02 02 02 02  	  .BYTE $02,$02,$02,$02,$02,$02,$02,$02


.0e90					horizon_columns_lo

>0e90	 03 03 03 03 03 03 03 03  	  .BYTE $03,$03,$03,$03,$03,$03,$03,$03

>0e98	 05 05 05 05 05 05 05 05  	  .BYTE $05,$05,$05,$05,$05,$05,$05,$05

>0ea0	 06 06 06 06 06 06 06 06  	  .BYTE $06,$06,$06,$06,$06,$06,$06,$06

>0ea8	 07 07 07 07 07 07 07 07  	  .BYTE $07,$07,$07,$07,$07,$07,$07,$07

>0eb0	 08 08 08 08 08 08 08 08  	  .BYTE $08,$08,$08,$08,$08,$08,$08,$08

>0eb8	 0a 0a 0a 0a 0a 0a 0a 0a  	  .BYTE $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A

>0ec0	 0b 0b 0b 0b 0b 0b 0b 0b  	  .BYTE $0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B

>0ec8	 0c 0c 0c 0c 0c 0c 0c 0c  	  .BYTE $0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C

>0ed0	 0d 0d 0d 0d 0d 0d 0d 0d  	  .BYTE $0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D

>0ed8	 0f 0f 0f 0f 0f 0f 0f 0f  	  .BYTE $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F

>0ee0	 10 10 10 10 10 10 10 10  	  .BYTE $10,$10,$10,$10,$10,$10,$10,$10

>0ee8	 11 11 11 11 11 11 11 11  	  .BYTE $11,$11,$11,$11,$11,$11,$11,$11

>0ef0	 12 12 12 12 12 12 12 12  	  .BYTE $12,$12,$12,$12,$12,$12,$12,$12

>0ef8	 14 14 14 14 14 14 14 14  	  .BYTE $14,$14,$14,$14,$14,$14,$14,$14

>0f00	 aa aa aa aa aa aa aa aa  	  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA


.0f08					ver_pos_lo

>0f08	 00 01 02 03 04 05 06 07  	  .BYTE $00,$01,$02,$03,$04,$05,$06,$07

>0f10	 40 41 42 43 44 45 46 47  	  .BYTE $40,$41,$42,$43,$44,$45,$46,$47

>0f18	 80 81 82 83 84 85 86 87  	  .BYTE $80,$81,$82,$83,$84,$85,$86,$87

>0f20	 c0 c1 c2 c3 c4 c5 c6 c7  	  .BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>0f28	 00 01 02 03 04 05 06 07  	  .BYTE $00,$01,$02,$03,$04,$05,$06,$07

>0f30	 40 41 42 43 44 45 46 47  	  .BYTE $40,$41,$42,$43,$44,$45,$46,$47

>0f38	 80 81 82 83 84 85 86 87  	  .BYTE $80,$81,$82,$83,$84,$85,$86,$87

>0f40	 c0 c1 c2 c3 c4 c5 c6 c7  	  .BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>0f48	 00 01 02 03 04 05 06 07  	  .BYTE $00,$01,$02,$03,$04,$05,$06,$07

>0f50	 40 41 42 43 44 45 46 47  	  .BYTE $40,$41,$42,$43,$44,$45,$46,$47

>0f58	 80 81 82 83 84 85 86 87  	  .BYTE $80,$81,$82,$83,$84,$85,$86,$87

>0f60	 c0 c1 c2 c3 c4 c5 c6 c7  	  .BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>0f68	 00 01 02 03 04 05 06 07  	  .BYTE $00,$01,$02,$03,$04,$05,$06,$07

>0f70	 40 41 42 43 44 45 46 47  	  .BYTE $40,$41,$42,$43,$44,$45,$46,$47

>0f78	 80 81 82 83 84 85 86 87  	  .BYTE $80,$81,$82,$83,$84,$85,$86,$87

>0f80	 c0 c1 c2 c3 c4 c5 c6 c7  	  .BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>0f88	 00 01 02 03 04 05 06 07  	  .BYTE $00,$01,$02,$03,$04,$05,$06,$07

>0f90	 aa aa aa aa aa aa aa aa  	  .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA


.0f98	 85 0f		sta $0f		FP_DIVIDE	STA		FP_DIVIDE_HI	; inputs = X-(LO) + Y-(HI) + A (HI) + FP_MULTILPLY_LO - outputs = AY

.0f9a	 b9 00 0a	lda $0a00,y				LDA 	LOG_TABLE,Y

.0f9d	 a4 0e		ldy $0e					LDY 	FP_DIVIDE_LO

.0f9f	 38		sec					SEC 

.0fa0	 f9 00 0a	sbc $0a00,y				SBC 	LOG_TABLE,Y

.0fa3	 a8		tay					TAY

.0fa4	 8a		txa					TXA

.0fa5	 be 00 0b	ldx $0b00,y				LDX 	EXP_TABLE,Y

.0fa8	 09 02		ora #$02				ORA 	#$02

.0faa	 b0 03		bcs $0faf				BCS 	_FP_DIV_CNT

.0fac	 e9 03		sbc #$03						SBC 	#$03	; subtract 4?

.0fae	 38		sec							SEC 

.0faf	 e5 0f		sbc $0f		_FP_DIV_CNT SBC 	FP_DIVIDE_HI

.0fb1	 29 fd		and #$fd				AND 	#$FD

.0fb3	 60		rts					RTS

.0fb4	 85 0f		sta $0f		FP_MULTIPLY	STA		FP_MULTIPLY_HI	; inputs = X-(LO) + Y-(HI) + A (HI) + FP_MULTILPLY_LO - outputs = AY

.0fb6	 bd 00 0a	lda $0a00,x				LDA 	LOG_TABLE,X		

.0fb9	 a6 0e		ldx $0e					LDX 	FP_MULTIPLY_LO

.0fbb	 18		clc					CLC 

.0fbc	 7d 00 0a	adc $0a00,x				ADC 	LOG_TABLE,X

.0fbf	 aa		tax					TAX 

.0fc0	 98		tya					TYA 

.0fc1	 bc 00 0b	ldy $0b00,x				LDY 	EXP_TABLE,X

.0fc4	 90 03		bcc $0fc9				BCC 	_FP_MUL_CNT

.0fc6	 69 03		adc #$03						ADC 	#$03	; add 4?

.0fc8	 18		clc							CLC 

.0fc9	 65 0f		adc $0f		_FP_MUL_CNT	ADC 	FP_MULTIPLY_HI

.0fcb	 29 fd		and #$fd				AND 	#$FD

.0fcd	 60		rts					RTS 

.0fce	 bd 00 0a	lda $0a00,x	FPMUL   LDA LOG_TABLE,X	; fpMul - ; Input:  [08] = fp multiplier ;         XY   = fp multiplicand ; Output: [08] and XY = result   

.0fd1	 a6 08		ldx $08		        LDX ab08

.0fd3	 18		clc		        CLC 

.0fd4	 7d 00 0a	adc $0a00,x	ab8300  ADC LOG_TABLE,X

.0fd7	 aa		tax		        TAX 

.0fd8	 98		tya		        TYA 

.0fd9	 90 03		bcc $0fde	        BCC b830A

.0fdb	 69 03		adc #$03				ADC #$03

.0fdd	 18		clc					CLC 

.0fde	 65 09		adc $09		b830A	ADC ab09

.0fe0	 70 0c		bvs $0fee	        BVS MATH_LIMIT

.0fe2	 29 fd		and #$fd	        AND #$FD

.0fe4	 85 09		sta $09		        STA ab09

.0fe6	 a8		tay		        TAY 

.0fe7	 bd 00 0b	lda $0b00,x	        LDA EXP_TABLE,X

.0fea	 aa		tax		        TAX 

.0feb	 85 08		sta $08		        STA ab08

.0fed	 60		rts		        RTS 

.0fee	 10 0c		bpl $0ffc	MATH_LIMIT	BPL b8328

.0ff0	 29 01		and #$01				AND #$01

.0ff2	 09 78		ora #$78				ORA #$78

.0ff4	 a8		tay					TAY 

.0ff5	 a2 00		ldx #$00				LDX #$00

.0ff7	 86 08		stx $08					STX ab08

.0ff9	 84 09		sty $09					STY ab09

.0ffb	 60		rts					RTS 

.0ffc	 29 01		and #$01	b8328		AND #$01

.0ffe	 09 84		ora #$84				ORA #$84

.1000	 a8		tay		b832C   	TAY 

.1001	 a2 00		ldx #$00				LDX #$00

.1003	 86 08		stx $08					STX ab08

.1005	 84 09		sty $09					STY ab09

.1007	 60		rts					RTS 

.1008	 84 06		sty $06		FPDIV 		STY		ab06	; fpDiv - Input:  [08] = fp divisor - XY   = fp dividend - Output: [08] and XY = result

.100a	 a4 08		ldy $08					LDY 	ab08

.100c	 b9 00 0a	lda $0a00,y				LDA 	LOG_TABLE,Y

.100f	 38		sec					SEC 

.1010	 fd 00 0a	sbc $0a00,x				SBC 	LOG_TABLE,X

.1013	 aa		tax					TAX 

.1014	 a5 09		lda $09					LDA 	ab09

.1016	 09 02		ora #$02				ORA	#$02

.1018	 b0 03		bcs $101d				BCS 	b8349

.101a	 e9 03		sbc #$03					SBC 	#$03

.101c	 38		sec						SEC 

.101d	 e5 06		sbc $06		b8349  		SBC 	ab06

.101f	 70 cd		bvs $0fee				BVS 	MATH_LIMIT

.1021	 29 fd		and #$fd				AND 	#$FD

.1023	 85 09		sta $09					STA 	ab09

.1025	 a8		tay					TAY

.1026	 bd 00 0b	lda $0b00,x				LDA 	EXP_TABLE,X

.1029	 aa		tax					TAX

.102a	 85 08		sta $08					STA 	ab08

.102c	 60		rts					RTS 

.102d	 a5 18		lda $18		FPADD_CONT	LDA ab18	 ; ($838B entry point)   

.102f	 4a		lsr					LSR 

.1030	 b0 15		bcs $1047				BCS b8373

.1032	 8a		txa					TXA 

.1033	 65 08		adc $08					ADC ab08

.1035	 6a		ror					ROR 

.1036	 c8		iny					INY 

.1037	 c8		iny					INY 

.1038	 c8		iny					INY 

.1039	 c8		iny					INY 

.103a	 aa		tax					TAX 

.103b	 85 08		sta $08					STA ab08

.103d	 84 09		sty $09					STY ab09

.103f	 60		rts					RTS 

.1040	 98		tya		b836C   TYA 

.1041	 0a		asl		        ASL 

.1042	 90 5c		bcc $10a0	        BCC b83CC

.1044	 4c ed 10	jmp $10ed	        JMP j8419

.1047	 8a		txa		b8373   TXA 

.1048	 e5 08		sbc $08		        SBC ab08

.104a	 f0 0b		beq $1057	        BEQ b8383

.104c	 b0 5b		bcs $10a9	        BCS b83D5

.104e	 a4 09		ldy $09		        LDY ab09

.1050	 49 ff		eor #$ff	        EOR #$FF

.1052	 69 01		adc #$01	        ADC #$01

.1054	 4c a9 10	jmp $10a9	        JMP b83D5

.1057	 98		tya		b8383   TYA 

.1058	 38		sec		        SEC 

.1059	 e9 24		sbc #$24	        SBC #$24

.105b	 70 9f		bvs $0ffc	        BVS b8328

.105d	 50 a1		bvc $1000	        BVC b832C

.105f	 98		tya		FP_ADD	TYA 

.1060	 38		sec		        SEC 

.1061	 e5 09		sbc $09		        SBC ab09

.1063	 70 db		bvs $1040	        BVS b836C

.1065	 85 18		sta $18		        STA ab18

.1067	 69 01		adc #$01	        ADC #$01

.1069	 70 d5		bvs $1040	        BVS b836C

.106b	 30 5c		bmi $10c9	        BMI b83F5

.106d	 4a		lsr		        LSR 

.106e	 4a		lsr		        LSR 

.106f	 f0 bc		beq $102d	        BEQ FPADD_CONT

.1071	 c9 09		cmp #$09	        CMP #$09

.1073	 b0 2b		bcs $10a0	        BCS b83CC

.1075	 49 0f		eor #$0f	        EOR #$0F

.1077	 8d 7f 10	sta $107f	        STA ab83AB

.107a	 a5 08		lda $08		        LDA ab08

.107c	 38		sec		        SEC 

.107d	 6a		ror		        ROR 

=107f					ab83AB   =*+$01

.107e	 d0 07		bne $1087	        BNE b83B3

.1080	 ea		nop		        NOP 

.1081	 ea		nop		        NOP 

.1082	 ea		nop		        NOP 

.1083	 ea		nop		        NOP 

.1084	 ea		nop		        NOP 

.1085	 ea		nop		        NOP 

.1086	 ea		nop		        NOP 

.1087	 4a		lsr		b83B3   LSR 

.1088	 4a		lsr		        LSR 

.1089	 4a		lsr		        LSR 

.108a	 4a		lsr		        LSR 

.108b	 4a		lsr		        LSR 

.108c	 4a		lsr		        LSR 

.108d	 4a		lsr		        LSR 

.108e	 85 06		sta $06		        STA ab06

.1090	 a5 18		lda $18		        LDA ab18

.1092	 4a		lsr		        LSR 

.1093	 8a		txa		        TXA 

.1094	 b0 0f		bcs $10a5	        BCS b83D1

.1096	 65 06		adc $06		b83C2   ADC ab06

.1098	 90 05		bcc $109f	        BCC b83CB

.109a	 4a		lsr		        LSR 

.109b	 c8		iny		        INY 

.109c	 c8		iny		        INY 

.109d	 c8		iny		        INY 

.109e	 c8		iny		        INY 

.109f	 aa		tax		b83CB   TAX 

.10a0	 86 08		stx $08		b83CC   STX ab08

.10a2	 84 09		sty $09		        STY ab09

.10a4	 60		rts		        RTS 

.10a5	 e5 06		sbc $06		b83D1   SBC ab06

.10a7	 b0 f6		bcs $109f	        BCS b83CB

.10a9	 84 06		sty $06		b83D5   STY ab06

.10ab	 a0 00		ldy #$00	        LDY #$00

.10ad	 0a		asl		b83D9   ASL 

.10ae	 88		dey		        DEY 

.10af	 90 fc		bcc $10ad	        BCC b83D9

.10b1	 aa		tax		        TAX 

.10b2	 98		tya		        TYA 

.10b3	 0a		asl		        ASL 

.10b4	 0a		asl		        ASL 

.10b5	 18		clc		        CLC 

.10b6	 65 06		adc $06		        ADC ab06

.10b8	 70 06		bvs $10c0	        BVS b83EC

.10ba	 a8		tay		        TAY 

.10bb	 86 08		stx $08		        STX ab08

.10bd	 84 09		sty $09		        STY ab09

.10bf	 60		rts		        RTS 

.10c0	 a2 d4		ldx #$d4	b83EC   LDX #<p8400

.10c2	 a0 10		ldy #$10	        LDY #>p8400

.10c4	 86 08		stx $08		        STX ab08

.10c6	 84 09		sty $09		f83F2   STY ab09

.10c8	 60		rts		        RTS 

.10c9	 c9 e0		cmp #$e0	b83F5   CMP #$E0

.10cb	 90 20		bcc $10ed	        BCC j8419

.10cd	 4a		lsr		        LSR 

.10ce	 4a		lsr		        LSR 

.10cf	 29 07		and #$07	        AND #$07

.10d1	 8d d8 10	sta $10d8	        STA ab8404

.10d4	 8a		txa		p8400   TXA 

.10d5	 38		sec		        SEC 

.10d6	 6a		ror		        ROR 

=10d8					ab8404   =*+$01

.10d7	 d0 00		bne $10d9	        BNE b8405

.10d9	 4a		lsr		b8405  	LSR 

.10da	 4a		lsr		        LSR 

.10db	 4a		lsr		        LSR 

.10dc	 4a		lsr		        LSR 

.10dd	 4a		lsr		        LSR 

.10de	 4a		lsr		        LSR 

.10df	 4a		lsr		        LSR 

.10e0	 85 06		sta $06		        STA ab06

.10e2	 a4 09		ldy $09		        LDY ab09

.10e4	 a5 18		lda $18		        LDA ab18

.10e6	 4a		lsr		        LSR 

.10e7	 a5 08		lda $08		        LDA ab08

.10e9	 90 ab		bcc $1096	        BCC b83C2

.10eb	 b0 b8		bcs $10a5	        BCS b83D1

.10ed	 a6 08		ldx $08		j8419  	LDX ab08

.10ef	 a4 09		ldy $09		        LDY ab09

.10f1	 60		rts		        RTS 

.10f2					fpto8bit
.10f2	 98		tya			TYA 

.10f3	 30 25		bmi $111a		BMI	b849F

.10f5	 4a		lsr			LSR 

.10f6					ab847b
.10f6	 4a		lsr			LSR 

.10f7	 c9 07		cmp #$07		CMP 	#$07

.10f9	 b0 26		bcs $1121		BCS 	b84A6

.10fb	 8d 02 11	sta $1102		STA 	ab8487

.10fe					ab8483
.10fe	 8a		txa			TXA 

.10ff	 38		sec			SEC 

.1100	 6a		ror			ROR 

=1102					ab8487   =*+$01

.1101	 d0 06		bne $1109		BNE	b848E

.1103	 4a		lsr			LSR 

.1104	 4a		lsr			LSR 

.1105	 4a		lsr			LSR 

.1106	 4a		lsr			LSR 

.1107	 4a		lsr			LSR 

.1108	 4a		lsr			LSR 

.1109					b848e
.1109	 4a		lsr			LSR 

.110a					b848f
.110a	 69 00		adc #$00		ADC	#$00

.110c	 30 12		bmi $1120		BMI	b84A5

.110e	 aa		tax			TAX 

.110f	 98		tya			TYA 

.1110	 4a		lsr			LSR 

.1111	 8a		txa			TXA 

.1112	 90 05		bcc $1119		BCC	b849E

.1114	 49 ff		eor #$ff		EOR	#$FF

.1116	 69 00		adc #$00		ADC	#$00

.1118	 18		clc			CLC 

.1119					b849e
.1119	 60		rts			RTS 

.111a					b849f
.111a	 c9 fc		cmp #$fc		CMP	#$FC

.111c	 a9 00		lda #$00		LDA	#$00

.111e	 f0 ea		beq $110a		BEQ	b848F

.1120					b84a5
.1120	 38		sec			SEC 

.1121					b84a6
.1121	 60		rts			RTS 

.1122					s84a7
.1122					fpto16bit
.1122	 98		tya			TYA 

.1123	 30 57		bmi $117c		BMI	b8501

.1125	 4a		lsr			LSR 

.1126	 4a		lsr			LSR 

.1127	 c9 0f		cmp #$0f		CMP	#$0F

.1129	 b0 f6		bcs $1121		BCS	b84A6

.112b	 85 06		sta $06			STA	ab06

.112d	 0a		asl			ASL 

.112e	 65 06		adc $06			ADC	ab06

.1130	 8d 3d 11	sta $113d		STA	ab84C2

.1133	 a9 00		lda #$00		LDA	#$00

.1135	 85 06		sta $06			STA	ab06

.1137	 8a		txa			TXA 

.1138	 38		sec			SEC 

.1139	 6a		ror			ROR 

.113a	 66 06		ror $06			ROR	ab06

=113d					ab84C2   =*+$01

.113c	 90 2a		bcc $1168		BCC	b84ED

.113e	 4a		lsr			LSR 

.113f					j84c4
.113f	 66 06		ror $06			ROR	ab06

.1141	 4a		lsr			LSR 

.1142	 66 06		ror $06			ROR	ab06

.1144	 4a		lsr			LSR 

.1145	 66 06		ror $06			ROR	ab06

.1147	 4a		lsr			LSR 

.1148	 66 06		ror $06			ROR	ab06

.114a	 4a		lsr			LSR 

.114b	 66 06		ror $06			ROR	ab06

.114d	 4a		lsr			LSR 

.114e	 66 06		ror $06			ROR	ab06

.1150	 4a		lsr			LSR 

.1151	 66 06		ror $06			ROR	ab06

.1153	 4a		lsr			LSR 

.1154					b84d9
.1154	 66 06		ror $06			ROR	ab06

.1156	 4a		lsr			LSR 

.1157	 66 06		ror $06			ROR	ab06

.1159	 4a		lsr			LSR 

.115a	 66 06		ror $06			ROR	ab06

.115c	 4a		lsr			LSR 

.115d	 66 06		ror $06			ROR	ab06

.115f	 4a		lsr			LSR 

.1160	 66 06		ror $06			ROR	ab06

.1162	 4a		lsr			LSR 

.1163	 66 06		ror $06			ROR	ab06

.1165	 4a		lsr			LSR 

.1166	 66 06		ror $06			ROR	ab06

.1168					b84ed
.1168	 4a		lsr			LSR 

.1169	 66 06		ror $06			ROR	ab06

.116b	 aa		tax			TAX 

.116c	 98		tya			TYA 

.116d	 a4 06		ldy $06			LDY	ab06

.116f	 4a		lsr			LSR 

.1170	 90 09		bcc $117b		BCC	b8500

.1172	 8a		txa			TXA 

.1173	 49 ff		eor #$ff		EOR	#$FF

.1175	 aa		tax			TAX 

.1176	 98		tya			TYA 

.1177	 49 ff		eor #$ff		EOR	#$FF

.1179	 a8		tay			TAY 

.117a	 18		clc			CLC 

.117b					b8500
.117b	 60		rts			RTS 

.117c					b8501
.117c	 98		tya			TYA 

.117d	 4a		lsr			LSR 

.117e	 90 06		bcc $1186		BCC	b850B

.1180	 a2 ff		ldx #$ff		LDX	#$FF

.1182	 a0 ff		ldy #$ff		LDY	#$FF

.1184	 18		clc			CLC 

.1185	 60		rts			RTS 

.1186					b850b
.1186	 a2 00		ldx #$00		LDX	#$00

.1188	 a0 00		ldy #$00	        LDY	#$00

.118a	 60		rts		        RTS 

.118b	 48		pha		IRQ2	PHA 

.118c	 a9 7e		lda #$7e	        LDA #$7E

.118e	 8d 18 d0	sta $d018	        STA $D018    ;VIC Memory Control Register

.1191	 a9 1b		lda #$1b	        LDA #$1B

.1193	 8d 11 d0	sta $d011	        STA $D011    ;VIC Control Register 1

.1196	 a9 08		lda #$08	        LDA #$08

.1198	 8d 16 d0	sta $d016	        STA $D016    ;VIC Control Register 2

.119b	 a9 d4		lda #$d4	        LDA #<IRQ1

.119d	 8d fe ff	sta $fffe	        STA fFFFE    ;IRQ

.11a0	 a9 14		lda #$14	        LDA #>IRQ1

.11a2	 8d ff ff	sta $ffff	        STA fFFFF    ;IRQ

.11a5	 a9 00		lda #$00	        LDA #$00

.11a7	 8d 12 d0	sta $d012	        STA $D012    ;Raster Position

.11aa	 a9 01		lda #$01	        LDA #$01

.11ac	 8d 19 d0	sta $d019	        STA $D019    ;VIC Interrupt Request Register (IRR)

.11af	 68		pla				PLA 

.11b0	 40		rti		        RTI 

.1200					horizon_detail_right_way_up

>1200	 56 5a 6a aa 56 5a 6a aa 		.BYTE %01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010

>1208	 56 5a 6a aa 56 5a 6a aa 
>1210	 56 5a 6a aa 56 5a 6a aa 		.BYTE %01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010

>1218	 56 5a 6a aa 56 5a 6a aa 
>1220	 56 5a 6a aa 56 5a 6a aa 		.BYTE %01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010

>1228	 56 5a 6a aa 56 5a 6a aa 
>1230	 56 5a 6a aa 56 5a 6a aa 		.BYTE %01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010

>1238	 56 5a 6a aa 56 5a 6a aa 
>1240	 56 5a 6a aa 56 5a 6a aa 		.BYTE %01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010

>1248	 56 5a 6a aa 56 5a 6a aa 
>1250	 56 5a 6a aa 56 5a 6a aa 		.BYTE %01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010

>1258	 56 5a 6a aa 56 5a 6a aa 
>1260	 56 5a 6a aa 56 5a 6a aa 		.BYTE %01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010

>1268	 56 5a 6a aa 56 5a 6a aa 
>1270	 56 5a 6a aa 56 5a 6a aa 		.BYTE %01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010

>1278	 56 5a 6a aa 56 5a 6a aa 
>1280	 56 5a 6a aa 56 5a 6a aa 		.BYTE %01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010

>1288	 56 5a 6a aa 56 5a 6a aa 
>1290	 56 5a 6a aa 56 5a 6a aa 		.BYTE %01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010,%01010110,%01011010,%01101010,%10101010

>1298	 56 5a 6a aa 56 5a 6a aa 

.12a0					horizon_detail_upside_down

>12a0	 a9 a5 95 55 a9 a5 95 55 		.BYTE %10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101

>12a8	 a9 a5 95 55 a9 a5 95 55 
>12b0	 a9 a5 95 55 a9 a5 95 55 		.BYTE %10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101

>12b8	 a9 a5 95 55 a9 a5 95 55 
>12c0	 a9 a5 95 55 a9 a5 95 55 		.BYTE %10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101

>12c8	 a9 a5 95 55 a9 a5 95 55 
>12d0	 a9 a5 95 55 a9 a5 95 55 		.BYTE %10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101

>12d8	 a9 a5 95 55 a9 a5 95 55 
>12e0	 a9 a5 95 55 a9 a5 95 55 		.BYTE %10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101

>12e8	 a9 a5 95 55 a9 a5 95 55 
>12f0	 a9 a5 95 55 a9 a5 95 55 		.BYTE %10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101

>12f8	 a9 a5 95 55 a9 a5 95 55 
>1300	 a9 a5 95 55 a9 a5 95 55 		.BYTE %10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101

>1308	 a9 a5 95 55 a9 a5 95 55 
>1310	 a9 a5 95 55 a9 a5 95 55 		.BYTE %10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101

>1318	 a9 a5 95 55 a9 a5 95 55 
>1320	 a9 a5 95 55 a9 a5 95 55 		.BYTE %10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101

>1328	 a9 a5 95 55 a9 a5 95 55 
>1330	 a9 a5 95 55 a9 a5 95 55 		.BYTE %10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101,%10101001,%10100101,%10010101,%01010101

>1338	 a9 a5 95 55 a9 a5 95 55 

.1340					read_joystick_keyboard
.1340	 ad 00 dc	lda $dc00	        LDA $DC00    ;CIA1: Data Port Register A

.1343	 29 0f		and #$0f	        AND #$0F

.1345	 85 80		sta $80		        STA ab80 ; JOYSTICK MOVEMENT

.1347	 60		rts				RTS

.1348	 a6 28		ldx $28		GET_ROT	LDX 	ROLL_LO

.134a	 a4 29		ldy $29		        LDY 	ROLL_HI

.134c	 20 be 14	jsr $14be	        JSR 	COS_FP

.134f	 86 30		stx $30		        STX 	ROLL_COS_FP_LO_ab30

.1351	 84 31		sty $31		        STY 	ROLL_COS_FP_HI_ab31

.1353	 a6 28		ldx $28		        LDX 	ROLL_LO

.1355	 a4 29		ldy $29		        LDY 	ROLL_HI

.1357	 20 bf 14	jsr $14bf	        JSR 	SIN_FP

.135a	 86 2e		stx $2e		        STX 	ROLL_SIN_FP_LO_ab2E

.135c	 84 2f		sty $2f		        STY 	ROLL_SIN_FP_HI_ab2F

.135e	 86 08		stx $08		        STX 	ab08

.1360	 84 09		sty $09		        STY 	ab09

.1362	 a6 30		ldx $30		        LDX 	ROLL_COS_FP_LO_ab30

.1364	 a4 31		ldy $31		        LDY 	ROLL_COS_FP_HI_ab31

.1366	 20 08 10	jsr $1008	        JSR 	FPDIV ; (4)

.1369	 86 32		stx $32		        STX 	ab32 ; ROLL_SIN_DIV_COS_LO ; SLOPE?

.136b	 84 33		sty $33		        STY 	ab33 ; ROLL_SIN_DIV_COS_HI

.136d	 a6 30		ldx $30		        LDX 	ROLL_COS_FP_LO_ab30

.136f	 a4 31		ldy $31		        LDY 	ROLL_COS_FP_HI_ab31

.1371	 86 08		stx $08		        STX 	ab08

.1373	 84 09		sty $09		        STY 	ab09

.1375	 a6 2e		ldx $2e		        LDX 	ROLL_SIN_FP_LO_ab2E

.1377	 a4 2f		ldy $2f		        LDY 	ROLL_SIN_FP_HI_ab2F

.1379	 20 08 10	jsr $1008	        JSR 	FPDIV ; (5)

.137c	 86 34		stx $34		        STX 	ab34 ; ROLL_COS_DIV_SIN_LO ; SLOPE?

.137e	 84 35		sty $35		        STY 	ab35 ; ROLL_COS_DIV_SIN_HI

.1380	 a6 2a		ldx $2a		        LDX 	PITCH_LO

.1382	 a4 2b		ldy $2b		        LDY 	PITCH_HI

.1384	 20 be 14	jsr $14be	        JSR 	COS_FP

.1387	 86 38		stx $38		        STX 	PITCH_COS_FP_LO_ab38

.1389	 84 39		sty $39		        STY 	PITCH_COS_FP_HI_ab39

.138b	 a6 2a		ldx $2a		        LDX 	PITCH_LO

.138d	 a4 2b		ldy $2b		        LDY 	PITCH_HI

.138f	 20 bf 14	jsr $14bf	        JSR 	SIN_FP

.1392	 86 36		stx $36		        STX 	PITCH_SIN_FP_LO_ab36

.1394	 84 37		sty $37		        STY 	PITCH_SIN_FP_HI_ab37

.1396	 86 08		stx $08		        STX 	ab08

.1398	 84 09		sty $09		        STY 	ab09

.139a	 a6 38		ldx $38		        LDX 	PITCH_COS_FP_LO_ab38

.139c	 a4 39		ldy $39		        LDY 	PITCH_COS_FP_HI_ab39

.139e	 20 08 10	jsr $1008	        JSR 	FPDIV ; (8)

.13a1	 86 3a		stx $3a		        STX 	ab3A ; PITCH_SIN_DIV_COS_LO ; SLOPE?

.13a3	 84 3b		sty $3b		        STY 	ab3B ; PITCH_SIN_DIV_COS_HI

.13a5	 a6 2c		ldx $2c		        LDX 	YAW_LO

.13a7	 a4 2d		ldy $2d		        LDY 	YAW_HI

.13a9	 20 bf 14	jsr $14bf	        JSR 	SIN_FP

.13ac	 86 3c		stx $3c		        STX 	YAW_SIN_FP_LO_ab3C

.13ae	 84 3d		sty $3d		        STY 	YAW_SIN_FP_HI_ab3D

.13b0	 a6 2c		ldx $2c		        LDX 	YAW_LO

.13b2	 a4 2d		ldy $2d		        LDY 	YAW_HI

.13b4	 20 be 14	jsr $14be	        JSR 	COS_FP

.13b7	 86 3e		stx $3e		        STX 	YAW_COS_FP_LO_ab3E

.13b9	 84 3f		sty $3f		        STY 	YAW_COS_FP_HI_ab3F

.13bb	 60		rts		        RTS 

.1400					draw_screen_column_backwards
.1400	 a0 30		ldy #$30	        LDY #$30

.1402	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1404	 a0 28		ldy #$28			LDY #$28

.1406	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1408	 a0 20		ldy #$20	        LDY #$20

.140a	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.140c	 a0 18		ldy #$18	        LDY #$18

.140e	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1410	 a0 10		ldy #$10	        LDY #$10

.1412	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1414	 a0 08		ldy #$08	        LDY #$08

.1416	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1418	 a0 00		ldy #$00	        LDY #$00

.141a	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.141c	 a0 f8		ldy #$f8	        LDY #$F8

.141e	 c6 03		dec $03		        DEC SCREEN_POS_HI

.1420	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1422	 a0 f0		ldy #$f0	        LDY #$F0

.1424	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1426	 a0 e8		ldy #$e8	        LDY #$E8

.1428	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.142a	 a0 e0		ldy #$e0	        LDY #$E0

.142c	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.142e	 a0 d8		ldy #$d8	        LDY #$D8

.1430	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1432	 a0 d0		ldy #$d0	        LDY #$D0

.1434	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1436	 a0 c8		ldy #$c8	        LDY #$C8

.1438	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.143a	 a0 c0		ldy #$c0	        LDY #$C0

.143c	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.143e	 a0 b8		ldy #$b8	        LDY #$B8

.1440	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1442	 a0 b0		ldy #$b0	        LDY #$B0

.1444	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1446	 a0 a8		ldy #$a8	        LDY #$A8

.1448	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.144a	 a0 a0		ldy #$a0	        LDY #$A0

.144c	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.144e	 a0 98		ldy #$98	        LDY #$98

.1450	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1452	 a0 90		ldy #$90	        LDY #$90

.1454	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1456	 a0 88		ldy #$88	        LDY #$88

.1458	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.145a	 a0 80		ldy #$80	        LDY #$80

.145c	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.145e	 a0 78		ldy #$78	        LDY #$78

.1460	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1462	 a0 70		ldy #$70	        LDY #$70

.1464	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1466	 a0 68		ldy #$68	        LDY #$68

.1468	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.146a	 a0 60		ldy #$60	        LDY #$60

.146c	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.146e	 a0 58		ldy #$58	        LDY #$58

.1470	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1472	 a0 50		ldy #$50	        LDY #$50

.1474	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1476	 a0 48		ldy #$48	        LDY #$48

.1478	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.147a	 a0 40		ldy #$40	        LDY #$40

.147c	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.147e	 a0 38		ldy #$38	        LDY #$38

.1480	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1482	 a0 30		ldy #$30	        LDY #$30

.1484	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1486	 a0 28		ldy #$28	        LDY #$28

.1488	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.148a	 a0 20		ldy #$20	        LDY #$20

.148c	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.148e	 a0 18		ldy #$18	        LDY #$18

.1490	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1492	 a0 10		ldy #$10	        LDY #$10

.1494	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1496	 a0 08		ldy #$08	        LDY #$08

.1498	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.149a	 a0 00		ldy #$00	        LDY #$00

.149c	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.149e	 60		rts		        RTS 

.149f	 8c b3 14	sty $14b3	MEMSET       STY    LSB_ONLY+1 ; store LSB count

.14a2	 e0 00		cpx #$00	             CPX    #0          ; MSB?     

.14a4	 f0 0c		beq $14b2	             BEQ    LSB_ONLY   ; no

.14a6	 a0 00		ldy #$00	             LDY    #0          ; yes so reset LSB

.14a8					msb_loop
.14a8	 91 02		sta ($02),y	LSB_LOOP      STA    (SCREEN_POS_LO),Y   ; clear whole MSB

.14aa	 88		dey		               DEY 

.14ab	 d0 fb		bne $14a8	               BNE    LSB_LOOP

.14ad	 e6 03		inc $03		              INC    SCREEN_POS_LO+1      ; inc MSB

.14af	 ca		dex		              DEX               ; dec MSB count

.14b0	 d0 f6		bne $14a8	              BNE    MSB_LOOP

.14b2	 a0 00		ldy #$00	LSB_ONLY    LDY    #0          ; LSB count 

.14b4	 f0 07		beq $14bd	             BEQ    MS_END

.14b6	 91 02		sta ($02),y	LAST_LSB_LOOP STA   (SCREEN_POS_LO),Y

.14b8	 88		dey		               DEY 

.14b9	 d0 fb		bne $14b6	               BNE   LAST_LSB_LOOP               

.14bb	 91 02		sta ($02),y	              STA   (SCREEN_POS_LO),Y     ; clear last Y (0)

.14bd	 60		rts		MS_END      RTS

.14be	 c8		iny		COS_FP	INY 

.14bf	 98		tya		SIN_FP	TYA 

.14c0	 4a		lsr				LSR 

.14c1	 90 06		bcc $14c9			BCC 	SIN_CNT

.14c3	 8a		txa						TXA 

.14c4	 49 ff		eor #$ff					EOR #$FF

.14c6	 aa		tax						TAX 

.14c7	 98		tya						TYA 

.14c8	 4a		lsr						LSR 

.14c9	 29 01		and #$01	SIN_CNT AND 	#$01

.14cb	 1d 00 0d	ora $0d00,x			ORA 	SIN_MSB,X

.14ce	 a8		tay				TAY 

.14cf	 bd 00 0c	lda $0c00,x			LDA 	SIN_LSB,X

.14d2	 aa		tax				TAX 

.14d3	 60		rts				RTS 

.14d4	 48		pha		IRQ1	PHA 

.14d5	 a5 c7		lda $c7		        LDA VIC_SCREEN_BANK

.14d7	 8d 18 d0	sta $d018	        STA $D018    ;VIC Memory Control Register

.14da	 a9 3b		lda #$3b	        LDA #$3B

.14dc	 8d 11 d0	sta $d011	        STA $D011    ;VIC Control Register 1

.14df	 a9 18		lda #$18	        LDA #$18

.14e1	 8d 16 d0	sta $d016	        STA $D016    ;VIC Control Register 2

.14e4	 a9 8b		lda #$8b	        LDA #<IRQ2

.14e6	 8d fe ff	sta $fffe	        STA fFFFE    ;IRQ

.14e9	 a9 11		lda #$11	        LDA #>IRQ2

.14eb	 8d ff ff	sta $ffff	        STA fFFFF    ;IRQ

.14ee	 a9 ba		lda #$ba	        LDA #$BA

.14f0	 8d 12 d0	sta $d012	        STA $D012    ;Raster Position

.14f3	 a9 01		lda #$01	        LDA #$01

.14f5	 8d 19 d0	sta $d019	        STA $D019    ;VIC Interrupt Request Register (IRR)

.14f8	 68		pla		        PLA 

.14f9	 40		rti		        RTI 

.1500					draw_screen_column_forwards
.1500	 a0 00		ldy #$00	        LDY #$00

.1502	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1504	 a0 08		ldy #$08	        LDY #$08

.1506	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1508	 a0 10		ldy #$10	        LDY #$10

.150a	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.150c	 a0 18		ldy #$18	        LDY #$18

.150e	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1510	 a0 20		ldy #$20	        LDY #$20

.1512	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1514	 a0 28		ldy #$28	        LDY #$28

.1516	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1518	 a0 30		ldy #$30	        LDY #$30

.151a	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.151c	 a0 38		ldy #$38	        LDY #$38

.151e	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1520	 a0 40		ldy #$40	        LDY #$40

.1522	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1524	 a0 48		ldy #$48	        LDY #$48

.1526	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1528	 a0 50		ldy #$50	        LDY #$50

.152a	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.152c	 a0 58		ldy #$58	        LDY #$58

.152e	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1530	 a0 60		ldy #$60	        LDY #$60

.1532	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1534	 a0 68		ldy #$68	        LDY #$68

.1536	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1538	 a0 70		ldy #$70	        LDY #$70

.153a	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.153c	 a0 78		ldy #$78	        LDY #$78

.153e	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1540	 a0 80		ldy #$80	        LDY #$80

.1542	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1544	 a0 88		ldy #$88	        LDY #$88

.1546	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1548	 a0 90		ldy #$90	        LDY #$90

.154a	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.154c	 a0 98		ldy #$98	        LDY #$98

.154e	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1550	 a0 a0		ldy #$a0	        LDY #$A0

.1552	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1554	 a0 a8		ldy #$a8	        LDY #$A8

.1556	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1558	 a0 b0		ldy #$b0	        LDY #$B0

.155a	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.155c	 a0 b8		ldy #$b8	        LDY #$B8

.155e	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1560	 a0 c0		ldy #$c0	        LDY #$C0

.1562	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1564	 a0 c8		ldy #$c8	        LDY #$C8

.1566	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1568	 a0 d0		ldy #$d0	        LDY #$D0

.156a	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.156c	 a0 d8		ldy #$d8	        LDY #$D8

.156e	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1570	 a0 e0		ldy #$e0	        LDY #$E0

.1572	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1574	 a0 e8		ldy #$e8	        LDY #$E8

.1576	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1578	 a0 f0		ldy #$f0	        LDY #$F0

.157a	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.157c	 a0 f8		ldy #$f8	        LDY #$F8

.157e	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1580	 a0 00		ldy #$00	        LDY #$00

.1582	 e6 03		inc $03		        INC SCREEN_POS_HI

.1584	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1586	 a0 08		ldy #$08	        LDY #$08

.1588	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.158a	 a0 10		ldy #$10	        LDY #$10

.158c	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.158e	 a0 18		ldy #$18	        LDY #$18

.1590	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1592	 a0 20		ldy #$20	        LDY #$20

.1594	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.1596	 a0 28		ldy #$28	        LDY #$28

.1598	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.159a	 a0 30		ldy #$30	        LDY #$30

.159c	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.159e	 a0 38		ldy #$38			LDY #$38

.15a0	 91 02		sta ($02),y	        STA (SCREEN_POS_PTR),Y

.15a2	 60		rts		        RTS

.15a3	 a9 e0		lda #$e0	DRAW_SCREEN	LDA		#$E0

.15a5	 cd 12 d0	cmp $d012	WAIT_RASTER		CMP 	$D012

.15a8	 d0 fb		bne $15a5					BNE 	WAIT_RASTER

.15aa	 a9 78		lda #$78				LDA 	#$78 				; 120 = 256-136?

.15ac	 85 1a		sta $1a					STA 	SCREEN_LINE_ab1A	; screen positon count

.15ae	 a9 00		lda #$00				LDA 	#0

.15b0	 85 02		sta $02					STA 	SCREEN_POS_LO

.15b2	 e6 24		inc $24		bAF84   	INC		SCREEN_FLIP	; INCREMENT SCREEN FLIP

.15b4	 a5 24		lda $24					LDA		SCREEN_FLIP	; GET SCREEN FLIP

.15b6	 4a		lsr					LSR 				; SHIFT BIT0 INTO CARRY

.15b7	 b0 06		bcs $15bf				BCS		SCREEN1		; CARRY SET ?

.15b9	 a9 40		lda #$40					LDA		#$40			; SCREEN 0

.15bb	 a2 78		ldx #$78					LDX		#$78			; VIC BANK 0

.15bd	 d0 04		bne $15c3					BNE		bAFA1			; jump

.15bf	 a9 60		lda #$60	SCREEN1  	LDA		#$60			; SCREEN 1

.15c1	 a2 70		ldx #$70				LDX		#$70			; VIC BANK 1

.15c3	 85 25		sta $25		bAFA1		STA		SCREEN_BANK

.15c5	 85 03		sta $03					STA		SCREEN_POS_HI

.15c7	 86 c7		stx $c7					STX		VIC_SCREEN_BANK

.15c9	 a6 2b		ldx $2b					LDX 	PITCH_HI	; get pitch?

.15cb	 e8		inx					INX					; add 1 which flips sign? and reverses bit 1 into bit 2?

.15cc	 8a		txa					TXA

.15cd	 45 29		eor $29					EOR 	ROLL_HI		; eor roll?

.15cf	 4a		lsr					LSR 				; shift to remove sign?

.15d0	 a2 55		ldx #$55				LDX #$55			; ground colour

.15d2	 a0 aa		ldy #$aa				LDY #$AA			; sky colour

.15d4	 4a		lsr					LSR

.15d5	 90 08		bcc $15df				BCC 	RIGHT_WAY_UP

.15d7	 a9 a0		lda #$a0					LDA 	#<HORIZON_DETAIL_UPSIDE_DOWN 	; upside down

.15d9	 84 82		sty $82						STY 	SCREEN_TOP_COL_ab82				; ground colour

.15db	 86 83		stx $83						STX 	SCREEN_BOT_COL_ab83				; sky colour

.15dd	 d0 06		bne $15e5					BNE 	bAFF7 							; jmp?

.15df	 a9 00		lda #$00	RIGHT_WAY_UP LDA 	#<HORIZON_DETAIL_RIGHT_WAY_UP

.15e1	 86 82		stx $82					STX 	SCREEN_TOP_COL_ab82	; sky colour

.15e3	 84 83		sty $83					STY 	SCREEN_BOT_COL_ab83	; ground colour

.15e5	 8d 02 17	sta $1702	bAFF7		STA 	HOR_DIRECTION +1

.15e8	 a6 34		ldx $34					LDX 	ab34		; results of part of rotation caculation?

.15ea	 a5 35		lda $35					LDA 	ab35		; results of part of rotation caculation?

.15ec	 49 01		eor #$01				EOR 	#$01		; swap sign

.15ee	 a8		tay					TAY 	

.15ef	 29 01		and #$01				AND 	#$01		; keep sign

.15f1	 85 7d		sta $7d					STA 	SIGN_ab7D	; slope direction

.15f3	 98		tya					TYA 	

.15f4	 29 fc		and #$fc				AND 	#$FC		; remove sign from fp

.15f6	 18		clc					CLC 	

.15f7	 69 18		adc #$18				ADC 	#$18		; *128? *256?

.15f9	 70 06		bvs $1601				BVS 	OVERFLOW_bB012

.15fb	 a8		tay						TAY

.15fc	 20 22 11	jsr $1122					JSR 	FPTO16BIT	; get slope value?

.15ff	 90 04		bcc $1605					BCC 	bB016

.1601	 a2 ff		ldx #$ff	OVERFLOW_bB012   	LDX 	#$FF

.1603	 a0 ff		ldy #$ff						LDY 	#$FF

.1605	 98		tya		bB016   	TYA 

.1606	 0a		asl					ASL 

.1607	 85 7b		sta $7b					STA 	ab7B

.1609	 8a		txa					TXA 

.160a	 2a		rol					ROL 

.160b	 85 7c		sta $7c					STA 	HORIZON_SLOPE_ab7C

.160d	 a6 3a		ldx $3a					LDX 	ab3A

.160f	 a5 3b		lda $3b					LDA 	ab3B

.1611	 18		clc					CLC 

.1612	 65 21		adc $21					ADC 	ab21

.1614	 86 16		stx $16					STX 	ab16

.1616	 85 17		sta $17					STA 	ab17

.1618	 49 01		eor #$01				EOR 	#$01

.161a	 86 08		stx $08					STX 	ab08

.161c	 85 09		sta $09					STA 	ab09

.161e	 a6 2e		ldx $2e					LDX 	ROLL_SIN_FP_LO_ab2E

.1620	 a4 2f		ldy $2f					LDY 	ROLL_SIN_FP_HI_ab2F

.1622	 20 08 10	jsr $1008				JSR 	FPDIV

.1625	 86 0a		stx $0a					STX 	ab0A

.1627	 84 0b		sty $0b					STY 	ab0B

.1629	 a2 0c		ldx #$0c				LDX 	#<p140C ; edge of the screen?

.162b	 a0 14		ldy #$14				LDY 	#>p140C

.162d	 86 08		stx $08					STX 	ab08

.162f	 84 09		sty $09					STY 	ab09

.1631	 a6 32		ldx $32					LDX 	ab32

.1633	 a4 33		ldy $33					LDY 	ab33

.1635	 20 08 10	jsr $1008				JSR 	FPDIV

.1638	 a6 0a		ldx $0a					LDX 	ab0A

.163a	 a4 0b		ldy $0b					LDY 	ab0B

.163c	 20 5f 10	jsr $105f				JSR 	FP_ADD

.163f	 20 f2 10	jsr $10f2				JSR 	FPTO8BIT

.1642	 b0 0b		bcs $164f				BCS 	bB06A

.1644	 69 50		adc #$50					ADC 	#SCREEN_HOR_HALF

.1646	 c9 a0		cmp #$a0					CMP 	#SCREEN_HOR_RIGHT

.1648	 b0 05		bcs $164f					BCS 	bB06A				; off edge so needs clipped?

.164a	 85 09		sta $09							STA 	ab09

.164c	 4c c3 16	jmp $16c3						JMP 	DRAW_SCREEN_SLOPE

.164f	 a6 16		ldx $16		bB06A   	LDX 	ab16

.1651	 a4 17		ldy $17					LDY 	ab17

.1653	 86 08		stx $08					STX 	ab08

.1655	 84 09		sty $09					STY 	ab09

.1657	 a6 30		ldx $30					LDX 	ROLL_COS_FP_LO_ab30

.1659	 a4 31		ldy $31					LDY 	ROLL_COS_FP_HI_ab31

.165b	 20 08 10	jsr $1008				JSR 	FPDIV

.165e	 86 0a		stx $0a					STX 	ab0A

.1660	 84 0b		sty $0b					STY 	ab0B

.1662	 a2 3c		ldx #$3c				LDX 	#$3C

.1664	 a9 19		lda #$19				LDA 	#$19

.1666	 45 7d		eor $7d					EOR 	SIGN_ab7D

.1668	 86 08		stx $08					STX 	ab08

.166a	 85 09		sta $09					STA 	ab09

.166c	 a6 32		ldx $32					LDX 	ab32

.166e	 a4 33		ldy $33					LDY 	ab33

.1670	 20 ce 0f	jsr $0fce				JSR 	FPMUL

.1673	 a6 0a		ldx $0a					LDX 	ab0A

.1675	 a4 0b		ldy $0b					LDY 	ab0B

.1677	 20 5f 10	jsr $105f				JSR 	FP_ADD

.167a	 98		tya					TYA 

.167b	 18		clc					CLC 

.167c	 69 04		adc #$04				ADC 	#$04

.167e	 70 0c		bvs $168c				BVS 	FILL_FULL_SCRN

.1680	 a8		tay					TAY 

.1681	 20 f2 10	jsr $10f2				JSR 	FPTO8BIT

.1684	 b0 06		bcs $168c				BCS 	FILL_FULL_SCRN

.1686	 69 44		adc #$44					ADC 	#SCREEN_VER_HALF 	; add ver screen half

.1688	 c9 88		cmp #$88					CMP 	#SCREEN_VER_BOTTOM 	; ver clip test

.168a	 90 1d		bcc $16a9					BCC 	PARTIAL_SCN			; on screen

.168c	 a5 2b		lda $2b		FILL_FULL_SCRN 	LDA 	PITCH_HI	; fill full screen?

.168e	 45 7d		eor $7d						EOR 	SIGN_ab7D

.1690	 85 06		sta $06						STA 	ab06

.1692	 a5 29		lda $29						LDA 	ROLL_HI

.1694	 18		clc						CLC 

.1695	 69 03		adc #$03					ADC 	#$03

.1697	 4a		lsr						LSR 

.1698	 45 06		eor $06						EOR 	ab06

.169a	 29 01		and #$01					AND 	#$01

.169c	 f0 04		beq $16a2					BEQ 	FULLSCN_TOP_COL

.169e	 a5 83		lda $83							LDA 	SCREEN_BOT_COL_ab83

.16a0	 d0 02		bne $16a4						BNE 	FULLSCN_BOT_COL		; jmp?

.16a2	 a5 82		lda $82		FULLSCN_TOP_COL LDA 	SCREEN_TOP_COL_ab82

.16a4	 a2 88		ldx #$88	FULLSCN_BOT_COL	LDX 	#SCREEN_VER_BOTTOM			; fill whole screen from bottom of screen

.16a6	 4c 55 17	jmp $1755					JMP 	DRAW_SCREEN_BLOCK_COLOUR

.16a9	 49 ff		eor #$ff	PARTIAL_SCN		EOR 	#$FF						; negate ; fill from the top to the bottom from the lef or right edge depending on the slope direction

.16ab	 69 88		adc #$88					ADC 	#SCREEN_VER_BOTTOM 			; add number of screen lines?

.16ad	 aa		tax						TAX 

.16ae	 a5 7d		lda $7d						LDA 	SIGN_ab7D

.16b0	 f0 08		beq $16ba					BEQ 	LEFT_EDGE

.16b2	 a9 9f		lda #$9f						LDA 	#$9F 					; start hor pos at right edge and adding

.16b4	 85 09		sta $09							STA 	ab09

.16b6	 a5 83		lda $83							LDA 	SCREEN_BOT_COL_ab83

.16b8	 d0 06		bne $16c0						BNE 	FILL_BLOCK_VAL_X		; jmp

.16ba	 a9 01		lda #$01	LEFT_EDGE   	LDA 	#$01 							; start hor pos at left edge and subtracting

.16bc	 85 09		sta $09						STA 	ab09

.16be	 a5 82		lda $82						LDA 	SCREEN_TOP_COL_ab82

.16c0	 20 55 17	jsr $1755	FILL_BLOCK_VAL_X	JSR 	DRAW_SCREEN_BLOCK_COLOUR	; fill a block of the screen using value in X ?

.16c3	 a9 00		lda #$00	DRAW_SCREEN_SLOPE	LDA 	#$00					; reset slope fraction?	

.16c5	 85 08		sta $08							STA 	ab08

.16c7	 a5 09		lda $09							LDA 	ab09

.16c9	 29 fc		and #$fc	DRAW_SLOPE_LOOP 		AND 	#$FC				; clear the 4 bits that make up char pixel to leave only chars?

.16cb	 85 06		sta $06								STA 	ab06

.16cd	 49 ff		eor #$ff							EOR 	#$FF

.16cf	 38		sec								SEC 

.16d0	 69 a0		adc #$a0							ADC 	#SCREEN_HOR_RIGHT		; screen right edge?

.16d2	 aa		tax								TAX 

.16d3	 c9 84		cmp #$84							CMP 	#$84					; past +256 y/n (84/2?)

.16d5	 90 04		bcc $16db							BCC 	bB0F9					; no

.16d7	 69 01		adc #$01								ADC 	#$01				; yes so add 2 extract to offset?

.16d9	 e6 03		inc $03									INC 	SCREEN_POS_HI 		; and inc hi pos

.16db	 8d e1 16	sta $16e1	bB0F9   				STA 	FILL_FORWARD +1			; store offset

.16de	 a5 83		lda $83								LDA 	SCREEN_BOT_COL_ab83		; get colour

.16e0	 20 00 15	jsr $1500	FILL_FORWARD			JSR 	DRAW_SCREEN_COLUMN_FORWARDS		; fill start of line with bottom

.16e3	 a5 06		lda $06								LDA 	ab06

.16e5	 c9 20		cmp #$20							CMP 	#$20 					; is hor gt 32 chars across?

.16e7	 90 04		bcc $16ed							BCC 	bB10B 					; no

.16e9	 69 01		adc #$01								ADC 	#$01 				; yes so addd 2 to offset?

.16eb	 c6 03		dec $03									DEC 	SCREEN_POS_HI		; and inc hi pos

.16ed	 8d f3 16	sta $16f3	bB10B   				STA 	FILL_BACKWARD +1		; store offset

.16f0	 a5 82		lda $82								LDA 	SCREEN_TOP_COL_ab82		; get colour

.16f2	 20 00 14	jsr $1400	FILL_BACKWARD			JSR 	DRAW_SCREEN_COLUMN_BACKWARDS	; fill end of line with top

.16f5	 8a		txa								TXA

.16f6	 38		sec								SEC

.16f7	 e9 04		sbc #$04							SBC 	#$04

.16f9	 0a		asl								ASL										; set carry if over 256 byte boundary

.16fa	 a8		tay								TAY										; this is the ver pos?

.16fb	 90 02		bcc $16ff							BCC 	DRAW_HORIZON_DETAIL				; not over 256 byte boundary

.16fd	 e6 03		inc $03									INC		SCREEN_POS_HI				; yes over 256 byte boundary

.16ff	 a6 09		ldx $09		DRAW_HORIZON_DETAIL		LDX 	ab09 							; get horizontal position

.1701	 bd 00 12	lda $1200,x	HOR_DIRECTION			LDA 	HORIZON_DETAIL_RIGHT_WAY_UP,X	; get character of horizon pixels 

.1704	 91 02		sta ($02),y							STA 	(SCREEN_POS_PTR),Y				; update screen char

.1706	 e6 1a		inc $1a								INC 	SCREEN_LINE_ab1A				; increment screen positon count

.1708	 f0 3a		beq $1744							BEQ 	bB167							; if finished exit

.170a	 a6 1a		ldx $1a								LDX 	SCREEN_LINE_ab1A

.170c	 bd 90 0e	lda $0e90,x							LDA 	HORIZON_COLUMNS_LO,X

.170f	 85 02		sta $02								STA 	SCREEN_POS_LO

.1711	 bd 00 0e	lda $0e00,x							LDA 	HORIZON_COLUMNS_HI,X

.1714	 05 25		ora $25								ORA 	SCREEN_BANK

.1716	 85 03		sta $03								STA 	SCREEN_POS_HI

.1718	 a5 7d		lda $7d								LDA 	SIGN_ab7D

.171a	 d0 16		bne $1732							BNE 	SLOPE_DOWN

.171c	 a5 08		lda $08									LDA 	ab08 					; slope up from left to right? - get fraction pixel pos

.171e	 18		clc									CLC 

.171f	 65 7b		adc $7b									ADC 	ab7B					; add fraction pixel pos slope

.1721	 85 08		sta $08									STA 	ab08					; store fraction pixel pos

.1723	 a5 09		lda $09									LDA 	ab09					; get whole pixel pos

.1725	 65 7c		adc $7c									ADC 	HORIZON_SLOPE_ab7C		; add with fraction carry the horizon slope

.1727	 b0 1c		bcs $1745								BCS 	DRAW_SCREEN_BLOCK		; if wrap around then fill rest of screen as a block

.1729	 c9 a0		cmp #$a0									CMP 	#SCREEN_HOR_RIGHT 	; check if off screen right edge

.172b	 b0 18		bcs $1745									BCS 	DRAW_SCREEN_BLOCK 	; if off right screen edge fill rest of screen as a block

.172d	 85 09		sta $09									STA 	ab09					; if not store whole pixel pos

.172f	 4c c9 16	jmp $16c9								JMP 	DRAW_SLOPE_LOOP			; and goto loop start

.1732	 a5 08		lda $08		SLOPE_DOWN   				LDA 	ab08 					; slope down from right to left? - get fraction pixel pos

.1734	 38		sec									SEC 

.1735	 e5 7b		sbc $7b									SBC 	ab7B					; subtract fraction pixel pos slope

.1737	 85 08		sta $08									STA 	ab08					; store fraction pixel pos

.1739	 a5 09		lda $09									LDA 	ab09					; get whole pxel pos

.173b	 e5 7c		sbc $7c									SBC 	HORIZON_SLOPE_ab7C		; subtract with fraction carry the horizon slope

.173d	 90 06		bcc $1745								BCC 	DRAW_SCREEN_BLOCK 		; if off left edge so draw rest aa a block?

.173f	 85 09		sta $09									STA 	ab09					; if not store whole pixel pos 

.1741	 4c c9 16	jmp $16c9								JMP 	DRAW_SLOPE_LOOP			; and goto loop start

.1744	 60		rts		bB167   RTS 

.1745	 a9 00		lda #$00	DRAW_SCREEN_BLOCK		LDA 	#0 								; draw screen block?

.1747	 38		sec								SEC 

.1748	 e5 1a		sbc $1a								SBC 	SCREEN_LINE_ab1A

.174a	 aa		tax								TAX 									; screen line count

.174b	 a5 7d		lda $7d								LDA 	SIGN_ab7D						; check sign

.174d	 f0 04		beq $1753							BEQ 	DRAW_SCREEN_BLOCK_BOTTOM 		; draw bottom 

.174f	 a5 82		lda $82									LDA 	SCREEN_TOP_COL_ab82 		; draw top

.1751	 d0 02		bne $1755								BNE 	DRAW_SCREEN_BLOCK_COLOUR	; jmp

.1753	 a5 83		lda $83		DRAW_SCREEN_BLOCK_BOTTOM	LDA 	SCREEN_BOT_COL_ab83

.1755	 85 06		sta $06		DRAW_SCREEN_BLOCK_COLOUR	STA 	ab06						; colour to fill block

.1757	 e0 00		cpx #$00								CPX 	#0							; last screen line?

.1759	 f0 18		beq $1773								BEQ 	DSCF_XT						; yes

.175b	 20 00 15	jsr $1500	DSCF_LOOP						JSR 	DRAW_SCREEN_COLUMN_FORWARDS	; fill whole line

.175e	 e6 1a		inc $1a										INC 	SCREEN_LINE_ab1A			; next line down

.1760	 a4 1a		ldy $1a										LDY 	SCREEN_LINE_ab1A			; get line

.1762	 b9 90 0e	lda $0e90,y									LDA 	HORIZON_COLUMNS_LO,Y

.1765	 85 02		sta $02										STA 	SCREEN_POS_LO

.1767	 b9 00 0e	lda $0e00,y									LDA 	HORIZON_COLUMNS_HI,Y

.176a	 05 25		ora $25										ORA 	SCREEN_BANK

.176c	 85 03		sta $03										STA 	SCREEN_POS_HI

.176e	 a5 06		lda $06										LDA 	ab06						; colour to fill

.1770	 ca		dex										DEX 								; dec screen line count

.1771	 d0 e8		bne $175b									BNE 	DSCF_LOOP					; last screen line?

.1773	 60		rts		DSCF_XT				RTS 


>1774	 00                       	temp1 .byte 0

>1775	 00                       	temp2 .byte 0

>1776	 00                       	temp3 .byte 0

>1777	 00                       	temp4 .byte 0


.1778	 a6 22		ldx $22		MOVMENT	LDX ab22

.177a	 a4 23		ldy $23		        LDY ab23

.177c	 86 08		stx $08		        STX ab08

.177e	 84 09		sty $09		        STY ab09

.1780	 ae 07 19	ldx $1907	        LDX abBEA2

.1783	 ac 08 19	ldy $1908	        LDY abBEA3

.1786	 20 ce 0f	jsr $0fce	        JSR FPMUL

.1789	 86 22		stx $22		        STX ab22

.178b	 84 23		sty $23		        STY ab23

.178d	 a9 04		lda #$04	JOY_LFT LDA #$04

.178f	 24 80		bit $80		        BIT ab80

.1791	 d0 0d		bne $17a0	        BNE JOY_RGT

.1793	 ae 09 19	ldx $1909	                LDX abBEA4

.1796	 ac 0a 19	ldy $190a	                LDY abBEA5

.1799	 20 5f 10	jsr $105f	                JSR FP_ADD

.179c	 86 22		stx $22		                STX ab22

.179e	 84 23		sty $23		                STY ab23

.17a0	 a9 08		lda #$08	JOY_RGT	LDA #$08 

.17a2	 24 80		bit $80		        BIT ab80

.17a4	 d0 0e		bne $17b4	        BNE JOY_UP

.17a6	 ae 09 19	ldx $1909	                LDX abBEA4

.17a9	 ac 0a 19	ldy $190a	                LDY abBEA5

.17ac	 c8		iny		                INY 

.17ad	 20 5f 10	jsr $105f	                JSR FP_ADD

.17b0	 86 22		stx $22		                STX ab22

.17b2	 84 23		sty $23		                STY ab23

.17b4	 a9 01		lda #$01	JOY_UP	LDA #$01

.17b6	 24 80		bit $80		        BIT ab80

.17b8	 d0 10		bne $17ca	        BNE JOY_DWN

.17ba	 a5 2a		lda $2a		                LDA PITCH_LO

.17bc	 18		clc		                CLC 

.17bd	 6d 0b 19	adc $190b	                ADC abBEA6

.17c0	 85 2a		sta $2a		                STA PITCH_LO

.17c2	 a5 2b		lda $2b		                LDA PITCH_HI

.17c4	 69 00		adc #$00	                ADC #$00

.17c6	 29 03		and #$03	                AND #$03

.17c8	 85 2b		sta $2b		                STA PITCH_HI

.17ca	 a9 02		lda #$02	JOY_DWN LDA #$02

.17cc	 24 80		bit $80		        BIT ab80

.17ce	 d0 10		bne $17e0	        BNE MOVE

.17d0	 38		sec		                SEC

.17d1	 a5 2a		lda $2a		                LDA PITCH_LO

.17d3	 ed 0b 19	sbc $190b	                SBC abBEA6

.17d6	 85 2a		sta $2a		                STA PITCH_LO

.17d8	 a5 2b		lda $2b		                LDA PITCH_HI

.17da	 e9 00		sbc #$00					SBC #$00

.17dc	 29 03		and #$03					AND #$03

.17de	 85 2b		sta $2b						STA PITCH_HI

.17e0	 a6 ec		ldx $ec		MOVE 	LDX abEC

.17e2	 a5 ed		lda $ed		        LDA abED

.17e4	 ac dc 29	ldy $29dc	        LDY b29DC

.17e7	 10 03		bpl $17ec	        BPL b9F98

.17e9	 18		clc						CLC 

.17ea	 69 04		adc #$04					ADC #$04

.17ec	 86 08		stx $08		b9F98   STX ab08

.17ee	 85 09		sta $09		        STA ab09

.17f0	 ae 13 19	ldx $1913	        LDX abBEAE

.17f3	 ac 14 19	ldy $1914			LDY abBEAF

.17f6	 20 ce 0f	jsr $0fce	        JSR FPMUL

.17f9	 a6 26		ldx $26		        LDX ab26

.17fb	 a4 27		ldy $27		        LDY ab27

.17fd	 20 5f 10	jsr $105f	        JSR FP_ADD

.1800	 ac 10 19	ldy $1910	        LDY abBEAB

.1803	 ae 0f 19	ldx $190f	        LDX abBEAA

.1806	 20 ce 0f	jsr $0fce	        JSR FPMUL

.1809	 86 26		stx $26		        STX ab26

.180b	 84 27		sty $27		        STY ab27

.180d	 a6 38		ldx $38		        LDX PITCH_COS_FP_LO_ab38

.180f	 a4 39		ldy $39		        LDY PITCH_COS_FP_HI_ab39

.1811	 86 08		stx $08		        STX ab08

.1813	 84 09		sty $09		        STY ab09

.1815	 a6 3e		ldx $3e				LDX YAW_COS_FP_LO_ab3E

.1817	 a4 3f		ldy $3f				LDY YAW_COS_FP_HI_ab3F

.1819	 20 ce 0f	jsr $0fce	        JSR FPMUL

.181c	 a6 26		ldx $26		        LDX ab26

.181e	 a4 27		ldy $27		        LDY ab27

.1820	 20 ce 0f	jsr $0fce	        JSR FPMUL

.1823	 20 22 11	jsr $1122			JSR FPTO16BIT

.1826	 98		tya		        TYA 

.1827	 18		clc		        CLC 

.1828	 65 78		adc $78		        ADC CURR_Z_LSB

.182a	 85 78		sta $78		        STA CURR_Z_LSB

.182c	 a0 00		ldy #$00	        LDY #$00

.182e	 8a		txa		        TXA 

.182f	 10 02		bpl $1833	        BPL b9FDF

.1831	 a0 ff		ldy #$ff				LDY #$FF

.1833	 65 79		adc $79		b9FDF   ADC CURR_Z_MSB

.1835	 85 79		sta $79		        STA CURR_Z_MSB

.1837	 98		tya		        TYA 

.1838	 65 7a		adc $7a		        ADC CURR_Z_HSB

.183a	 85 7a		sta $7a		        STA CURR_Z_HSB

.183c	 a6 38		ldx $38		        LDX PITCH_COS_FP_LO_ab38

.183e	 a4 39		ldy $39		        LDY PITCH_COS_FP_HI_ab39

.1840	 86 08		stx $08		        STX ab08

.1842	 84 09		sty $09		        STY ab09

.1844	 a6 3c		ldx $3c		        LDX YAW_SIN_FP_LO_ab3C

.1846	 a4 3d		ldy $3d		        LDY YAW_SIN_FP_HI_ab3D

.1848	 20 ce 0f	jsr $0fce	        JSR FPMUL

.184b	 a6 26		ldx $26		        LDX ab26

.184d	 a4 27		ldy $27		        LDY ab27

.184f	 20 ce 0f	jsr $0fce	        JSR FPMUL

.1852	 20 22 11	jsr $1122	        JSR FPTO16BIT

.1855	 98		tya		        TYA 

.1856	 18		clc		        CLC 

.1857	 65 72		adc $72		        ADC CURR_X_LSB

.1859	 85 72		sta $72		        STA CURR_X_LSB

.185b	 a0 00		ldy #$00	        LDY #$00

.185d	 8a		txa		        TXA 

.185e	 10 02		bpl $1862	        BPL bA00E

.1860	 a0 ff		ldy #$ff				LDY #$FF

.1862	 65 73		adc $73		bA00E   ADC CURR_X_MSB

.1864	 85 73		sta $73		        STA CURR_X_MSB

.1866	 98		tya		        TYA 

.1867	 65 74		adc $74		        ADC CURR_X_HSB

.1869	 85 74		sta $74		        STA CURR_X_HSB

.186b	 a5 7f		lda $7f		        LDA ab7F

.186d	 f0 19		beq $1888	        BEQ bA037

.186f	 a5 fa		lda $fa					LDA abFA

.1871	 f0 02		beq $1875				BEQ bA024

.1873	 b0 13		bcs $1888					BCS bA037

.1875	 a5 27		lda $27		bA024   	LDA ab27

.1877	 49 80		eor #$80				EOR #$80

.1879	 c9 9c		cmp #$9c				CMP #$9C

.187b	 b0 0b		bcs $1888				BCS bA037

.187d	 a9 00		lda #$00					LDA #<f0200

.187f	 85 2a		sta $2a						STA PITCH_LO

.1881	 a9 02		lda #$02					LDA #>f0200

.1883	 85 2b		sta $2b						STA PITCH_HI

.1885	 4c dd 18	jmp $18dd					JMP jA102

.1888	 a6 36		ldx $36		bA037   LDX PITCH_SIN_FP_LO_ab36

.188a	 a4 37		ldy $37		        LDY PITCH_SIN_FP_HI_ab37

.188c	 86 08		stx $08		        STX ab08

.188e	 84 09		sty $09		        STY ab09

.1890	 a6 26		ldx $26		        LDX ab26

.1892	 a4 27		ldy $27		        LDY ab27

.1894	 20 ce 0f	jsr $0fce	        JSR FPMUL

.1897	 98		tya		        TYA 

.1898	 ac 0e 19	ldy $190e	        LDY abBEA9

.189b	 4a		lsr		        LSR 

.189c	 b0 18		bcs $18b6	        BCS bA06B

.189e	 ad 12 19	lda $1912				LDA abBEAD

.18a1	 ae dc 29	ldx $29dc				LDX b29DC

.18a4	 10 02		bpl $18a8				BPL bA05D

.18a6	 a9 5a		lda #$5a						LDA #$5A

.18a8	 38		sec		bA05D   SEC 

.18a9	 e5 77		sbc $77		        SBC CURR_Y_HSB

.18ab	 10 09		bpl $18b6	        BPL bA06B

.18ad	 0a		asl					ASL 

.18ae	 10 04		bpl $18b4				BPL bA069

.18b0	 0a		asl					ASL 

.18b1	 a8		tay					TAY 

.18b2	 30 02		bmi $18b6				BMI bA06B

.18b4	 a0 88		ldy #$88	bA069   	LDY #$88

.18b6	 ae 0d 19	ldx $190d	bA06B   LDX abBEA8

.18b9	 20 ce 0f	jsr $0fce	        JSR FPMUL

.18bc	 20 22 11	jsr $1122	        JSR FPTO16BIT

.18bf	 98		tya		        TYA 

.18c0	 18		clc		        CLC 

.18c1	 65 75		adc $75		        ADC CURR_Y_LSB

.18c3	 85 75		sta $75		        STA CURR_Y_LSB

.18c5	 8a		txa		        TXA 

.18c6	 65 76		adc $76		        ADC CURR_Y_MSB

.18c8	 85 76		sta $76		        STA CURR_Y_MSB

.18ca	 8a		txa		fA07F   TXA 

.18cb	 10 04		bpl $18d1	        BPL bA086

.18cd	 a9 ff		lda #$ff				LDA #$FF

.18cf	 30 02		bmi $18d3				BMI bA088

.18d1	 a9 00		lda #$00	bA086   LDA #$00

.18d3	 65 77		adc $77		bA088   ADC CURR_Y_HSB

.18d5	 85 77		sta $77		        STA CURR_Y_HSB

.18d7	 a9 00		lda #$00	bA0F7   LDA #$00

.18d9	 85 7f		sta $7f		        STA ab7F

.18db	 85 fa		sta $fa		        STA abFA

.18dd	 a6 22		ldx $22		jA102   LDX ab22

.18df	 a4 23		ldy $23		        LDY ab23

.18e1	 20 22 11	jsr $1122	        JSR FPTO16BIT

.18e4	 8a		txa		        TXA 

.18e5	 0a		asl		        ASL 

.18e6	 98		tya		        TYA 

.18e7	 65 2c		adc $2c		        ADC YAW_LO

.18e9	 85 2c		sta $2c		        STA YAW_LO

.18eb	 8a		txa		        TXA 

.18ec	 65 2d		adc $2d		        ADC YAW_HI

.18ee	 85 2d		sta $2d		        STA YAW_HI

.18f0	 a5 7f		lda $7f		        LDA ab7F

.18f2	 d0 12		bne $1906	        BNE jA12B

.18f4	 a6 22		ldx $22					LDX ab22

.18f6	 ad 0c 19	lda $190c				LDA abBEA7

.18f9	 30 03		bmi $18fe	        BMI bA123

.18fb	 18		clc					CLC 

.18fc	 65 23		adc $23					ADC ab23

.18fe	 a8		tay		bA123   TAY 

.18ff	 20 22 11	jsr $1122	        JSR FPTO16BIT

.1902	 84 28		sty $28		        STY ROLL_LO

.1904	 86 29		stx $29		        STX ROLL_HI

.1906	 60		rts		jA12B 	RTS 


>1907	 e0                       	abBEA2  .BYTE $E0

>1908	 fc                       	abBEA3  .BYTE $FC

>1909	 00                       	abBEA4  .BYTE $00

>190a	 00                       	abBEA5  .BYTE $00

>190b	 08                       	abBEA6  .BYTE $08

>190c	 08                       	abBEA7  .BYTE $08

>190d	 00                       	abBEA8  .BYTE $00

>190e	 fc                       	abBEA9  .BYTE $FC

>190f	 00                       	abBEAA  .BYTE $00

>1910	 fc 10                    	abBEAB  .BYTE $FC,$10

>1912	 0a                       	abBEAD  .BYTE $0A

>1913	 90                       	abBEAE  .BYTE $90

>1914	 f8                       	abBEAF  .BYTE $F8


.1915	 b9 ad 19	lda $19ad,y	HEXCHAR		LDA		HEX0,Y

.1918	 9d cd ab	sta $abcd,x	HEX_NUMBER0	STA		$ABCD,X

.191b	 b9 bd 19	lda $19bd,y				LDA		HEX1,Y

.191e	 9d cd ab	sta $abcd,x	HEX_NUMBER1	STA		$ABCD,X

.1921	 b9 cd 19	lda $19cd,y				LDA		HEX2,Y

.1924	 9d cd ab	sta $abcd,x	HEX_NUMBER2	STA		$ABCD,X

.1927	 b9 dd 19	lda $19dd,y				LDA		HEX3,Y

.192a	 9d cd ab	sta $abcd,x	HEX_NUMBER3	STA		$ABCD,X

.192d	 b9 ed 19	lda $19ed,y				LDA		HEX4,Y

.1930	 9d cd ab	sta $abcd,x	HEX_NUMBER4	STA		$ABCD,X

.1933	 60		rts					RTS

.1934	 84 87		sty $87		HEX16		STY		REGY	; Y = YPOS / A = HI / X = LO

.1936	 86 86		stx $86					STX		REGX		

.1938	 a2 00		ldx #$00				LDX		#0

.193a	 20 47 19	jsr $1947				JSR		HEX8

.193d	 a5 86		lda $86					LDA		REGX

.193f	 a4 87		ldy $87					LDY		REGY

.1941	 a2 10		ldx #$10				LDX		#16

.1943	 20 47 19	jsr $1947				JSR		HEX8

.1946	 60		rts					RTS

.1947	 18		clc		HEX8		CLC		; A = NUM / Y = YPOS / X = XPOS

.1948	 85 85		sta $85					STA		REGA

.194a	 b9 08 0f	lda $0f08,y				LDA		VER_POS_LO+0,Y

.194d	 8d 19 19	sta $1919				STA		HEX_NUMBER0+1

.1950	 b9 78 0e	lda $0e78,y				LDA		VER_POS_HI+0,Y

.1953	 18		clc					CLC

.1954	 65 25		adc $25					ADC	SCREEN_BANK

.1956	 8d 1a 19	sta $191a				STA		HEX_NUMBER0+2

.1959	 b9 09 0f	lda $0f09,y				LDA		VER_POS_LO+1,Y

.195c	 8d 1f 19	sta $191f				STA		HEX_NUMBER1+1

.195f	 b9 79 0e	lda $0e79,y				LDA		VER_POS_HI+1,Y 

.1962	 18		clc					CLC

.1963	 65 25		adc $25					ADC	SCREEN_BANK

.1965	 8d 20 19	sta $1920				STA		HEX_NUMBER1+2

.1968	 b9 0a 0f	lda $0f0a,y				LDA		VER_POS_LO+2,Y

.196b	 8d 25 19	sta $1925				STA		HEX_NUMBER2+1

.196e	 b9 7a 0e	lda $0e7a,y				LDA		VER_POS_HI+2,Y 

.1971	 18		clc					CLC

.1972	 65 25		adc $25					ADC	SCREEN_BANK

.1974	 8d 26 19	sta $1926				STA		HEX_NUMBER2+2

.1977	 b9 0b 0f	lda $0f0b,y				LDA		VER_POS_LO+3,Y

.197a	 8d 2b 19	sta $192b				STA		HEX_NUMBER3+1

.197d	 b9 7b 0e	lda $0e7b,y				LDA		VER_POS_HI+3,Y 

.1980	 18		clc					CLC

.1981	 65 25		adc $25					ADC	SCREEN_BANK

.1983	 8d 2c 19	sta $192c				STA		HEX_NUMBER3+2

.1986	 b9 0c 0f	lda $0f0c,y				LDA		VER_POS_LO+4,Y

.1989	 8d 31 19	sta $1931				STA		HEX_NUMBER4+1

.198c	 b9 7c 0e	lda $0e7c,y				LDA		VER_POS_HI+4,Y 

.198f	 18		clc					CLC

.1990	 65 25		adc $25					ADC	SCREEN_BANK

.1992	 8d 32 19	sta $1932				STA		HEX_NUMBER4+2

.1995	 a5 85		lda $85					LDA		REGA

.1997	 4a		lsr					LSR

.1998	 4a		lsr					LSR

.1999	 4a		lsr					LSR

.199a	 4a		lsr					LSR

.199b	 a8		tay					TAY

.199c	 20 15 19	jsr $1915				JSR		HEXCHAR

.199f	 8a		txa					TXA

.19a0	 18		clc					CLC

.19a1	 69 08		adc #$08				ADC 	#8

.19a3	 aa		tax					TAX

.19a4	 a5 85		lda $85					LDA		REGA

.19a6	 29 0f		and #$0f				AND		#15

.19a8	 a8		tay					TAY

.19a9	 20 15 19	jsr $1915				JSR		HEXCHAR

.19ac	 60		rts					RTS


>19ad	 80 a2 80 80 88 80 80 80 	HEX0	.BYTE %10000000,%10100010,%10000000,%10000000,%10001000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000010,%10000000,%10000000 

>19b5	 80 80 80 80 80 82 80 80 
>19bd	 88 82 a8 a8 88 8a 8a a8 	HEX1	.BYTE %10001000,%10000010,%10101000,%10101000,%10001000,%10001010,%10001010,%10101000,%10001000,%10001000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010 

>19c5	 88 88 88 88 8a 88 8a 8a 
>19cd	 88 a2 80 80 80 80 80 a8 	HEX2	.BYTE %10001000,%10100010,%10000000,%10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10000000,%10000010,%10001010,%10001000,%10000000,%10000000

>19d5	 80 80 80 82 8a 88 80 80 
>19dd	 88 a2 8a a8 a8 a8 88 a8 	HEX3	.BYTE %10001000,%10100010,%10001010,%10101000,%10101000,%10101000,%10001000,%10101000,%10001000,%10101000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010

>19e5	 88 a8 88 88 8a 88 8a 8a 
>19ed	 80 80 80 80 a8 80 80 a8 	HEX4	.BYTE %10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10101000,%10000000,%10000000,%10001000,%10000000,%10100000,%10000010,%10000000,%10001010

>19f5	 80 80 88 80 a0 82 80 8a 
=4000					f4000 = $4000

=5c00					SCREEN_COLOUR = $5C00

=6000					f6000 = $6000


;******  end of code
