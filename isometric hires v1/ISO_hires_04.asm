*= $801

SCRADR = 32768+8192       ; 16384 ; 56*1024 ; 16384 ; 56*1024 24576 ; 16384 ; 40*1024
SCRCOL = SCRADR-(1024*5) ; SCRADR+8192 ; 54*1024 ; SCRADR+$2000 ; 54*1024

; spare 3k memory between SCRCOL + SCRADR
; spare 8k between 56k and 64k

ISOWIDTH = 128

SCR = 2
TX = SCR +2
TY = TX +1
TZ = TY +1
POSY = TZ +1
FIRE = POSY +1

 SEI        ; disable maskable IRQs

 LDA #$7F
 STA $DC0D  ; disable timer interrupts which can be generated by the two CIA chips
 STA $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

 LDA $DC0D  ; by reading this two registers we negate any pending CIA irqs.
 LDA $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

 LDA #$01   ; this is how to tell the VICII to generate a raster interrupt
 STA $D01A
 LDA #$FB   ; this is how to tell at which rasterline we want the irq to be triggered
 STA $D012

 LDA #%00111000 ; 0-2=SCRL 3=25/24 4=VIS 5=BM 6=ECM 7=MSBRST
 STA $D011      ; VIC Control Register 1
 LDA #%00001000 ; 0-2=SCRL 3=40/38 4=MCM 5-7=UNUSED
 STA $D016      ; VIC Control Register 2

 LDA #$35   ; we turn off the BASIC and KERNAL rom here
 STA $01    ; the cpu now sees RAM everywhere except at $d000-$e000, where still the registers of SID/VICII/etc are visible

 ldA #<BM_IRQ  ; this is how we set up
 STA $FFFE     ; the address of our interrupt code
 LDA #>BM_IRQ
 STA $FFFF
  
 LDA #<NMI_NOP  ; lsb
 STA $FFFA      ; Create a nop, irq handler for NMI that gets called whenever RESTORE is pressed or similar.
 LDA #>NMI_NOP  ; msb
 STA $FFFB      ; We're putting our irq handler directly in the vector that usually points to the kernal's NMI handler since we have kernal banked out.

 LDA #$00       ; Force an NMI by setting up a timer. This will cause an NMI, that won't be acked. Any subsequent NMI's from RESTORE will be essentially disabled.
 STA $DD0E      ; Stop timer A
 STA $DD04      ; Set timer A to 0, NMI will occure immediately after start
 STA $DD0E

 LDA #$81
 STA $DD0D       ; Set timer A as source for NMI

 LDA #$01
 STA $DD0E       ; Start timer A -> NMI

 LDA #$01 ;2
 STA $DD00 ; bank
 LDA #%00111000 ; 80 (10000000)
 STA $D018    ;VIC Memory Control Register - screen at bank 0 - colour at bank 8

 LDA #$00
 STA $D021

 LDA #$01 ; colour 01 (0000????) and colour 10 (????0000) - bank 1
 LDX #<SCRADR
 LDY #>SCRADR 
 STX SCR+0
 STY SCR+1
 LDX #>8000 
 LDY #<8000
 JSR MEMSET

 LDA #$16 ; colour 01 (0000????) and colour 10 (????0000) - bank 1
 LDX #<SCRCOL
 LDY #>SCRCOL 
 STX SCR+0
 STY SCR+1
 LDX #>1000 
 LDY #<1000
 JSR MEMSET
  
 LDA #0
 STA TX
 STA TY
 STA TZ
;CLI ; enable maskable interrupts again

MLOOP:
 JSR V_WAIT
 JSR JOYSTICK
 
 LDX TX
 LDY TY 
 JSR PLOT
 
 LDA TX
 LDX TY
 LDY #0; 63 ;0
 JSR ISO
 JSR PLOT

JMP MLOOP ; we better don't RTS, the ROMS are now switched off, there's no way back to the system

!ZONE JOYSTICK
JOYSTICK:
 LDA $DC00
 LSR
 BCS .LEFT
  DEC TY
.LEFT
 LSR
 BCS .RIGHT
  INC TY
.RIGHT
 LSR
 BCS .UP
  DEC TX
.UP
 LSR
 BCS .DOWN
  INC TX
.DOWN
 AND #1
 STA FIRE
RTS
                      ;

!ZONE V_WAIT
V_WAIT
 LDA #248
.LOOP
 CMP $D012
 BNE .LOOP
 INC $D020
 DEC $D020
RTS

BM_IRQ:
 INC $D019    ;VIC Interrupt Request Register (IRR)
 PHA
 TXA 
 PHA
 TYA 
 PHA 

 PLA 
 TAY
 PLA 
 TAX
 PLA
NMI_NOP:
RTI ; This is the irq handler for the NMI. Just returns without acknowledge. This prevents subsequent NMI's from interfering.

PLOT:
 LDA SC_LO,Y
 STA SCR 
 LDA SC_HI,Y 
 STA SCR+1 
 LDY SCR_TAB3,X
 LDA (SCR),Y
 AND SCR_AND_TAB,X
 ORA SCR_OR_TAB,X
 STA (SCR),Y 
RTS
  
!ZONE MEMSET        
MEMSET       STY    .LSB_ONLY+1 ; store LSB count
             CPX    #0          ; MSB?     
             BEQ    .LSB_ONLY   ; no

             LDY    #0          ; yes so reset LSB
.MSB_LOOP  
.LSB_LOOP      STA    (SCR),Y   ; clear whole MSB
               DEY 
               BNE    .LSB_LOOP

              INC    SCR+1      ; inc MSB
              DEX               ; dec MSB count
              BNE    .MSB_LOOP

.LSB_ONLY    LDY    #0          ; LSB count 
             BEQ    .MS_END     ; not needed

.LAST_LSB_LOOP STA   (SCR),Y
               DEY 
               BNE   .LAST_LSB_LOOP
                
              STA   (SCR),Y     ; clear last Y (0)
 
.MS_END      RTS

; A = POSX
; X = POSY
; Y = POSZ
;  return XY(ISOLEFT + ( (pos.x - pos.y) <<1 ), pos.x + pos.y + pos.z);

ISO:  STX POSY
      STY .POSZ +1
      TAY

      SEC
      SBC POSY
      ASL
      ADC #ISOWIDTH
      TAX

      TYA
      CLC
      ADC POSY
.POSZ ADC #0
      TAY ; STA YPOS
    
  RTS
 
SCR_TAB3:
!BYTE $00,$00,$00,$00,$00,$00,$00,$00
!BYTE $08,$08,$08,$08,$08,$08,$08,$08
!BYTE $10,$10,$10,$10,$10,$10,$10,$10
!BYTE $18,$18,$18,$18,$18,$18,$18,$18
!BYTE $20,$20,$20,$20,$20,$20,$20,$20
!BYTE $28,$28,$28,$28,$28,$28,$28,$28
!BYTE $30,$30,$30,$30,$30,$30,$30,$30
!BYTE $38,$38,$38,$38,$38,$38,$38,$38
!BYTE $40,$40,$40,$40,$40,$40,$40,$40
!BYTE $48,$48,$48,$48,$48,$48,$48,$48
!BYTE $50,$50,$50,$50,$50,$50,$50,$50
!BYTE $58,$58,$58,$58,$58,$58,$58,$58
!BYTE $60,$60,$60,$60,$60,$60,$60,$60
!BYTE $68,$68,$68,$68,$68,$68,$68,$68
!BYTE $70,$70,$70,$70,$70,$70,$70,$70
!BYTE $78,$78,$78,$78,$78,$78,$78,$78
!BYTE $80,$80,$80,$80,$80,$80,$80,$80
!BYTE $88,$88,$88,$88,$88,$88,$88,$88
!BYTE $90,$90,$90,$90,$90,$90,$90,$90
!BYTE $98,$98,$98,$98,$98,$98,$98,$98
!BYTE $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
!BYTE $A8,$A8,$A8,$A8,$A8,$A8,$A8,$A8
!BYTE $B0,$B0,$B0,$B0,$B0,$B0,$B0,$B0
!BYTE $B8,$B8,$B8,$B8,$B8,$B8,$B8,$B8
!BYTE $C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0
!BYTE $C8,$C8,$C8,$C8,$C8,$C8,$C8,$C8
!BYTE $D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0
!BYTE $D8,$D8,$D8,$D8,$D8,$D8,$D8,$D8
!BYTE $E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0
!BYTE $E8,$E8,$E8,$E8,$E8,$E8,$E8,$E8
!BYTE $F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0
!BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

SCR_AND_TAB:
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE
!BYTE $7F,$BF,$DF,$EF,$F7,$FB,$FD,$FE

SCR_OR_TAB:
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01
!BYTE $80,$40,$20,$10,$08,$04,$02,$01

SC_HI:
!BYTE >(SCRADR+(00*320)+0),>(SCRADR+(00*320)+1),>(SCRADR+(00*320)+2),>(SCRADR+(00*320)+3),>(SCRADR+(00*320)+4),>(SCRADR+(00*320)+5),>(SCRADR+(00*320)+6),>(SCRADR+(00*320)+7)
!BYTE >(SCRADR+(01*320)+0),>(SCRADR+(01*320)+1),>(SCRADR+(01*320)+2),>(SCRADR+(01*320)+3),>(SCRADR+(01*320)+4),>(SCRADR+(01*320)+5),>(SCRADR+(01*320)+6),>(SCRADR+(01*320)+7)
!BYTE >(SCRADR+(02*320)+0),>(SCRADR+(02*320)+1),>(SCRADR+(02*320)+2),>(SCRADR+(02*320)+3),>(SCRADR+(02*320)+4),>(SCRADR+(02*320)+5),>(SCRADR+(02*320)+6),>(SCRADR+(02*320)+7)
!BYTE >(SCRADR+(03*320)+0),>(SCRADR+(03*320)+1),>(SCRADR+(03*320)+2),>(SCRADR+(03*320)+3),>(SCRADR+(03*320)+4),>(SCRADR+(03*320)+5),>(SCRADR+(03*320)+6),>(SCRADR+(03*320)+7)
!BYTE >(SCRADR+(04*320)+0),>(SCRADR+(04*320)+1),>(SCRADR+(04*320)+2),>(SCRADR+(04*320)+3),>(SCRADR+(04*320)+4),>(SCRADR+(04*320)+5),>(SCRADR+(04*320)+6),>(SCRADR+(04*320)+7)
!BYTE >(SCRADR+(05*320)+0),>(SCRADR+(05*320)+1),>(SCRADR+(05*320)+2),>(SCRADR+(05*320)+3),>(SCRADR+(05*320)+4),>(SCRADR+(05*320)+5),>(SCRADR+(05*320)+6),>(SCRADR+(05*320)+7)
!BYTE >(SCRADR+(06*320)+0),>(SCRADR+(06*320)+1),>(SCRADR+(06*320)+2),>(SCRADR+(06*320)+3),>(SCRADR+(06*320)+4),>(SCRADR+(06*320)+5),>(SCRADR+(06*320)+6),>(SCRADR+(06*320)+7)
!BYTE >(SCRADR+(07*320)+0),>(SCRADR+(07*320)+1),>(SCRADR+(07*320)+2),>(SCRADR+(07*320)+3),>(SCRADR+(07*320)+4),>(SCRADR+(07*320)+5),>(SCRADR+(07*320)+6),>(SCRADR+(07*320)+7)
!BYTE >(SCRADR+(08*320)+0),>(SCRADR+(08*320)+1),>(SCRADR+(08*320)+2),>(SCRADR+(08*320)+3),>(SCRADR+(08*320)+4),>(SCRADR+(08*320)+5),>(SCRADR+(08*320)+6),>(SCRADR+(08*320)+7)
!BYTE >(SCRADR+(09*320)+0),>(SCRADR+(09*320)+1),>(SCRADR+(09*320)+2),>(SCRADR+(09*320)+3),>(SCRADR+(09*320)+4),>(SCRADR+(09*320)+5),>(SCRADR+(09*320)+6),>(SCRADR+(09*320)+7)
!BYTE >(SCRADR+(10*320)+0),>(SCRADR+(10*320)+1),>(SCRADR+(10*320)+2),>(SCRADR+(10*320)+3),>(SCRADR+(10*320)+4),>(SCRADR+(10*320)+5),>(SCRADR+(10*320)+6),>(SCRADR+(10*320)+7)
!BYTE >(SCRADR+(11*320)+0),>(SCRADR+(11*320)+1),>(SCRADR+(11*320)+2),>(SCRADR+(11*320)+3),>(SCRADR+(11*320)+4),>(SCRADR+(11*320)+5),>(SCRADR+(11*320)+6),>(SCRADR+(11*320)+7)
!BYTE >(SCRADR+(12*320)+0),>(SCRADR+(12*320)+1),>(SCRADR+(12*320)+2),>(SCRADR+(12*320)+3),>(SCRADR+(12*320)+4),>(SCRADR+(12*320)+5),>(SCRADR+(12*320)+6),>(SCRADR+(12*320)+7)
!BYTE >(SCRADR+(13*320)+0),>(SCRADR+(13*320)+1),>(SCRADR+(13*320)+2),>(SCRADR+(13*320)+3),>(SCRADR+(13*320)+4),>(SCRADR+(13*320)+5),>(SCRADR+(13*320)+6),>(SCRADR+(13*320)+7)
!BYTE >(SCRADR+(14*320)+0),>(SCRADR+(14*320)+1),>(SCRADR+(14*320)+2),>(SCRADR+(14*320)+3),>(SCRADR+(14*320)+4),>(SCRADR+(14*320)+5),>(SCRADR+(14*320)+6),>(SCRADR+(14*320)+7)
!BYTE >(SCRADR+(15*320)+0),>(SCRADR+(15*320)+1),>(SCRADR+(15*320)+2),>(SCRADR+(15*320)+3),>(SCRADR+(15*320)+4),>(SCRADR+(15*320)+5),>(SCRADR+(15*320)+6),>(SCRADR+(15*320)+7)
!BYTE >(SCRADR+(16*320)+0),>(SCRADR+(16*320)+1),>(SCRADR+(16*320)+2),>(SCRADR+(16*320)+3),>(SCRADR+(16*320)+4),>(SCRADR+(16*320)+5),>(SCRADR+(16*320)+6),>(SCRADR+(16*320)+7)
!BYTE >(SCRADR+(17*320)+0),>(SCRADR+(17*320)+1),>(SCRADR+(17*320)+2),>(SCRADR+(17*320)+3),>(SCRADR+(17*320)+4),>(SCRADR+(17*320)+5),>(SCRADR+(17*320)+6),>(SCRADR+(17*320)+7)
!BYTE >(SCRADR+(18*320)+0),>(SCRADR+(18*320)+1),>(SCRADR+(18*320)+2),>(SCRADR+(18*320)+3),>(SCRADR+(18*320)+4),>(SCRADR+(18*320)+5),>(SCRADR+(18*320)+6),>(SCRADR+(18*320)+7)
!BYTE >(SCRADR+(19*320)+0),>(SCRADR+(19*320)+1),>(SCRADR+(19*320)+2),>(SCRADR+(19*320)+3),>(SCRADR+(19*320)+4),>(SCRADR+(19*320)+5),>(SCRADR+(19*320)+6),>(SCRADR+(19*320)+7)
!BYTE >(SCRADR+(20*320)+0),>(SCRADR+(20*320)+1),>(SCRADR+(20*320)+2),>(SCRADR+(20*320)+3),>(SCRADR+(20*320)+4),>(SCRADR+(20*320)+5),>(SCRADR+(20*320)+6),>(SCRADR+(20*320)+7)
!BYTE >(SCRADR+(21*320)+0),>(SCRADR+(21*320)+1),>(SCRADR+(21*320)+2),>(SCRADR+(21*320)+3),>(SCRADR+(21*320)+4),>(SCRADR+(21*320)+5),>(SCRADR+(21*320)+6),>(SCRADR+(21*320)+7)
!BYTE >(SCRADR+(22*320)+0),>(SCRADR+(22*320)+1),>(SCRADR+(22*320)+2),>(SCRADR+(22*320)+3),>(SCRADR+(22*320)+4),>(SCRADR+(22*320)+5),>(SCRADR+(22*320)+6),>(SCRADR+(22*320)+7)
!BYTE >(SCRADR+(23*320)+0),>(SCRADR+(23*320)+1),>(SCRADR+(23*320)+2),>(SCRADR+(23*320)+3),>(SCRADR+(23*320)+4),>(SCRADR+(23*320)+5),>(SCRADR+(23*320)+6),>(SCRADR+(23*320)+7)
!BYTE >(SCRADR+(24*320)+0),>(SCRADR+(24*320)+1),>(SCRADR+(24*320)+2),>(SCRADR+(24*320)+3),>(SCRADR+(24*320)+4),>(SCRADR+(24*320)+5),>(SCRADR+(24*320)+6),>(SCRADR+(24*320)+7)

SC_LO:
!BYTE <(SCRADR+(00*320)+0),<(SCRADR+(00*320)+1),<(SCRADR+(00*320)+2),<(SCRADR+(00*320)+3),<(SCRADR+(00*320)+4),<(SCRADR+(00*320)+5),<(SCRADR+(00*320)+6),<(SCRADR+(00*320)+7)
!BYTE <(SCRADR+(01*320)+0),<(SCRADR+(01*320)+1),<(SCRADR+(01*320)+2),<(SCRADR+(01*320)+3),<(SCRADR+(01*320)+4),<(SCRADR+(01*320)+5),<(SCRADR+(01*320)+6),<(SCRADR+(01*320)+7)
!BYTE <(SCRADR+(02*320)+0),<(SCRADR+(02*320)+1),<(SCRADR+(02*320)+2),<(SCRADR+(02*320)+3),<(SCRADR+(02*320)+4),<(SCRADR+(02*320)+5),<(SCRADR+(02*320)+6),<(SCRADR+(02*320)+7)
!BYTE <(SCRADR+(03*320)+0),<(SCRADR+(03*320)+1),<(SCRADR+(03*320)+2),<(SCRADR+(03*320)+3),<(SCRADR+(03*320)+4),<(SCRADR+(03*320)+5),<(SCRADR+(03*320)+6),<(SCRADR+(03*320)+7)
!BYTE <(SCRADR+(04*320)+0),<(SCRADR+(04*320)+1),<(SCRADR+(04*320)+2),<(SCRADR+(04*320)+3),<(SCRADR+(04*320)+4),<(SCRADR+(04*320)+5),<(SCRADR+(04*320)+6),<(SCRADR+(04*320)+7)
!BYTE <(SCRADR+(05*320)+0),<(SCRADR+(05*320)+1),<(SCRADR+(05*320)+2),<(SCRADR+(05*320)+3),<(SCRADR+(05*320)+4),<(SCRADR+(05*320)+5),<(SCRADR+(05*320)+6),<(SCRADR+(05*320)+7)
!BYTE <(SCRADR+(06*320)+0),<(SCRADR+(06*320)+1),<(SCRADR+(06*320)+2),<(SCRADR+(06*320)+3),<(SCRADR+(06*320)+4),<(SCRADR+(06*320)+5),<(SCRADR+(06*320)+6),<(SCRADR+(06*320)+7)
!BYTE <(SCRADR+(07*320)+0),<(SCRADR+(07*320)+1),<(SCRADR+(07*320)+2),<(SCRADR+(07*320)+3),<(SCRADR+(07*320)+4),<(SCRADR+(07*320)+5),<(SCRADR+(07*320)+6),<(SCRADR+(07*320)+7)
!BYTE <(SCRADR+(08*320)+0),<(SCRADR+(08*320)+1),<(SCRADR+(08*320)+2),<(SCRADR+(08*320)+3),<(SCRADR+(08*320)+4),<(SCRADR+(08*320)+5),<(SCRADR+(08*320)+6),<(SCRADR+(08*320)+7)
!BYTE <(SCRADR+(09*320)+0),<(SCRADR+(09*320)+1),<(SCRADR+(09*320)+2),<(SCRADR+(09*320)+3),<(SCRADR+(09*320)+4),<(SCRADR+(09*320)+5),<(SCRADR+(09*320)+6),<(SCRADR+(09*320)+7)
!BYTE <(SCRADR+(10*320)+0),<(SCRADR+(10*320)+1),<(SCRADR+(10*320)+2),<(SCRADR+(10*320)+3),<(SCRADR+(10*320)+4),<(SCRADR+(10*320)+5),<(SCRADR+(10*320)+6),<(SCRADR+(10*320)+7)
!BYTE <(SCRADR+(11*320)+0),<(SCRADR+(11*320)+1),<(SCRADR+(11*320)+2),<(SCRADR+(11*320)+3),<(SCRADR+(11*320)+4),<(SCRADR+(11*320)+5),<(SCRADR+(11*320)+6),<(SCRADR+(11*320)+7)
!BYTE <(SCRADR+(12*320)+0),<(SCRADR+(12*320)+1),<(SCRADR+(12*320)+2),<(SCRADR+(12*320)+3),<(SCRADR+(12*320)+4),<(SCRADR+(12*320)+5),<(SCRADR+(12*320)+6),<(SCRADR+(12*320)+7)
!BYTE <(SCRADR+(13*320)+0),<(SCRADR+(13*320)+1),<(SCRADR+(13*320)+2),<(SCRADR+(13*320)+3),<(SCRADR+(13*320)+4),<(SCRADR+(13*320)+5),<(SCRADR+(13*320)+6),<(SCRADR+(13*320)+7)
!BYTE <(SCRADR+(14*320)+0),<(SCRADR+(14*320)+1),<(SCRADR+(14*320)+2),<(SCRADR+(14*320)+3),<(SCRADR+(14*320)+4),<(SCRADR+(14*320)+5),<(SCRADR+(14*320)+6),<(SCRADR+(14*320)+7)
!BYTE <(SCRADR+(15*320)+0),<(SCRADR+(15*320)+1),<(SCRADR+(15*320)+2),<(SCRADR+(15*320)+3),<(SCRADR+(15*320)+4),<(SCRADR+(15*320)+5),<(SCRADR+(15*320)+6),<(SCRADR+(15*320)+7)
!BYTE <(SCRADR+(16*320)+0),<(SCRADR+(16*320)+1),<(SCRADR+(16*320)+2),<(SCRADR+(16*320)+3),<(SCRADR+(16*320)+4),<(SCRADR+(16*320)+5),<(SCRADR+(16*320)+6),<(SCRADR+(16*320)+7)
!BYTE <(SCRADR+(17*320)+0),<(SCRADR+(17*320)+1),<(SCRADR+(17*320)+2),<(SCRADR+(17*320)+3),<(SCRADR+(17*320)+4),<(SCRADR+(17*320)+5),<(SCRADR+(17*320)+6),<(SCRADR+(17*320)+7)
!BYTE <(SCRADR+(18*320)+0),<(SCRADR+(18*320)+1),<(SCRADR+(18*320)+2),<(SCRADR+(18*320)+3),<(SCRADR+(18*320)+4),<(SCRADR+(18*320)+5),<(SCRADR+(18*320)+6),<(SCRADR+(18*320)+7)
!BYTE <(SCRADR+(19*320)+0),<(SCRADR+(19*320)+1),<(SCRADR+(19*320)+2),<(SCRADR+(19*320)+3),<(SCRADR+(19*320)+4),<(SCRADR+(19*320)+5),<(SCRADR+(19*320)+6),<(SCRADR+(19*320)+7)
!BYTE <(SCRADR+(20*320)+0),<(SCRADR+(20*320)+1),<(SCRADR+(20*320)+2),<(SCRADR+(20*320)+3),<(SCRADR+(20*320)+4),<(SCRADR+(20*320)+5),<(SCRADR+(20*320)+6),<(SCRADR+(20*320)+7)
!BYTE <(SCRADR+(21*320)+0),<(SCRADR+(21*320)+1),<(SCRADR+(21*320)+2),<(SCRADR+(21*320)+3),<(SCRADR+(21*320)+4),<(SCRADR+(21*320)+5),<(SCRADR+(21*320)+6),<(SCRADR+(21*320)+7)
!BYTE <(SCRADR+(22*320)+0),<(SCRADR+(22*320)+1),<(SCRADR+(22*320)+2),<(SCRADR+(22*320)+3),<(SCRADR+(22*320)+4),<(SCRADR+(22*320)+5),<(SCRADR+(22*320)+6),<(SCRADR+(22*320)+7)
!BYTE <(SCRADR+(23*320)+0),<(SCRADR+(23*320)+1),<(SCRADR+(23*320)+2),<(SCRADR+(23*320)+3),<(SCRADR+(23*320)+4),<(SCRADR+(23*320)+5),<(SCRADR+(23*320)+6),<(SCRADR+(23*320)+7)
!BYTE <(SCRADR+(24*320)+0),<(SCRADR+(24*320)+1),<(SCRADR+(24*320)+2),<(SCRADR+(24*320)+3),<(SCRADR+(24*320)+4),<(SCRADR+(24*320)+5),<(SCRADR+(24*320)+6),<(SCRADR+(24*320)+7)
