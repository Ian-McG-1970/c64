*= $1000

SCR_LO = 2 ; 
SCR_HI = SCR_LO+1
SCR = SCR_LO

BANK = SCR_HI+1

LINE_FRAC = BANK+1
LINE_INC = LINE_FRAC+1
LINE_VER = LINE_INC+1
LINE_END = LINE_VER+1
H_ST = LINE_END+1
H_EN = H_ST+1
V_ST = H_EN+1
V_EN = V_ST+1

INCP = LINE_INC
PNT = LINE_VER
LIMIT = LINE_END

X_PNT_LO = V_EN+1
X_PNT_HI = X_PNT_LO+1
Y_PNT_LO = X_PNT_HI+1
Y_PNT_HI = Y_PNT_LO+1
Z_PNT_LO = Y_PNT_HI+1
Z_PNT_HI = Z_PNT_LO+1
X_OFF_LO = Z_PNT_HI+1
X_OFF_HI = X_OFF_LO+1
Y_OFF_LO = X_OFF_HI+1
Y_OFF_HI = Y_OFF_LO+1
Z_OFF_LO = Y_OFF_HI+1
Z_OFF_HI = Z_OFF_LO+1
CC = Z_OFF_HI+1
PNT_CNT = CC+1

X_PNT = X_PNT_LO
Y_PNT = Y_PNT_LO
Z_PNT = Z_PNT_LO
X_OFF = X_OFF_LO
Y_OFF = Y_OFF_LO
Z_OFF = Z_OFF_LO
LINE_CNT = PNT_CNT +1

DIVIDEND = LINE_CNT +1 ; 3 BYTES
DIVISOR = DIVIDEND +3 ; 3 BYTES
RESULT = DIVISOR +3 ; 3 BYTES?
REMAINDER = RESULT +3 ; 3 BYTES?

CC_OR = REMAINDER +3
CC_AND = CC_OR +1
X_CLIP_STT = CC_AND +1
X_CLIP_END = X_CLIP_STT +2
Y_CLIP_STT = X_CLIP_END +2
Y_CLIP_END = Y_CLIP_STT +2
Z_CLIP_STT = Y_CLIP_END +2
Z_CLIP_END = Z_CLIP_STT +2
X_CLIP_MID = Y_CLIP_END +2
Y_CLIP_MID = X_CLIP_MID +2
Z_CLIP_MID = Y_CLIP_MID +2
CLIP_MID = Z_CLIP_MID +2

P_SQR_LO=CLIP_MID +2
P_SQR_HI=P_SQR_LO +2
P_INVSQR_LO=P_SQR_HI +2
P_INVSQR_HI=P_INVSQR_LO +2
X0=P_INVSQR_HI +2
X1=X0 +1
Y0=X1 +1
Y1=Y0 +1
Z0=Y1 +1
Z1=Z0 +1
Z2=Z1 +1
Z3=Z2 +1

X_CLIP_S_PNT_LO = Z3 +1
X_CLIP_S_PNT_HI = X_CLIP_S_PNT_LO +1
Y_CLIP_S_PNT_LO = X_CLIP_S_PNT_HI +1
Y_CLIP_S_PNT_HI = Y_CLIP_S_PNT_LO +1
Z_CLIP_S_PNT_LO = Y_CLIP_S_PNT_HI +1
Z_CLIP_S_PNT_HI = Z_CLIP_S_PNT_LO +1
X_CLIP_E_PNT_LO = Z_CLIP_S_PNT_HI +1
X_CLIP_E_PNT_HI = X_CLIP_E_PNT_LO +1
Y_CLIP_E_PNT_LO = X_CLIP_E_PNT_HI +1
Y_CLIP_E_PNT_HI = Y_CLIP_E_PNT_LO +1
Z_CLIP_E_PNT_LO = Y_CLIP_E_PNT_HI +1
Z_CLIP_E_PNT_HI = Z_CLIP_E_PNT_LO +1
X_CLIP_S_PER_LO = Z_CLIP_E_PNT_HI +1
X_CLIP_S_PER_HI = X_CLIP_S_PER_LO +1
Y_CLIP_S_PER_LO = X_CLIP_S_PER_HI +1
Y_CLIP_S_PER_HI = Y_CLIP_S_PER_LO +1

X_CLIP_E_PER_LO = Y_CLIP_S_PER_HI +1
X_CLIP_E_PER_HI = X_CLIP_E_PER_LO +1
Y_CLIP_E_PER_LO = X_CLIP_E_PER_HI +1
Y_CLIP_E_PER_HI = Y_CLIP_E_PER_LO +1

CC_S = Y_CLIP_E_PER_HI +1
CC_E = CC_S +1

X_ROT = CC_E +1
Y_ROT = X_ROT +2
Z_ROT = Y_ROT +2
YC_TEMP = Z_ROT +2
YS_TEMP = YC_TEMP +2
ZC_TEMP = YS_TEMP +2
ZS_TEMP = ZC_TEMP +2
XC_TEMP = ZS_TEMP +2
XS_TEMP = XC_TEMP +2
T2 = XS_TEMP +2
T8 = T2 +1
T6 = T8 +1
T1 = T6 +1
T4 = T1 +1
T9 = T4 +1
T3 = T9 +1
T5 = T3 +1
T7 = T5 +1
T10 = T7 +1
tmp1 = T10 +1
tmp2 = tmp1 +1
tmp3 = tmp2 +1
XSINTMP = tmp3 +1
XCOSTMP = XSINTMP +1
YSINTMP = XCOSTMP +1
YCOSTMP = YSINTMP +1
ZSINTMP = YCOSTMP +1
ZCOSTMP = ZSINTMP +1
OBJECT_PTR = ZCOSTMP +1
COLOUR = OBJECT_PTR +2
HOR_LINES = COLOUR +1
OBJECT_HPOS = HOR_LINES +1
HOR_START_LINE = OBJECT_HPOS +1
NEXT_PTR = HOR_START_LINE +1
VER_FULL_LINES = NEXT_PTR +1
VER_PARTIAL_LINES = VER_FULL_LINES +1
AND_VAL = VER_PARTIAL_LINES +1
ORA_VAL = AND_VAL +1
COLUMN = ORA_VAL +1
SAME_PATTERN_COUNT = COLUMN +1
YREG_BK = SAME_PATTERN_COUNT +1

HOR_END = YREG_BK +1

CLIP_OFFSET = 16384
MAX_PNT = 64
       
RXL = 512
RXH = RXL+MAX_PNT
RYL = RXH+MAX_PNT
RYH = RYL+MAX_PNT
RZL = RYH+MAX_PNT
RZH = RZL+MAX_PNT
PXL = RZH+MAX_PNT
PXH = PXL+MAX_PNT
PYL = PXH+MAX_PNT
PYH = PYL+MAX_PNT
PCC = PYH+MAX_PNT

SCNX = 128/2
SCNY = 128/2

CC_TOP = 1
CC_BOTTOM = 2
CC_LEFT = 4
CC_RIGHT = 8
CC_BEHIND = 16
CC_ALL = 255

CLIP_TOP_POS = CLIP_OFFSET
CLIP_BOTTOM_POS = CLIP_TOP_POS +127
CLIP_LEFT_POS = CLIP_TOP_POS
CLIP_RIGHT_POS = CLIP_BOTTOM_POS

SCRN0 = $4000 ; $8000
SCRN1 = $6000 ; $A000
SCRNBANK = $02 ; $01

SEI        ; disable maskable IRQs

 LDA #$7F
 STA $DC0D  ; disable timer interrupts which can be generated by the two CIA chips
 STA $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

 LDA $DC0D  ; by reading this two registers we negate any pending CIA irqs.
 LDA $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

 LDA #$01   ; this is how to tell the VICII to generate a raster interrupt
 STA $D01A

 LDA #$F0   ; this is how to tell at which rasterline we want the irq to be triggered
 STA $D012

 LDA #$1B   ; as there are more than 256 rasterlines, the topmost bit of $d011 serves as
 STA $D011  ; the 9th bit for the rasterline we want our irq to be triggered. here we simply set up a character screen, leaving the topmost bit 0.

 LDA #$35   ; we turn off the BASIC and KERNAL rom here
 STA $01    ; the cpu now sees RAM everywhere except at $d000-$e000, where still the registers of SID/VICII/etc are visible

 ldA #<BM_IRQ  ; this is how we set up
 STA $FFFE     ; the address of our interrupt code
 LDA #>BM_IRQ
 STA $FFFF
  
 LDA #<NMI_NOP ; lsb
 STA $FFFA ; Create a nop, irq handler for NMI that gets called whenever RESTORE is pressed or similar.
 LDA #>NMI_NOP ; msb
 STA $FFFB ; We're putting our irq handler directly in the vector that usually points to the kernal's NMI handler since we have kernal banked out.

 LDA #$00  ; Force an NMI by setting up a timer. This will cause an NMI, that won't be acked. Any subsequent NMI's from RESTORE will be essentially disabled.
 STA $DD0E       ; Stop timer A
 STA $DD04       ; Set timer A to 0, NMI will occure immediately after start
 STA $DD0E

 LDA #$81
 STA $DD0D       ; Set timer A as source for NMI

 LDA #$01
 STA $DD0E       ; Start timer A -> NMI

 LDA #SCRNBANK
 STA $DD00 ; bank
    
 LDA #$00
 STA $D020
 LDA #$00 ; $00
 STA $D021
; LDA #$0B ; $00
; STA $D022
; LDA #$0C ; $00
; STA $D023

 
 LDA #$01 ; $01 ; colour 11 
 LDX #<$D800
 LDY #>$D800
 STX SCR+0
 STY SCR+1
 LDX #>1000 
 LDY #<1000
 JSR MEMSET

 LDA #$BC ;$65 ; colour 01 (0000????) and colour 10 (????0000) - bank 1
 LDX #<(SCRN0+$1c00)
 LDY #>(SCRN0+$1c00)
 STX SCR+0
 STY SCR+1
 LDX #>1000 
 LDY #<1000
 JSR MEMSET

 LDA #$BC ;%65 ; colour 01 (0000????) and colour 10 (????0000) - bank 2
 LDX #<(SCRN1+$1c00)
 LDY #>(SCRN1+$1c00)
 STX SCR+0
 STY SCR+1
 LDX #>1000 
 LDY #<1000
 JSR MEMSET
    
CLI ; enable maskable interrupts again

MLOOP:
 JSR  SWAP_SCREEN
 
  lda #%10101010
  sta COLOUR

  lda #100
  ldx #50
  ldy #20
  jsr LINE_FILL

 
 JSR  KEYBOARD
 
  JMP MLOOP ; we better don't RTS, the ROMS are now switched off, there's no way back to the system

;+----+----------------------+-------------------------------------------------------------------------------------------------------+
;|    |                      |                                Peek from $dc01 (code in paranthesis):                                 |
;|row:| $dc00:               +------------+------------+------------+------------+------------+------------+------------+------------+
;|    |                      |   BIT 7    |   BIT 6    |   BIT 5    |   BIT 4    |   BIT 3    |   BIT 2    |   BIT 1    |   BIT 0    |
;+----+----------------------+------------+------------+------------+------------+------------+------------+------------+------------+
;|1.  | #%11111110 (254/$fe) | DOWN  ($  )|   F5  ($  )|   F3  ($  )|   F1  ($  )|   F7  ($  )| RIGHT ($  )| RETURN($  )|DELETE ($  )|
;|2.  | #%11111101 (253/$fd) |LEFT-SH($  )|   e   ($05)|   s   ($13)|   z   ($1a)|   4   ($34)|   a   ($01)|   w   ($17)|   3   ($33)|
;|3.  | #%11111011 (251/$fb) |   x   ($18)|   t   ($14)|   f   ($06)|   c   ($03)|   6   ($36)|   d   ($04)|   r   ($12)|   5   ($35)|
;|4.  | #%11110111 (247/$f7) |   v   ($16)|   u   ($15)|   h   ($08)|   b   ($02)|   8   ($38)|   g   ($07)|   y   ($19)|   7   ($37)|
;|5.  | #%11101111 (239/$ef) |   n   ($0e)|   o   ($0f)|   k   ($0b)|   m   ($0d)|   0   ($30)|   j   ($0a)|   i   ($09)|   9   ($39)|
;|6.  | #%11011111 (223/$df) |   ,   ($2c)|   @   ($00)|   :   ($3a)|   .   ($2e)|   -   ($2d)|   l   ($0c)|   p   ($10)|   +   ($2b)|
;|7.  | #%10111111 (191/$bf) |   /   ($2f)|   ^   ($1e)|   =   ($3d)|RGHT-SH($  )|  HOME ($  )|   ;   ($3b)|   *   ($2a)|   Â£   ($1c)|
;|8.  | #%01111111 (127/$7f) | STOP  ($  )|   q   ($11)|COMMODR($  )| SPACE ($20)|   2   ($32)|CONTROL($  )|  <-   ($1f)|   1   ($31)|
;+----+----------------------+------------+------------+------------+------------+------------+------------+------------+------------+

!ZONE KEYBOARD
.s  SEC
    LDA   Z_OFF_LO
    SBC   #51
    STA   Z_OFF_LO
    LDA   Z_OFF_HI
    SBC   #0
    STA   Z_OFF_HI
    rts
    
.w  CLC
    LDA   Z_OFF_LO
    ADC   #51
    STA   Z_OFF_LO
    LDA   Z_OFF_HI
    ADC   #0
    STA   Z_OFF_HI
    rts
    
.a  SEC
    LDA   X_OFF_LO
    SBC   #51
    STA   X_OFF_LO
    LDA   X_OFF_HI
    SBC   #0
    STA   X_OFF_HI
    rts
    
.d  LDA   X_OFF_LO
    ADC   #51
    STA   X_OFF_LO
    LDA   X_OFF_HI
    ADC   #0
    STA   X_OFF_HI
    rts
    
.q  SEC
    LDA   Y_OFF_LO
    SBC   #51
    STA   Y_OFF_LO
    LDA   Y_OFF_HI
    SBC   #0
    STA   Y_OFF_HI
    rts
    
.z  LDA   Y_OFF_LO
    ADC   #51
    STA   Y_OFF_LO
    LDA   Y_OFF_HI
    ADC   #0
    STA   Y_OFF_HI
    rts

KEYBOARD:
      lda #$ff         ; write on port A
      sta $dc02
      lda #$00         ; read on port B
      sta $dc03
  
      lda #%11111101   ; s is in row 2 (the diagram on the wiki is transposed.)
      sta $dc00         ; instruct keyboard
      lda $dc01         ; read value from keyboard
      and #%00100000   ; s is in column 5 (mask it out)
      beq .s
      lda $dc01
      and #%00000100  ; a is in row 2 and column 3
      beq .a
      lda $dc01
      and #%00000010  ; w is in row 2 and column 2
      beq .w
      lda $dc01
      and #%00010000  ; z is in row 2 column 4
      beq .z
      
      lda #%11111011  ; d is in row 3
      sta $dc00
      lda $dc01
      and #%00000100  ; d is in colum 3
      beq .d
      
      lda #%01111111   ; q is in row 8
      sta $dc00
      lda $dc01
      and #%01000000  ; q is in column 5
      beq .q

      lda #%11011111
      sta $dc00         ; instruct keyboard
      lda $dc01
      and #%00000010 ; p is in row 6 and column 2
      beq .p
      lda $dc01
      and #%00000100  ; l is in row 6 and column 2
      beq .l
      
      lda #%11101111
      sta $dc00         ; instruct keyboard
      lda $dc01
      and #%01000000 ; p is in row 6 and column 2
      beq .o
      lda $dc01
      and #%00100000  ; l is in row 6 and column 2
      beq .k
       
      lda $dc01
      and #%00000010 ; p is in row 6 and column 2
      beq .i
      lda $dc01
      and #%00000100  ; l is in row 6 and column 2
      beq .j
 ;     lda #%11111101   ; z is in row 2
 ;     sta $dc00
 ;     lda $dc01
 ;     and #%00010000  ; z is in column 4
 ;     beq .z

 rts      
.p  LDA X_ROT
 CLC
 ADC #1
 STA X_ROT
 LDA X_ROT+1
 ADC #0
 AND #3
 STA X_ROT+1
rts
.l  LDA X_ROT
 SEC
 SBC #1
 STA X_ROT
 LDA X_ROT+1
 SBC #0
 AND #3
 STA X_ROT+1
rts
.o  LDA Y_ROT
 CLC
 ADC #1
 STA Y_ROT
 LDA Y_ROT+1
 ADC #0
 AND #3
 STA Y_ROT+1
rts
.k  LDA Y_ROT
 SEC
 SBC #1
 STA Y_ROT
 LDA Y_ROT+1
 SBC #0
 AND #3
 STA Y_ROT+1
rts
.i  LDA Z_ROT
 CLC
 ADC #1
 STA Z_ROT
 LDA Z_ROT+1
 ADC #0
 AND #3
 STA Z_ROT+1
rts
.j  LDA Z_ROT
 SEC
 SBC #1
 STA Z_ROT
 LDA Z_ROT+1
 SBC #0
 AND #3
 STA Z_ROT+1
rts
                  
!ZONE NEG16
!MACRO NEG16  NUM {
  SEC       ;Ensure carry is set                      #2
  LDA #0    ;Load constant zero                       #2
  SBC NUM   ;... subtract the least significant byte  #3
  STA NUM   ;... and store the result                 #3
  LDA #0    ;Load constant zero again                 #2
  SBC NUM+1 ;... subtract the most significant byte   #3
  STA NUM+1 ;... and store the result                 #3
 }
       
!ZONE MEMSET        
MEMSET       STY    .LSB_ONLY+1 ; store LSB count
             CPX    #0          ; MSB?     
             BEQ    .LSB_ONLY   ; no

             LDY    #0          ; yes so reset LSB
.MSB_LOOP  
.LSB_LOOP      STA    (SCR),Y   ; clear whole MSB
               DEY 
               BNE    .LSB_LOOP

              INC    SCR+1      ; inc MSB
              DEX               ; dec MSB count
              BNE    .MSB_LOOP

.LSB_ONLY    LDY    #0          ; LSB count 
             BEQ    .MS_END     ; not needed

.LAST_LSB_LOOP STA   (SCR),Y
               DEY 
               BNE   .LAST_LSB_LOOP
                
              STA   (SCR),Y     ; clear last Y (0)
 
.MS_END      RTS

!MACRO CLR_SCN B0 ,L0 {
  STA B0+(L0*320)+0,Y
  STA B0+(L0*320)+1,Y
  STA B0+(L0*320)+2,Y
  STA B0+(L0*320)+3,Y
  STA B0+(L0*320)+4,Y
  STA B0+(L0*320)+5,Y
  STA B0+(L0*320)+6,Y
  STA B0+(L0*320)+7,Y
}

!ZONE SWAP_SCREEN
SWAP_SCREEN
        LDA   #248
.LOOP     CMP   $D012
          BNE   .LOOP
;        INC   $D020
;        DEC   $D020
;        RTS



  LDA #0
  ; $A5  ; fill
  LDX   #32   ; count
  LDY   BANK
  CPY   #$70
  BEQ   BANK_0
  LDY   #$70
  STY   BANK
  JMP   SCREEN_CLEAR_BANK_01 ; JSR + RTS
BANK_0: 
  LDY   #$78
  STY   BANK
;   JMP   SCREEN_CLEAR_BANK_00 ; JSR + RTS
 
!ZONE SCREEN_CLEAR_BANK_00:
SCREEN_CLEAR_BANK_00:
.LOOP:
  LDY CLEAR_TAB-1,X
 +CLR_SCN SCRN0, 0
 +CLR_SCN SCRN0, 1
 +CLR_SCN SCRN0, 2
 +CLR_SCN SCRN0, 3
 +CLR_SCN SCRN0, 4
 +CLR_SCN SCRN0, 5
 +CLR_SCN SCRN0, 6
 +CLR_SCN SCRN0, 7
 +CLR_SCN SCRN0, 8
 +CLR_SCN SCRN0, 9
 +CLR_SCN SCRN0, 10
 +CLR_SCN SCRN0, 11
 +CLR_SCN SCRN0, 12
 +CLR_SCN SCRN0, 13
 +CLR_SCN SCRN0, 14
 +CLR_SCN SCRN0, 15
  DEX
  BEQ .EXIT
  JMP .LOOP
.EXIT
 LDA #>SCR_TAB_BANK_0_HI
 JMP SCREEN_CLEAR_BANK_01.SETUP_SCREEN_POINTERS

!ZONE SCREEN_CLEAR_BANK_01:
SCREEN_CLEAR_BANK_01:
.LOOP:
  LDY CLEAR_TAB-1,X
 +CLR_SCN SCRN1, 0
 +CLR_SCN SCRN1, 1
 +CLR_SCN SCRN1, 2
 +CLR_SCN SCRN1, 3
 +CLR_SCN SCRN1, 4
 +CLR_SCN SCRN1, 5
 +CLR_SCN SCRN1, 6
 +CLR_SCN SCRN1, 7
 +CLR_SCN SCRN1, 8
 +CLR_SCN SCRN1, 9
 +CLR_SCN SCRN1, 10
 +CLR_SCN SCRN1, 11
 +CLR_SCN SCRN1, 12
 +CLR_SCN SCRN1, 13
 +CLR_SCN SCRN1, 14
 +CLR_SCN SCRN1, 15
  DEX
  BEQ .EXIT
  JMP .LOOP
.EXIT
 LDA #>SCR_TAB_BANK_1_HI
.SETUP_SCREEN_POINTERS      
 STA LF_BANK_HI +2
 RTS

;This leads to the following algorithm for doing signed multiplications:

;  multiply x and y as normal with some routine
;  if x<0 then subtract y from the high bytes of the result
;  if y<0 then subtract x from the high bytes

;And that's all there is to it!  Note that x and y are "backwards",
;i.e. subtract y, and not x, when x<0.  Some examples:

;  x=-1, y=16  Computer: x=$FF y=$10  (N=8)
;        x*y = $0FF0
;        Result is less than 256, so ignore high byte
;          Answer = $F0 = -16
;        OR: subtract y from high byte, 
;      Answer = $FFF0 = -16

;  x=2112 y=-365 Computer: x=$0840 y=$FE93   (N=16)
;        x*y = $08343CC0
;        y<0 so subtract x from high bytes (x*2^16), 
;      Answer = $F43CC0 = -770880

;  x=-31 y=-41 Computer: x=$E1 y=$D7
;        x*y = $BCF7
;        x<0 so subtract $D700 -> $E5F7
;        y<0 so subtract $E100 -> $04F7 = 1271 = correct!
 
;So, in summary, signed multiplies can be done with the same fast 
;multiply routine along with some _very simple_ post-processing.
;And if we know something about the result ahead of time (like if
;it's less than 256 or whatever) then it takes _no_ additional 
;processing!

BM_IRQ:
  dec $d020
 PHA
 TXA 
 PHA
 TYA 
 PHA 
 INC $D019    ;VIC Interrupt Request Register (IRR)

 LDA BANK
 STA $D018    ;VIC Memory Control Register
 
 LDA #$3B ; bitmap mode? - finding
 STA $D011    ;VIC Control Register 1

; LDA #$18
 LDA #%00011000 ; 0-2=SCRL 3=40/38 4=MCM 5-7=UNUSED
 STA $D016    ;VIC Control Register 2

 LDA #<TM_IRQ  ; raster interrupt setup - finding
 STA $fffe    ;IRQ
 LDA #>TM_IRQ  ; raster interrupt setup - finding
 STA $ffff    ;IRQ
  
 LDA #$E0     ; change screen to text at pos ba - finding
 STA $D012    ;Raster Position
 PLA 
 TAY
 PLA 
 TAX
 PLA
  inc $d020
NMI_NOP:
RTI ; This is the irq handler for the NMI. Just returns without acknowledge. This prevents subsequent NMI's from interfering.

TM_IRQ: 
  inc $d020
 PHA
 TXA 
 PHA
 TYA 
 PHA 
 INC $D019    ;VIC Interrupt Request Register (IRR)

 LDA #$7E
 STA $D018    ;VIC Memory Control Register

 LDA #$1B ; text mode? - finding 
 STA $D011    ;VIC Control Register 1

 LDA #$08
 STA $D016    ;VIC Control Register 2

 LDA #<BM_IRQ  ; raster interrupt setup - finding
 STA $FFFE    ;IRQ
 LDA #>BM_IRQ  ; raster interrupt setup - finding
 STA $FFFF    ;IRQ

 LDA #$FF     ; change screen to bitmap at pos 00 - finding
 STA $D012    ;Raster Position
 PLA 
 TAY
 PLA 
 TAX
 PLA  
  dec $d020
RTI

R_T_S = $60
L_D_Y = $A0
    
; colour - 1 byte
; number of hor lines - 1 byte
; start hor line -ve to +ve - 1 byte
;  number of ver lines to fill - 1 byte
;  number of ver lines to partially fill - 1 byte
;   list of and/or partial lines to fill - 2 bytes

!ZONE LINE_FILL
LINE_FILL ; y=ver / x=hor_start ; a=hor_end
          STA HOR_END         ; hor end

LF_BANK_HI   LDA SCR_TAB_BANK_1_HI,Y     ; ver
          STA SCR_HI
          LDA SCR_TAB_BANK_0_LO,Y     ; ver
          STA SCR_LO

CLEAR_LAST_RTS    LDY #0          ; get last rts stored
          LDA #L_D_Y        ; put ldy back
          STA FILL_LINE,Y     ; at the correct location

          LDY HOR_END
          LDA SCR_HOR_FILL_TAB,Y      ; hor end
          SEC 
          SBC SCR_HOR_FILL_TAB,X        ; hor start
          BEQ FILL_LINE_SAME
          
          clc
          adc SCR_HOR_FILL_TAB-4,X    ; add hor start char to diff
          STA CLEAR_LAST_RTS +1   ; backup to clear this rts next time
          tay
          lda #R_T_S
          sta FILL_LINE,Y

          lda SCR_HOR_FILL_TAB,X
          sta SMC_LINE_FILL +1

          LDY SCR_TAB3,X      ; start hor pos
          LDA (SCR),Y
          AND INVERSE_PATTERN_START_TAB,X       ; pattern
SMC_LFT_TAB ORA COLOUR01_LEFT_TAB,X
          STA (SCR),Y

          LDX HOR_END
          LDY SCR_TAB3,X      ; end hor pos
          LDA (SCR),Y
          AND INVERSE_PATTERN_END_TAB,X       ; pattern
SMC_RGT_TAB ORA COLOUR01_RIGHT_TAB,X
          STA (SCR),Y
    
          LDA #%11111111 ;COLOUR
;        rts  
SMC_LINE_FILL   JMP FILL_LINE

!ZONE FILL_LINE_SAME
FILL_LINE_SAME  
            RTS
SMC_SAME_LFT_LFT_TAB  LDA COLOUR01_LEFT_TAB,X   ; GET LEFTMASK
SMC_SAME_LFT_RGT_TAB  AND COLOUR01_RIGHT_TAB,Y  ; AND RIGHTMASK
            STA SMC_SAME_GAP +1   ; TEMP_EDGE   ; TO KEEP EDGES AND LEAVE GAP
            EOR #$FF          ; NEGATE
            AND COLOUR          ; KEEP COLOURS
            STA SMC_SAME_EDGE +1  ; TEMP_GAP  ; TO REMOVE EDGES AND KEEP GAP
            LDY SCR_TAB3,X        ; GET SCREEN CHAR
            LDA (SCR),Y         ; GET SCREEN
SMC_SAME_EDGE   AND #0            ; REMOVE MIDDLE AND KEEP EDGES
SMC_SAME_GAP    ORA #0            ; ADD COLOUR IN MIDDLE
            STA (SCR),Y         ; put screen,left
            RTS 

!ALIGN 255,0
FILL_LINE
;LF_00  LDY #8*0
;   STA (SCR),Y
LF_01  LDY #8*1
   STA (SCR),Y
LF_02 LDY #8*2
    STA (SCR),Y
LF_03 LDY #8*3
    STA (SCR),Y
LF_04 LDY #8*4
    STA (SCR),Y
LF_05 LDY #8*5
    STA (SCR),Y
LF_06 LDY #8*6
    STA (SCR),Y
LF_07 LDY #8*7
    STA (SCR),Y
LF_08 LDY #8*8
    STA (SCR),Y
LF_09 LDY #8*9
    STA (SCR),Y
LF_10 LDY #8*10
    STA (SCR),Y
LF_11 LDY #8*11
    STA (SCR),Y
LF_12 LDY #8*12
    STA (SCR),Y
LF_13 LDY #8*13
    STA (SCR),Y
LF_14 LDY #8*14
    STA (SCR),Y
LF_15 LDY #8*15
    STA (SCR),Y
LF_16 LDY #8*16
    STA (SCR),Y
LF_17 LDY #8*17
    STA (SCR),Y
LF_18 LDY #8*18
    STA (SCR),Y
LF_19 LDY #8*19
    STA (SCR),Y
LF_20 LDY #8*20
    STA (SCR),Y
LF_21 LDY #8*21
    STA (SCR),Y
LF_22 LDY #8*22
    STA (SCR),Y
LF_23 LDY #8*23
    STA (SCR),Y
LF_24 LDY #8*24
    STA (SCR),Y
LF_25 LDY #8*25
    STA (SCR),Y
LF_26 LDY #8*26
    STA (SCR),Y
LF_27 LDY #8*27
    STA (SCR),Y
LF_28 LDY #8*28
    STA (SCR),Y
LF_29 LDY #8*29
    STA (SCR),Y
LF_30 LDY #8*30
    STA (SCR),Y
LF_31 LDY #8*31
    STA (SCR),Y
    RTS

!ALIGN 255,0
INVERSE_PATTERN_START_TAB
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100

  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100

  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100

  !BYTE %00000000,%11000000,%11110000,%11111100
  !BYTE %00000000,%11000000,%11110000,%11111100

INVERSE_PATTERN_END_TAB
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000

  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000

  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000

  !BYTE %00111111,%00001111,%00000011,%00000000
  !BYTE %00111111,%00001111,%00000011,%00000000

!ALIGN 255,0
COLOUR01_LEFT_TAB
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001
  !BYTE %01010101,%00010101,%00000101,%00000001

COLOUR01_RIGHT_TAB
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101
  !BYTE %01000000,%01010000,%01010100,%01010101

;LINE_FILL_START_TAB
; !WORD LF_00,LF_01,LF_02,LF_03,LF_04,LF_05,LF_06,LF_07,LF_08,LF_09,LF_10,LF_11,LF_12,LF_13,LF_14,LF_15,LF_16,LF_17,LF_18,LF_19,LF_20,LF_21,LF_22,LF_23,LF_24,LF_25,LF_26,LF_27,LF_28,LF_29,LF_30,LF_31


!ALIGN 255,0
SCR_TAB_BANK_0_HI:
!BYTE >SCN0_LN_000,>SCN0_LN_001,>SCN0_LN_002,>SCN0_LN_003,>SCN0_LN_004,>SCN0_LN_005,>SCN0_LN_006,>SCN0_LN_007,>SCN0_LN_008,>SCN0_LN_009
!BYTE >SCN0_LN_010,>SCN0_LN_011,>SCN0_LN_012,>SCN0_LN_013,>SCN0_LN_014,>SCN0_LN_015,>SCN0_LN_016,>SCN0_LN_017,>SCN0_LN_018,>SCN0_LN_019
!BYTE >SCN0_LN_020,>SCN0_LN_021,>SCN0_LN_022,>SCN0_LN_023,>SCN0_LN_024,>SCN0_LN_025,>SCN0_LN_026,>SCN0_LN_027,>SCN0_LN_028,>SCN0_LN_029
!BYTE >SCN0_LN_030,>SCN0_LN_031,>SCN0_LN_032,>SCN0_LN_033,>SCN0_LN_034,>SCN0_LN_035,>SCN0_LN_036,>SCN0_LN_037,>SCN0_LN_038,>SCN0_LN_039
!BYTE >SCN0_LN_040,>SCN0_LN_041,>SCN0_LN_042,>SCN0_LN_043,>SCN0_LN_044,>SCN0_LN_045,>SCN0_LN_046,>SCN0_LN_047,>SCN0_LN_048,>SCN0_LN_049
!BYTE >SCN0_LN_050,>SCN0_LN_051,>SCN0_LN_052,>SCN0_LN_053,>SCN0_LN_054,>SCN0_LN_055,>SCN0_LN_056,>SCN0_LN_057,>SCN0_LN_058,>SCN0_LN_059
!BYTE >SCN0_LN_060,>SCN0_LN_061,>SCN0_LN_062,>SCN0_LN_063,>SCN0_LN_064,>SCN0_LN_065,>SCN0_LN_066,>SCN0_LN_067,>SCN0_LN_068,>SCN0_LN_069
!BYTE >SCN0_LN_070,>SCN0_LN_071,>SCN0_LN_072,>SCN0_LN_073,>SCN0_LN_074,>SCN0_LN_075,>SCN0_LN_076,>SCN0_LN_077,>SCN0_LN_078,>SCN0_LN_079
!BYTE >SCN0_LN_080,>SCN0_LN_081,>SCN0_LN_082,>SCN0_LN_083,>SCN0_LN_084,>SCN0_LN_085,>SCN0_LN_086,>SCN0_LN_087,>SCN0_LN_088,>SCN0_LN_089
!BYTE >SCN0_LN_090,>SCN0_LN_091,>SCN0_LN_092,>SCN0_LN_093,>SCN0_LN_094,>SCN0_LN_095,>SCN0_LN_096,>SCN0_LN_097,>SCN0_LN_098,>SCN0_LN_099
!BYTE >SCN0_LN_100,>SCN0_LN_101,>SCN0_LN_102,>SCN0_LN_103,>SCN0_LN_104,>SCN0_LN_105,>SCN0_LN_106,>SCN0_LN_107,>SCN0_LN_108,>SCN0_LN_109
!BYTE >SCN0_LN_110,>SCN0_LN_111,>SCN0_LN_112,>SCN0_LN_113,>SCN0_LN_114,>SCN0_LN_115,>SCN0_LN_116,>SCN0_LN_117,>SCN0_LN_118,>SCN0_LN_119
!BYTE >SCN0_LN_120,>SCN0_LN_121,>SCN0_LN_122,>SCN0_LN_123,>SCN0_LN_124,>SCN0_LN_125,>SCN0_LN_126,>SCN0_LN_127

SCR_TAB3:
!BYTE $00,$00,$00,$00,$08,$08,$08,$08
!BYTE $10,$10,$10,$10,$18,$18,$18,$18
!BYTE $20,$20,$20,$20,$28,$28,$28,$28
!BYTE $30,$30,$30,$30,$38,$38,$38,$38
!BYTE $40,$40,$40,$40,$48,$48,$48,$48
!BYTE $50,$50,$50,$50,$58,$58,$58,$58
!BYTE $60,$60,$60,$60,$68,$68,$68,$68
!BYTE $70,$70,$70,$70,$78,$78,$78,$78
!BYTE $80,$80,$80,$80,$88,$88,$88,$88
!BYTE $90,$90,$90,$90,$98,$98,$98,$98
!BYTE $A0,$A0,$A0,$A0,$A8,$A8,$A8,$A8
!BYTE $B0,$B0,$B0,$B0,$B8,$B8,$B8,$B8
!BYTE $C0,$C0,$C0,$C0,$C8,$C8,$C8,$C8
!BYTE $D0,$D0,$D0,$D0,$D8,$D8,$D8,$D8
!BYTE $E0,$E0,$E0,$E0,$E8,$E8,$E8,$E8
!BYTE $F0,$F0,$F0,$F0,$F8,$F8,$F8,$F8

SCR_HOR_CHAR_TAB:
!BYTE 8*0,8*1,8*2,8*3,8*4,8*5,8*6,8*7,8*8,8*9
!BYTE 8*10,8*11,8*12,8*13,8*14,8*15,8*16,8*17,8*18,8*19
!BYTE 8*20,8*21,8*22,8*23,8*24,8*25,8*26,8*27,8*28,8*29
!BYTE 8*30,8*31

SCR_HOR_FILL_TAB:
!BYTE 4*0,4*0,4*0,4*0
!BYTE 4*1,4*1,4*1,4*1
!BYTE 4*2,4*2,4*2,4*2
!BYTE 4*3,4*3,4*3,4*3
!BYTE 4*4,4*4,4*4,4*4
!BYTE 4*5,4*5,4*5,4*5
!BYTE 4*6,4*6,4*6,4*6
!BYTE 4*7,4*7,4*7,4*7
!BYTE 4*8,4*8,4*8,4*8
!BYTE 4*9,4*9,4*9,4*9

!BYTE 4*10,4*10,4*10,4*10
!BYTE 4*11,4*11,4*11,4*11
!BYTE 4*12,4*12,4*12,4*12
!BYTE 4*13,4*13,4*13,4*13
!BYTE 4*14,4*14,4*14,4*14
!BYTE 4*15,4*15,4*15,4*15
!BYTE 4*16,4*16,4*16,4*16
!BYTE 4*17,4*17,4*17,4*17
!BYTE 4*18,4*18,4*18,4*18
!BYTE 4*19,4*19,4*19,4*19

!BYTE 4*20,4*20,4*20,4*20
!BYTE 4*21,4*21,4*21,4*21
!BYTE 4*22,4*22,4*22,4*22
!BYTE 4*23,4*23,4*23,4*23
!BYTE 4*24,4*24,4*24,4*24
!BYTE 4*25,4*25,4*25,4*25
!BYTE 4*26,4*26,4*26,4*26
!BYTE 4*27,4*27,4*27,4*27
!BYTE 4*28,4*28,4*28,4*28
!BYTE 4*29,4*29,4*29,4*29

!BYTE 4*30,4*30,4*30,4*30
!BYTE 4*31,4*31,4*31,4*31

;!ALIGN 255,0
SCR_TAB_BANK_0_LO:
!BYTE <SCN0_LN_000,<SCN0_LN_001,<SCN0_LN_002,<SCN0_LN_003,<SCN0_LN_004,<SCN0_LN_005,<SCN0_LN_006,<SCN0_LN_007,<SCN0_LN_008,<SCN0_LN_009
!BYTE <SCN0_LN_010,<SCN0_LN_011,<SCN0_LN_012,<SCN0_LN_013,<SCN0_LN_014,<SCN0_LN_015,<SCN0_LN_016,<SCN0_LN_017,<SCN0_LN_018,<SCN0_LN_019
!BYTE <SCN0_LN_020,<SCN0_LN_021,<SCN0_LN_022,<SCN0_LN_023,<SCN0_LN_024,<SCN0_LN_025,<SCN0_LN_026,<SCN0_LN_027,<SCN0_LN_028,<SCN0_LN_029
!BYTE <SCN0_LN_030,<SCN0_LN_031,<SCN0_LN_032,<SCN0_LN_033,<SCN0_LN_034,<SCN0_LN_035,<SCN0_LN_036,<SCN0_LN_037,<SCN0_LN_038,<SCN0_LN_039
!BYTE <SCN0_LN_040,<SCN0_LN_041,<SCN0_LN_042,<SCN0_LN_043,<SCN0_LN_044,<SCN0_LN_045,<SCN0_LN_046,<SCN0_LN_047,<SCN0_LN_048,<SCN0_LN_049
!BYTE <SCN0_LN_050,<SCN0_LN_051,<SCN0_LN_052,<SCN0_LN_053,<SCN0_LN_054,<SCN0_LN_055,<SCN0_LN_056,<SCN0_LN_057,<SCN0_LN_058,<SCN0_LN_059
!BYTE <SCN0_LN_060,<SCN0_LN_061,<SCN0_LN_062,<SCN0_LN_063,<SCN0_LN_064,<SCN0_LN_065,<SCN0_LN_066,<SCN0_LN_067,<SCN0_LN_068,<SCN0_LN_069
!BYTE <SCN0_LN_070,<SCN0_LN_071,<SCN0_LN_072,<SCN0_LN_073,<SCN0_LN_074,<SCN0_LN_075,<SCN0_LN_076,<SCN0_LN_077,<SCN0_LN_078,<SCN0_LN_079
!BYTE <SCN0_LN_080,<SCN0_LN_081,<SCN0_LN_082,<SCN0_LN_083,<SCN0_LN_084,<SCN0_LN_085,<SCN0_LN_086,<SCN0_LN_087,<SCN0_LN_088,<SCN0_LN_089
!BYTE <SCN0_LN_090,<SCN0_LN_091,<SCN0_LN_092,<SCN0_LN_093,<SCN0_LN_094,<SCN0_LN_095,<SCN0_LN_096,<SCN0_LN_097,<SCN0_LN_098,<SCN0_LN_099
!BYTE <SCN0_LN_100,<SCN0_LN_101,<SCN0_LN_102,<SCN0_LN_103,<SCN0_LN_104,<SCN0_LN_105,<SCN0_LN_106,<SCN0_LN_107,<SCN0_LN_108,<SCN0_LN_109
!BYTE <SCN0_LN_110,<SCN0_LN_111,<SCN0_LN_112,<SCN0_LN_113,<SCN0_LN_114,<SCN0_LN_115,<SCN0_LN_116,<SCN0_LN_117,<SCN0_LN_118,<SCN0_LN_119
!BYTE <SCN0_LN_120,<SCN0_LN_121,<SCN0_LN_122,<SCN0_LN_123,<SCN0_LN_124,<SCN0_LN_125,<SCN0_LN_126,<SCN0_LN_127


SCR_AND_TAB:
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

!ALIGN 255,0
SCR_TAB_BANK_1_HI:
!BYTE >SCN1_LN_000,>SCN1_LN_001,>SCN1_LN_002,>SCN1_LN_003,>SCN1_LN_004,>SCN1_LN_005,>SCN1_LN_006,>SCN1_LN_007,>SCN1_LN_008,>SCN1_LN_009
!BYTE >SCN1_LN_010,>SCN1_LN_011,>SCN1_LN_012,>SCN1_LN_013,>SCN1_LN_014,>SCN1_LN_015,>SCN1_LN_016,>SCN1_LN_017,>SCN1_LN_018,>SCN1_LN_019
!BYTE >SCN1_LN_020,>SCN1_LN_021,>SCN1_LN_022,>SCN1_LN_023,>SCN1_LN_024,>SCN1_LN_025,>SCN1_LN_026,>SCN1_LN_027,>SCN1_LN_028,>SCN1_LN_029
!BYTE >SCN1_LN_030,>SCN1_LN_031,>SCN1_LN_032,>SCN1_LN_033,>SCN1_LN_034,>SCN1_LN_035,>SCN1_LN_036,>SCN1_LN_037,>SCN1_LN_038,>SCN1_LN_039
!BYTE >SCN1_LN_040,>SCN1_LN_041,>SCN1_LN_042,>SCN1_LN_043,>SCN1_LN_044,>SCN1_LN_045,>SCN1_LN_046,>SCN1_LN_047,>SCN1_LN_048,>SCN1_LN_049
!BYTE >SCN1_LN_050,>SCN1_LN_051,>SCN1_LN_052,>SCN1_LN_053,>SCN1_LN_054,>SCN1_LN_055,>SCN1_LN_056,>SCN1_LN_057,>SCN1_LN_058,>SCN1_LN_059
!BYTE >SCN1_LN_060,>SCN1_LN_061,>SCN1_LN_062,>SCN1_LN_063,>SCN1_LN_064,>SCN1_LN_065,>SCN1_LN_066,>SCN1_LN_067,>SCN1_LN_068,>SCN1_LN_069
!BYTE >SCN1_LN_070,>SCN1_LN_071,>SCN1_LN_072,>SCN1_LN_073,>SCN1_LN_074,>SCN1_LN_075,>SCN1_LN_076,>SCN1_LN_077,>SCN1_LN_078,>SCN1_LN_079
!BYTE >SCN1_LN_080,>SCN1_LN_081,>SCN1_LN_082,>SCN1_LN_083,>SCN1_LN_084,>SCN1_LN_085,>SCN1_LN_086,>SCN1_LN_087,>SCN1_LN_088,>SCN1_LN_089
!BYTE >SCN1_LN_090,>SCN1_LN_091,>SCN1_LN_092,>SCN1_LN_093,>SCN1_LN_094,>SCN1_LN_095,>SCN1_LN_096,>SCN1_LN_097,>SCN1_LN_098,>SCN1_LN_099
!BYTE >SCN1_LN_100,>SCN1_LN_101,>SCN1_LN_102,>SCN1_LN_103,>SCN1_LN_104,>SCN1_LN_105,>SCN1_LN_106,>SCN1_LN_107,>SCN1_LN_108,>SCN1_LN_109
!BYTE >SCN1_LN_110,>SCN1_LN_111,>SCN1_LN_112,>SCN1_LN_113,>SCN1_LN_114,>SCN1_LN_115,>SCN1_LN_116,>SCN1_LN_117,>SCN1_LN_118,>SCN1_LN_119
!BYTE >SCN1_LN_120,>SCN1_LN_121,>SCN1_LN_122,>SCN1_LN_123,>SCN1_LN_124,>SCN1_LN_125,>SCN1_LN_126,>SCN1_LN_127

SCR_OR_TAB:
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03

CLEAR_TAB:
 !BYTE 00*8,01*8,02*8,03*8,04*8,05*8,06*8,07*8,08*8,09*8,10*8,11*8,12*8,13*8,14*8,15*8,16*8,17*8,18*8,19*8,20*8,21*8,22*8,23*8,24*8,25*8,26*8,27*8,28*8,29*8,30*8,31*8
    
SCN0_LN_000 = SCRN0 +(00*320)
SCN0_LN_001 = SCN0_LN_000+1
SCN0_LN_002 = SCN0_LN_000+2
SCN0_LN_003 = SCN0_LN_000+3
SCN0_LN_004 = SCN0_LN_000+4
SCN0_LN_005 = SCN0_LN_000+5
SCN0_LN_006 = SCN0_LN_000+6
SCN0_LN_007 = SCN0_LN_000+7

SCN0_LN_008 = SCRN0+(01*320)
SCN0_LN_009 = SCN0_LN_008+1
SCN0_LN_010 = SCN0_LN_008+2
SCN0_LN_011 = SCN0_LN_008+3
SCN0_LN_012 = SCN0_LN_008+4
SCN0_LN_013 = SCN0_LN_008+5
SCN0_LN_014 = SCN0_LN_008+6
SCN0_LN_015 = SCN0_LN_008+7

SCN0_LN_016 = SCRN0+(02*320)
SCN0_LN_017 = SCN0_LN_016+1
SCN0_LN_018 = SCN0_LN_016+2
SCN0_LN_019 = SCN0_LN_016+3
SCN0_LN_020 = SCN0_LN_016+4
SCN0_LN_021 = SCN0_LN_016+5
SCN0_LN_022 = SCN0_LN_016+6
SCN0_LN_023 = SCN0_LN_016+7

SCN0_LN_024 = SCRN0+(03*320)
SCN0_LN_025 = SCN0_LN_024+1
SCN0_LN_026 = SCN0_LN_024+2
SCN0_LN_027 = SCN0_LN_024+3
SCN0_LN_028 = SCN0_LN_024+4
SCN0_LN_029 = SCN0_LN_024+5
SCN0_LN_030 = SCN0_LN_024+6
SCN0_LN_031 = SCN0_LN_024+7

SCN0_LN_032 = SCRN0+(04*320)
SCN0_LN_033 = SCN0_LN_032+1
SCN0_LN_034 = SCN0_LN_032+2
SCN0_LN_035 = SCN0_LN_032+3
SCN0_LN_036 = SCN0_LN_032+4
SCN0_LN_037 = SCN0_LN_032+5
SCN0_LN_038 = SCN0_LN_032+6
SCN0_LN_039 = SCN0_LN_032+7

SCN0_LN_040 = SCRN0+(05*320)
SCN0_LN_041 = SCN0_LN_040+1
SCN0_LN_042 = SCN0_LN_040+2
SCN0_LN_043 = SCN0_LN_040+3
SCN0_LN_044 = SCN0_LN_040+4
SCN0_LN_045 = SCN0_LN_040+5
SCN0_LN_046 = SCN0_LN_040+6
SCN0_LN_047 = SCN0_LN_040+7

SCN0_LN_048 = SCRN0+(06*320)
SCN0_LN_049 = SCN0_LN_048+1
SCN0_LN_050 = SCN0_LN_048+2
SCN0_LN_051 = SCN0_LN_048+3
SCN0_LN_052 = SCN0_LN_048+4
SCN0_LN_053 = SCN0_LN_048+5
SCN0_LN_054 = SCN0_LN_048+6
SCN0_LN_055 = SCN0_LN_048+7

SCN0_LN_056 = SCRN0+(07*320)
SCN0_LN_057 = SCN0_LN_056+1
SCN0_LN_058 = SCN0_LN_056+2
SCN0_LN_059 = SCN0_LN_056+3
SCN0_LN_060 = SCN0_LN_056+4
SCN0_LN_061 = SCN0_LN_056+5
SCN0_LN_062 = SCN0_LN_056+6
SCN0_LN_063 = SCN0_LN_056+7

SCN0_LN_064 = SCRN0+(08*320)
SCN0_LN_065 = SCN0_LN_064+1
SCN0_LN_066 = SCN0_LN_064+2
SCN0_LN_067 = SCN0_LN_064+3
SCN0_LN_068 = SCN0_LN_064+4
SCN0_LN_069 = SCN0_LN_064+5
SCN0_LN_070 = SCN0_LN_064+6
SCN0_LN_071 = SCN0_LN_064+7

SCN0_LN_072 = SCRN0+(09*320)
SCN0_LN_073 = SCN0_LN_072+1
SCN0_LN_074 = SCN0_LN_072+2
SCN0_LN_075 = SCN0_LN_072+3
SCN0_LN_076 = SCN0_LN_072+4
SCN0_LN_077 = SCN0_LN_072+5
SCN0_LN_078 = SCN0_LN_072+6
SCN0_LN_079 = SCN0_LN_072+7

SCN0_LN_080 = SCRN0+(10*320)
SCN0_LN_081 = SCN0_LN_080+1
SCN0_LN_082 = SCN0_LN_080+2
SCN0_LN_083 = SCN0_LN_080+3
SCN0_LN_084 = SCN0_LN_080+4
SCN0_LN_085 = SCN0_LN_080+5
SCN0_LN_086 = SCN0_LN_080+6
SCN0_LN_087 = SCN0_LN_080+7

SCN0_LN_088 = SCRN0+(11*320)
SCN0_LN_089 = SCN0_LN_088+1
SCN0_LN_090 = SCN0_LN_088+2
SCN0_LN_091 = SCN0_LN_088+3
SCN0_LN_092 = SCN0_LN_088+4
SCN0_LN_093 = SCN0_LN_088+5
SCN0_LN_094 = SCN0_LN_088+6
SCN0_LN_095 = SCN0_LN_088+7

SCN0_LN_096 = SCRN0+(12*320)
SCN0_LN_097 = SCN0_LN_096+1
SCN0_LN_098 = SCN0_LN_096+2
SCN0_LN_099 = SCN0_LN_096+3
SCN0_LN_100 = SCN0_LN_096+4
SCN0_LN_101 = SCN0_LN_096+5
SCN0_LN_102 = SCN0_LN_096+6
SCN0_LN_103 = SCN0_LN_096+7

SCN0_LN_104 = SCRN0+(13*320)
SCN0_LN_105 = SCN0_LN_104+1
SCN0_LN_106 = SCN0_LN_104+2
SCN0_LN_107 = SCN0_LN_104+3
SCN0_LN_108 = SCN0_LN_104+4
SCN0_LN_109 = SCN0_LN_104+5
SCN0_LN_110 = SCN0_LN_104+6
SCN0_LN_111 = SCN0_LN_104+7

SCN0_LN_112 = SCRN0+(14*320)
SCN0_LN_113 = SCN0_LN_112+1
SCN0_LN_114 = SCN0_LN_112+2
SCN0_LN_115 = SCN0_LN_112+3
SCN0_LN_116 = SCN0_LN_112+4
SCN0_LN_117 = SCN0_LN_112+5
SCN0_LN_118 = SCN0_LN_112+6
SCN0_LN_119 = SCN0_LN_112+7

SCN0_LN_120 = SCRN0+(15*320)
SCN0_LN_121 = SCN0_LN_120+1
SCN0_LN_122 = SCN0_LN_120+2
SCN0_LN_123 = SCN0_LN_120+3
SCN0_LN_124 = SCN0_LN_120+4
SCN0_LN_125 = SCN0_LN_120+5
SCN0_LN_126 = SCN0_LN_120+6
SCN0_LN_127 = SCN0_LN_120+7

;SCN0_LN_128 = SCRN0+(16*320)
;SCN0_LN_129 = SCN0_LN_128+1
;SCN0_LN_130 = SCN0_LN_128+2
;SCN0_LN_131 = SCN0_LN_128+3
;SCN0_LN_132 = SCN0_LN_128+4
;SCN0_LN_133 = SCN0_LN_128+5
;SCN0_LN_134 = SCN0_LN_128+6
;SCN0_LN_135 = SCN0_LN_128+7

;SCN0_LN_136 = SCRN0+(17*320)
;SCN0_LN_137 = SCN0_LN_136+1
;SCN0_LN_138 = SCN0_LN_136+2
;SCN0_LN_139 = SCN0_LN_136+3
;SCN0_LN_140 = SCN0_LN_136+4
;SCN0_LN_141 = SCN0_LN_136+5
;SCN0_LN_142 = SCN0_LN_136+6
;SCN0_LN_143 = SCN0_LN_136+7

;SCN0_LN_144 = SCRN0+(18*320)
;SCN0_LN_145 = SCN0_LN_144+1
;SCN0_LN_146 = SCN0_LN_144+2
;SCN0_LN_147 = SCN0_LN_144+3
;SCN0_LN_148 = SCN0_LN_144+4
;SCN0_LN_149 = SCN0_LN_144+5
;SCN0_LN_150 = SCN0_LN_144+6
;SCN0_LN_151 = SCN0_LN_144+7

;SCN0_LN_152 = SCRN0+(19*320)
;SCN0_LN_153 = SCN0_LN_152+1
;SCN0_LN_154 = SCN0_LN_152+2
;SCN0_LN_155 = SCN0_LN_152+3
;SCN0_LN_156 = SCN0_LN_152+4
;SCN0_LN_157 = SCN0_LN_152+5
;SCN0_LN_158 = SCN0_LN_152+6
;SCN0_LN_159 = SCN0_LN_152+7

;SCN0_LN_160 = SCRN0+(20*320)
;SCN0_LN_161 = SCN0_LN_160+1
;SCN0_LN_162 = SCN0_LN_160+2
;SCN0_LN_163 = SCN0_LN_160+3
;SCN0_LN_164 = SCN0_LN_160+4
;SCN0_LN_165 = SCN0_LN_160+5
;SCN0_LN_166 = SCN0_LN_160+6
;SCN0_LN_167 = SCN0_LN_160+7

;SCN0_LN_168 = SCRN0+(21*320)
;SCN0_LN_169 = SCN0_LN_168+1
;SCN0_LN_170 = SCN0_LN_168+2
;SCN0_LN_171 = SCN0_LN_168+3
;SCN0_LN_172 = SCN0_LN_168+4
;SCN0_LN_173 = SCN0_LN_168+5
;SCN0_LN_174 = SCN0_LN_168+6
;SCN0_LN_175 = SCN0_LN_168+7

;SCN0_LN_176 = SCRN0+(22*320)
;SCN0_LN_177 = SCN0_LN_176+1
;SCN0_LN_178 = SCN0_LN_176+2
;SCN0_LN_179 = SCN0_LN_176+3
;SCN0_LN_180 = SCN0_LN_176+4
;SCN0_LN_181 = SCN0_LN_176+5
;SCN0_LN_182 = SCN0_LN_176+6
;SCN0_LN_183 = SCN0_LN_176+7

;SCN0_LN_184 = SCRN0+(23*320)
;SCN0_LN_185 = SCN0_LN_184+1
;SCN0_LN_186 = SCN0_LN_184+2
;SCN0_LN_187 = SCN0_LN_184+3
;SCN0_LN_188 = SCN0_LN_184+4
;SCN0_LN_189 = SCN0_LN_184+5
;SCN0_LN_190 = SCN0_LN_184+6
;SCN0_LN_191 = SCN0_LN_184+7

;SCN0_LN_192 = SCRN0+(24*320)
;SCN0_LN_193 = SCN0_LN_192+1
;SCN0_LN_194 = SCN0_LN_192+2
;SCN0_LN_195 = SCN0_LN_192+3
;SCN0_LN_196 = SCN0_LN_192+4
;SCN0_LN_197 = SCN0_LN_192+5
;SCN0_LN_198 = SCN0_LN_192+6
;SCN0_LN_199 = SCN0_LN_192+7

SCN1_LN_000 = SCRN1+(00*320)
SCN1_LN_001 = SCN1_LN_000+1
SCN1_LN_002 = SCN1_LN_000+2
SCN1_LN_003 = SCN1_LN_000+3
SCN1_LN_004 = SCN1_LN_000+4
SCN1_LN_005 = SCN1_LN_000+5
SCN1_LN_006 = SCN1_LN_000+6
SCN1_LN_007 = SCN1_LN_000+7

SCN1_LN_008 = SCRN1+(01*320)
SCN1_LN_009 = SCN1_LN_008+1
SCN1_LN_010 = SCN1_LN_008+2
SCN1_LN_011 = SCN1_LN_008+3
SCN1_LN_012 = SCN1_LN_008+4
SCN1_LN_013 = SCN1_LN_008+5
SCN1_LN_014 = SCN1_LN_008+6
SCN1_LN_015 = SCN1_LN_008+7

SCN1_LN_016 = SCRN1+(02*320)
SCN1_LN_017 = SCN1_LN_016+1
SCN1_LN_018 = SCN1_LN_016+2
SCN1_LN_019 = SCN1_LN_016+3
SCN1_LN_020 = SCN1_LN_016+4
SCN1_LN_021 = SCN1_LN_016+5
SCN1_LN_022 = SCN1_LN_016+6
SCN1_LN_023 = SCN1_LN_016+7

SCN1_LN_024 = SCRN1+(03*320)
SCN1_LN_025 = SCN1_LN_024+1
SCN1_LN_026 = SCN1_LN_024+2
SCN1_LN_027 = SCN1_LN_024+3
SCN1_LN_028 = SCN1_LN_024+4
SCN1_LN_029 = SCN1_LN_024+5
SCN1_LN_030 = SCN1_LN_024+6
SCN1_LN_031 = SCN1_LN_024+7

SCN1_LN_032 = SCRN1+(04*320)
SCN1_LN_033 = SCN1_LN_032+1
SCN1_LN_034 = SCN1_LN_032+2
SCN1_LN_035 = SCN1_LN_032+3
SCN1_LN_036 = SCN1_LN_032+4
SCN1_LN_037 = SCN1_LN_032+5
SCN1_LN_038 = SCN1_LN_032+6
SCN1_LN_039 = SCN1_LN_032+7

SCN1_LN_040 = SCRN1+(05*320)
SCN1_LN_041 = SCN1_LN_040+1
SCN1_LN_042 = SCN1_LN_040+2
SCN1_LN_043 = SCN1_LN_040+3
SCN1_LN_044 = SCN1_LN_040+4
SCN1_LN_045 = SCN1_LN_040+5
SCN1_LN_046 = SCN1_LN_040+6
SCN1_LN_047 = SCN1_LN_040+7

SCN1_LN_048 = SCRN1+(06*320)
SCN1_LN_049 = SCN1_LN_048+1
SCN1_LN_050 = SCN1_LN_048+2
SCN1_LN_051 = SCN1_LN_048+3
SCN1_LN_052 = SCN1_LN_048+4
SCN1_LN_053 = SCN1_LN_048+5
SCN1_LN_054 = SCN1_LN_048+6
SCN1_LN_055 = SCN1_LN_048+7

SCN1_LN_056 = SCRN1+(07*320)
SCN1_LN_057 = SCN1_LN_056+1
SCN1_LN_058 = SCN1_LN_056+2
SCN1_LN_059 = SCN1_LN_056+3
SCN1_LN_060 = SCN1_LN_056+4
SCN1_LN_061 = SCN1_LN_056+5
SCN1_LN_062 = SCN1_LN_056+6
SCN1_LN_063 = SCN1_LN_056+7

SCN1_LN_064 = SCRN1+(08*320)
SCN1_LN_065 = SCN1_LN_064+1
SCN1_LN_066 = SCN1_LN_064+2
SCN1_LN_067 = SCN1_LN_064+3
SCN1_LN_068 = SCN1_LN_064+4
SCN1_LN_069 = SCN1_LN_064+5
SCN1_LN_070 = SCN1_LN_064+6
SCN1_LN_071 = SCN1_LN_064+7

SCN1_LN_072 = SCRN1+(09*320)
SCN1_LN_073 = SCN1_LN_072+1
SCN1_LN_074 = SCN1_LN_072+2
SCN1_LN_075 = SCN1_LN_072+3
SCN1_LN_076 = SCN1_LN_072+4
SCN1_LN_077 = SCN1_LN_072+5
SCN1_LN_078 = SCN1_LN_072+6
SCN1_LN_079 = SCN1_LN_072+7

SCN1_LN_080 = SCRN1+(10*320)
SCN1_LN_081 = SCN1_LN_080+1
SCN1_LN_082 = SCN1_LN_080+2
SCN1_LN_083 = SCN1_LN_080+3
SCN1_LN_084 = SCN1_LN_080+4
SCN1_LN_085 = SCN1_LN_080+5
SCN1_LN_086 = SCN1_LN_080+6
SCN1_LN_087 = SCN1_LN_080+7

SCN1_LN_088 = SCRN1+(11*320)
SCN1_LN_089 = SCN1_LN_088+1
SCN1_LN_090 = SCN1_LN_088+2
SCN1_LN_091 = SCN1_LN_088+3
SCN1_LN_092 = SCN1_LN_088+4
SCN1_LN_093 = SCN1_LN_088+5
SCN1_LN_094 = SCN1_LN_088+6
SCN1_LN_095 = SCN1_LN_088+7

SCN1_LN_096 = SCRN1+(12*320)
SCN1_LN_097 = SCN1_LN_096+1
SCN1_LN_098 = SCN1_LN_096+2
SCN1_LN_099 = SCN1_LN_096+3
SCN1_LN_100 = SCN1_LN_096+4
SCN1_LN_101 = SCN1_LN_096+5
SCN1_LN_102 = SCN1_LN_096+6
SCN1_LN_103 = SCN1_LN_096+7

SCN1_LN_104 = SCRN1+(13*320)
SCN1_LN_105 = SCN1_LN_104+1
SCN1_LN_106 = SCN1_LN_104+2
SCN1_LN_107 = SCN1_LN_104+3
SCN1_LN_108 = SCN1_LN_104+4
SCN1_LN_109 = SCN1_LN_104+5
SCN1_LN_110 = SCN1_LN_104+6
SCN1_LN_111 = SCN1_LN_104+7

SCN1_LN_112 = SCRN1+(14*320)
SCN1_LN_113 = SCN1_LN_112+1
SCN1_LN_114 = SCN1_LN_112+2
SCN1_LN_115 = SCN1_LN_112+3
SCN1_LN_116 = SCN1_LN_112+4
SCN1_LN_117 = SCN1_LN_112+5
SCN1_LN_118 = SCN1_LN_112+6
SCN1_LN_119 = SCN1_LN_112+7

SCN1_LN_120 = SCRN1+(15*320)
SCN1_LN_121 = SCN1_LN_120+1
SCN1_LN_122 = SCN1_LN_120+2
SCN1_LN_123 = SCN1_LN_120+3
SCN1_LN_124 = SCN1_LN_120+4
SCN1_LN_125 = SCN1_LN_120+5
SCN1_LN_126 = SCN1_LN_120+6
SCN1_LN_127 = SCN1_LN_120+7

;SCN1_LN_128 = SCRN1+(16*320)
;SCN1_LN_129 = SCN1_LN_128+1
;SCN1_LN_130 = SCN1_LN_128+2
;SCN1_LN_131 = SCN1_LN_128+3
;SCN1_LN_132 = SCN1_LN_128+4
;SCN1_LN_133 = SCN1_LN_128+5
;SCN1_LN_134 = SCN1_LN_128+6
;SCN1_LN_135 = SCN1_LN_128+7

;SCN1_LN_136 = SCRN1+(17*320)
;SCN1_LN_137 = SCN1_LN_136+1
;SCN1_LN_138 = SCN1_LN_136+2
;SCN1_LN_139 = SCN1_LN_136+3
;SCN1_LN_140 = SCN1_LN_136+4
;SCN1_LN_141 = SCN1_LN_136+5
;SCN1_LN_142 = SCN1_LN_136+6
;SCN1_LN_143 = SCN1_LN_136+7

;SCN1_LN_144 = SCRN1+(18*320)
;SCN1_LN_145 = SCN1_LN_144+1
;SCN1_LN_146 = SCN1_LN_144+2
;SCN1_LN_147 = SCN1_LN_144+3
;SCN1_LN_148 = SCN1_LN_144+4
;SCN1_LN_149 = SCN1_LN_144+5
;SCN1_LN_150 = SCN1_LN_144+6
;SCN1_LN_151 = SCN1_LN_144+7

;SCN1_LN_152 = SCRN1+(19*320)
;SCN1_LN_153 = SCN1_LN_152+1
;SCN1_LN_154 = SCN1_LN_152+2
;SCN1_LN_155 = SCN1_LN_152+3
;SCN1_LN_156 = SCN1_LN_152+4
;SCN1_LN_157 = SCN1_LN_152+5
;SCN1_LN_158 = SCN1_LN_152+6
;SCN1_LN_159 = SCN1_LN_152+7

;SCN1_LN_160 = SCRN1+(20*320)
;SCN1_LN_161 = SCN1_LN_160+1
;SCN1_LN_162 = SCN1_LN_160+2
;SCN1_LN_163 = SCN1_LN_160+3
;SCN1_LN_164 = SCN1_LN_160+4
;SCN1_LN_165 = SCN1_LN_160+5
;SCN1_LN_166 = SCN1_LN_160+6
;SCN1_LN_167 = SCN1_LN_160+7

;SCN1_LN_168 = SCRN1+(21*320)
;SCN1_LN_169 = SCN1_LN_168+1
;SCN1_LN_170 = SCN1_LN_168+2
;SCN1_LN_171 = SCN1_LN_168+3
;SCN1_LN_172 = SCN1_LN_168+4
;SCN1_LN_173 = SCN1_LN_168+5
;SCN1_LN_174 = SCN1_LN_168+6
;SCN1_LN_175 = SCN1_LN_168+7

;SCN1_LN_176 = SCRN1+(22*320)
;SCN1_LN_177 = SCN1_LN_176+1
;SCN1_LN_178 = SCN1_LN_176+2
;SCN1_LN_179 = SCN1_LN_176+3
;SCN1_LN_180 = SCN1_LN_176+4
;SCN1_LN_181 = SCN1_LN_176+5
;SCN1_LN_182 = SCN1_LN_176+6
;SCN1_LN_183 = SCN1_LN_176+7

;SCN1_LN_184 = SCRN1+(23*320)
;SCN1_LN_185 = SCN1_LN_184+1
;SCN1_LN_186 = SCN1_LN_184+2
;SCN1_LN_187 = SCN1_LN_184+3
;SCN1_LN_188 = SCN1_LN_184+4
;SCN1_LN_189 = SCN1_LN_184+5
;SCN1_LN_190 = SCN1_LN_184+6
;SCN1_LN_191 = SCN1_LN_184+7

;SCN1_LN_192 = SCRN1+(24*320)
;SCN1_LN_193 = SCN1_LN_192+1
;SCN1_LN_194 = SCN1_LN_192+2
;SCN1_LN_195 = SCN1_LN_192+3
;SCN1_LN_196 = SCN1_LN_192+4
;SCN1_LN_197 = SCN1_LN_192+5
;SCN1_LN_198 = SCN1_LN_192+6
;SCN1_LN_199 = SCN1_LN_192+7
