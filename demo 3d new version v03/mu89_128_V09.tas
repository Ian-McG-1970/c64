;
; **** ZP ABSOLUTE ADRESSES **** 
;
SCREEN_POS_LO = $02
SCREEN_POS_HI = $03
SCREEN_FLIP = $24
LINE_INC = $66
SCREEN_POS_PTR = $02
SCREEN_0 = $40
SCREEN_1 = $60

X_POS_HI = $52 ; is actually start?
X_POS_LO = $53
Y_POS_HI = $54
Y_POS_LO = $55
Z_POS_HI = $56
Z_POS_LO = $57

ab06 = $06 ; math temp?
ab07 = $07 ; math temp?

LINE_FRACTION_ab08 = $08

ab08 = $08 ; math temp? line draw fraction?
ab09 = $09 ; math temp?

Z_ROT_LO = $08 ; math temp?
Z_ROT_HI = $09 

ab0A = $0A ; math temp?
ab0B = $0B ; math temp?

Z_CLIP_LO_ab0A = $0A
Z_CLIP_HI_ab0B = $0B
H_PERS_FP_LO_DIFF_ab0A = $0A
H_PERS_FP_HI_DIFF_ab0B = $0B
X_ROT_LO = $0A
X_ROT_HI = $0B

Z_CLIP_LO_ab0C = $0C ; math temp?
Z_CLIP_HI_ab0D = $0D ; math temp?
V_PERS_FP_LO_DIFF_ab0C = $0C
V_PERS_FP_HI_DIFF_ab0D = $0D

ab18 = $18 ; math temp?
POINT_LINE_COUNT = $19

REGA = $0E
REGX = $0F
REGY = $20

FOCUS = $18 ; focus value not location

FP_MULTIPLY_LO = $22
FP_MULTIPLY_HI = $23
FP_DIVIDE_LO = FP_MULTIPLY_LO
FP_DIVIDE_HI = FP_MULTIPLY_HI

ROT_LO = $2C
ROT_HI = $2D

SIN_LO = $3C
SIN_HI = $3D
COS_LO = $3E
COS_HI = $3F

X_ROTATION_LO = $58 ; is actually end?
X_ROTATION_HI = $59
Y_ROTATION_LO = $5A
Y_ROTATION_HI = $5B
Z_ROTATION_LO = $5C
Z_ROTATION_HI = $5D

H_PERS_FP_LO_ST = $5E	; hor pers pos lo fp point start
H_PERS_FP_HI_ST = $5F	; hor pers pos hi fp point start
V_PERS_FP_LO_ST = $60	; ver pers pos lo fp point start
V_PERS_FP_HI_ST = $61	; ver pers pos hi fp point start

H_PERS_FP_LO_EN = $62	; hor pers pos lo fp point end
H_PERS_FP_HI_EN = $63	; hor pers pos hi fp point end
V_PERS_FP_LO_EN = $64	; ver pers pos lo fp point end
V_PERS_FP_HI_EN = $65	; ver pers pos hi fp point end

LINE_TYPE_POINTER = $67 ; line type?
ab68 = $68
ab69 = $69
LINE_START_HOR = $6A ; line start x?
LINE_START_VER = $6B ; line start y?
PERS_HOR_ab6C = $6C	; pers?
PERS_VER_ab6D = $6D  ; pers?
POINT_CLASSIFY_ST = $6E	; start point classification of this point?
POINT_CLASSIFY_EN = $6F  ; end point classification

CURR_X_LSB = $72
CURR_X_MSB = $73
CURR_X_HSB = $74
CURR_Y_LSB = $75
CURR_Y_MSB = $76
CURR_Y_HSB = $77
CURR_Z_LSB = $78
CURR_Z_MSB = $79
CURR_Z_HSB = $7A

SCR_HOR_MID = 128/2 ; tobe 128/2 was 160/2
SCR_VER_MID = 128/2 ; tobe 128/2 was 136/2

;ab90 = $90
;ab91 = $91
;ab92 = $92
;ab93 = $93
;ab94 = $94
;ab95 = $95
;ab96 = $96
;ab97 = $97

ab90_VAL = $04	; -80
ab91_VAL = $19 	; -80
ab92_VAL = $f8  ; +79 ; tobe $04 was $3C
ab93_VAL = $14  ; +79
ab94_VAL = $04  ; -68
ab95_VAL = $19  ; -68
ab96_VAL = $f8	; +67
ab97_VAL = $14  ; +67

CLIP_TEST_BOTTOM = 128 ; $88 	; tobe 128 was $88
CLIP_BOTTOM = CLIP_TEST_BOTTOM-1
CLIP_TEST_RIGHT = 128 ; $A0 	; tobe 128 was $A0
CLIP_RIGHT = CLIP_TEST_RIGHT-1
CLIP_TEST_TOP = $00
CLIP_TEST_LEFT = $00

SPEED_LO = $AA
SPEED_HI = $AB
ROT_SPD = $AC
OBJECT_POINTER_POS = $AD
CURRENT_OBJECT = $AF
NUMBER_OF_POINTS = $B0
DRAW_OBJECT_COUNT = $B2
DRAW_OBJECT_COUNTER = $B3

OBJ_PNT_X_LSB 	= $CF
OBJ_PNT_X_MSB 	= $D0
OBJ_PNT_Y_LSB 	= $D1
OBJ_PNT_Y_MSB 	= $D2
OBJ_PNT_Z_LSB 	= $D3
OBJ_PNT_Z_MSB 	= $D4
DIFF_X_LSB = $D5
DIFF_X_MSB = $D6
DIFF_X_HSB = $D7
DIFF_Y_LSB = $D8
DIFF_Y_MSB = $D9
DIFF_Y_HSB = $DA
DIFF_Z_LSB = $DB
DIFF_Z_MSB = $DC
DIFF_Z_HSB = $DD
OBJECT_POINTER = $1D

FP_SIGN = $01

IRQ = $FFFE


PNT_OFF_HOR = $01	; PNT_OFF_RIGHT = $01
PNT_OFF_VER = $02	; PNT_OFF_BOTTOM = $02

OVERFLOW = $E000 ; overflow?

        * = $801

STARTUP	; CALL STARTUP BEFORE CALLING MAIN - needs to setup vic pointers?
	SEI

	LDX #$FF
	TXS
	
 LDA #$00
 STA $D020
 LDA #$01 ; $00
 STA $D021
 LDA #$0B ; $00
 STA $D022
 LDA #$0C ; $00
 STA $D023

 LDA #$00 ; $01 ; colour 11 
 LDX #<$D800
 LDY #>$D800
 STX SCREEN_POS_LO+0
 STY SCREEN_POS_LO+1
 LDX #>1000 
 LDY #<1000
 JSR MEMSET

 LDA #$BC ;$65 ; colour 01 (0000????) and colour 10 (????0000) - bank 1
 LDX #<(SCREEN_COLOUR)
 LDY #>(SCREEN_COLOUR)
 STX SCREEN_POS_LO+0
 STY SCREEN_POS_LO+1
 LDX #>1000 
 LDY #<1000
 JSR MEMSET
 
	LDA #$35
	STA $1
	LDA #$70
	STA $D018
	LDA #$3B
	STA $D011
;	LDA #$00 
;	STA $D021
	LDA #$18
	STA $D016
	LDA #<IRQ_1
	STA $FFFE
	LDA #>IRQ_1
	STA $FFFF

 LDA #$7F
 STA $DC0D  ; disable timer interrupts which can be generated by the two CIA chips
 STA $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

 LDA $DC0D  ; by reading this two registers we negate any pending CIA irqs.
 LDA $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

  LDA #$01   ; this is how to tell the VICII to generate a raster interrupt
 STA $D01A
	
 LDA #2 ; SCRNBANK
 STA $DD00 ; bank
	
	LDA #$BA
	STA $D012
	LDA #$01
	STA $D019

	LDA		#7
	STA		ROT_SPD
	LDA		#$40
	STA		SPEED_LO
	LDA		#$18
	STA		SPEED_HI
	
	LDA		#1 ;7
	STA		DRAW_OBJECT_COUNT

	LDA		#0
	STA		ROT_LO
	STA		ROT_HI
	
	STA		CURR_X_MSB
	STA		CURR_X_HSB
	STA		CURR_Y_MSB
	STA		CURR_Y_HSB
	STA		CURR_Z_MSB
	STA		CURR_Z_HSB

;	STA		CURR_X_LSB
;	STA		CURR_Y_LSB
;	STA		CURR_Z_LSB
	
	CLI

MAIN_LOOP
			JSR 	READ_JOYSTICK_KEYBOARD
			JSR		SIN_COS
			JSR 	DRAW_SCREEN
			JSR 	COLOUR_SETUP_BLACK ; COLOUR_SETUP_WHITE ; BLACK
			JSR 	DRAW_OBJECTS
			
			LDX CURR_X_MSB
			LDA CURR_X_HSB
			LDY	#0
			JSR	HEX16
			LDA CURR_X_LSB
			LDX #32
			LDY	#0
			JSR	HEX8

			LDX CURR_Y_MSB
			LDA CURR_Y_HSB
			LDY	#6
			JSR	HEX16
			LDA CURR_Y_LSB
			LDX #32
			LDY	#6
			JSR	HEX8

			LDX CURR_Z_MSB
			LDA CURR_Z_HSB
			LDY	#12
			JSR	HEX16
			LDA CURR_Z_LSB
			LDX #32
			LDY	#12
			JSR	HEX8
			
			LDA OBJECTS_TO_DRAW+1
			LDX #0
			LDY	#18
			JSR	HEX8

			CLC
			LDA		TEST_LSB
			ADC		#1
			STA		TEST_LSB
			LDA		TEST_MSB
			ADC		#0
			STA		TEST_MSB
			LDA		TEST_HSB
			ADC		#0
			STA		TEST_HSB			

			LDA		TEST_HSB
			LDX 	#0
			LDY		#24
			JSR		HEX8
			LDA		TEST_MSB
			LDX 	#16
			LDY		#24
			JSR		HEX8
			LDA		TEST_LSB
			LDX 	#32
			LDY		#24
			JSR		HEX8

			LDY		TEST_LSB
			LDX		TEST_MSB
			LDA		TEST_HSB
			JSR		BIT24TOFP
			STY		TEST_HI
;;			STA		TEST_LO
			LDX		TEST_HI
;;			LDA 	TEST_LO
			LDY		#30
			JSR		HEX16
					
			JMP MAIN_LOOP

TEST_LSB	.byte 0
TEST_MSB	.byte 0
TEST_HSB	.byte 0
TEST_HI 	.byte 0
TEST_LO 	.byte 0

IRQ_1   		PHA
				LDA 	#$7E
				STA 	$D018   ;VIC Memory Control Register
				LDA 	#<IRQ_2
				STA 	IRQ
				LDA 	#>IRQ_2
				STA 	IRQ+1
				LDA 	#$00
				STA 	$D012	;Raster Position
				LDA 	#$1B
				STA 	$D011   ;VIC Control Register 1
				LDA 	#$08
				STA 	$D016   ;VIC Control Register 2
				LDA 	#$01
				STA 	$D019   ;VIC Interrupt Request Register (IRR)
				PLA 
NMI_NOP			RTI ; This is the irq handler for the NMI. Just returns without acknowledge. This prevents subsequent NMI's from interfering.

IRQ_2  			PHA
VIC_SCREEN_BANK	LDA 	#0
				STA 	$D018    ;VIC Memory Control Register
				LDA 	#<IRQ_1
				STA 	IRQ
				LDA 	#>IRQ_1
				STA 	IRQ+1
				LDA 	#178	; 186
				STA 	$D012    ;Raster Position
				LDA 	#$3B
				STA 	$D011    ;VIC Control Register 1
				LDA 	#$18
				STA 	$D016    ;VIC Control Register 2
				LDA 	#$01
				STA 	$D019    ;VIC Interrupt Request Register (IRR)
				PLA 
				RTI

MEMSET       STY    LSB_ONLY+1 ; store LSB count
             CPX    #0          ; MSB?     
             BEQ    LSB_ONLY   ; no
             LDY    #0          ; yes so reset LSB
MSB_LOOP  
LSB_LOOP      STA    (SCREEN_POS_LO),Y   ; clear whole MSB
               DEY 
               BNE    LSB_LOOP
              INC    SCREEN_POS_LO+1      ; inc MSB
              DEX               ; dec MSB count
              BNE    MSB_LOOP
LSB_ONLY    LDY    #0          ; LSB count 
             BEQ    MS_END
LAST_LSB_LOOP STA   (SCREEN_POS_LO),Y
               DEY 
               BNE   LAST_LSB_LOOP               
              STA   (SCREEN_POS_LO),Y     ; clear last Y (0)
MS_END      RTS

FP_DIVIDE	STA		FP_DIVIDE_HI	; inputs = X-(LO) + Y-(HI) + A (HI) + FP_MULTILPLY_LO - outputs = AY
			LDA 	LOG_TABLE,Y
			LDY 	FP_DIVIDE_LO
			SEC 
			SBC 	LOG_TABLE,Y
			TAY
			TXA
			LDX 	EXP_TABLE,Y
			ORA 	#$02
			BCS 	_FP_DIV_CNT
					SBC 	#$03	; subtract 00000011
					SEC 
_FP_DIV_CNT SBC 	FP_DIVIDE_HI
			AND 	#$FD
			RTS

FP_MULTIPLY	STA		FP_MULTIPLY_HI	; inputs = X-(LO) + Y-(HI) + A (HI) + FP_MULTILPLY_LO - outputs = AY
			LDA 	LOG_TABLE,X		
			LDX 	FP_MULTIPLY_LO
			CLC 
			ADC 	LOG_TABLE,X
			TAX 
			TYA 
			BCC 	_FP_MUL_CNT
					ADC 	#$03	; add 00000011
					CLC 
_FP_MUL_CNT	ADC 	FP_MULTIPLY_HI
			AND 	#$FD
			LDY 	EXP_TABLE,X
			RTS 

FPMUL		LDA LOG_TABLE,X		; fpMul - ; Input:  [08] = fp multiplier ;         XY   = fp multiplicand ; Output: [08] and XY = result
			LDX ab08
			CLC 
			ADC LOG_TABLE,X
			TAX 
			TYA 
			BCC _PF_MUL_CNT
				ADC #$03			; add 00000011
				CLC 
_PF_MUL_CNT   	ADC ab09
			BVS MATH_LIMIT 
			AND #$FD
			STA ab09
			TAY 
			LDA EXP_TABLE,X
			TAX 
			STA ab08
			RTS 

MATH_LIMIT	BPL _MATH_LIMIT_POS
			AND #$01
			ORA #$78
			TAY 
			LDX #$00
			STX ab08
			STY ab09
			RTS 

_MATH_LIMIT_POS	AND #$01
				ORA #$84

MATH_LIMIT_EXIT	TAY 
				LDX #$00
				STX ab08
				STY ab09
				RTS 

FPDIV	STY 	ab06	 ; fpDiv - Input:  [08] = fp divisor - XY   = fp dividend - Output: [08] and XY = result
        LDY 	ab08
        LDA 	LOG_TABLE,Y
        SEC 
        SBC 	LOG_TABLE,X
        TAX 
        LDA 	ab09
        ORA 	#$02
        BCS 	b8349
			SBC 	#$03		; subtract 00000011
			SEC 
b8349   SBC 	ab06
        BVS 	MATH_LIMIT 
        AND 	#$FD
        STA 	ab09
        TAY 
        LDA 	EXP_TABLE,X
        TAX 
        STA 	ab08
        RTS 

FPADD_CONT	LDA		ab18	; ($838B entry point)  
			LSR 
			BCS 	b8373
        TXA 
        ADC 	ab08
        ROR 
        INY 
        INY 
        INY 
        INY 
        TAX 
        STA 	ab08
        STY 	ab09
        RTS 

b836C   TYA 
        ASL 
        BCC 	b83CC
        JMP 	j8419

b8373   TXA 
        SBC 	ab08
        BEQ 	b8383
			BCS 	b83D5
			LDY 	ab09
			EOR 	#$FF
			ADC 	#$01
			JMP 	b83D5

b8383   TYA 
        SEC 
        SBC 	#$24
		BVS 	_MATH_LIMIT_POS
			BVC 	MATH_LIMIT_EXIT
	
FP_ADD  TYA			; XY + 89
        SEC 
        SBC 	ab09
        BVS 	b836C
        STA 	ab18
        ADC 	#$01
        BVS 	b836C
        BMI 	b83F5
        LSR 
        LSR 
        BEQ 	FPADD_CONT
        CMP 	#$09
        BCS 	b83CC
        EOR 	#$0F
        STA 	ab83AB +1
        LDA		ab08
        SEC 
        ROR 
ab83AB 	BNE		b83B3 	; self modifiction code shift
        NOP 
        NOP 
        NOP 
        NOP 
        NOP 
        NOP 
        NOP 
b83B3   LSR 
        LSR 
        LSR 
        LSR 
        LSR 
        LSR 
        LSR 
        STA 	ab06
        LDA 	ab18
        LSR 
        TXA 
        BCS 	b83D1
b83C2   ADC 	ab06
        BCC 	b83CB
			LSR 
			INY 
			INY 
			INY 
			INY 
b83CB   TAX 
b83CC   STX 	ab08
        STY 	ab09
        RTS 

b83D1   SBC ab06
        BCS b83CB
b83D5   STY ab06
        LDY #$00
b83D9   ASL 
        DEY 
        BCC b83D9
        TAX 
        TYA 
        ASL 
        ASL 
        CLC 
        ADC ab06
        BVS b83EC
        TAY 
        STX ab08
        STY ab09
        RTS 

b83EC   LDX #<p8400
        LDY #>p8400
        STX ab08
        STY ab09
        RTS 

b83F5   CMP #$E0
        BCC j8419
        LSR 
        LSR 
        AND #$07
        STA ab8404 +1
p8400   TXA 
        SEC 
        ROR 
ab8404  BNE b8408
        LSR 
        LSR 
        LSR 
b8408   LSR 
        LSR 
        LSR 
        LSR 
        STA ab06
        LDY ab09
        LDA ab18
        LSR 
        LDA ab08
        BCC b83C2
        BCS b83D1
j8419   LDX ab08
        LDY ab09
        RTS 

COS_FP	INY 
SIN_FP	TYA 
		LSR 
		BCC 	SIN_CNT
				TXA 
				EOR #$FF
				TAX 
				TYA 
				LSR 
SIN_CNT AND 	#$01
		ORA 	SIN_MSB,X
		TAY 
		LDA 	SIN_LSB,X
		TAX 
		RTS 

; Y format = floating point position 
; bit0 = ignored / shifted out - first bit can be set to show negative?
; bit1 = ignored / shifted out
; bit2 = 
; bit3 = 
; bit4 = 
; bit5 = 
; bit6 = 
; bit7 = must be 0 or if set value must be gt FC for 1 to be added to result?

; X format = actual number
; bit0 = 
; bit1 = 
; bit2 = 
; bit3 = 
; bit4 = 
; bit5 = 
; bit6 = 
; bit7 = 

FPTO8BIT	TYA 				; input X/Y (mantisa/exponent) -  output X=HI/Y=LO ; transfer exponent? to a
			BMI		b849F		; if negative
			LSR 				; half and put bit into carry (carry unused)
			LSR 				; half and put bit into carry (carry unused)
			CMP 	#$07		; is it greater than 7
			BCS 	FP8BIT_ERR		; yes so error so exit with carry set
			STA 	FP8BIT_JMP +1	; no so self modifying code to jump forward a number of divides
			TXA 				; transfer mantisa? to a
			SEC 				; set carry
			ROR 				; /2 - putting 1 in top bit (and putting 0 in carry?) 
FP8BIT_JMP	BNE 	b848C		; jump forward self modifying code - always done as carry is set so ROR result is never 0
			LSR 				; /2
			LSR 				; /4
			LSR 				; /8
			LSR 				; /16
b848C   	LSR 				; /32
			LSR 				; /64
			LSR 				; /128
b848F   	ADC 	#0			; add carry?
			BMI 	b84A5		; if minus then error?
			TAX 				; backup result
			TYA 				; transfer y to a
			LSR					; / 2
			TXA 				; restore result
			BCC 	b849E		; clear carry so ok?
				EOR 	#$FF	; negate?
				ADC 	#$00	; negate by adding carry that is already set?
				CLC 			; clear carry for ok?
b849E   	RTS 				; exit

b849F   	CMP 	#$FC		; sets the carry flag if greater than (11111100 binary)
			LDA 	#$00		; resets the output x value? 
			BEQ 	b848F		; jump back into code

b84A5   	SEC 				; set carry for error?
FP8BIT_ERR	RTS 				; exit

FPTO16BIT	TYA					; input X/Y (mantisa/exponent) -  output X=HI/Y=LO	; transfer exponent? to a
			BMI 	b8501 		; if negative
			LSR 				; half and put bit into carry
			LSR 				; half and put bit into carry
			CMP 	#15			; is it greater than 15
			BCS 	FP8BIT_ERR		; yes so error so exit with carry set
			STA 	ab06		; store intermediate in temp var
			ASL 				; *2
			ADC 	ab06		; *3 
			STA 	FP16BIT_JMP +1	; number of bytes to jump
			LDA 	#0
			STA 	ab06		; clear result
			TXA 				; get input (mantisa?)
			SEC 				; set carry to move 1 into result
			ROR 				; rotate carry into high bit and low bit into carry
			ROR 	ab06		; rotate carry into result
FP16BIT_JMP BCC 	b84D2		; jump forward
			LSR 				; half and shift lowest bit into carry  
			ROR 	ab06		; half and rotate carry bit into result
			LSR 
			ROR 	ab06
			LSR 
			ROR 	ab06
			LSR 
			ROR 	ab06
			LSR 
			ROR 	ab06
b84D2   	LSR 
			ROR 	ab06
			LSR 
			ROR 	ab06
			LSR 
			ROR 	ab06
			LSR 
			ROR		ab06
			LSR 
			ROR 	ab06
			LSR 
			ROR 	ab06
			LSR 
			ROR 	ab06
			LSR 
			ROR 	ab06
			LSR 
			ROR 	ab06
			LSR 
			ROR 	ab06
			TAX 				; store low byte of result?
			TYA 				; get input (exponent?)
			LDY 	ab06		; store high byte of result?
			LSR 				; move 1st bit of input (sign) into carry
			BCC 	b8500		; clear so positive
				TXA 			; negtive so
				EOR 	#$FF	; negate x
				TAX 
				TYA 
				EOR 	#$FF	; negate y
				TAY 
				CLC 
b8500   RTS 					; no

b8501 		LSR 				; move 1st bit to carry
			BCC 	b850B		; set y/n
				LDX 	#$FF	; yes
				LDY 	#$FF
				CLC 
			RTS 
b850B   	LDX 	#0			; no
			LDY 	#0
			RTS 

; A = exponent = value of (first bit position set *4?) with sign in bit 0
; Y = mantissa = value of next 8 bits of the rest of the 8/16/24 bit number

BIT24TOFP 	STY		ab07 	; store lsb	; MATH_24BitToFP (FP.SetToObjectSpaceCoordinate24) ; Enter: A = Coordinate.MSB X = Coordinate.PSB Y = Coordinate.LSB ; Usese: [06].b  Temporary store for coordinate MSB ; Exit:  [08].fp Result, also stored in X:A (exp:man)
			STA 	ab06 	; store msb
			BPL 	_BIT24FP_POS	 ; positive ?

				LDA 	#0	 	; negative so 
				SEC 
				SBC 	ab07 	; negate lsb
				STA 	ab07
				TXA 			; negate psb
				EOR 	#$FF
				ADC 	#0
				TAX 
				LDA 	#0
				SBC 	ab06	; negate msb

_BIT24FP_POS	BNE 	_BIT24			; if msb not 0 - jump to set loop counter to 24 ($18)?
				TXA 				; move psb to a
				BNE 	_BIT16			; if psb not 0 - jump to set loop counter to 16 ($10)?

					LDA 	ab07			; get lsb
					BEQ 	_BIT00 			; if lsb is 0 - jump to overflow and exit

						LDX 	#0
						STX 	ab07
						LDX 	#8			; set loop counter to 8?
						BNE 	_EXP_LOOP 		; jump?

_BIT24   	STX 	ab07	; store psb?
			LDX 	#24		; set loop counter to 24?

_EXP_LOOP     	DEX 			; find exponent - start from whatever x is passed in and reduce until x a bit set found 
				ASL 	ab07 	; shift lsb up into carry
				ROL 	 		; shift msb up with carry - mantisa?
				BCC 	_EXP_LOOP	; as soon as first bit is set then exit

			TAY					; store mantisa?
			TXA 				; x is exponent?
			ASL 				; exponent *2?
			ASL 	ab06		; shift msb putting sign into carry 
			ROL 				; rotate carry into first bit of exponent - bit 0 is sign
			RTS

_BIT16   	LDX 	#16		; set loop counter to 16?
			BNE 	_EXP_LOOP 	; jump?
		
_BIT00    	LDY 	#<OVERFLOW ; overflow?
			LDA 	#>OVERFLOW
			RTS 

DRAW_OBJECTS	LDY 	DRAW_OBJECT_COUNT 			; number of objects to draw
				BEQ 	DRAW_OBJECTS_EXIT 			; exit if none
				STY 	DRAW_OBJECT_COUNTER 		; store temp object count
DRAW_OBJECTS_LOOP   LDX 	OBJECTS_TO_DRAW,Y 		; object number
					JSR 	DRAW_OBJECT
					DEC 	DRAW_OBJECT_COUNTER 	; dec temp object count
					LDY 	DRAW_OBJECT_COUNTER 	; get temp object count
					BNE 	DRAW_OBJECTS_LOOP 		; exit y/n
DRAW_OBJECTS_EXIT 	RTS 							; exit

DRAW_OBJECT			STX		CURRENT_OBJECT					; store object number 
					LDA		OBJECT_SHAPE_PTR_LO,X	; get object pos hi
					STA		OBJECT_POINTER			; store in pointer
					LDA		OBJECT_SHAPE_PTR_HI,X	; get object pos lo
					STA		OBJECT_POINTER+1		; store in pointer
					JSR		CAMERA_OBJECT_DIFF
;					JSR		DRAW_OBJECT_SHAPE 		; draw object 	; commented out
; SEC																; commented out
;					BCS		DRAW_OBJECT_CONT						; commented out
;DRAW_OBJECT_EXIT	RTS 			

DRAW_OBJECT_CONT   	LDX		#$00
					STX		POINT_LINE_COUNT
					LDY		#$01
					JSR		CHK_ABS_DIST
					BCC		DRAW_OBJECT_LINES	; draw the object
					LDA		DIFF_Y_HSB			; above ground?
					BPL		DRAW_OBJECT_POINT	; not underground?
					LDY		#$00
					LDX		#$00
					JSR		CHK_ABS_DIST
					BCS		DRAW_OBJECTS_EXIT

DRAW_OBJECT_POINT	LDY		DIFF_X_LSB		; object is a point
					LDX		DIFF_X_MSB
					LDA		DIFF_X_HSB
					JSR		BIT24TOFP
					STY		X_POS_HI
					STA		X_POS_LO
					LDY		DIFF_Y_LSB
					LDX		DIFF_Y_MSB
					LDA		DIFF_Y_HSB
					JSR		BIT24TOFP
					STY		Y_POS_HI
					STA		Y_POS_LO
					LDY		DIFF_Z_LSB
					LDX		DIFF_Z_MSB
					LDA		DIFF_Z_HSB
					JSR		BIT24TOFP
					STY		Z_POS_HI
					STA		Z_POS_LO
					JSR		ROTATE_PERS
					LDX		#$00
;        			JMP		PLOT_POINT 	; PLOT POINT

PLOT_POINT_CHK		LDA		POINT_CLASSIFICATION,X	; GET POINT FROM PLOT POINT TABLE ?
					BNE		PLOT_POINT_EXIT			; EXIT IF ITS not ZERO - this being set to not zero plots a point - what sets it to 0?
PLOT_POINT				LDY		PERS_VER_TAB,X			; GET VER POS
						LDA		VER_POS_LO,Y 
						STA		SCREEN_POS_LO
PLOT_POINT_SCN			LDA 	VER_POS_SCN0_HI,Y
						STA		SCREEN_POS_HI
						LDY		HOR_SCR_POS,X
						LDA		(SCREEN_POS_PTR),Y	; GET SCREEN BYTE
LINE_DRAW_8_TYPE		ORA		ORA_PIXEL_POS,X		; AND PIXEL
						STA		(SCREEN_POS_PTR),Y	; PUT SCREEN BYTE
PLOT_POINT_EXIT 	RTS 


DRAW_OBJECT_LINES	LDA 	DIFF_X_MSB
					SEC 
					SBC 	#$08
					STA 	DIFF_X_MSB
					BCS 	b9795
						DEC 	DIFF_X_HSB		
b9795   			LDA 	DIFF_Y_MSB
					SEC 
					SBC 	#$08
					STA 	DIFF_Y_MSB
					BCS 	b97A0
						DEC 	DIFF_Y_HSB
b97A0   			LDA 	DIFF_Z_MSB
					SEC 
					SBC 	#$08
					STA 	DIFF_Z_MSB
					BCS 	b97AB
						DEC 	DIFF_Z_HSB
b97AB   			LDY 	#0
					STY 	POINT_LINE_COUNT 	; start point count
					LDA 	(OBJECT_POINTER),Y 	; object point count
					STA 	NUMBER_OF_POINTS 	; number of points?
					STY 	OBJECT_POINTER_POS 	; store mem pos

PROCESS_POINT_LOOP		JSR 	PROCESS_POINT_TO_FP		; get point then *16 then convert to 24bit fp
						JSR 	ROTATE_PERS
						LDA 	POINT_LINE_COUNT		; get point count
						INC 	POINT_LINE_COUNT		; inc point count
						CMP 	NUMBER_OF_POINTS	 	; last point yn
						BNE 	PROCESS_POINT_LOOP  	; no so do next
					INC 	OBJECT_POINTER_POS 			; inc mem pos
					LDY 	OBJECT_POINTER_POS 			; get mem pos
					LDA 	(OBJECT_POINTER),Y  		; object line count
					STA 	POINT_LINE_COUNT  			; number of lines?
					BPL 	NEXT_COMPRESSED_LINE		; line count is positive so lines are compressed

NEXT_LINE				LDY 	OBJECT_POINTER_POS 	; get mem pos
						INY  						; inc mem pos
						LAX 	(OBJECT_POINTER),Y 	; get 1st point into a and x
						INY 						; inc mem pos
						LDA 	(OBJECT_POINTER),Y 	; get 2nd point
						STY 	OBJECT_POINTER_POS 	; store 2nd point?
						TAY 						; 2nd point
						JSR 	LINE_DRAW 			; draw line
						DEC 	POINT_LINE_COUNT 	; dec line count
						BMI 	NEXT_LINE 			; last line y/n
					RTS 						; yes

NEXT_COMPRESSED_LINE 	LDY 	OBJECT_POINTER_POS 	; get mem pos ; first and second point are stored in 1 byte as 2 nibbles
						INY  						; inc mem pos
						STY 	OBJECT_POINTER_POS 	; store mem pos
						LAX 	(OBJECT_POINTER),Y 	; get point count into a and x
						AND 	#$0F 				; and with 15 = 1st point
						TAY 						; y = first point
						TXA  						; get backup
						LSR  						; /2
						LSR  						; /2
						LSR  						; /2
						LSR  						; /2
						TAX  						; divide by 16 = 2nd point
						JSR 	LINE_DRAW       	; DRAW LINE
						DEC 	POINT_LINE_COUNT 	; dec line count
						BPL 	NEXT_COMPRESSED_LINE ; last line yn
					RTS  						; yes

CAMERA_OBJECT_DIFF	SEC 						; calc diff between object pos and current pos
					LDA 	OBJ_X_LSB,X		;
					SBC 	CURR_X_LSB		;
					STA 	DIFF_X_LSB		;
					LDA 	OBJ_X_MSB,X		;
					SBC 	CURR_X_MSB		;
					STA 	DIFF_X_MSB		;
					LDA 	OBJ_X_HSB,X		;
					SBC 	CURR_X_HSB		;
					STA 	DIFF_X_HSB		;

					SEC 
					LDA 	OBJ_Y_LSB,X		;
					SBC 	CURR_Y_LSB		;
					STA 	DIFF_Y_LSB		;
					LDA 	OBJ_Y_MSB,X		;
					SBC 	CURR_Y_MSB		;
					STA 	DIFF_Y_MSB		;
					LDA 	OBJ_Y_HSB,X		;
					SBC 	CURR_Y_HSB		;
					STA 	DIFF_Y_HSB		;

					SEC 
					LDA 	OBJ_Z_LSB,X		;
					SBC 	CURR_Z_LSB		;
					STA 	DIFF_Z_LSB		;
					LDA 	OBJ_Z_MSB,X		;
					SBC 	CURR_Z_MSB		;
					STA 	DIFF_Z_MSB		;
					LDA 	OBJ_Z_HSB,X		;
					SBC 	CURR_Z_HSB		;
					STA 	DIFF_Z_HSB		;
					RTS 

CHK_ABS_DIST	STX 	ab08
				STY 	ab09
				LDA 	DIFF_X_LSB
				LDX 	DIFF_X_MSB
				LDY 	DIFF_X_HSB
				JSR 	ABS_DIFF
				BCS 	b99BD 		; return carry set
				LDA 	DIFF_Y_LSB
				LDX 	DIFF_Y_MSB
				LDY 	DIFF_Y_HSB
				JSR 	ABS_DIFF
				BCS 	b99BD 		; return carry set
				LDA 	DIFF_Z_LSB
				LDX 	DIFF_Z_MSB
				LDY 	DIFF_Z_HSB
				JSR		ABS_DIFF
b99BD   		RTS

ABS_DIFF   	BPL 	CONTINUE1 	; calc absolute difference returning carry if too far away?  if number is positive continue ; negate a/x/y which hold lsb/msb/hsb if needed and subtract 08 and 09 from msb/hsb 
				EOR 	#$FF  	; negative so negate LSB
				PHA 			; backup LSB
				TXA       		; negate MSB
				EOR 	#$FF	;
				TAX 			;
				TYA 			; negate HSB
				EOR 	#$FF	;
				TAY 			;
				PLA 			; restore LSB
				CLC 
				ADC 	#$01		; inc LSB
				BCC 	CONTINUE1	; no overlow so continue
					INX 			; inc MSB
					BNE 	CONTINUE1	; no overlow so continue
						INY 			; inc HSB
CONTINUE1   SEC 				; subtract 
			TXA 
			SBC 	ab08		; subtract from MSB
			TYA 
			SBC 	ab09		; subtract from HSB
			RTS 

LINE_DRAW		LDA		POINT_CLASSIFICATION,X 		; start point X classification ; LINE_DRAW_04 - DRAW LINE - x is start index - y is end index
				BEQ 	POINT_X_INFRONT 			; start point X onscreen
				BMI 	POINT_X_BEHIND 				; start point X behind

				LDA 	POINT_CLASSIFICATION,Y 		; end point Y classification 
				BEQ 	POINT_X_BEHIND 				; end point Y onscreen
				BMI 	POINT_X_INFRONT 			; end point Y behind	

				LDA 	Z_ROT_TAB_HI,Y 
				EOR 	#$80
				STA 	ab06
				LDA 	Z_ROT_TAB_HI,X
				EOR 	#$80
				CMP 	ab06
				BCS	 	POINT_X_INFRONT

POINT_X_BEHIND 	TYA 			; start X is behind so swap start X and end Y pointer so that Y is behind and X start might be behind? so swap start and end - so Y is behind?
				STX 	ab06	; swap start / end
				TAX 			; swap start / end
				LDY 	ab06	; swap start / end

				LDA 	POINT_CLASSIFICATION,X 	; start point X which was end point Y classification
				BPL 	POINT_X_INFRONT 		; end point X point infront
						RTS 					; both points behind

POINT_X_INFRONT	LDA 	POINT_CLASSIFICATION,X 	; at least 1 point is in front ; point 1 classification
				STA 	POINT_CLASSIFY_ST
				BMI 	X_ROT_COPY 				; point X is behind so x rotation points need to be copied and pers doesnt
					LDA 	PERS_HOR_TAB,X
					STA 	LINE_START_HOR
					LDA 	PERS_VER_TAB,X
					STA 	LINE_START_VER
					LDA 	H_PERS_FP_LO,X
					STA 	H_PERS_FP_LO_ST
					LDA 	H_PERS_FP_HI,X
					STA 	H_PERS_FP_HI_ST
					LDA 	V_PERS_FP_LO,X
					STA 	V_PERS_FP_LO_ST
					LDA 	V_PERS_FP_HI,X
					STA 	V_PERS_FP_HI_ST

X_ROT_COPY		LDA 	X_ROT_TAB_LO,X ; a point is behind? so x and y rotation needs to be copied to be used in z clip
				STA 	X_POS_HI
				LDA 	X_ROT_TAB_HI,X
				STA 	X_POS_LO
				LDA 	Y_ROT_TAB_LO,X
				STA 	Y_POS_HI
				LDA 	Y_ROT_TAB_HI,X
				STA 	Y_POS_LO
				LDA 	Z_ROT_TAB_LO,X
				STA 	Z_POS_HI
				LDA 	Z_ROT_TAB_HI,X
				STA 	Z_POS_LO

				LDA 	POINT_CLASSIFICATION,Y
				STA 	POINT_CLASSIFY_EN
				BMI 	Y_ROT_COPY				; Y is behind so y rotation points need to be copied and pers doesnt
					LDA 	PERS_HOR_TAB,Y
					STA 	PERS_HOR_ab6C
					LDA 	PERS_VER_TAB,Y
					STA 	PERS_VER_ab6D
					LDA 	H_PERS_FP_LO,Y
					STA 	H_PERS_FP_LO_EN
					LDA 	H_PERS_FP_HI,Y
					STA 	H_PERS_FP_HI_EN
					LDA 	V_PERS_FP_LO,Y
					STA 	V_PERS_FP_LO_EN
					LDA 	V_PERS_FP_HI,Y
					STA 	V_PERS_FP_HI_EN

Y_ROT_COPY		LDA 	X_ROT_TAB_LO,Y
				STA 	X_ROTATION_LO
				LDA 	X_ROT_TAB_HI,Y
				STA 	X_ROTATION_HI
				LDA 	Y_ROT_TAB_LO,Y
				STA 	Y_ROTATION_LO
				LDA 	Y_ROT_TAB_HI,Y
				STA 	Y_ROTATION_HI
				LDA 	Z_ROT_TAB_LO,Y
				STA 	Z_ROTATION_LO
				LDA 	Z_ROT_TAB_HI,Y
				STA 	Z_ROTATION_HI
				LDA 	POINT_CLASSIFY_EN
				BMI 	Z_CLIP ; z clip? as end is negative so is behind

CALC_HOR_VER_DIFF_SLOPE
		LDX H_PERS_FP_LO_ST		; calc hor difference
        LDA H_PERS_FP_HI_ST
        EOR		#FP_SIGN
        STX ab08
        STA ab09
        LDX H_PERS_FP_LO_EN
        LDY H_PERS_FP_HI_EN
        JSR FP_ADD 					; H_PERS_FP_HI_EN + (-H_PERS_FP_HI_ST) ? 
        STX H_PERS_FP_LO_DIFF_ab0A	; h line difference?
        STY H_PERS_FP_HI_DIFF_ab0B
        TYA 
        ASL 
        AND #$02
        STA LINE_TYPE_POINTER 	; sign? *2? ; does the sign show the line direction?

        LDX V_PERS_FP_LO_ST		; calc ver difference
        LDA V_PERS_FP_HI_ST
        EOR 	#FP_SIGN
        STX ab08
        STA ab09
        LDX V_PERS_FP_LO_EN
        LDY V_PERS_FP_HI_EN
        JSR FP_ADD					; V_PERS_FP_HI_EN + (-V_PERS_FP_HI_ST) ? 
        STX V_PERS_FP_LO_DIFF_ab0C	; v line difference?
        STY V_PERS_FP_HI_DIFF_ab0D
        TYA 
        AND #$01				; sign? ; does the sign show the line direction?
        ORA LINE_TYPE_POINTER
        STA LINE_TYPE_POINTER

; perspective h/v ?
		LDA		H_PERS_FP_LO_DIFF_ab0A	; hdiff - calc hdiff / vdiff slope?
		STA		FP_DIVIDE_LO
		LDX		ab09					; vdiff
		LDY		ab08					; vdiff
		LDA		H_PERS_FP_HI_DIFF_ab0B	; hdiff
		JSR		FP_DIVIDE		; 0A-0B / 08-09 -> 68-69 = hdiff / vdiff slope?
		STx		ab68
		STA		ab69

        BMI 	b9B1E
			LDA 	LINE_TYPE_POINTER
			ORA 	#$04
			STA 	LINE_TYPE_POINTER

; perspective v/h ?
			LDA		V_PERS_FP_LO_DIFF_ab0C ; vdiff - calc vdiff / hdiff slope?
			STA		FP_DIVIDE_LO
			LDX		H_PERS_FP_HI_DIFF_ab0B ; hdiff
			LDY		H_PERS_FP_LO_DIFF_ab0A ; hdiff
			LDA		V_PERS_FP_HI_DIFF_ab0D ; vdiff 
			JSR		FP_DIVIDE		; 0A-0B / 0C-0D -> 08-09 = vdiff / hdiff slope?

			BMI 	b9B1E
				LDY 	#$FF		; straight line?	LDA 	#$FF
				JMP 	STORE_LINE_INC

b9B1E   CLC 
        ADC #$20		; possible *128 ?
        AND #$FC
        TAY 
        JSR FPTO16BIT
		JMP 	STORE_LINE_INC

Z_CLIP	LDA		Z_POS_HI			 ; do z_clip  zclip z-clip ; calc z-diff = z-st / z-en?
		STA		FP_DIVIDE_LO
		LDX		Z_ROTATION_HI
		LDY		Z_ROTATION_LO
		LDA		Z_POS_LO
		JSR		FP_DIVIDE		; ZPOS HI-LO / Z_ROTATION HI-LO -> 0A-0B
		STX		Z_CLIP_LO_ab0A
		EOR 	#FP_SIGN				; swap sign?
        STA Z_CLIP_HI_ab0B

		LDA 	X_POS_HI		; calc x start distance based on z
		STA		FP_MULTIPLY_LO
		LDA 	X_POS_LO
		LDY 	Z_CLIP_HI_ab0B
        LDX 	Z_CLIP_LO_ab0A
		JSR		FP_MULTIPLY		; XPOS HI-LO * 0A-0B -> 08-09
        STy 	ab08
        STA 	ab09
		
        LDX X_ROTATION_LO		; calc x end distance based on z
        LDY X_ROTATION_HI
        JSR FP_ADD				; XROT HI-LO + 08-09 -> 0c-0D
        STX Z_CLIP_LO_ab0C
        STY Z_CLIP_HI_ab0D
        TYA 
        EOR Z_POS_LO
        ASL 
        AND #$02
        STA LINE_TYPE_POINTER

		LDA 	Y_POS_HI		; calc y start distance based on z
		STA		FP_MULTIPLY_LO
		LDA 	Y_POS_LO
		LDY 	Z_CLIP_HI_ab0B
        LDX 	Z_CLIP_LO_ab0A
		JSR		FP_MULTIPLY		; Y_POS HI-LO * 0A-0B -> 08-09
        STy 	ab08
        STA 	ab09
				
        LDX Y_ROTATION_LO		; calc y end distance based on z
        LDY Y_ROTATION_HI
        JSR FP_ADD				; YROT HI-LO + 08-09 -> 0A-0B
        STX Z_CLIP_LO_ab0A
        STY Z_CLIP_HI_ab0B
        TYA 
        EOR Z_POS_LO
        AND #$01
        ORA LINE_TYPE_POINTER
        STA LINE_TYPE_POINTER

; perspective h/v ?
		LDA		Z_CLIP_LO_ab0C
		STA		FP_DIVIDE_LO
		LDX		ab09
		LDY		ab08
		LDA		Z_CLIP_HI_ab0D
		JSR		FP_DIVIDE		; 0C-0D / 08-09 -> 68-69
		STX		ab68
		STA		ab69

        BMI 	b9C05
			LDA 	LINE_TYPE_POINTER
			ORA 	#$04
			STA 	LINE_TYPE_POINTER

; perspective v/h ?
			LDA		Z_CLIP_LO_ab0A
			STA		FP_DIVIDE_LO
			LDX		Z_CLIP_HI_ab0D
			LDY		Z_CLIP_LO_ab0C
			LDA		Z_CLIP_HI_ab0B
			JSR		FP_DIVIDE		; 0A-0B / 0C-0D -> 08-09
	
			BMI 	b9C05
				LDY 	#$FF			; straight line?
				BNE 	STORE_LINE_INC ; jump

b9C05   CLC 
        ADC #$20	; *128 ?
        AND #$FC
        TAY 
        JSR 	FPTO16BIT

STORE_LINE_INC	STY 	LINE_INC

GET_LINE_TYPE	LDX 	LINE_TYPE_POINTER    	; GET LINE TYPE 0-7
				LDY 	LINE_DRAW_CONV_PTR,X 	; CONVERT LINE TYPE TO POINTER TYPE
				LDA 	LINE_DRAW_PTR_LO,Y 		; GET POINTER TO CORRECT LINE
				STA 	LINE_JP_PTR +1    		; STORE AT JUMP TABLE ADDRESS
				LDA 	LINE_DRAW_PTR_HI,Y		; GET POINTER TO CORRECT LINE
				STA 	LINE_JP_PTR +2    		; STORE AT JUMP TABLE ADDRESS
				LDA 	POINT_CLASSIFY_EN
				BEQ 	END_ONSCREEN
				LDA 	PERS_HOR_EDGE,Y			; Y is line type
				STA 	PERS_HOR_ab6C
				LDA 	PERS_VER_EDGE,Y			; y is line type
				STA 	PERS_VER_ab6D

END_ONSCREEN   	LDA 	POINT_CLASSIFY_ST
				BNE 	ST_OFF_SCRN				; point off screen
					JMP		LINE_DRW_JP

ST_OFF_SCRN LDA V_PERS_FP_HI_ST
        ASL 
        ASL 
        AND #$04
        ORA POINT_CLASSIFY_ST
        STA ab06
        LDA H_PERS_FP_HI_ST
        ASL 
        ASL 
        ASL 
        AND #$08
        ORA ab06
        TAX 
        TYA 
        ORA fBBE8,X
        LSR 
        TAX 
        LDA fBBF8,X
        BNE b9C56
			RTS 

b9C56   STA POINT_CLASSIFY_ST
        LDA POINT_CLASSIFY_EN
        BMI b9C7C					; end is behind so needs clipped?
			LDA V_PERS_FP_HI_EN
			ASL 
			ASL 
			AND #$04
			ORA POINT_CLASSIFY_EN
			STA ab06
			LDA H_PERS_FP_HI_EN
			ASL 
			ASL 
			ASL 
			AND #$08
			ORA ab06
			TAX 
			TYA 
			ORA fBBE8,X
			LSR 
			TAX 
			LDA fBC18,X
			BNE b9C7C
				RTS 

; IF BOTH POINTS ARE OFFSCREEN THEN GETS TO HERE
; ONLY DOES THIS CODE WHEN BOTH POINT ARE OFF SCREEN AND ONE OF THEM NEEDS TO BE CLIPPED ONSCREEN?

b9C7C   LDA 	POINT_CLASSIFY_ST ; CHECK TOP?
        AND 	#$01 ; off this edge
        BEQ 	b9CC1 ; no
			LDX 	#ab92_VAL ; ab92 ; yes
			LDA 	#ab93_VAL ; ab93
			SEC 
			SBC 	#FOCUS ; ab21
			STX 	ab08
			STA 	ab09
			LDX 	H_PERS_FP_LO_ST
			LDA 	H_PERS_FP_HI_ST
			EOR 	#FP_SIGN			; swap sign
			TAY 
			JSR 	FP_ADD			; 5E-5F + 92-93 -> 68-69 (due to sign swap its actually fp minus?)
			LDX 	ab68
			LDY 	ab69
			JSR 	FPMUL			; 92-93 * 68-69 -> 60-61
			LDX 	V_PERS_FP_LO_ST
			LDY 	V_PERS_FP_HI_ST
			JSR 	FP_ADD			; 68-69 + 60-61 -> 
			TYA 
			CLC 
			ADC 	#FOCUS ; ab21
			BVS 	b9CC1
				TAY 
				JSR 	FPTO8BIT
				BCS 	b9CC1
				CLC 
				ADC 	#SCR_VER_MID
				CMP 	#CLIP_TEST_BOTTOM 	; clip test? - if minus?
				BCS 	b9CC1
				STA 	LINE_START_VER
				LDA 	#CLIP_RIGHT 		; clip right ?
				STA 	LINE_START_HOR 		; clip right ?
				JMP 	LINE_DRW_JP

b9CC1   LDA 	POINT_CLASSIFY_ST
        AND 	#$02 ; off this edge
        BEQ 	b9D06 ; no
			LDX 	#ab96_VAL ; ab96 ; yes
			LDA 	#ab97_VAL ; ab97
			SEC 
			SBC 	#FOCUS ; ab21
			STX 	ab08
			STA 	ab09
			LDX 	V_PERS_FP_LO_ST
			LDA 	V_PERS_FP_HI_ST
			EOR 	#FP_SIGN				; sign swap?
			TAY 
			JSR 	FP_ADD				; 60-61 + 96-97 -> 68-69 (due to sign swap actually fp minus?)
			LDX 	ab68
			LDY 	ab69
			JSR 	FPDIV				; 96-97 / 68-69 -> 5E-5F
			LDX 	H_PERS_FP_LO_ST
			LDY 	H_PERS_FP_HI_ST
			JSR 	FP_ADD				; 5E-5F + 96-97 ->
			TYA 
			CLC 
			ADC 	#FOCUS ; ab21
			BVS 	b9D06
				TAY 
				JSR 	FPTO8BIT
				BCS 	b9D06
				CLC 
				ADC 	#SCR_HOR_MID
				CMP 	#CLIP_TEST_RIGHT 		; clip test - if minus?
				BCS 	b9D06
				STA 	LINE_START_HOR
				LDA 	#CLIP_BOTTOM 			; clip bottom
				STA 	LINE_START_VER 			; clip bottom
				JMP 	LINE_DRW_JP

b9D06   LDA 	POINT_CLASSIFY_ST ; LINE DRAW
        AND 	#$04 ; off this edge
        BEQ 	b9D4B ; no
			LDX 	#ab90_VAL ; ab90 ; yes
			LDA 	#ab91_VAL ; ab91
			SEC 
			SBC 	#FOCUS ; ab21
			STX 	ab08
			STA 	ab09
			LDX 	H_PERS_FP_LO_ST
			LDA 	H_PERS_FP_HI_ST
			EOR 	#FP_SIGN				; swap sign?
			TAY 
			JSR 	FP_ADD				; 90-91 + 5E+5F -> 68-69 (its actually fp minus due to sign swap?)
			LDX 	ab68
			LDY 	ab69
			JSR 	FPMUL				; 68-69 * 90-91 -> 60-61
			LDX 	V_PERS_FP_LO_ST
			LDY 	V_PERS_FP_HI_ST
			JSR 	FP_ADD				; 60-61 + 90-91 -> 
			TYA 
			CLC 
			ADC 	#FOCUS ; ab21
			BVS 	b9D4B
				TAY 
				JSR 	FPTO8BIT
				BCS 	b9D4B
				CLC 
				ADC 	#SCR_VER_MID
				CMP 	#CLIP_TEST_BOTTOM ; clip test - if minus?
				BCS 	b9D4B
				STA 	LINE_START_VER
				LDA 	#CLIP_TEST_TOP 	; clip off top
				STA 	LINE_START_HOR 	; clip off top 
				JMP 	LINE_DRW_JP

b9D4B   LDA 	POINT_CLASSIFY_ST ; LINE DRAW
        AND 	#$08 ; off this edge
		BEQ 	b9D98 ; no
			LDX 	#ab94_VAL ; ab94 ; yes
			LDA 	#ab95_VAL ; ab95
			SEC 
			SBC 	#FOCUS ; ab21
			STX 	ab08
			STA 	ab09
			LDX 	V_PERS_FP_LO_ST
			LDA 	V_PERS_FP_HI_ST
			EOR 	#FP_SIGN				; sign swap
			TAY 
			JSR 	FP_ADD				; 94-95 + 60-61 -> 68-69 (due to sign swap actually fp minus?)
			LDX 	ab68
			LDY 	ab69
			JSR 	FPDIV				; 94-95 / 68-69 -> 5E-5F
			LDX 	H_PERS_FP_LO_ST
			LDY 	H_PERS_FP_HI_ST
			JSR 	FP_ADD				; 94-95 + 5E-5F ->
			TYA 
			CLC 
			ADC 	#FOCUS ; ab21
			BVS 	b9D98
				TAY 
				JSR 	FPTO8BIT
				BCS 	b9D98
				CLC 
				ADC 	#SCR_HOR_MID
				CMP 	#CLIP_TEST_RIGHT 	; clip test - if minus?
				BCS 	b9D98
				STA 	LINE_START_HOR
				LDA 	#CLIP_TEST_LEFT 	; clip off left
				STA 	LINE_START_VER 		; clip off left

LINE_DRW_JP	LDX 	LINE_START_HOR
			LDY 	LINE_START_VER
LINE_JP_PTR	JMP 	$ABCD 					; LINE_DRAW_01
b9D98   	RTS 


FORWARD_BACK	PHA 			; push sign/direction
				LDX 	SPEED_LO
				EOR 	SPEED_HI 	; set direction
				STX 	ab08
				STA 	ab09
				LDX 	COS_LO
				LDY 	COS_HI
				JSR 	FPMUL
				JSR 	FPTO16BIT
				TYA 
				CLC 
				ADC 	CURR_Z_LSB
				STA 	CURR_Z_LSB
				TXA 
				ADC 	CURR_Z_MSB
				STA 	CURR_Z_MSB
				TXA 
				
; Constant-time version, but destroys the carry - wont work?
;            ASL A           ; sign bit into carry; use CPX etc. if using X reg;	or		 cpx #$80             // copy the sign bit into c
;            LDA #$00
;            ADC #$FF        ; C set:   A = $FF + C = $00 /  C clear: A = $FF + C = $FF
;            EOR #$FF        ; Flip all bits and they all now match C
				
				BPL 	_Z_PLUS 		; if +
					LDA 	#$FF		; set to 255 for -
					BMI 	_Z_NEG_CONT	; jmp
_Z_PLUS   		LDA 	#$00			; set to 0 for +
_Z_NEG_CONT 	ADC 	CURR_Z_HSB		; either add or sub depending on + or -
				STA 	CURR_Z_HSB

				PLA 			; pop sign
				LDX 	SPEED_LO
				EOR 	SPEED_HI	; set direction
				STX 	ab08
				STA 	ab09
				LDX 	SIN_LO
				LDY 	SIN_HI
				JSR 	FPMUL
				JSR 	FPTO16BIT
				TYA 
				CLC 
				ADC 	CURR_X_LSB
				STA 	CURR_X_LSB
				TXA 
				ADC 	CURR_X_MSB
				STA 	CURR_X_MSB
				TXA 
				BPL 	_X_PLUS			; positive
					LDA 	#$FF		; negative so set to 255
					BMI 	_X_NEG_CONT ; jump to calc
_X_PLUS	   		LDA 	#$00			; positive so set to 0
_X_NEG_CONT    	ADC 	CURR_X_HSB		; calc
				STA 	CURR_X_HSB
				RTS 

SIN_COS	LDX 	ROT_LO
        LDY 	ROT_HI
        JSR 	SIN_FP
        STX 	SIN_LO ; sin_lo
        STY 	SIN_HI ; sin_hi
        LDX 	ROT_LO
        LDY 	ROT_HI
        JSR 	COS_FP
        STX 	COS_LO ; cos_lo
        STY 	COS_HI ; cos_hi
        RTS 

PROCESS_POINT_TO_FP	LDY 	OBJECT_POINTER_POS 	; get point then *16 then conveert to 24bit fp
					INY 
					LDA 	(OBJECT_POINTER),Y
					STA 	OBJ_PNT_X_LSB
					INY 
					LDA 	(OBJECT_POINTER),Y
					STA 	OBJ_PNT_Y_LSB
					INY 
					LDA 	(OBJECT_POINTER),Y
					STA 	OBJ_PNT_Z_LSB
					STY 	OBJECT_POINTER_POS

					LDA 	#0				; MULTIPLY POINT *16 ?
					STA 	OBJ_PNT_X_MSB
					STA 	OBJ_PNT_Y_MSB
					STA 	OBJ_PNT_Z_MSB

					LDA 	OBJ_PNT_X_LSB
					EOR 	#$80 			; reverse the sign?
					ASL 
					ROL 	OBJ_PNT_X_MSB 	; *2
					ASL 
					ROL 	OBJ_PNT_X_MSB 	; *4
					ASL 
					ROL 	OBJ_PNT_X_MSB 	; *8
					ASL 
					ROL 	OBJ_PNT_X_MSB 	; *16
					STA 	OBJ_PNT_X_LSB

					CLC
					LDA 	DIFF_X_LSB
					ADC 	OBJ_PNT_X_LSB
					TAY
					LDA 	DIFF_X_MSB
					ADC 	OBJ_PNT_X_MSB
					TAX 
					LDA 	DIFF_X_HSB
					ADC 	#$00
					JSR 	BIT24TOFP
					STY 	X_POS_HI
					STA 	X_POS_LO

					LDA 	OBJ_PNT_Y_LSB
					EOR 	#$80
					ASL 
					ROL 	OBJ_PNT_Y_MSB
					ASL 
					ROL 	OBJ_PNT_Y_MSB
					ASL 
					ROL 	OBJ_PNT_Y_MSB
					ASL 
					ROL 	OBJ_PNT_Y_MSB
					STA 	OBJ_PNT_Y_LSB

					CLC 
					LDA 	DIFF_Y_LSB
					ADC 	OBJ_PNT_Y_LSB
					TAY
					LDA 	DIFF_Y_MSB
					ADC 	OBJ_PNT_Y_MSB
					TAX 
					LDA 	DIFF_Y_HSB
					ADC 	#$00
					JSR 	BIT24TOFP
					STY 	Y_POS_HI
					STA 	Y_POS_LO

					LDA 	OBJ_PNT_Z_LSB
					EOR 	#$80
					ASL 
					ROL 	OBJ_PNT_Z_MSB
					ASL 
					ROL 	OBJ_PNT_Z_MSB
					ASL 
					ROL 	OBJ_PNT_Z_MSB
					ASL 
					ROL 	OBJ_PNT_Z_MSB
					STA 	OBJ_PNT_Z_LSB

					CLC 
					LDA 	DIFF_Z_LSB
					ADC 	OBJ_PNT_Z_LSB
					TAY
					LDA 	DIFF_Z_MSB
					ADC 	OBJ_PNT_Z_MSB
					TAX 
					LDA 	DIFF_Z_HSB
					ADC 	#$00
					JSR 	BIT24TOFP
					STY 	Z_POS_HI
					STA 	Z_POS_LO

					RTS 

ROTATE_PERS LDA 	SIN_LO
			STA		FP_MULTIPLY_LO
			LDA 	SIN_HI
			LDX		X_POS_HI
			LDY		X_POS_LO
			JSR		FP_MULTIPLY			; X * SIN
			STy 	X_ROT_LO
			STA		X_ROT_HI

			LDA 	COS_LO
			STA		FP_MULTIPLY_LO
			LDA 	COS_HI
			LDX		Z_POS_HI
			LDY		Z_POS_LO
			JSR		FP_MULTIPLY			; Z * COS
			STy 	Z_ROT_LO
			STA		Z_ROT_HI

			LDX 	X_ROT_LO
			LDY 	X_ROT_HI
			JSR 	FP_ADD				; Z = (X * SIN) + (Z * COS)
			STX 	Z_ROTATION_LO		; Z rotation result?
			TYA 
			EOR 	#FP_SIGN				; swap sign?
			STA 	Z_ROTATION_HI		; Z rotation result?
			AND 	#$01				; keep fp sign
			LSR 						; shift sign
			ROR 						; rotate sign into top bit
			STA 	POINT_CLASSIFY_ST	; so -ve = $80 / +ve = $00 ? = behind point classification?

			LDA 	COS_LO
			STA		FP_MULTIPLY_LO
			LDA 	COS_HI
			LDX		X_POS_HI
			LDY		X_POS_LO
			JSR		FP_MULTIPLY			; X * COS
			STy 	X_ROT_LO
			STA		X_ROT_HI

			LDA 	SIN_LO
			STA		FP_MULTIPLY_LO
			LDA 	SIN_HI
			LDX		Z_POS_HI
			LDY		Z_POS_LO
			JSR		FP_MULTIPLY			; Z * SIN
			STy 	Z_ROT_LO

			EOR 	#FP_SIGN 				; -Z * SIN
			STA 	Z_ROT_HI

			LDX 	X_ROT_LO
			LDY 	X_ROT_HI
			JSR 	FP_ADD 				; X = (X * COS) + (-Z * SIN)
			STX 	X_ROTATION_LO		; X rotation result?
			TYA 
			STA 	X_ROTATION_HI		; X rotation result?

        LDY POINT_CLASSIFY_ST	; z classification? (see #1 above) 0 is infront - !0 is behind
        BNE bAA54				; behind?
        STA ab09

		LDA		Z_ROTATION_LO
		STA		FP_DIVIDE_LO
		LDX		ab09
		LDY		ab08
		LDA		Z_ROTATION_HI
		JSR		FP_DIVIDE		; Z_ROTATION LO-HI / 08-09 -> 5E-5F
		STX		H_PERS_FP_LO_ST			; hor pers pos
		STA		H_PERS_FP_HI_ST			; hor pers pos

        CLC 
        ADC #FOCUS ; ab21		; add focus to mantisa?
        BVS bAA50
			TAY 					; copy to mantisa?
			JSR FPTO8BIT			; convert X/Y back to 
			BCS bAA50
			ADC #SCR_HOR_MID		; add hor middle
			STA LINE_START_HOR
			CMP #CLIP_TEST_RIGHT 	; clip test - if minus?
			BCC bAA54 				; off right
bAA50   	LDA 	#PNT_OFF_HOR		; PNT_OFF_RIGHT 		; right clip
			STA 	POINT_CLASSIFY_ST
bAA54   LDX Y_POS_HI
        LDA Y_POS_LO
        EOR #FP_SIGN				; reverses the sign?
        TAY 
        STX ab08
        STY ab09
;        JMP jA8E9

jA8E9   STX 	Y_ROTATION_LO
        TYA 
        CLC 
        ADC #$04
        BVS bA8F2
			TAY 
bA8F2   STY 	Y_ROTATION_HI
        STY ab09
        LDA 	POINT_CLASSIFY_ST
        BMI 	bA933
		
			LDA		Z_ROTATION_LO
			STA		FP_DIVIDE_LO
			LDX		ab09
			LDY		ab08
			LDA		Z_ROTATION_HI
			JSR		FP_DIVIDE		; Z_ROTATION LO-HI / 08-09 -> 60-61
			STX		V_PERS_FP_LO_ST			; ver pers pos
			STA		V_PERS_FP_HI_ST			; ver pers pos

			CLC 
			ADC 	#FOCUS ; ab21
			BVS 	bA92D
				TAY 
				JSR 	FPTO8BIT
				BCS 	bA92D
				ADC 	#SCR_VER_MID
				STA 	LINE_START_VER
				CMP 	#CLIP_TEST_BOTTOM ; clip test - if minus? 
				BCC 	bA933
bA92D   			LDA 	POINT_CLASSIFY_ST
					ORA 	#PNT_OFF_VER
					STA 	POINT_CLASSIFY_ST
bA933   LDY 	POINT_LINE_COUNT						; point position?
        LDA 	POINT_CLASSIFY_ST
        STA 	POINT_CLASSIFICATION,Y
        BMI 	bA95A					; behind
			LDA 	H_PERS_FP_LO_ST
			STA 	H_PERS_FP_LO,Y	; pers point?
			LDA 	H_PERS_FP_HI_ST
			STA 	H_PERS_FP_HI,Y	; pers point?
			LDA 	V_PERS_FP_LO_ST
			STA 	V_PERS_FP_LO,Y	; pers point?
			LDA 	V_PERS_FP_HI_ST
			STA 	V_PERS_FP_HI,Y	; pers point?
			LDA 	LINE_START_HOR 			; get perspective ver
			STA 	PERS_HOR_TAB,Y 				; put perspective ver
			LDA 	LINE_START_VER 			; get perspective hor
			STA 	PERS_VER_TAB,Y 				; put perspective hor
bA95A   LDA 	X_ROTATION_LO
        STA 	X_ROT_TAB_LO,Y 	; X rotation result x pos lo
        LDA 	X_ROTATION_HI
        STA 	X_ROT_TAB_HI,Y 	; X rotation result x pos hi
        LDA 	Y_ROTATION_LO
        STA 	Y_ROT_TAB_LO,Y	; rotation result y pos lo
        LDA 	Y_ROTATION_HI
        STA 	Y_ROT_TAB_HI,Y	; rotation result y pos hi
        LDA 	Z_ROTATION_LO
        STA 	Z_ROT_TAB_LO,Y	; rotation result z pos lo
        LDA 	Z_ROTATION_HI
        STA 	Z_ROT_TAB_HI,Y	; rotation result z pos hi
        RTS 

LINE_DRAW_0_LOOP  	INX 
					LDA 	LINE_FRACTION_ab08
					ADC 	LINE_INC
					STA 	LINE_FRACTION_ab08
					BCC 	LINE_DRAW_0_CONT
						INY
						BMI 	LINE_DRAW_0_EXIT
LINE_DRAW_0				LDA 	VER_POS_LO,Y ; LINE-DRAW-START
						STA 	SCREEN_POS_LO
LINE_DRAW_0_SCN			LDA 	VER_POS_SCN0_HI,Y
						STA 	SCREEN_POS_HI
						STY 	ab06
LINE_DRAW_0_CONT	LDY 	HOR_SCR_POS,X
					LDA 	(SCREEN_POS_PTR),Y
LINE_DRAW_0_TYPE	ORA 	ORA_PIXEL_POS,X
					STA 	(SCREEN_POS_PTR),Y
					LDY 	ab06
					CPX 	PERS_HOR_ab6C
					BNE 	LINE_DRAW_0_LOOP
LINE_DRAW_0_EXIT   RTS 

LINE_DRAW_1_LOOP   INY  ; LINE-DRAW
					LDA 	LINE_FRACTION_ab08
					ADC 	LINE_INC
					STA 	LINE_FRACTION_ab08
					BCC 	LINE_DRAW_1
						INX 
						BMI 	LINE_DRAW_1_EXIT
LINE_DRAW_1			LDA 	VER_POS_LO,Y ; LINE-DRAW-START
					STA 	SCREEN_POS_LO
LINE_DRAW_1_SCN		LDA 	VER_POS_SCN0_HI,Y
					STA 	SCREEN_POS_HI
					STY 	ab06
					LDY 	HOR_SCR_POS,X
					LDA 	(SCREEN_POS_PTR),Y
LINE_DRAW_1_TYPE	ORA 	ORA_PIXEL_POS,X
					STA 	(SCREEN_POS_PTR),Y
					LDY 	ab06
					CPY 	PERS_VER_ab6D
					BNE 	LINE_DRAW_1_LOOP ; GOTO LINE-DRAW
LINE_DRAW_1_EXIT   	RTS 

LINE_DRAW_2_LOOP   	INY  ; LINE-DRAW
					LDA 	LINE_FRACTION_ab08
					ADC 	LINE_INC
					STA 	LINE_FRACTION_ab08
					BCC 	LINE_DRAW_2
						DEX 
						BMI 	LINE_DRAW_2_EXIT
LINE_DRAW_2			LDA 	VER_POS_LO,Y ; LINE-DRAW-START
					STA 	SCREEN_POS_LO
LINE_DRAW_2_SCN		LDA 	VER_POS_SCN0_HI,Y
					STA 	SCREEN_POS_HI
					STY 	ab06
					LDY 	HOR_SCR_POS,X
					LDA 	(SCREEN_POS_PTR),Y
LINE_DRAW_2_TYPE	ORA 	ORA_PIXEL_POS,X
					STA 	(SCREEN_POS_PTR),Y
					LDY 	ab06
					CPY 	PERS_VER_ab6D
					BNE 	LINE_DRAW_2_LOOP ; GOTO LINE-DRAW
LINE_DRAW_2_EXIT   	RTS 

LINE_DRAW_3_LOOP  	DEX ; LINE-DRAW
					LDA 	LINE_FRACTION_ab08
					SBC 	LINE_INC
					STA 	LINE_FRACTION_ab08
					BCS 	LINE_DRAW_3_CONT
						INY 
						BMI 	LINE_DRAW_3_EXIT
LINE_DRAW_3				LDA 	VER_POS_LO,Y ; LINE-DRAW-START
						STA 	SCREEN_POS_LO
LINE_DRAW_3_SCN			LDA 	VER_POS_SCN0_HI,Y
						STA 	SCREEN_POS_HI
						STY 	ab06
LINE_DRAW_3_CONT	LDY 	HOR_SCR_POS,X
					LDA 	(SCREEN_POS_PTR),Y
LINE_DRAW_3_TYPE	ORA 	ORA_PIXEL_POS,X
					STA 	(SCREEN_POS_PTR),Y
					LDY 	ab06
					CPX 	PERS_HOR_ab6C
					BNE 	LINE_DRAW_3_LOOP ; GOTO LINE-DRAW
LINE_DRAW_3_EXIT   	RTS 

LINE_DRAW_4_LOOP   	DEX  ; LINE-DRAW
					LDA 	LINE_FRACTION_ab08
					SBC 	LINE_INC
					STA 	LINE_FRACTION_ab08
					BCS 	LINE_DRAW_4_CONT
						DEY 
						BMI 	LINE_DRAW_4_EXIT
LINE_DRAW_4				LDA 	VER_POS_LO,Y ; LINE-DRAW-START
						STA 	SCREEN_POS_LO
LINE_DRAW_4_SCN			LDA 	VER_POS_SCN0_HI,Y
						STA 	SCREEN_POS_HI
						STY 	ab06
LINE_DRAW_4_CONT	LDY 	HOR_SCR_POS,X
					LDA 	(SCREEN_POS_PTR),Y
LINE_DRAW_4_TYPE  	ORA 	ORA_PIXEL_POS,X
					STA 	(SCREEN_POS_PTR),Y
					LDY 	ab06
					CPX 	PERS_HOR_ab6C
					BNE 	LINE_DRAW_4_LOOP ; GOTO LINE-DRAW
LINE_DRAW_4_EXIT   	RTS 

LINE_DRAW_5_LOOP   	DEY  ; LINE-DRAW
					LDA 	LINE_FRACTION_ab08
					ADC 	LINE_INC
					STA 	LINE_FRACTION_ab08
					BCC 	LINE_DRAW_5
						DEX 
						BMI 	LINE_DRAW_5_EXIT
LINE_DRAW_5			LDA 	VER_POS_LO,Y ; LINE-DRAW-START
					STA 	SCREEN_POS_LO
LINE_DRAW_5_SCN		LDA 	VER_POS_SCN0_HI,Y
					STA 	SCREEN_POS_HI
					STY 	ab06
					LDY 	HOR_SCR_POS,X
					LDA 	(SCREEN_POS_PTR),Y
LINE_DRAW_5_TYPE  	ORA 	ORA_PIXEL_POS,X
					STA 	(SCREEN_POS_PTR),Y
					LDY 	ab06
					CPY 	PERS_VER_ab6D
					BNE 	LINE_DRAW_5_LOOP ; GOTO LINE-DRAW
LINE_DRAW_5_EXIT  	RTS

LINE_DRAW_6_LOOP   	DEY  ; LINE-DRAW
					LDA 	LINE_FRACTION_ab08
					SBC 	LINE_INC
					STA 	LINE_FRACTION_ab08
					BCS 	LINE_DRAW_6
						INX             ; NEXT VER
						BMI 	LINE_DRAW_6_EXIT       ; EXIT
LINE_DRAW_6			LDA 	VER_POS_LO,Y ; LINE-DRAW-START
					STA 	SCREEN_POS_LO
LINE_DRAW_6_SCN		LDA 	VER_POS_SCN0_HI,Y
					STA 	SCREEN_POS_HI
					STY 	ab06
					LDY 	HOR_SCR_POS,X
					LDA 	(SCREEN_POS_PTR),Y
LINE_DRAW_6_TYPE	ORA 	ORA_PIXEL_POS,X
					STA 	(SCREEN_POS_PTR),Y
					LDY 	ab06
					CPY 	PERS_VER_ab6D
					BNE 	LINE_DRAW_6_LOOP ; GOTO LINE-DRAW 
LINE_DRAW_6_EXIT	RTS 

LINE_DRAW_7_LOOP   	INX	; LINE-DRAW
					LDA		LINE_FRACTION_ab08
					ADC		LINE_INC
					STA		LINE_FRACTION_ab08
					BCC		LINE_DRAW_7_CONT
						DEY 
						BMI		LINE_DRAW_7_EXIT
LINE_DRAW_7				LDA		VER_POS_LO,Y ; LINE-DRAW-START
						STA		SCREEN_POS_LO
LINE_DRAW_7_SCN			LDA 	VER_POS_SCN0_HI,Y
						STA 	SCREEN_POS_HI
						STY 	ab06
LINE_DRAW_7_CONT	LDY 	HOR_SCR_POS,X
					LDA 	(SCREEN_POS_PTR),Y
LINE_DRAW_7_TYPE	ORA 	ORA_PIXEL_POS,X
					STA 	(SCREEN_POS_PTR),Y
					LDY 	ab06
					CPX 	PERS_HOR_ab6C
					BNE 	LINE_DRAW_7_LOOP ; GOTO LINE DRAW
LINE_DRAW_7_EXIT   	RTS 

COLOUR_SETUP_WHITE	LDA 	#>AND_PIXEL_POS
					LDX 	#$3D				; AND
					BNE 	COLOUR_SETUP 		; JUMP
COLOUR_SETUP_BLACK	LDA 	#>ORA_PIXEL_POS
					LDX 	#$1D				; ORA
COLOUR_SETUP		STA 	LINE_DRAW_0_TYPE +2
					STA 	LINE_DRAW_1_TYPE +2
					STA 	LINE_DRAW_2_TYPE +2
					STA 	LINE_DRAW_3_TYPE +2
					STA 	LINE_DRAW_4_TYPE +2
					STA 	LINE_DRAW_5_TYPE +2
					STA 	LINE_DRAW_6_TYPE +2
					STA 	LINE_DRAW_7_TYPE +2
					STA 	LINE_DRAW_8_TYPE +2
					STX 	LINE_DRAW_0_TYPE
					STX 	LINE_DRAW_1_TYPE
					STX 	LINE_DRAW_2_TYPE
					STX 	LINE_DRAW_3_TYPE
					STX 	LINE_DRAW_4_TYPE
					STX 	LINE_DRAW_5_TYPE
					STX 	LINE_DRAW_6_TYPE
					STX 	LINE_DRAW_7_TYPE
					STX 	LINE_DRAW_8_TYPE
					RTS

;name    .macro first, b=2, , last
;        lda #\first     ;first parameter
;        lda #\b         ;second parameter
;        lda #\3         ;third parameter
;        lda #\last      ;fourth parameter
;        .endmacro

;        #name 1, , 3, 4 ;call macro

CLR_SCN	.macro
			STA \1+(\2*320)+0,Y
			STA \1+(\2*320)+1,Y
			STA \1+(\2*320)+2,Y
			STA \1+(\2*320)+3,Y
			STA \1+(\2*320)+4,Y
			STA \1+(\2*320)+5,Y
			STA \1+(\2*320)+6,Y
			STA \1+(\2*320)+7,Y
        .endm

DRAW_SCREEN	LDA		#$E0
WAIT_RASTER	CMP		$D012
			BNE 	WAIT_RASTER

			INC		SCREEN_FLIP		; INCREMENT SCREEN FLIP
			LDA		SCREEN_FLIP		; GET SCREEN FLIP
			LSR 					; SHIFT BIT0 INTO CARRY
			BCS		SCRN_2			; CARRY SET ?

			LDY		#SCREEN_0		; SCREEN 1 OFFSET
			lda		#>VER_POS_SCN0_HI
			LDX		#$78
			
			BNE		SCNCLR			; JUMP

SCRN_2  	LDY		#SCREEN_1		; SCREEN 2 OFFSET
			lda		#>VER_POS_SCN1_HI
			LDX		#$70

SCNCLR		sta		LINE_DRAW_0_SCN +2
			sta		LINE_DRAW_1_SCN +2
			sta		LINE_DRAW_2_SCN +2
			sta		LINE_DRAW_3_SCN +2
			sta		LINE_DRAW_4_SCN +2
			sta		LINE_DRAW_5_SCN +2
			sta		LINE_DRAW_6_SCN +2
			sta		LINE_DRAW_7_SCN +2
			sta		PLOT_POINT_SCN +2

			STX		VIC_SCREEN_BANK +1
			LDX 	#32
			CPY 	#SCREEN_1
			BNE	CLSSCN0_LP
				JMP CLSSCN1_LP

CLSSCN0_LP	LDA 	#$A5
			#CLR_SCN SCREEN0, 0
			#CLR_SCN SCREEN0, 1
			#CLR_SCN SCREEN0, 2
			#CLR_SCN SCREEN0, 3
			#CLR_SCN SCREEN0, 4
			#CLR_SCN SCREEN0, 5
			#CLR_SCN SCREEN0, 6
			#CLR_SCN SCREEN0, 7
			#CLR_SCN SCREEN0, 8
			#CLR_SCN SCREEN0, 9
			#CLR_SCN SCREEN0, 10
			#CLR_SCN SCREEN0, 11
			#CLR_SCN SCREEN0, 12
			#CLR_SCN SCREEN0, 13
			#CLR_SCN SCREEN0, 14
			#CLR_SCN SCREEN0, 15
			DEX
			BEQ 	CLSSCN0_END
				TYA
				CLC
				ADC	#8
				TAY
				JMP		CLSSCN0_LP
CLSSCN0_END	RTS

CLSSCN1_LP
			LDA 	#$A5
			#CLR_SCN SCREEN1, 0
			#CLR_SCN SCREEN1, 1
			#CLR_SCN SCREEN1, 2
			#CLR_SCN SCREEN1, 3
			#CLR_SCN SCREEN1, 4
			#CLR_SCN SCREEN1, 5
			#CLR_SCN SCREEN1, 6
			#CLR_SCN SCREEN1, 7
			#CLR_SCN SCREEN1, 8
			#CLR_SCN SCREEN1, 9
			#CLR_SCN SCREEN1, 10
			#CLR_SCN SCREEN1, 11
			#CLR_SCN SCREEN1, 12
			#CLR_SCN SCREEN1, 13
			#CLR_SCN SCREEN1, 14
			#CLR_SCN SCREEN1, 15
			DEX
			BEQ 	CLSSCN1_END
				TYA
				CLC
				ADC  #8
				TAY
				JMP 	CLSSCN1_LP
CLSSCN1_END	RTS

READ_JOYSTICK_KEYBOARD
        LDA 	$DC00    ;CIA1: Data Port Register A into A and X
MVMENT	LSR
		BCS 	MVE_DWN
			PHA
			LDA 	#$01 ; FORWARD
			JSR 	FORWARD_BACK
			PLA
MVE_DWN LSR
		BCS 	MVE_LFT
			PHA
			LDA 	#$00	; BACKWARD
			JSR 	FORWARD_BACK
			PLA
MVE_LFT LSR
		BCS 	MVE_RGT
			TAY
			LDA 	ROT_LO	; LEFT
			CLC 
			ADC 	ROT_SPD
			STA 	ROT_LO
			LDA 	ROT_HI
			ADC 	#$00
			AND 	#$03
			STA 	ROT_HI
			TYA
MVE_RGT LSR
		BCS 	MVE_FRE
			TAY
			LDA 	ROT_LO	; RIGHT
			SEC 
			SBC 	ROT_SPD
			STA 	ROT_LO
			LDA 	ROT_HI
			SBC 	#$00
			AND 	#$03
			STA 	ROT_HI
			TYA
MVE_FRE LSR
		BCS 	MVE_EXT
			lda 	OBJECTS_TO_DRAW+1
			clc
			adc 	#1
			and 	#63
			sta 	OBJECTS_TO_DRAW+1
MVE_EXT	RTS

HEXCHAR		LDA		HEX0,Y
HEX_NUMBER0	STA		$ABCD,X
			LDA		HEX1,Y
HEX_NUMBER1	STA		$ABCD,X
			LDA		HEX2,Y
HEX_NUMBER2	STA		$ABCD,X
			LDA		HEX3,Y
HEX_NUMBER3	STA		$ABCD,X
			LDA		HEX4,Y
HEX_NUMBER4	STA		$ABCD,X
			RTS

HEX16		STY		REGY	; Y = YPOS / A = HI / X = LO
			STX		REGX		
			LDX		#0
			JSR		HEX8
			LDA		REGX
			LDY		REGY
			LDX		#16
			JSR		HEX8
			RTS

HEX8		CLC		; A = NUM / Y = YPOS / X = XPOS

			STA		REGA
			LDA		VER_POS_LO+0,Y
			STA		HEX_NUMBER0+1
			LDA 	VER_POS_SCN0_HI+0,Y
			STA		HEX_NUMBER0+2

			LDA		VER_POS_LO+1,Y
			STA		HEX_NUMBER1+1
			LDA 	VER_POS_SCN0_HI+1,Y
			STA		HEX_NUMBER1+2

			LDA		VER_POS_LO+2,Y
			STA		HEX_NUMBER2+1			
			LDA 	VER_POS_SCN0_HI+2,Y
			STA		HEX_NUMBER2+2

			LDA		VER_POS_LO+3,Y
			STA		HEX_NUMBER3+1
			
			LDA 	VER_POS_SCN0_HI+3,Y
			STA		HEX_NUMBER3+2

			LDA		VER_POS_LO+4,Y
			STA		HEX_NUMBER4+1
			
			LDA 	VER_POS_SCN0_HI+4,Y
			STA		HEX_NUMBER4+2

			LDA		REGA
			LSR
			LSR
			LSR
			LSR
			TAY
			JSR		HEXCHAR

			TXA
			CLC
			ADC 	#8
			TAX

			LDA		REGA
			AND		#15
			TAY
			JSR		HEXCHAR

			RTS

X_ROT_TAB_LO = $0100 ; UNKNOWN_POINT_TAB_6
X_ROT_TAB_HI = $0140

Y_ROT_TAB_LO = $0180
Y_ROT_TAB_HI = $02C0

Z_ROT_TAB_LO = $0340 
Z_ROT_TAB_HI = $0380

H_PERS_FP_LO = $0600
H_PERS_FP_HI = $03C0

V_PERS_FP_LO = $0700
V_PERS_FP_HI = $0640

PERS_HOR_TAB = $0680
PERS_VER_TAB = $06C0

POINT_CLASSIFICATION = $0740 ; 00 = point is onscreen - 01 = point needs off left/right - 02 = point is off top/bottom - 03 = point is off left/right + top/bottom - 80 / minus = point is behind

OBJ_X_LSB = $0780
OBJ_Y_LSB = $07C0
OBJ_Z_LSB = $0300

HEX0	.BYTE %10000000,%10100010,%10000000,%10000000,%10001000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000010,%10000000,%10000000 
HEX1	.BYTE %10001000,%10000010,%10101000,%10101000,%10001000,%10001010,%10001010,%10101000,%10001000,%10001000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010 
HEX2	.BYTE %10001000,%10100010,%10000000,%10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10000000,%10000010,%10001010,%10001000,%10000000,%10000000
HEX3	.BYTE %10001000,%10100010,%10001010,%10101000,%10101000,%10101000,%10001000,%10101000,%10001000,%10101000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010
HEX4	.BYTE %10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10101000,%10000000,%10000000,%10001000,%10000000,%10100000,%10000010,%10000000,%10001010

OBJ_X_MSB 
.BYTE 00,20,40,60,80,100,120,140,160,180,200,220
.FILL 52,0
 
OBJ_Y_MSB  
.FILL 64,0

OBJ_Z_MSB   
.BYTE 00,20,40,60,80,100,120,140,160,180,200,220
.FILL 52,0

OBJ_X_HSB   
.FILL 64,0

OBJ_Y_HSB
.FILL 64,00

OBJ_Z_HSB
.FILL 64,00

OBJECTS_TO_DRAW   ; objects to draw
		.BYTE 00
		.BYTE 01 ; object being drawn
		.BYTE 02,03,04,05,06,07
        .BYTE 08,09,10,11,12,13,14,15
        .BYTE 00,00,00,00,00,00,00,00
        .BYTE 00,00,00,00,00,00,00,00
        .BYTE 00,00,00,00,00,00,00,00
        .BYTE 00,00,00,00,00,00,00,00
        .BYTE 00,00,00,00,00,00,00,00
        .BYTE 00,00,00,00,00,00,00,00

OBJ53
	.byte $11,$FD,$08,$00
  .BYTE $03,$04,$00,$FD,$04,$00,$03,$08
  .BYTE $00,$FF,$07,$00,$01,$07,$00,$02
  .BYTE $09,$00,$02,$0A,$00,$01,$0B,$00
  .BYTE $FF,$0B,$00,$FE,$0A,$00,$FE,$09
  .BYTE $00,$FF,$0A,$00,$FF,$09,$00,$01
  .BYTE $0A,$00,$01,$09,$00,$FF,$08,$00
  .BYTE $01,$08,$00,$8C,$00,$01,$02,$03
  .BYTE $04,$05,$05,$06,$06,$07,$07,$08
  .BYTE $08,$09,$09,$0A,$0A,$0B,$0B,$04
  .BYTE $0C,$0D,$0E,$0F,$10,$11
OBJ5
  .byte $0C,$FE
  .BYTE $00,$E0,$02,$00,$E0,$06,$00,$10
  .BYTE $FA,$00,$10,$FC,$04,$E8,$04,$04
  .BYTE $E8,$06,$06,$16,$FA,$06,$16,$00
  .BYTE $04,$E8,$00,$0A,$1A,$00,$06,$16
  .BYTE $10,$00,$20,$F0,$00,$20,$15,$01
  .BYTE $12,$23,$30,$45,$56,$67,$74,$15
  .BYTE $04,$26,$37,$89,$9A,$A8,$1B,$B2
  .BYTE $0C,$C3,$6B,$7C,$BC,$0B,$FA,$00
  .BYTE $FF,$FA,$00,$02,$FD
OBJ27
  .byte $00,$03,$06
  .BYTE $00,$02,$06,$00,$FF,$FD,$00,$FE
  .BYTE $FA,$03,$FF,$FA,$03,$02,$FD,$03
  .BYTE $03,$06,$03,$02,$06,$03,$FF,$FD
  .BYTE $03,$FE,$11,$01,$12,$23,$34,$45
  .BYTE $50,$67,$78,$89,$9A,$AB,$06,$17
  .BYTE $28,$39,$4A,$5B,$B6
OBJ32
	.byte $0B,$06,$07
  .BYTE $00,$06,$0C,$00,$06,$0F,$00,$FA
  .BYTE $0F,$00,$FA,$07,$00,$04,$0B,$00
  .BYTE $02,$0D,$00,$00,$09,$00,$FE,$0B
  .BYTE $00,$FC,$0A,$00,$FB,$07,$00,$FA
  .BYTE $04,$00,$0A,$02,$23,$34,$40,$15
  .BYTE $56,$67,$78,$89,$9A,$AB
OBJ43
	.byte $12,$FA
  .BYTE $10,$00,$FC,$0E,$00,$FE,$0C,$00
  .BYTE $01,$09,$00,$05,$10,$00,$04,$0E
  .BYTE $00,$03,$0C,$00,$08,$09,$00,$07
  .BYTE $09,$00,$04,$09,$00,$07,$00,$00
  .BYTE $05,$03,$00,$03,$06,$00,$FA,$00
  .BYTE $00,$FC,$02,$00,$FF,$06,$00,$F8
  .BYTE $07,$00,$F9,$07,$00,$FD,$08,$00
  .BYTE $93,$00,$03,$04,$03,$07,$03,$0A
  .BYTE $03,$0E,$03,$11,$03,$0D,$0E,$10
  .BYTE $11,$01,$05,$05,$08,$08,$0B,$0B
  .BYTE $0E,$0E,$11,$11,$01,$02,$06,$06
  .BYTE $09,$09,$0C,$0C,$0F,$0F,$12,$12
  .BYTE $02
OBJ28
  .byte $09,$FE,$00,$FE,$00,$00,$02
  .BYTE $02,$00,$FE,$00,$01,$00,$00,$03
  .BYTE $00,$00,$07,$00,$FE,$06,$FF,$FE
  .BYTE $08,$01,$02,$08,$01,$02,$06,$FF
  .BYTE $09,$04,$14,$24,$35,$67,$78,$89
  .BYTE $96,$68,$79
OBJ42
	.byte $16,$F8,$00,$FD,$F8
  .BYTE $00,$04,$08,$00,$04,$08,$00,$FD
  .BYTE $F8,$07,$FD,$F8,$07,$04,$08,$07
  .BYTE $04,$08,$07,$FD,$F9,$07,$FE,$F9
  .BYTE $07,$02,$FF,$07,$02,$FF,$07,$FE
  .BYTE $F9,$04,$FE,$F9,$04,$02,$FF,$04
  .BYTE $02,$FF,$04,$FE,$FC,$07,$03,$FC
  .BYTE $09,$03,$FB,$09,$03,$FD,$09,$03
  .BYTE $FC,$08,$03,$FC,$08,$01,$FC,$06
  .BYTE $01,$9B,$00,$01,$01,$02,$02,$03
  .BYTE $03,$00,$04,$05,$05,$06,$06,$07
  .BYTE $07,$04,$00,$04,$01,$05,$02,$06
  .BYTE $03,$07,$08,$09,$09,$0A,$0A,$0B
  .BYTE $0B,$08,$0C,$0D,$0D,$0E,$0E,$0F
  .BYTE $0F,$0C,$0C,$08,$0D,$09,$0E,$0A
  .BYTE $0F,$0B,$10,$11,$12,$13,$14,$15
  .BYTE $15,$16
OBJ36
	.byte $13,$FC,$00,$FC,$FC,$00
  .BYTE $04,$04,$00,$04,$04,$00,$FC,$FC
  .BYTE $0A,$FC,$FC,$0A,$04,$04,$0A,$04
  .BYTE $04,$0A,$FC,$FF,$02,$FC,$FF,$04
  .BYTE $FC,$FD,$04,$FC,$FD,$06,$FC,$FF
  .BYTE $06,$FC,$FF,$08,$FC,$01,$08,$FC
  .BYTE $01,$06,$FC,$03,$06,$FC,$03,$04
  .BYTE $FC,$01,$04,$FC,$01,$02,$FC,$97
  .BYTE $00,$01,$01,$02,$02,$03,$03,$00
  .BYTE $04,$05,$05,$06,$06,$07,$07,$04
  .BYTE $00,$04,$01,$05,$02,$06,$03,$07
  .BYTE $08,$09,$09,$0A,$0A,$0B,$0B,$0C
  .BYTE $0C,$0D,$0D,$0E,$0E,$0F,$0F,$10
  .BYTE $10,$11,$11,$12,$12,$13,$13,$08
OBJ37
  .BYTE $1F,$FB,$00,$03,$FB,$00,$FD,$05
  .BYTE $00,$FD,$05,$00,$03,$FB,$06,$03
  .BYTE $FB,$06,$FD,$05,$06,$FD,$05,$06
  .BYTE $03,$FC,$02,$FD,$FC,$03,$FD,$FC
  .BYTE $04,$FD,$FD,$04,$FD,$FD,$03,$FD
  .BYTE $FE,$02,$FD,$FE,$03,$FD,$FE,$04
  .BYTE $FD,$FF,$04,$FD,$FF,$03,$FD,$FF
  .BYTE $02,$FD,$00,$02,$FD,$00,$03,$FD
  .BYTE $00,$04,$FD,$01,$04,$FD,$01,$03
  .BYTE $FD,$02,$02,$FD,$02,$03,$FD,$02
  .BYTE $04,$FD,$03,$04,$FD,$03,$03,$FD
  .BYTE $03,$02,$FD,$04,$02,$FD,$04,$04
  .BYTE $FD,$9D,$00,$01,$01,$02,$02,$03
  .BYTE $03,$00,$04,$05,$05,$06,$06,$07
  .BYTE $07,$04,$00,$04,$01,$05,$02,$06
  .BYTE $03,$07,$08,$0A,$0A,$0B,$0B,$0C
  .BYTE $0C,$09,$0D,$0F,$0F,$10,$0E,$11
  .BYTE $0D,$12,$13,$15,$15,$16,$16,$17
  .BYTE $17,$14,$18,$1D,$1D,$1C,$19,$1C
  .BYTE $19,$1A,$1A,$1B,$1E,$1F
OBJ31
	.byte $0F,$FB
  .BYTE $00,$FE,$FB,$00,$02,$00,$00,$02
  .BYTE $00,$00,$FE,$FB,$06,$FE,$FB,$06
  .BYTE $02,$00,$06,$02,$00,$06,$FE,$FB
  .BYTE $09,$FF,$FB,$09,$02,$00,$09,$02
  .BYTE $00,$09,$FF,$FB,$0B,$00,$FB,$0B
  .BYTE $02,$00,$0B,$02,$00,$0B,$00,$15
  .BYTE $01,$12,$23,$30,$45,$56,$67,$74
  .BYTE $04,$37,$1D,$2E,$89,$9A,$AB,$B8
  .BYTE $CD,$DE,$EF,$FC,$8C,$BF
OBJ30
	.byte $07,$F0
  .BYTE $00,$F0,$10,$00,$F0,$10,$00,$10
  .BYTE $F0,$00,$10,$F0,$10,$F0,$10,$10
  .BYTE $F0,$10,$10,$10,$F0,$10,$10,$0B
  .BYTE $01,$12,$23,$30,$45,$56,$67,$74
  .BYTE $04,$15,$26,$37
OBJ35
	.byte $0D,$FC,$00,$00
  .BYTE $FE,$05,$00,$FC,$07,$00,$FC,$09
  .BYTE $00,$FE,$0B,$00,$02,$0B,$00,$04
  .BYTE $09,$00,$04,$07,$00,$02,$05,$00
  .BYTE $04,$00,$00,$FD,$08,$00,$FF,$08
  .BYTE $00,$01,$08,$00,$03,$08,$00,$0B
  .BYTE $01,$12,$23,$34,$45,$56,$67,$78
  .BYTE $89,$18,$AB,$CD
OBJ41
	.byte $0A,$00,$05,$FE
  .BYTE $00,$0C,$FE,$00,$0C,$02,$00,$05
  .BYTE $02,$00,$06,$FF,$00,$0B,$FF,$00
  .BYTE $0B,$01,$00,$09,$01,$00,$09,$FF
  .BYTE $00,$05,$00,$00,$00,$00,$08,$01
  .BYTE $12,$23,$30,$45,$56,$67,$78,$9A
  .BYTE $00
OBJ39
	.byte $0F,$F6,$00,$FA,$F6,$00,$06
  .BYTE $0A,$00,$06,$0A,$00,$FA,$F8,$0A
  .BYTE $FC,$F8,$0A,$04,$08,$0A,$04,$08
  .BYTE $0A,$FC,$F6,$00,$FD,$F6,$00,$03
  .BYTE $FA,$00,$03,$FA,$00,$FD,$FA,$00
  .BYTE $00,$0A,$00,$00,$04,$00,$FF,$08
  .BYTE $00,$FF,$10,$01,$12,$23,$30,$45
  .BYTE $56,$67,$74,$04,$15,$26,$37,$9A
  .BYTE $AB,$B8,$CD,$EF
OBJ40
	.byte $05,$FA,$00,$FA
  .BYTE $06,$00,$FA,$06,$00,$06,$FA,$00
  .BYTE $06,$FA,$0C,$00,$06,$0C,$00,$08
  .BYTE $01,$12,$23,$30,$04,$43,$15,$52
  .BYTE $45
OBJ51
	.byte $04,$AA,$00,$AA,$AA,$00,$56
  .BYTE $56,$00,$56,$56,$00,$AA,$00,$7F
  .BYTE $00,$07,$01,$12,$23,$30,$04,$14
  .BYTE $24,$34
OBJ45
	.byte $0E,$00,$00,$00,$FC,$14
  .BYTE $FC,$FC,$14,$04,$04,$14,$04,$04
  .BYTE $14,$FC,$FC,$5A,$FC,$FC,$5A,$04
  .BYTE $04,$5A,$04,$04,$5A,$FC,$00,$6E
  .BYTE $00,$00,$7F,$00,$D8,$00,$D8,$D8
  .BYTE $00,$28,$28,$00,$28,$28,$00,$D8
  .BYTE $18,$01,$02,$03,$04,$12,$23,$34
  .BYTE $41,$56,$67,$78,$85,$15,$26,$37
  .BYTE $48,$59,$69,$79,$89,$B5,$C6,$D7
  .BYTE $E8,$0A
OBJ21
	.byte $07,$FD,$06,$FE,$FD,$06
  .BYTE $02,$00,$06,$04,$03,$06,$02,$03
  .BYTE $06,$FE,$00,$06,$FC,$00,$06,$00
  .BYTE $00,$00,$00,$09,$01,$12,$23,$34
  .BYTE $45,$50,$03,$14,$25,$67
OBJ10 .BYTE $15,$FC
  .BYTE $00,$FC,$FC,$00,$04,$04,$00,$04
  .BYTE $04,$00,$FC,$FE,$09,$FE,$FE,$09
  .BYTE $02,$02,$09,$02,$02,$09,$FE,$FE
  .BYTE $0B,$FE,$FE,$0B,$02,$02,$0B,$02
  .BYTE $02,$0B,$FE,$FF,$0B,$FE,$FF,$09
  .BYTE $FE,$01,$0B,$FE,$01,$09,$FE,$00
  .BYTE $0B,$FA,$FB,$0B,$03,$05,$0B,$03
  .BYTE $00,$0E,$FE,$FE,$0E,$01,$02,$0E
  .BYTE $01,$9E,$00,$01,$01,$02,$02,$03
  .BYTE $03,$00,$04,$05,$05,$06,$06,$07
  .BYTE $07,$04,$08,$09,$09,$0A,$0A,$0B
  .BYTE $0B,$08,$0C,$0D,$0E,$0F,$10,$11
  .BYTE $11,$12,$12,$10,$13,$14,$14,$15
  .BYTE $15,$13,$00,$04,$01,$05,$02,$06
  .BYTE $03,$07,$04,$08,$05,$09,$06,$0A
  .BYTE $07,$0B,$10,$13,$11,$14,$12,$15
OBJ22
  .BYTE $0B,$FE,$00,$00,$01,$00,$02,$01
  .BYTE $00,$FE,$00,$03,$00,$00,$06,$00
  .BYTE $FE,$09,$00,$01,$09,$02,$01,$09
  .BYTE $FE,$00,$09,$00,$FA,$12,$00,$03
  .BYTE $12,$05,$03,$12,$FB,$11,$01,$12
  .BYTE $20,$03,$13,$23,$45,$46,$47,$56
  .BYTE $67,$75,$89,$8A,$8B,$9A,$AB,$B9
OBJ24
  .BYTE $0F,$00,$04,$FC,$FC,$04,$00,$00
  .BYTE $04,$04,$04,$04,$00,$00,$0C,$FC
  .BYTE $FC,$0C,$00,$00,$0C,$04,$04,$0C
  .BYTE $00,$FE,$06,$FE,$FE,$06,$02,$02
  .BYTE $06,$02,$02,$06,$FE,$FE,$0A,$FE
  .BYTE $FE,$0A,$02,$02,$0A,$02,$02,$0A
  .BYTE $FE,$07,$17,$35,$06,$24,$8E,$AC
  .BYTE $9F,$BD
OBJ47
	.byte $23,$FA,$00,$F6,$02,$00
  .BYTE $F0,$02,$00,$10,$FA,$00,$0A,$FA
  .BYTE $0A,$F6,$02,$10,$F0,$02,$10,$10
  .BYTE $FA,$0A,$0A,$FA,$04,$F6,$00,$04
  .BYTE $FD,$00,$04,$03,$FA,$04,$0A,$00
  .BYTE $0A,$FD,$00,$0A,$03,$FB,$05,$F7
  .BYTE $FB,$09,$F7,$FF,$09,$FC,$FF,$05
  .BYTE $FC,$FF,$05,$04,$FF,$09,$04,$FB
  .BYTE $09,$09,$FB,$05,$09,$00,$05,$FE
  .BYTE $00,$06,$FE,$00,$06,$FF,$00,$05
  .BYTE $FF,$00,$05,$01,$00,$06,$01,$00
  .BYTE $06,$02,$00,$05,$02,$00,$07,$FE
  .BYTE $00,$07,$02,$00,$08,$FE,$00,$08
  .BYTE $02,$00,$09,$FE,$00,$09,$02,$A4
  .BYTE $00,$01,$01,$05,$05,$04,$04,$00
  .BYTE $03,$07,$07,$06,$06,$02,$02,$03
  .BYTE $01,$02,$05,$06,$08,$09,$09,$0A
  .BYTE $0A,$0B,$04,$0C,$0C,$0D,$0D,$07
  .BYTE $09,$0C,$0A,$0D,$0E,$0F,$0F,$10
  .BYTE $10,$11,$11,$0E,$12,$13,$13,$14
  .BYTE $14,$15,$15,$12,$16,$17,$17,$18
  .BYTE $18,$19,$19,$16,$1A,$1B,$1B,$1C
  .BYTE $1C,$1D,$1D,$1A,$1E,$1F,$20,$21
  .BYTE $22,$23
OBJ38
	.byte $0F,$FE,$00,$FE,$FE,$00
  .BYTE $02,$02,$00,$02,$02,$00,$FE,$FE
  .BYTE $06,$FE,$FE,$06,$02,$02,$06,$02
  .BYTE $02,$06,$FE,$FF,$08,$FF,$FF,$08
  .BYTE $01,$01,$08,$01,$01,$08,$FF,$FF
  .BYTE $09,$FF,$FF,$09,$01,$01,$09,$01
  .BYTE $01,$09,$FF,$1B,$01,$12,$23,$30
  .BYTE $45,$56,$67,$74,$89,$9A,$AB,$B8
  .BYTE $CD,$DE,$EF,$FC,$04,$15,$26,$37
  .BYTE $48,$59,$6A,$7B,$8C,$9D,$AE,$BF
OBJ23
  .BYTE $0F,$00,$00,$F7,$FC,$02,$F7,$FA
  .BYTE $06,$F7,$FC,$0A,$F7,$00,$0C,$F7
  .BYTE $04,$0A,$F7,$06,$06,$F7,$04,$02
  .BYTE $F7,$00,$00,$09,$FC,$02,$09,$FA
  .BYTE $06,$09,$FC,$0A,$09,$00,$0C,$09
  .BYTE $04,$0A,$09,$06,$06,$09,$04,$02
  .BYTE $09,$0F,$08,$19,$2A,$3B,$4C,$5D
  .BYTE $6E,$7F,$0C,$48,$1D,$59,$2E,$6A
  .BYTE $3F,$7B
OBJ20
  .byte $0F,$00,$00,$F7,$FC,$02
  .BYTE $F7,$FA,$06,$F7,$FC,$0A,$F7,$00
  .BYTE $0C,$F7,$04,$0A,$F7,$06,$06,$F7
  .BYTE $04,$02,$F7,$00,$00,$09,$FC,$02
  .BYTE $09,$FA,$06,$09,$FC,$0A,$09,$00
  .BYTE $0C,$09,$04,$0A,$09,$06,$06,$09
  .BYTE $04,$02,$09,$1B,$08,$19,$2A,$3B
  .BYTE $4C,$5D,$6E,$7F,$01,$12,$23,$34
  .BYTE $45,$56,$67,$70,$89,$9A,$AB,$BC
  .BYTE $CD,$DE,$EF,$F8,$15,$37,$9D,$BF
OBJ25
  .BYTE $0F,$00,$00,$00,$00,$09,$00,$FE
  .BYTE $08,$FE,$FE,$08,$02,$FE,$0A,$FE
  .BYTE $FE,$0A,$02,$FE,$08,$00,$FE,$0A
  .BYTE $00,$FE,$09,$00,$08,$09,$00,$01
  .BYTE $09,$FE,$01,$09,$02,$04,$09,$FE
  .BYTE $04,$09,$02,$07,$09,$FE,$07,$09
  .BYTE $02,$07,$01,$89,$23,$45,$67,$AB
  .BYTE $CD,$EF
OBJ26
	.byte $0C,$FD,$00,$FE,$FD,$00
  .BYTE $02,$00,$00,$04,$03,$00,$02,$03
  .BYTE $00,$FE,$00,$00,$FC,$FD,$06,$FE
  .BYTE $FD,$06,$02,$00,$06,$04,$03,$06
  .BYTE $02,$03,$06,$FE,$00,$06,$FC,$00
  .BYTE $0C,$00,$17,$01,$12,$23,$34,$45
  .BYTE $50,$67,$78,$89,$9A,$AB,$B6,$06
  .BYTE $17,$28,$39,$4A,$5B,$6C,$7C,$8C
  .BYTE $9C,$AC,$BC
OBJ44
	.byte $0D,$FF,$00,$FF,$FF
  .BYTE $00,$01,$01,$00,$01,$01,$00,$FF
  .BYTE $FE,$09,$FE,$FE,$09,$02,$02,$09
  .BYTE $02,$02,$09,$FE,$FF,$0C,$FF,$FF
  .BYTE $0C,$01,$01,$0C,$01,$01,$0C,$FF
  .BYTE $00,$00,$00,$00,$09,$00,$10,$01
  .BYTE $12,$23,$30,$45,$56,$67,$74,$89
  .BYTE $9A,$AB,$B8,$CD,$48,$59,$6A,$7B
OBJ46
  .BYTE $11,$FB,$00,$FE,$FB,$00,$00,$FB
  .BYTE $06,$FE,$FB,$06,$00,$05,$00,$FE
  .BYTE $05,$00,$00,$05,$06,$FE,$05,$06
  .BYTE $00,$FD,$00,$00,$FD,$04,$00,$03
  .BYTE $04,$00,$03,$00,$00,$FE,$01,$00
  .BYTE $FE,$03,$00,$02,$03,$00,$02,$01
  .BYTE $00,$FE,$02,$00,$02,$02,$00,$92
  .BYTE $00,$01,$00,$02,$02,$03,$03,$01
  .BYTE $04,$05,$04,$06,$06,$07,$07,$05
  .BYTE $01,$05,$02,$06,$03,$07,$08,$09
  .BYTE $09,$0A,$0A,$0B,$0C,$0D,$0D,$0E
  .BYTE $0E,$0F
OBJ33
	.byte $0F,$0C,$10,$11,$07,$FE
  .BYTE $00,$FA,$FE,$00,$06,$02,$00,$06
  .BYTE $02,$00,$FA,$FF,$03,$FB,$FF,$03
  .BYTE $05,$01,$03,$05,$01,$03,$FB,$0B
  .BYTE $01,$12,$23,$30,$45,$56,$67,$74
  .BYTE $04,$15,$26,$37
OBJ34 .byte $19,$03,$00,$F6
  .BYTE $FD,$00,$F6,$FC,$06,$F6,$FD,$06
  .BYTE $F6,$FE,$03,$F6,$02,$03,$F6,$03
  .BYTE $00,$F8,$FE,$00,$F8,$FE,$03,$F8
  .BYTE $02,$03,$F8,$03,$00,$0A,$FD,$00
  .BYTE $0A,$FC,$06,$0A,$FD,$06,$0A,$FE
  .BYTE $03,$0A,$02,$03,$0A,$03,$00,$08
  .BYTE $FE,$00,$08,$FE,$03,$08,$02,$03
  .BYTE $08,$FE,$02,$F8,$02,$02,$F8,$02
  .BYTE $00,$F8,$FE,$02,$08,$02,$02,$08
  .BYTE $02,$00,$08,$A3,$00,$01,$01,$02
  .BYTE $02,$03,$03,$04,$04,$05,$05,$00
  .BYTE $06,$07,$07,$08,$08,$09,$09,$06
  .BYTE $0A,$0B,$0B,$0C,$0C,$0D,$0D,$0E
  .BYTE $0E
  .BYTE $0F,$0F,$0A ;SLO $0A0F
  .BYTE $10,$11,$11,$12,$12,$13,$13,$10
  .BYTE $14,$15,$15,$16,$17,$18,$18,$19
  .BYTE $01,$0B,$02,$0C,$03,$0D,$14,$17
  .BYTE $15,$18,$16,$19,$04,$08,$05,$09
  .BYTE $00,$06,$0E,$12,$0F,$13,$0A,$10
OBJ9
  .BYTE $12,$FC,$16,$04,$04,$16,$04,$00
  .BYTE $16,$FC,$FF,$12,$01,$01,$12,$01
  .BYTE $00,$12,$FF,$FD,$12,$03,$03,$12
  .BYTE $03,$00,$12,$FD,$F0,$16,$10,$10
  .BYTE $16,$10,$FE,$02,$02,$02,$02,$02
  .BYTE $00,$00,$FE,$FE,$00,$02,$02,$00
  .BYTE $02,$00,$02,$FE,$00,$13,$F9,$00
  .BYTE $0C,$E6,$9A,$00,$01,$01,$02,$02
  .BYTE $00,$03,$04,$04,$05,$05,$03,$00
  .BYTE $03,$01,$04,$02,$05,$06,$07,$07
  .BYTE $08,$08,$06,$09,$06,$09,$0B,$06
  .BYTE $0B,$0A,$07,$0A,$0C,$07,$0C,$0B
  .BYTE $0E,$0C,$0F,$08,$0D,$0D,$0E,$0E
  .BYTE $0F,$0F,$0D,$10,$11,$11,$12,$12
  .BYTE $10,$4C,$00,$00,$4B,$50,$35,$20

OBJ1
  .BYTE $05
  
  .BYTE $F0,$00,$20,$10,$00,$20,$FD,$02
  .BYTE $20,$03,$02,$20,$00,$0C,$20,$00
  .BYTE $00,$E1,$09,$01								; f3B3A   
		.BYTE $13,$34,$42,$20,$05,$15,$25,$35
  .BYTE $45

;OBJ2
;  .BYTE $0F
;  .byte $F8,$00,$10,$FA,$0C,$0C
;  .BYTE $FA,$0C,$00,$F9,$06,$FD,$F9,$04
;  .BYTE $F4,$FC,$04,$F0,$FC,$00,$F0,$F9
;  .BYTE $00,$F4,$08,$00,$10,$06,$0C,$0C
;  .BYTE $06,$0C,$00,$07,$06,$FD,$07,$04
;  .BYTE $F4,$04,$04,$F0,$04,$00,$F0,$07
;  .BYTE $00,$F4,$17,$01,$12,$23,$34,$45
;  .BYTE $56,$67,$70,$89,$9A,$AB,$BC,$CD
;  .BYTE $DE,$EF,$F8,$47,$CF,$08,$19,$2A
;  .BYTE $3B,$5D,$6E

OBJ2
	.BYTE $01
	.BYTE 127,127,127
	.BYTE 255-127,255-127,255-127
	.BYTE $00
	.BYTE $01

OBJ3
	.BYTE $0F,$F8,$04,$18,$08
  .BYTE $04,$18,$00,$04,$E8,$00,$0C,$18
  .BYTE $E2,$04,$18,$1E,$04,$18,$FC,$04
  .BYTE $00,$04,$04,$00,$00,$14,$18,$00
  .BYTE $0A,$0C,$F2,$04,$10,$F2,$00,$10
  .BYTE $0E,$04,$10,$0E,$00,$10,$00,$04
  .BYTE $F0,$00,$00,$F0,$0C,$20,$23,$21
  .BYTE $13,$03,$45,$46,$57,$38,$89,$AB
  .BYTE $CD,$EF
OBJ4
  .byte $07,$00,$00,$00,$EC,$07
  .BYTE $00,$F6,$07,$11,$0A,$07,$11,$14
  .BYTE $07,$00,$0A,$07,$EF,$F6,$07,$EF
  .BYTE $00,$10,$00,$11,$01,$02,$03,$04
  .BYTE $05,$06,$71,$72,$73,$74,$75,$76
  .BYTE $12,$23,$34,$45,$56,$61
OBJ6 
	.byte $05,$F4
  .BYTE $00,$10,$00,$00,$F0,$0C,$00,$10
  .BYTE $F4,$0A,$10,$00,$0A,$F0,$0C,$0A
  .BYTE $10,$08,$01,$12,$20,$34,$45,$53
  .BYTE $03,$14,$25
OBJ7
  .byte $0F,$F0,$00,$10,$10
  
  .BYTE $00,$10,$00,$00,$EC,$FC,$00,$04
  .BYTE $04,$00,$04,$00,$00,$FC,$FD,$04
  .BYTE $03,$03,$04,$03,$00,$04,$FD,$FE
  .BYTE $14,$02,$02,$14,$02,$00,$14,$FE
  .BYTE $FF,$04,$01,$01,$04,$01,$00,$04
  .BYTE $FF,$00,$34,$00,$14,$F6,$F7,$F8
  .BYTE $90,$A1,$B2,$06,$17,$28,$C3,$D4
  .BYTE $E5,$34,$45,$53,$67,$78,$86,$CD
  .BYTE $DE,$EC
OBJ8
	.byte $07,$F8,$F8,$F8,$08,$F8
  .BYTE $F8,$08,$F8,$08,$F8,$F8,$08,$F8
  .BYTE $08,$F8,$08,$08,$F8,$08,$08,$08
  .BYTE $F8,$08,$08,$0B,$01,$12,$23,$30
  .BYTE $04,$15,$26,$37,$45,$56,$67,$74
  .BYTE $09,$FC,$07,$04,$04,$07,$04,$00
OBJ11
  .BYTE $07,$FC,$00,$0E,$00,$FF,$07,$01
  .BYTE $01,$07,$01,$00,$07,$FF,$FE,$00
  .BYTE $02,$02,$00,$02,$00,$00,$FE,$0E
  .BYTE $01,$12,$20,$03,$13,$23,$45,$56
  .BYTE $64,$78,$89,$97,$47,$58,$69
OBJ12
  .BYTE $05
  .BYTE $FB,$00,$FF,$05,$00,$FF,$00,$0C
  .BYTE $FF,$FB,$00,$01,$05,$00,$01,$00
  .BYTE $0C,$01,$08,$01,$12,$20,$34,$45
  .BYTE $53,$03,$14,$25
OBJ13 .BYTE $07,$FF,$00,$FC
  .BYTE $FF,$00,$04,$FF,$0C,$02,$FF,$0C
  .BYTE $FE,$01,$00,$FC,$01,$00,$04,$01
  .BYTE $0C,$02,$01,$0C,$FE,$0B,$01,$12
  .BYTE $23,$30,$45,$56,$67,$74,$04,$15
  .BYTE $26,$37
OBJ14
  .byte $09,$04,$00,$FF,$FC,$00
  .BYTE $FF,$FA,$08,$FF,$00,$0C,$FF,$06
  .BYTE $08,$FF,$04,$00,$01,$FC,$00,$01
  .BYTE $FA,$08,$01,$00,$0C,$01,$06,$08
  .BYTE $01,$0E,$01,$12,$23,$34,$40,$56
  .BYTE $67,$78,$89,$95,$05,$16,$27,$38
  .BYTE $49
OBJ15
  .byte $09,$FD,$00,$FF,$03,$00,$FF
  .BYTE $03,$0A,$FF,$00,$0C,$FF,$FD,$0A
  .BYTE $FF,$FD,$00,$01,$03,$00,$01,$03
  .BYTE $0A,$01,$00,$0C,$01,$FD,$0A,$01
  .BYTE $0E,$01,$12,$23,$34,$40,$56,$67
  .BYTE $78,$89,$95,$05,$16,$27,$38,$49
OBJ16
  .BYTE $07,$FE,$00,$FF,$02,$00,$FF,$04
  .BYTE $0C,$FF,$FC,$0C,$FF,$FE,$00,$01
  .BYTE $02,$00,$01,$04,$0C,$01,$FC,$0C
  .BYTE $01,$0B,$01,$12,$23,$30,$45,$56
  .BYTE $67,$74,$04,$15,$26,$37
OBJ17 
	.byte $0B,$02
  .BYTE $00,$FF,$04,$06,$FF,$02,$0C,$FF
  .BYTE $FE,$0C,$FF,$FC,$06,$FF,$FE,$00
  .BYTE $FF,$02,$00,$01,$04,$06,$01,$02
  .BYTE $0C,$01,$FE,$0C,$01,$FC,$06,$01
  .BYTE $FE,$00,$01,$11,$01,$12,$23,$34
  .BYTE $45,$50,$67,$78,$89,$9A,$AB,$B6
  .BYTE $06,$17,$28,$39,$4A,$5B
OBJ18
	.byte $0B,$03
  .BYTE $00,$FF,$03,$08,$FF,$01,$0C,$FF
  .BYTE $FF,$0C,$FF,$FD,$08,$FF,$FD,$00
  .BYTE $FF,$03,$00,$01,$03,$08,$01,$01
  .BYTE $0C,$01,$FF,$0C,$01,$FD,$08,$01
  .BYTE $FD,$00,$01,$11,$01,$12,$23,$34
  .BYTE $45,$50,$67,$78,$89,$9A,$AB,$B6
  .BYTE $06,$17,$28,$39,$4A,$5B
OBJ19 .byte $09,$FC
  .BYTE $07,$04,$04,$07,$04,$00,$07,$FC
  .BYTE $00,$09,$00,$FF,$07,$01,$01,$07
  .BYTE $01,$00,$07,$FF,$FF,$00,$01,$01
  .BYTE $00,$01,$00,$00,$FF,$0E,$01,$12
  .BYTE $20,$03,$13,$23,$45,$56,$64,$78
  .BYTE $89,$97,$47,$58,$69
OBJ29
	.byte $0F,$F9,$07
  .BYTE $FF,$F9,$09,$FF,$07,$09,$FF,$07
  .BYTE $00,$FF,$05,$00,$FF,$04,$04,$FF
  .BYTE $02,$04,$FF,$02,$07,$FF,$F9,$07
  .BYTE $01,$F9,$09,$01,$07,$09,$01,$07
  .BYTE $00,$01,$05,$00,$01,$04,$04,$01
  .BYTE $02,$04,$01,$02,$07,$01,$17,$01
  .BYTE $12,$23,$34,$45,$56,$67,$70,$89
  .BYTE $9A,$AB,$BC,$CD,$DE,$EF,$F8,$08
  .BYTE $19,$2A,$3B,$4C,$5D,$6E,$7F
OBJ48
	.byte $0B
  .BYTE $F9,$00,$F3,$07,$00,$F3,$07,$00
  .BYTE $0D,$F9,$00,$0D,$F9,$06,$F3,$07
  .BYTE $06,$F3,$07,$06,$0D,$F9,$06,$0D
  .BYTE $F6,$06,$F0,$0A,$06,$F0,$0A,$06
  .BYTE $10,$F6,$06,$10,$07,$04,$15,$26
  .BYTE $37,$89,$9A,$AB,$B8
OBJ49
	.byte $0B,$FE,$00
  .BYTE $FE,$FE,$00,$02,$02,$00,$02,$02
  .BYTE $00,$FE,$FE,$04,$FE,$FE,$04,$02
  .BYTE $02,$04,$02,$02,$04,$FE,$02,$06
  .BYTE $02,$02,$06,$FE,$02,$07,$02,$02
  .BYTE $07,$FE,$09,$04,$15,$2A,$3B,$45
  .BYTE $56,$67,$74,$89,$AB
OBJ50
	.byte $0D,$F6,$00
  .BYTE $FB,$F6,$00,$05,$0A,$00,$05,$0A
  .BYTE $00,$FB,$F6,$02,$FB,$F6,$02,$05
  .BYTE $0A,$02,$05,$0A,$02,$FB,$F6,$04
  .BYTE $FB,$F6,$04,$05,$0A,$04,$05,$0A
  .BYTE $04,$FB,$0A,$08,$05,$0A,$08,$FB
  .BYTE $0C,$08,$19,$2C,$3D,$45,$56,$67
  .BYTE $74,$89,$9A,$AB,$B8,$CD
OBJ52
	.byte $11,$00
  .BYTE $08,$FD,$00,$04,$03,$00,$04,$FD
  .BYTE $00,$08,$03,$00,$07,$FF,$00,$07
  .BYTE $01,$00,$09,$02,$00,$0A,$02,$00
  .BYTE $0B,$01,$00,$0B,$FF,$00,$0A,$FE
  .BYTE $00,$09,$FE,$00,$0A,$FF,$00,$09
  .BYTE $FF,$00,$0A,$01,$00,$09,$01,$00
  .BYTE $08,$FF,$00,$08,$01,$8C,$00,$01
  .BYTE $02,$03,$04,$05,$05,$06,$06,$07
  .BYTE $07,$08,$08,$09,$09,$0A,$0A,$0B
  .BYTE $0B,$04,$0C,$0D,$0E,$0F,$10,$11
OBJ54
  .BYTE $0F,$E0,$00,$E0,$E0,$00,$20,$20
  .BYTE $00,$20,$20,$00,$E0,$E0,$06,$E0
  .BYTE $E0,$06,$20,$20,$06,$20,$20,$06
  .BYTE $E0,$E0,$0C,$E0,$E0,$0C,$20,$20
  .BYTE $0C,$20,$20,$0C,$E0,$E0,$12,$E0
  .BYTE $E0,$12,$20,$20,$12,$20,$20,$12
  .BYTE $E0,$10,$01,$12,$23,$30,$45,$67
  .BYTE $74,$89,$AB,$B8,$CD,$EF,$FC,$0C
  .BYTE $1D,$2E,$3F
OBJ55
	.BYTE $15
	.BYTE $80,$E0,$80
	.BYTE $7F,$E0,$80
	.BYTE $7F,$E0,$7F
	.BYTE $80,$E0,$7F
	.BYTE $80,$20,$80
	.BYTE $7F,$20,$80
	.BYTE $7F,$20,$7F
	.BYTE $80,$20,$7F
	.BYTE $80,$E0,$FD
	.BYTE $80,$E0,$03
	.BYTE $80,$EC,$03
	.BYTE $80,$EC,$FD
	.BYTE $B0,$20,$80
	.BYTE $B0,$20,$70
	.BYTE $40,$20,$70
	.BYTE $40,$20,$00
	.BYTE $00,$20,$00
	.BYTE $00,$20,$50
	.BYTE $D0,$20,$50
	.BYTE $D0,$20,$80
	.BYTE $00,$20,$40
	.BYTE $40,$20,$40
	.BYTE $96
	.BYTE $00,$01, $01,$02, $02,$03, $03,$00
	.BYTE $00,$04, $01,$05, $02,$06, $03,$07
	.BYTE $04,$05, $05,$06, $06,$07, $07,$04
	.BYTE $09,$0A, $0A,$0B, $0B,$08, $0C,$0D
	.BYTE $0D,$0E, $0E,$0F, $0F,$10, $10,$11
	.BYTE $11,$12, $12,$13, $14,$15, $00

OBJECT_SHAPE_PTR_LO   
 .BYTE <OBJ1,<OBJ1,<OBJ3,<OBJ3,<OBJ4,<OBJ5,<OBJ6,<OBJ7
 .BYTE <OBJ8,<OBJ2,<OBJ9,<OBJ1,<OBJ10,<OBJ1,<OBJ8,<OBJ4
 .BYTE <OBJ11,<OBJ12,<OBJ13,<OBJ14,<OBJ15,<OBJ16,<OBJ17,<OBJ18
 .BYTE <OBJ19,<OBJ20,<OBJ21,<OBJ22,<OBJ23,<OBJ24,<OBJ25,<OBJ26
 .BYTE <OBJ27,<OBJ28,<OBJ29,<OBJ30,<OBJ31,<OBJ32,<OBJ33,<OBJ34
 .BYTE <OBJ35,<OBJ36,<OBJ37,<OBJ38,<OBJ39,<OBJ40,<OBJ41,<OBJ42
 .BYTE <OBJ43,<OBJ44,<OBJ45,<OBJ46,<OBJ47,<OBJ48,<OBJ49,<OBJ50
 .BYTE <OBJ51,<OBJ52,<OBJ53,<OBJ53,<OBJ52,<OBJ54,<OBJ54,<OBJ55

OBJECT_SHAPE_PTR_HI   
 .BYTE >OBJ1,>OBJ1,>OBJ3,>OBJ3,>OBJ4,>OBJ5,>OBJ6,>OBJ7
 .BYTE >OBJ8,>OBJ2,>OBJ9,>OBJ1,>OBJ10,>OBJ1,>OBJ8,>OBJ4
 .BYTE >OBJ11,>OBJ12,>OBJ13,>OBJ14,>OBJ15,>OBJ16,>OBJ17,>OBJ18
 .BYTE >OBJ19,>OBJ20,>OBJ21,>OBJ22,>OBJ23,>OBJ24,>OBJ25,>OBJ26
 .BYTE >OBJ27,>OBJ28,>OBJ29,>OBJ30,>OBJ31,>OBJ32,>OBJ33,>OBJ34
 .BYTE >OBJ35,>OBJ36,>OBJ37,>OBJ38,>OBJ39,>OBJ40,>OBJ41,>OBJ42
 .BYTE >OBJ43,>OBJ44,>OBJ45,>OBJ46,>OBJ47,>OBJ48,>OBJ49,>OBJ50
 .BYTE >OBJ51,>OBJ52,>OBJ53,>OBJ53,>OBJ52,>OBJ54,>OBJ54,>OBJ55
	
.ALIGN $100
SIN_LSB
		.BYTE $92,$2E,$F7,$60,$C4,$14,$47,$79
        .BYTE $AB,$DD,$08,$21,$3A,$53,$6C,$85
        .BYTE $9E,$B7,$D0,$E9,$01,$0D,$1A,$26
        .BYTE $33,$3F,$4C,$58,$64,$71,$7D,$89
        .BYTE $96,$A2,$AE,$BB,$C7,$D3,$DF,$EC
        .BYTE $F8,$02,$08,$0E,$14,$1A,$20,$26
        .BYTE $2C,$32,$38,$3E,$44,$4A,$50,$56
        .BYTE $5C,$62,$68,$6E,$73,$79,$7F,$85
        .BYTE $8B,$91,$96,$9C,$A2,$A8,$AD,$B3
        .BYTE $B9,$BE,$C4,$CA,$CF,$D5,$DA,$E0
        .BYTE $E5,$EB,$F1,$F6,$FB,$00,$03,$06
        .BYTE $09,$0B,$0E,$11,$13,$16,$19,$1B
        .BYTE $1E,$20,$23,$26,$28,$2B,$2D,$30
        .BYTE $32,$35,$37,$3A,$3C,$3F,$41,$44
        .BYTE $46,$48,$4B,$4D,$50,$52,$54,$57
        .BYTE $59,$5B,$5E,$60,$62,$64,$67,$69
        .BYTE $6B,$6D,$70,$72,$74,$76,$78,$7A
        .BYTE $7C,$7F,$81,$83,$85,$87,$89,$8B
        .BYTE $8D,$8F,$91,$93,$95,$97,$98,$9A
        .BYTE $9C,$9E,$A0,$A2,$A4,$A5,$A7,$A9
        .BYTE $AB,$AC,$AE,$B0,$B1,$B3,$B5,$B6
        .BYTE $B8,$BA,$BB,$BD,$BE,$C0,$C1,$C3
        .BYTE $C4,$C6,$C7,$C9,$CA,$CB,$CD,$CE
        .BYTE $D0,$D1,$D2,$D3,$D5,$D6,$D7,$D8
        .BYTE $DA,$DB,$DC,$DD,$DE,$DF,$E0,$E2
        .BYTE $E3,$E4,$E5,$E6,$E7,$E8,$E9,$E9
        .BYTE $EA,$EB,$EC,$ED,$EE,$EF,$EF,$F0
        .BYTE $F1,$F2,$F3,$F3,$F4,$F5,$F5,$F6
        .BYTE $F6,$F7,$F8,$F8,$F9,$F9,$FA,$FA
        .BYTE $FB,$FB,$FC,$FC,$FC,$FD,$FD,$FD
        .BYTE $FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF
        .BYTE $FF,$00,$00,$00,$00,$00,$00,$00
 
SIN_MSB
		.BYTE $DC,$E4,$E4,$E8,$E8,$EC,$EC,$EC
        .BYTE $EC,$EC,$F0,$F0,$F0,$F0,$F0,$F0
        .BYTE $F0,$F0,$F0,$F0,$F4,$F4,$F4,$F4
        .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4
        .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4
        .BYTE $F4,$F8,$F8,$F8,$F8,$F8,$F8,$F8
        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8
        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8
        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8
        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8
        .BYTE $F8,$F8,$F8,$F8,$F8,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC
        .BYTE $FC,$00,$00,$00,$00,$00,$00,$00
	
LOG_TABLE
		.BYTE $00,$01,$03,$04,$06,$07,$09,$0A
        .BYTE $0B,$0D,$0E,$10,$11,$12,$14,$15
        .BYTE $16,$18,$19,$1A,$1C,$1D,$1E,$20
        .BYTE $21,$22,$24,$25,$26,$28,$29,$2A
        .BYTE $2C,$2D,$2E,$2F,$31,$32,$33,$34
        .BYTE $36,$37,$38,$39,$3B,$3C,$3D,$3E
        .BYTE $3F,$41,$42,$43,$44,$45,$47,$48
        .BYTE $49,$4A,$4B,$4D,$4E,$4F,$50,$51
        .BYTE $52,$54,$55,$56,$57,$58,$59,$5A
        .BYTE $5C,$5D,$5E,$5F,$60,$61,$62,$63
        .BYTE $64,$66,$67,$68,$69,$6A,$6B,$6C
        .BYTE $6D,$6E,$6F,$70,$71,$72,$74,$75
        .BYTE $76,$77,$78,$79,$7A,$7B,$7C,$7D
        .BYTE $7E,$7F,$80,$81,$82,$83,$84,$85
        .BYTE $86,$87,$88,$89,$8A,$8B,$8C,$8D
        .BYTE $8E,$8F,$90,$91,$92,$93,$94,$95
        .BYTE $96,$97,$98,$99,$9A,$9B,$9B,$9C
        .BYTE $9D,$9E,$9F,$A0,$A1,$A2,$A3,$A4
        .BYTE $A5,$A6,$A7,$A8,$A9,$A9,$AA,$AB
        .BYTE $AC,$AD,$AE,$AF,$B0,$B1,$B2,$B2
        .BYTE $B3,$B4,$B5,$B6,$B7,$B8,$B9,$B9
        .BYTE $BA,$BB,$BC,$BD,$BE,$BF,$C0,$C0
        .BYTE $C1,$C2,$C3,$C4,$C5,$C6,$C6,$C7
        .BYTE $C8,$C9,$CA,$CB,$CB,$CC,$CD,$CE
        .BYTE $CF,$D0,$D0,$D1,$D2,$D3,$D4,$D4
        .BYTE $D5,$D6,$D7,$D8,$D8,$D9,$DA,$DB
        .BYTE $DC,$DC,$DD,$DE,$DF,$E0,$E0,$E1
        .BYTE $E2,$E3,$E4,$E4,$E5,$E6,$E7,$E7
        .BYTE $E8,$E9,$EA,$EA,$EB,$EC,$ED,$EE
        .BYTE $EE,$EF,$F0,$F1,$F1,$F2,$F3,$F4
        .BYTE $F4,$F5,$F6,$F7,$F7,$F8,$F9,$F9
        .BYTE $FA,$FB,$FC,$FC,$FD,$FE,$FF,$FF

EXP_TABLE
		.BYTE $00,$01,$01,$02,$03,$03,$04,$05
        .BYTE $06,$06,$07,$08,$08,$09,$0A,$0B
        .BYTE $0B,$0C,$0D,$0E,$0E,$0F,$10,$10
        .BYTE $11,$12,$13,$13,$14,$15,$16,$16
        .BYTE $17,$18,$19,$19,$1A,$1B,$1C,$1D
        .BYTE $1D,$1E,$1F,$20,$20,$21,$22,$23
        .BYTE $24,$24,$25,$26,$27,$28,$28,$29
        .BYTE $2A,$2B,$2C,$2C,$2D,$2E,$2F,$30
        .BYTE $30,$31,$32,$33,$34,$35,$35,$36
        .BYTE $37,$38,$39,$3A,$3A,$3B,$3C,$3D
        .BYTE $3E,$3F,$40,$41,$41,$42,$43,$44
        .BYTE $45,$46,$47,$48,$48,$49,$4A,$4B
        .BYTE $4C,$4D,$4E,$4F,$50,$51,$51,$52
        .BYTE $53,$54,$55,$56,$57,$58,$59,$5A
        .BYTE $5B,$5C,$5D,$5E,$5E,$5F,$60,$61
        .BYTE $62,$63,$64,$65,$66,$67,$68,$69
        .BYTE $6A,$6B,$6C,$6D,$6E,$6F,$70,$71
        .BYTE $72,$73,$74,$75,$76,$77,$78,$79
        .BYTE $7A,$7B,$7C,$7D,$7E,$7F,$80,$81
        .BYTE $82,$83,$84,$85,$87,$88,$89,$8A
        .BYTE $8B,$8C,$8D,$8E,$8F,$90,$91,$92
        .BYTE $93,$95,$96,$97,$98,$99,$9A,$9B
        .BYTE $9C,$9D,$9F,$A0,$A1,$A2,$A3,$A4
        .BYTE $A5,$A6,$A8,$A9,$AA,$AB,$AC,$AD
        .BYTE $AF,$B0,$B1,$B2,$B3,$B4,$B6,$B7
        .BYTE $B8,$B9,$BA,$BC,$BD,$BE,$BF,$C0
        .BYTE $C2,$C3,$C4,$C5,$C6,$C8,$C9,$CA
        .BYTE $CB,$CD,$CE,$CF,$D0,$D2,$D3,$D4
        .BYTE $D6,$D7,$D8,$D9,$DB,$DC,$DD,$DE
        .BYTE $E0,$E1,$E2,$E4,$E5,$E6,$E8,$E9
        .BYTE $EA,$EC,$ED,$EE,$F0,$F1,$F2,$F4
        .BYTE $F5,$F6,$F8,$F9,$FA,$FC,$FD,$FF

VER_POS_SCN0_HI
		.BYTE (>SCREEN0)+$00,(>SCREEN0)+$00,(>SCREEN0)+$00,(>SCREEN0)+$00,(>SCREEN0)+$00,(>SCREEN0)+$00,(>SCREEN0)+$00,(>SCREEN0)+$00
        .BYTE (>SCREEN0)+$01,(>SCREEN0)+$01,(>SCREEN0)+$01,(>SCREEN0)+$01,(>SCREEN0)+$01,(>SCREEN0)+$01,(>SCREEN0)+$01,(>SCREEN0)+$01
        .BYTE (>SCREEN0)+$02,(>SCREEN0)+$02,(>SCREEN0)+$02,(>SCREEN0)+$02,(>SCREEN0)+$02,(>SCREEN0)+$02,(>SCREEN0)+$02,(>SCREEN0)+$02
        .BYTE (>SCREEN0)+$03,(>SCREEN0)+$03,(>SCREEN0)+$03,(>SCREEN0)+$03,(>SCREEN0)+$03,(>SCREEN0)+$03,(>SCREEN0)+$03,(>SCREEN0)+$03
        .BYTE (>SCREEN0)+$05,(>SCREEN0)+$05,(>SCREEN0)+$05,(>SCREEN0)+$05,(>SCREEN0)+$05,(>SCREEN0)+$05,(>SCREEN0)+$05,(>SCREEN0)+$05
        .BYTE (>SCREEN0)+$06,(>SCREEN0)+$06,(>SCREEN0)+$06,(>SCREEN0)+$06,(>SCREEN0)+$06,(>SCREEN0)+$06,(>SCREEN0)+$06,(>SCREEN0)+$06
        .BYTE (>SCREEN0)+$07,(>SCREEN0)+$07,(>SCREEN0)+$07,(>SCREEN0)+$07,(>SCREEN0)+$07,(>SCREEN0)+$07,(>SCREEN0)+$07,(>SCREEN0)+$07
        .BYTE (>SCREEN0)+$08,(>SCREEN0)+$08,(>SCREEN0)+$08,(>SCREEN0)+$08,(>SCREEN0)+$08,(>SCREEN0)+$08,(>SCREEN0)+$08,(>SCREEN0)+$08
        .BYTE (>SCREEN0)+$0A,(>SCREEN0)+$0A,(>SCREEN0)+$0A,(>SCREEN0)+$0A,(>SCREEN0)+$0A,(>SCREEN0)+$0A,(>SCREEN0)+$0A,(>SCREEN0)+$0A
        .BYTE (>SCREEN0)+$0B,(>SCREEN0)+$0B,(>SCREEN0)+$0B,(>SCREEN0)+$0B,(>SCREEN0)+$0B,(>SCREEN0)+$0B,(>SCREEN0)+$0B,(>SCREEN0)+$0B
        .BYTE (>SCREEN0)+$0C,(>SCREEN0)+$0C,(>SCREEN0)+$0C,(>SCREEN0)+$0C,(>SCREEN0)+$0C,(>SCREEN0)+$0C,(>SCREEN0)+$0C,(>SCREEN0)+$0C
        .BYTE (>SCREEN0)+$0D,(>SCREEN0)+$0D,(>SCREEN0)+$0D,(>SCREEN0)+$0D,(>SCREEN0)+$0D,(>SCREEN0)+$0D,(>SCREEN0)+$0D,(>SCREEN0)+$0D
        .BYTE (>SCREEN0)+$0F,(>SCREEN0)+$0F,(>SCREEN0)+$0F,(>SCREEN0)+$0F,(>SCREEN0)+$0F,(>SCREEN0)+$0F,(>SCREEN0)+$0F,(>SCREEN0)+$0F
        .BYTE (>SCREEN0)+$10,(>SCREEN0)+$10,(>SCREEN0)+$10,(>SCREEN0)+$10,(>SCREEN0)+$10,(>SCREEN0)+$10,(>SCREEN0)+$10,(>SCREEN0)+$10
        .BYTE (>SCREEN0)+$11,(>SCREEN0)+$11,(>SCREEN0)+$11,(>SCREEN0)+$11,(>SCREEN0)+$11,(>SCREEN0)+$11,(>SCREEN0)+$11,(>SCREEN0)+$11
        .BYTE (>SCREEN0)+$12,(>SCREEN0)+$12,(>SCREEN0)+$12,(>SCREEN0)+$12,(>SCREEN0)+$12,(>SCREEN0)+$12,(>SCREEN0)+$12,(>SCREEN0)+$12

AND_PIXEL_POS
		.BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

VER_POS_SCN1_HI
		.BYTE (>SCREEN1)+$00,(>SCREEN1)+$00,(>SCREEN1)+$00,(>SCREEN1)+$00,(>SCREEN1)+$00,(>SCREEN1)+$00,(>SCREEN1)+$00,(>SCREEN1)+$00
        .BYTE (>SCREEN1)+$01,(>SCREEN1)+$01,(>SCREEN1)+$01,(>SCREEN1)+$01,(>SCREEN1)+$01,(>SCREEN1)+$01,(>SCREEN1)+$01,(>SCREEN1)+$01
        .BYTE (>SCREEN1)+$02,(>SCREEN1)+$02,(>SCREEN1)+$02,(>SCREEN1)+$02,(>SCREEN1)+$02,(>SCREEN1)+$02,(>SCREEN1)+$02,(>SCREEN1)+$02
        .BYTE (>SCREEN1)+$03,(>SCREEN1)+$03,(>SCREEN1)+$03,(>SCREEN1)+$03,(>SCREEN1)+$03,(>SCREEN1)+$03,(>SCREEN1)+$03,(>SCREEN1)+$03
        .BYTE (>SCREEN1)+$05,(>SCREEN1)+$05,(>SCREEN1)+$05,(>SCREEN1)+$05,(>SCREEN1)+$05,(>SCREEN1)+$05,(>SCREEN1)+$05,(>SCREEN1)+$05
        .BYTE (>SCREEN1)+$06,(>SCREEN1)+$06,(>SCREEN1)+$06,(>SCREEN1)+$06,(>SCREEN1)+$06,(>SCREEN1)+$06,(>SCREEN1)+$06,(>SCREEN1)+$06
        .BYTE (>SCREEN1)+$07,(>SCREEN1)+$07,(>SCREEN1)+$07,(>SCREEN1)+$07,(>SCREEN1)+$07,(>SCREEN1)+$07,(>SCREEN1)+$07,(>SCREEN1)+$07
        .BYTE (>SCREEN1)+$08,(>SCREEN1)+$08,(>SCREEN1)+$08,(>SCREEN1)+$08,(>SCREEN1)+$08,(>SCREEN1)+$08,(>SCREEN1)+$08,(>SCREEN1)+$08
        .BYTE (>SCREEN1)+$0A,(>SCREEN1)+$0A,(>SCREEN1)+$0A,(>SCREEN1)+$0A,(>SCREEN1)+$0A,(>SCREEN1)+$0A,(>SCREEN1)+$0A,(>SCREEN1)+$0A
        .BYTE (>SCREEN1)+$0B,(>SCREEN1)+$0B,(>SCREEN1)+$0B,(>SCREEN1)+$0B,(>SCREEN1)+$0B,(>SCREEN1)+$0B,(>SCREEN1)+$0B,(>SCREEN1)+$0B
        .BYTE (>SCREEN1)+$0C,(>SCREEN1)+$0C,(>SCREEN1)+$0C,(>SCREEN1)+$0C,(>SCREEN1)+$0C,(>SCREEN1)+$0C,(>SCREEN1)+$0C,(>SCREEN1)+$0C
        .BYTE (>SCREEN1)+$0D,(>SCREEN1)+$0D,(>SCREEN1)+$0D,(>SCREEN1)+$0D,(>SCREEN1)+$0D,(>SCREEN1)+$0D,(>SCREEN1)+$0D,(>SCREEN1)+$0D
        .BYTE (>SCREEN1)+$0F,(>SCREEN1)+$0F,(>SCREEN1)+$0F,(>SCREEN1)+$0F,(>SCREEN1)+$0F,(>SCREEN1)+$0F,(>SCREEN1)+$0F,(>SCREEN1)+$0F
        .BYTE (>SCREEN1)+$10,(>SCREEN1)+$10,(>SCREEN1)+$10,(>SCREEN1)+$10,(>SCREEN1)+$10,(>SCREEN1)+$10,(>SCREEN1)+$10,(>SCREEN1)+$10
        .BYTE (>SCREEN1)+$11,(>SCREEN1)+$11,(>SCREEN1)+$11,(>SCREEN1)+$11,(>SCREEN1)+$11,(>SCREEN1)+$11,(>SCREEN1)+$11,(>SCREEN1)+$11
        .BYTE (>SCREEN1)+$12,(>SCREEN1)+$12,(>SCREEN1)+$12,(>SCREEN1)+$12,(>SCREEN1)+$12,(>SCREEN1)+$12,(>SCREEN1)+$12,(>SCREEN1)+$12

ORA_PIXEL_POS
		.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03
		.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03
		.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03
		.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03
		.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03
		.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03
		.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03
		.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03
		.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03
		.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03
		.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03
		.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03
		.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03
		.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03
		.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03
		.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

VER_POS_LO
		.BYTE $00,$01,$02,$03,$04,$05,$06,$07
        .BYTE $40,$41,$42,$43,$44,$45,$46,$47
        .BYTE $80,$81,$82,$83,$84,$85,$86,$87
        .BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7
        .BYTE $00,$01,$02,$03,$04,$05,$06,$07
        .BYTE $40,$41,$42,$43,$44,$45,$46,$47
        .BYTE $80,$81,$82,$83,$84,$85,$86,$87
		.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7
		.BYTE $00,$01,$02,$03,$04,$05,$06,$07
		.BYTE $40,$41,$42,$43,$44,$45,$46,$47
		.BYTE $80,$81,$82,$83,$84,$85,$86,$87
		.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7
		.BYTE $00,$01,$02,$03,$04,$05,$06,$07
		.BYTE $40,$41,$42,$43,$44,$45,$46,$47
		.BYTE $80,$81,$82,$83,$84,$85,$86,$87
		.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7
		.BYTE $00,$01,$02,$03,$04,$05,$06,$07

HOR_SCR_POS
		.BYTE $00,$00,$00,$00,$08,$08,$08,$08
        .BYTE $10,$10,$10,$10,$18,$18,$18,$18
        .BYTE $20,$20,$20,$20,$28,$28,$28,$28
        .BYTE $30,$30,$30,$30,$38,$38,$38,$38
        .BYTE $40,$40,$40,$40,$48,$48,$48,$48
        .BYTE $50,$50,$50,$50,$58,$58,$58,$58
        .BYTE $60,$60,$60,$60,$68,$68,$68,$68
        .BYTE $70,$70,$70,$70,$78,$78,$78,$78
        .BYTE $80,$80,$80,$80,$88,$88,$88,$88
        .BYTE $90,$90,$90,$90,$98,$98,$98,$98
        .BYTE $A0,$A0,$A0,$A0,$A8,$A8,$A8,$A8
        .BYTE $B0,$B0,$B0,$B0,$B8,$B8,$B8,$B8
        .BYTE $C0,$C0,$C0,$C0,$C8,$C8,$C8,$C8
        .BYTE $D0,$D0,$D0,$D0,$D8,$D8,$D8,$D8
        .BYTE $E0,$E0,$E0,$E0,$E8,$E8,$E8,$E8
        .BYTE $F0,$F0,$F0,$F0,$F8,$F8,$F8,$F8

LINE_DRAW_PTR_LO   .BYTE <LINE_DRAW_0,<LINE_DRAW_1,<LINE_DRAW_2,<LINE_DRAW_3,<LINE_DRAW_4,<LINE_DRAW_5,<LINE_DRAW_6,<LINE_DRAW_7 
LINE_DRAW_PTR_HI   .BYTE >LINE_DRAW_0,>LINE_DRAW_1,>LINE_DRAW_2,>LINE_DRAW_3,>LINE_DRAW_4,>LINE_DRAW_5,>LINE_DRAW_6,>LINE_DRAW_7 
LINE_DRAW_CONV_PTR .BYTE $00,$07,$03,$04,$01,$06,$02,$05

PERS_HOR_EDGE   .BYTE CLIP_RIGHT,CLIP_RIGHT,$00,$00,$00,$00,CLIP_RIGHT,CLIP_RIGHT	; right or left edge of screen todo?
PERS_VER_EDGE   .BYTE CLIP_BOTTOM,CLIP_BOTTOM,CLIP_BOTTOM,CLIP_BOTTOM,$00,$00,$00,$00	; bottom or top of screen todo?
fBBE8   .BYTE $40,$38,$08,$00,$40,$38,$28,$30
		.BYTE $40,$18,$08,$10,$40,$18,$28,$20
fBBF8   .BYTE $00,$00,$03,$00,$00,$00,$02,$02
		.BYTE $00,$00,$00,$06,$04,$00,$00,$04
		.BYTE $0C,$00,$00,$00,$08,$08,$00,$00
		.BYTE $00,$09,$00,$00,$00,$01,$01,$00	
fBC18   .BYTE $01,$00,$00,$00,$01,$01,$00,$00
		.BYTE $00,$01,$00,$00,$00,$01,$01,$00
		.BYTE $00,$00,$01,$00,$00,$00,$01,$01
		.BYTE $00,$00,$00,$01,$01,$00,$00,$01

SCREEN0 = $4000
SCREEN_COLOUR =  $5C00
SCREEN1 = $6000
