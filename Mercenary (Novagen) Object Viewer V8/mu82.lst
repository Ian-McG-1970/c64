
;6502/65C02/65816/CPU64/DTV Turbo Assembler V1.47 listing file of "mu82.tas"
;done on Tue Nov 29 21:05:14 2022

=0002					SCREEN_POS_LO = $02

=0003					SCREEN_POS_HI = $03

=0024					SCREEN_FLIP = $24

=0025					SCREEN_BANK = $25

=0066					LINE_INC = $66

=0002					SCREEN_POS_PTR = $02

=0040					SCREEN_0 = $40

=0060					SCREEN_1 = $60

=0052					X_POS_HI = $52

=0053					X_POS_LO = $53

=0054					Y_POS_HI = $54

=0055					Y_POS_LO = $55

=0056					Z_POS_HI = $56

=0057					Z_POS_LO = $57

=00b8					OBJECT_TO_DRAW = $B8

=0004					LINE_JUMP_PTR_LO = $04

=0005					LINE_JUMP_PTR_HI = $05

=0006					ab06 = $06 ; math temp?

=0007					ab07 = $07 ; math temp?

=0008					LINE_FRACTION_ab08 = $08

=0008					ab08 = $08 ; math temp? line draw fraction?

=0009					ab09 = $09 ; math temp?

=0008					Z_ROT_LO = $08 ; math temp?

=0009					Z_ROT_HI = $09 

=000a					ab0A = $0A ; math temp?

=000a					X_ROT_LO = $0A ; math temp?

=000b					ab0B = $0B ; math temp?

=000b					X_ROT_HI = $0B ; math temp?

=000c					ab0C = $0C ; math temp?

=000d					ab0D = $0D ; math temp?

=0018					ab18 = $18 ; math temp?

=0019					POINT_LINE_COUNT = $19

=000e					REGA = $0E

=000f					REGX = $0F

=0020					REGY = $20

=0018					FOCUS = $18

=0022					FP_MULTIPLY_LO = $22

=0023					FP_MULTIPLY_HI = $23

=0022					FP_DIVIDE_LO = FP_MULTIPLY_LO

=0023					FP_DIVIDE_HI = FP_MULTIPLY_HI

=002c					ROT_LO = $2C

=002d					ROT_HI = $2D

=003c					SIN_LO = $3C

=003d					SIN_HI = $3D

=003e					COS_LO = $3E

=003f					COS_HI = $3F

=0058					X_ROTATION_LO = $58

=0059					X_ROTATION_HI = $59

=005a					Y_ROTATION_LO = $5A

=005b					Y_ROTATION_HI = $5B

=005c					Z_ROTATION_LO = $5C

=005d					Z_ROTATION_HI = $5D

=005e					ab5E = $5E	; pers?

=005f					ab5F = $5F	; pers?

=0060					ab60 = $60	; pers?

=0061					ab61 = $61	; pers?

=0062					ab62 = $62	; pers?

=0063					ab63 = $63	; pers?

=0064					ab64 = $64	; pers?

=0065					ab65 = $65	; pers?

=0067					LINE_TYPE_POINTER = $67 ; line type?

=0068					ab68 = $68

=0069					ab69 = $69

=006a					LINE_START_HOR = $6A ; line start x?

=006b					LINE_START_VER = $6B ; line start y?

=006c					ab6C = $6C	; pers?

=006d					ab6D = $6D  ; pers?

=006e					POINT_CLASSIFY_1 = $6E	; start point classification of this point?

=006f					POINT_CLASSIFY_2 = $6F  ; end point classification

=0072					CURR_X_LSB = $72

=0073					CURR_X_MSB = $73

=0074					CURR_X_HSB = $74

=0075					CURR_Y_LSB = $75

=0076					CURR_Y_MSB = $76

=0077					CURR_Y_HSB = $77

=0078					CURR_Z_LSB = $78

=0079					CURR_Z_MSB = $79

=007a					CURR_Z_HSB = $7A

=0080					JOYSTICK_MOVEMENT = $80

=0050					SCR_HOR_MID = 160/2

=0044					SCR_VER_MID = 136/2

=0090					ab90 = $90

=0091					ab91 = $91

=0092					ab92 = $92

=0093					ab93 = $93

=0094					ab94 = $94

=0095					ab95 = $95

=0096					ab96 = $96

=0097					ab97 = $97

=00aa					SPEED_LO = $AA

=00ab					SPEED_HI = $AB

=00ac					ROT_SPD = $AC

=00ad					OBJECT_POINTER_POS = $AD

=00af					CURRENT_OBJECT = $AF

=00b0					NUMBER_OF_POINTS = $B0

=00b2					DRAW_OBJECT_COUNT = $B2

=00b3					DRAW_OBJECT_COUNTER = $B3

=00c7					VIC_SCREEN_BANK = $C7

=00cf					OBJ_PNT_X 		= $CF

=00d0					OBJ_PNT_X_MSB 	= $D0

=00d1					OBJ_PNT_Y 		= $D1

=00d2					OBJ_PNT_Y_MSB 	= $D2

=00d3					OBJ_PNT_Z 		= $D3

=00d4					OBJ_PNT_Z_MSB 	= $D4

=00d5					DIFF_X_LSB = $D5

=00d6					DIFF_X_MSB = $D6

=00d7					DIFF_X_HSB = $D7

=00d8					DIFF_Y_LSB = $D8

=00d9					DIFF_Y_MSB = $D9

=00da					DIFF_Y_HSB = $DA

=00db					DIFF_Z_LSB = $DB

=00dc					DIFF_Z_MSB = $DC

=00dd					DIFF_Z_HSB = $DD

=001d					OBJECT_POINTER = $1D

=fffe					IRQ = $FFFE

=0004					LINE_JUMP_PTR = LINE_JUMP_PTR_LO

=0088					CLIP_TEST_BOTTOM = $88

=0087					CLIP_BOTTOM = $87

=00a0					CLIP_TEST_RIGHT = $A0 ; $80

=009f					CLIP_RIGHT = $9F ; $7F

=0000					CLIP_TEST_TOP = $00

=0000					CLIP_TEST_LEFT = $00

=0001					PNT_OFF_RIGHT = $01

=0000					PNT_OFF_LEFT = 0

=0000					PNT_BEHIND = 0

=0000					PNT_ONSCREEN = 0

=0002					PNT_OFF_BOTTOM = $02

=0000					PNT_OFF_TOP = 0

.0801					startup

.0801	 78		sei			SEI

.0802	 a9 00		lda #$00	 LDA #$00

.0804	 8d 20 d0	sta $d020	 STA $D020

.0807	 a9 01		lda #$01	 LDA #$01 ; $00

.0809	 8d 21 d0	sta $d021	 STA $D021

.080c	 a9 0b		lda #$0b	 LDA #$0B ; $00

.080e	 8d 22 d0	sta $d022	 STA $D022

.0811	 a9 0c		lda #$0c	 LDA #$0C ; $00

.0813	 8d 23 d0	sta $d023	 STA $D023

.0816	 a9 00		lda #$00	 LDA #$00 ; $01 ; colour 11 

.0818	 a2 00		ldx #$00	 LDX #<$D800

.081a	 a0 d8		ldy #$d8	 LDY #>$D800

.081c	 86 02		stx $02		 STX SCREEN_POS_LO+0

.081e	 84 03		sty $03		 STY SCREEN_POS_LO+1

.0820	 a2 03		ldx #$03	 LDX #>1000 

.0822	 a0 e8		ldy #$e8	 LDY #<1000

.0824	 20 cf 09	jsr $09cf	 JSR MEMSET

.0827	 a9 bc		lda #$bc	 LDA #$BC ;$65 ; colour 01 (0000????) and colour 10 (????0000) - bank 1

.0829	 a2 00		ldx #$00	 LDX #<(SCREEN_COLOUR)

.082b	 a0 5c		ldy #$5c	 LDY #>(SCREEN_COLOUR)

.082d	 86 02		stx $02		 STX SCREEN_POS_LO+0

.082f	 84 03		sty $03		 STY SCREEN_POS_LO+1

.0831	 a2 03		ldx #$03	 LDX #>1000 

.0833	 a0 e8		ldy #$e8	 LDY #<1000

.0835	 20 cf 09	jsr $09cf	 JSR MEMSET

.0838	 a9 35		lda #$35		LDA #$35

.083a	 85 01		sta $01			STA $1

.083c	 a9 70		lda #$70		LDA #$70

.083e	 8d 18 d0	sta $d018		STA $D018

.0841	 a9 3b		lda #$3b		LDA #$3B

.0843	 8d 11 d0	sta $d011		STA $D011

.0846	 a9 00		lda #$00		LDA #$00 

.0848	 8d 21 d0	sta $d021		STA $D021

.084b	 a9 18		lda #$18		LDA #$18

.084d	 8d 16 d0	sta $d016		STA $D016

.0850	 a9 7e		lda #$7e		LDA #<pBA1E

.0852	 8d fe ff	sta $fffe		STA $FFFE

.0855	 a9 09		lda #$09		LDA #>pBA1E

.0857	 8d ff ff	sta $ffff		STA $FFFF

.085a	 a9 7f		lda #$7f	 LDA #$7F

.085c	 8d 0d dc	sta $dc0d	 STA $DC0D  ; disable timer interrupts which can be generated by the two CIA chips

.085f	 8d 0d dd	sta $dd0d	 STA $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

.0862	 ad 0d dc	lda $dc0d	 LDA $DC0D  ; by reading this two registers we negate any pending CIA irqs.

.0865	 ad 0d dd	lda $dd0d	 LDA $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

.0868	 a9 01		lda #$01	  LDA #$01   ; this is how to tell the VICII to generate a raster interrupt

.086a	 8d 1a d0	sta $d01a	 STA $D01A

.086d	 a9 02		lda #$02	 LDA #2 ; SCRNBANK

.086f	 8d 00 dd	sta $dd00	 STA $DD00 ; bank

.0872	 a9 ba		lda #$ba		LDA #$BA

.0874	 8d 12 d0	sta $d012		STA $D012

.0877	 a9 01		lda #$01		LDA #$01

.0879	 8d 19 d0	sta $d019		STA $D019

.087c	 a9 07		lda #$07		LDA		#7

.087e	 85 ac		sta $ac			STA		ROT_SPD

.0880	 a9 40		lda #$40		LDA		#$40

.0882	 85 aa		sta $aa			STA		SPEED_LO

.0884	 a9 18		lda #$18		LDA		#$18

.0886	 85 ab		sta $ab			STA		SPEED_HI

.0888	 a9 07		lda #$07		LDA		#7

.088a	 85 b2		sta $b2			STA		DRAW_OBJECT_COUNT

.088c	 a9 00		lda #$00		LDA		#0

.088e	 85 2c		sta $2c			STA		ROT_LO

.0890	 85 2d		sta $2d			STA		ROT_HI

.0892	 85 73		sta $73			STA		CURR_X_MSB

.0894	 85 74		sta $74			STA		CURR_X_HSB

.0896	 85 76		sta $76			STA		CURR_Y_MSB

.0898	 85 77		sta $77			STA		CURR_Y_HSB

.089a	 85 79		sta $79			STA		CURR_Z_MSB

.089c	 85 7a		sta $7a			STA		CURR_Z_HSB

.089e	 a9 80		lda #$80		LDA		#$80

.08a0	 85 75		sta $75			STA		CURR_Y_LSB

.08a2	 58		cli			CLI

.08a3	 20 a8 11	jsr $11a8	MAIN_LOOP   JSR SIN_COS

.08a6	 20 32 15	jsr $1532				JSR DRAW_SCREEN

.08a9	 20 f1 14	jsr $14f1				JSR COLOUR_SETUP_WHITE ; BLACK

.08ac	 20 42 0c	jsr $0c42				JSR DRAW_OBJECTS

.08af	 20 54 16	jsr $1654				JSR READ_JOYSTICK_KEYBOARD

.08b2	 20 10 11	jsr $1110				JSR MOVEMENT

.08b5	 a6 73		ldx $73					LDX CURR_X_MSB

.08b7	 a5 74		lda $74					LDA CURR_X_HSB

.08b9	 a0 00		ldy #$00				LDY	#0

.08bb	 20 94 16	jsr $1694				JSR	HEX16

.08be	 a5 72		lda $72					LDA CURR_X_LSB

.08c0	 a2 20		ldx #$20				LDX #32

.08c2	 a0 00		ldy #$00				LDY	#0

.08c4	 20 a7 16	jsr $16a7				JSR	HEX8

.08c7	 a6 76		ldx $76					LDX CURR_Y_MSB

.08c9	 a5 77		lda $77					LDA CURR_Y_HSB

.08cb	 a0 06		ldy #$06				LDY	#6

.08cd	 20 94 16	jsr $1694				JSR	HEX16

.08d0	 a5 75		lda $75					LDA CURR_Y_LSB

.08d2	 a2 20		ldx #$20				LDX #32

.08d4	 a0 06		ldy #$06				LDY	#6

.08d6	 20 a7 16	jsr $16a7				JSR	HEX8

.08d9	 a6 79		ldx $79					LDX CURR_Z_MSB

.08db	 a5 7a		lda $7a					LDA CURR_Z_HSB

.08dd	 a0 0c		ldy #$0c				LDY	#12

.08df	 20 94 16	jsr $1694				JSR	HEX16

.08e2	 a5 78		lda $78					LDA CURR_Z_LSB

.08e4	 a2 20		ldx #$20				LDX #32

.08e6	 a0 0c		ldy #$0c				LDY	#12

.08e8	 20 a7 16	jsr $16a7				JSR	HEX8

.08eb	 a5 90		lda $90					LDA ab90

.08ed	 a2 00		ldx #$00				LDX #0

.08ef	 a0 24		ldy #$24				LDY	#36

.08f1	 20 a7 16	jsr $16a7				JSR	HEX8

.08f4	 a5 91		lda $91					LDA ab91

.08f6	 a2 18		ldx #$18				LDX #24

.08f8	 a0 24		ldy #$24				LDY	#36

.08fa	 20 a7 16	jsr $16a7				JSR	HEX8

.08fd	 a5 92		lda $92					LDA ab92

.08ff	 a2 30		ldx #$30				LDX #48

.0901	 a0 24		ldy #$24				LDY	#36

.0903	 20 a7 16	jsr $16a7				JSR	HEX8

.0906	 a5 93		lda $93					LDA ab93

.0908	 a2 48		ldx #$48				LDX #72

.090a	 a0 24		ldy #$24				LDY	#36

.090c	 20 a7 16	jsr $16a7				JSR	HEX8

.090f	 a5 94		lda $94					LDA ab94

.0911	 a2 60		ldx #$60				LDX #96

.0913	 a0 24		ldy #$24				LDY	#36

.0915	 20 a7 16	jsr $16a7				JSR	HEX8

.0918	 a5 95		lda $95					LDA ab95

.091a	 a2 78		ldx #$78				LDX #120

.091c	 a0 24		ldy #$24				LDY	#36

.091e	 20 a7 16	jsr $16a7				JSR	HEX8

.0921	 a5 96		lda $96					LDA ab96

.0923	 a2 90		ldx #$90				LDX #144

.0925	 a0 24		ldy #$24				LDY	#36

.0927	 20 a7 16	jsr $16a7				JSR	HEX8

.092a	 a5 97		lda $97					LDA ab97

.092c	 a2 a8		ldx #$a8				LDX #168

.092e	 a0 24		ldy #$24				LDY	#36

.0930	 20 a7 16	jsr $16a7				JSR	HEX8

.0933	 a5 5e		lda $5e					LDA ab5E

.0935	 a2 00		ldx #$00				LDX #0

.0937	 a0 2a		ldy #$2a				LDY	#42

.0939	 20 a7 16	jsr $16a7				JSR	HEX8

.093c	 a5 5f		lda $5f					LDA ab5F

.093e	 a2 18		ldx #$18				LDX #24

.0940	 a0 2a		ldy #$2a				LDY	#42

.0942	 20 a7 16	jsr $16a7				JSR	HEX8

.0945	 a5 60		lda $60					LDA ab60

.0947	 a2 30		ldx #$30				LDX #48

.0949	 a0 2a		ldy #$2a				LDY	#42

.094b	 20 a7 16	jsr $16a7				JSR	HEX8

.094e	 a5 61		lda $61					LDA ab61

.0950	 a2 48		ldx #$48				LDX #72

.0952	 a0 2a		ldy #$2a				LDY	#42

.0954	 20 a7 16	jsr $16a7				JSR	HEX8

.0957	 a5 62		lda $62					LDA ab62

.0959	 a2 60		ldx #$60				LDX #96

.095b	 a0 2a		ldy #$2a				LDY	#42

.095d	 20 a7 16	jsr $16a7				JSR	HEX8

.0960	 a5 63		lda $63					LDA ab63

.0962	 a2 78		ldx #$78				LDX #120

.0964	 a0 2a		ldy #$2a				LDY	#42

.0966	 20 a7 16	jsr $16a7				JSR	HEX8

.0969	 a5 64		lda $64					LDA ab64

.096b	 a2 90		ldx #$90				LDX #144

.096d	 a0 2a		ldy #$2a				LDY	#42

.096f	 20 a7 16	jsr $16a7				JSR	HEX8

.0972	 a5 65		lda $65					LDA ab65

.0974	 a2 a8		ldx #$a8				LDX #168

.0976	 a0 2a		ldy #$2a				LDY	#42

.0978	 20 a7 16	jsr $16a7				JSR	HEX8

.097b	 4c a3 08	jmp $08a3				JMP MAIN_LOOP

.097e	 48		pha		pBA1E   PHA

.097f	 a9 a9		lda #$a9	        LDA #<pB9BB

.0981	 8d fe ff	sta $fffe	        STA IRQ   	;IRQ

.0984	 a9 09		lda #$09	        LDA #>pB9BB

.0986	 8d ff ff	sta $ffff	        STA IRQ+1   ;IRQ

.0989	 a9 00		lda #$00	        LDA #$00

.098b	 8d 12 d0	sta $d012	        STA $D012	;Raster Position

.098e	 a9 01		lda #$01	        LDA #$01

.0990	 8d 19 d0	sta $d019	        STA $D019   ;VIC Interrupt Request Register (IRR)

.0993	 a9 7e		lda #$7e	        LDA #$7E

.0995	 8d 18 d0	sta $d018	        STA $D018   ;VIC Memory Control Register

.0998	 a9 1b		lda #$1b	        LDA #$1B

.099a	 8d 11 d0	sta $d011	        STA $D011   ;VIC Control Register 1

.099d	 a9 01		lda #$01	        LDA #$01

.099f	 8d 21 d0	sta $d021	        STA $D021   ;Background Color 0

.09a2	 a9 08		lda #$08	        LDA #$08

.09a4	 8d 16 d0	sta $d016	        STA $D016   ;VIC Control Register 2

.09a7	 68		pla		        PLA 

.09a8	 40		rti		NMI_NOP	RTI ; This is the irq handler for the NMI. Just returns without acknowledge. This prevents subsequent NMI's from interfering.

.09a9	 48		pha		pB9BB  	PHA

.09aa	 a5 c7		lda $c7		        LDA VIC_SCREEN_BANK

.09ac	 8d 18 d0	sta $d018	        STA $D018    ;VIC Memory Control Register

.09af	 a9 3b		lda #$3b			LDA #$3B

.09b1	 8d 11 d0	sta $d011	        STA $D011    ;VIC Control Register 1

.09b4	 a9 18		lda #$18	        LDA #$18

.09b6	 8d 16 d0	sta $d016			STA $D016    ;VIC Control Register 2

.09b9	 a9 7e		lda #$7e	        LDA #<pBA1E

.09bb	 8d fe ff	sta $fffe	        STA IRQ   ;IRQ

.09be	 a9 09		lda #$09	        LDA #>pBA1E

.09c0	 8d ff ff	sta $ffff	        STA IRQ+1   ;IRQ

.09c3	 a9 ba		lda #$ba	        LDA #$BA

.09c5	 8d 12 d0	sta $d012	        STA $D012    ;Raster Position

.09c8	 a9 01		lda #$01	        LDA #$01

.09ca	 8d 19 d0	sta $d019	        STA $D019    ;VIC Interrupt Request Register (IRR)

.09cd	 68		pla		        PLA 

.09ce	 40		rti		        RTI

.09cf	 8c e3 09	sty $09e3	MEMSET       STY    LSB_ONLY+1 ; store LSB count

.09d2	 e0 00		cpx #$00	             CPX    #0          ; MSB?     

.09d4	 f0 0c		beq $09e2	             BEQ    LSB_ONLY   ; no

.09d6	 a0 00		ldy #$00	             LDY    #0          ; yes so reset LSB

.09d8					msb_loop
.09d8	 91 02		sta ($02),y	LSB_LOOP      STA    (SCREEN_POS_LO),Y   ; clear whole MSB

.09da	 88		dey		               DEY 

.09db	 d0 fb		bne $09d8	               BNE    LSB_LOOP

.09dd	 e6 03		inc $03		              INC    SCREEN_POS_LO+1      ; inc MSB

.09df	 ca		dex		              DEX               ; dec MSB count

.09e0	 d0 f6		bne $09d8	              BNE    MSB_LOOP

.09e2	 a0 00		ldy #$00	LSB_ONLY    LDY    #0          ; LSB count 

.09e4	 f0 07		beq $09ed	             BEQ    MS_END

.09e6	 91 02		sta ($02),y	LAST_LSB_LOOP STA   (SCREEN_POS_LO),Y

.09e8	 88		dey		               DEY 

.09e9	 d0 fb		bne $09e6	               BNE   LAST_LSB_LOOP               

.09eb	 91 02		sta ($02),y	              STA   (SCREEN_POS_LO),Y     ; clear last Y (0)

.09ed	 60		rts		MS_END      RTS

.09ee	 85 23		sta $23		FP_DIVIDE	STA		FP_DIVIDE_HI	; inputs = X-(LO) + Y-(HI) + A (HI) + FP_MULTILPLY_LO - outputs = AY

.09f0	 b9 00 21	lda $2100,y				LDA 	LOG_TABLE,Y

.09f3	 a4 22		ldy $22					LDY 	FP_DIVIDE_LO

.09f5	 38		sec					SEC 

.09f6	 f9 00 21	sbc $2100,y				SBC 	LOG_TABLE,Y

.09f9	 a8		tay					TAY

.09fa	 8a		txa					TXA

.09fb	 09 02		ora #$02				ORA 	#$02

.09fd	 b0 03		bcs $0a02				BCS 	_FP_DIV_CNT

.09ff	 e9 03		sbc #$03						SBC 	#$03

.0a01	 38		sec							SEC 

.0a02	 e5 23		sbc $23		_FP_DIV_CNT SBC 	FP_DIVIDE_HI

.0a04	 29 fd		and #$fd				AND 	#$FD

.0a06	 be 00 22	ldx $2200,y				LDX 	EXP_TABLE,Y

.0a09	 60		rts					RTS

.0a0a	 85 23		sta $23		FP_MULTIPLY	STA		FP_MULTIPLY_HI	; inputs = X-(LO) + Y-(HI) + A (HI) + FP_MULTILPLY_LO - outputs = AY

.0a0c	 bd 00 21	lda $2100,x				LDA 	LOG_TABLE,X		

.0a0f	 a6 22		ldx $22					LDX 	FP_MULTIPLY_LO

.0a11	 18		clc					CLC 

.0a12	 7d 00 21	adc $2100,x				ADC 	LOG_TABLE,X

.0a15	 aa		tax					TAX 

.0a16	 98		tya					TYA 

.0a17	 90 03		bcc $0a1c				BCC 	_FP_MUL_CNT

.0a19	 69 03		adc #$03						ADC 	#$03

.0a1b	 18		clc							CLC 

.0a1c	 65 23		adc $23		_FP_MUL_CNT	ADC 	FP_MULTIPLY_HI

.0a1e	 29 fd		and #$fd				AND 	#$FD

.0a20	 bc 00 22	ldy $2200,x				LDY 	EXP_TABLE,X

.0a23	 60		rts					RTS 

.0a24	 bd 00 21	lda $2100,x	FPMUL		LDA LOG_TABLE,X		; fpMul - ; Input:  [08] = fp multiplier ;         XY   = fp multiplicand ; Output: [08] and XY = result

.0a27	 a6 08		ldx $08					LDX ab08

.0a29	 18		clc					CLC 

.0a2a	 7d 00 21	adc $2100,x				ADC LOG_TABLE,X

.0a2d	 aa		tax					TAX 

.0a2e	 98		tya					TYA 

.0a2f	 90 03		bcc $0a34				BCC _PF_MUL_CNT

.0a31	 69 03		adc #$03					ADC #$03

.0a33	 18		clc						CLC 

.0a34	 65 09		adc $09		_PF_MUL_CNT   	ADC ab09

.0a36	 70 0c		bvs $0a44				BVS MATH_LIMIT 

.0a38	 29 fd		and #$fd				AND #$FD

.0a3a	 85 09		sta $09					STA ab09

.0a3c	 a8		tay					TAY 

.0a3d	 bd 00 22	lda $2200,x				LDA EXP_TABLE,X

.0a40	 aa		tax					TAX 

.0a41	 85 08		sta $08					STA ab08

.0a43	 60		rts					RTS 

.0a44	 10 0c		bpl $0a52	MATH_LIMIT	BPL _MATH_LIMIT_POS

.0a46	 29 01		and #$01				AND #$01

.0a48	 09 78		ora #$78				ORA #$78

.0a4a	 a8		tay					TAY 

.0a4b	 a2 00		ldx #$00				LDX #$00

.0a4d	 86 08		stx $08					STX ab08

.0a4f	 84 09		sty $09					STY ab09

.0a51	 60		rts					RTS 

.0a52	 29 01		and #$01	_MATH_LIMIT_POS	AND #$01

.0a54	 09 84		ora #$84					ORA #$84

.0a56	 a8		tay		MATH_LIMIT_EXIT	TAY 

.0a57	 a2 00		ldx #$00					LDX #$00

.0a59	 86 08		stx $08						STX ab08

.0a5b	 84 09		sty $09						STY ab09

.0a5d	 60		rts						RTS 

.0a5e	 84 06		sty $06		FPDIV	STY 	ab06	 ; fpDiv - Input:  [08] = fp divisor - XY   = fp dividend - Output: [08] and XY = result

.0a60	 a4 08		ldy $08		        LDY 	ab08

.0a62	 b9 00 21	lda $2100,y	        LDA 	LOG_TABLE,Y

.0a65	 38		sec		        SEC 

.0a66	 fd 00 21	sbc $2100,x	        SBC 	LOG_TABLE,X

.0a69	 aa		tax		        TAX 

.0a6a	 a5 09		lda $09		        LDA 	ab09

.0a6c	 09 02		ora #$02	        ORA 	#$02

.0a6e	 b0 03		bcs $0a73	        BCS 	b8349

.0a70	 e9 03		sbc #$03				SBC 	#$03

.0a72	 38		sec					SEC 

.0a73	 e5 06		sbc $06		b8349   SBC 	ab06

.0a75	 70 cd		bvs $0a44	        BVS 	MATH_LIMIT 

.0a77	 29 fd		and #$fd	        AND 	#$FD

.0a79	 85 09		sta $09		        STA 	ab09

.0a7b	 a8		tay		        TAY 

.0a7c	 bd 00 22	lda $2200,x	        LDA 	EXP_TABLE,X

.0a7f	 aa		tax		        TAX 

.0a80	 85 08		sta $08		        STA 	ab08

.0a82	 60		rts		        RTS 

.0a83	 a5 18		lda $18		FPADD_CONT	LDA		ab18	; ($838B entry point)  

.0a85	 4a		lsr					LSR 

.0a86	 b0 15		bcs $0a9d				BCS 	b8373

.0a88	 8a		txa		        TXA 

.0a89	 65 08		adc $08		        ADC 	ab08

.0a8b	 6a		ror		        ROR 

.0a8c	 c8		iny		        INY 

.0a8d	 c8		iny		        INY 

.0a8e	 c8		iny		        INY 

.0a8f	 c8		iny		        INY 

.0a90	 aa		tax		        TAX 

.0a91	 85 08		sta $08		        STA 	ab08

.0a93	 84 09		sty $09		        STY 	ab09

.0a95	 60		rts		        RTS 

.0a96	 98		tya		b836C   TYA 

.0a97	 0a		asl		        ASL 

.0a98	 90 5c		bcc $0af6	        BCC 	b83CC

.0a9a	 4c 43 0b	jmp $0b43	        JMP 	j8419

.0a9d	 8a		txa		b8373   TXA 

.0a9e	 e5 08		sbc $08		        SBC 	ab08

.0aa0	 f0 0b		beq $0aad	        BEQ 	b8383

.0aa2	 b0 5b		bcs $0aff				BCS 	b83D5

.0aa4	 a4 09		ldy $09					LDY 	ab09

.0aa6	 49 ff		eor #$ff				EOR 	#$FF

.0aa8	 69 01		adc #$01				ADC 	#$01

.0aaa	 4c ff 0a	jmp $0aff				JMP 	b83D5

.0aad	 98		tya		b8383   TYA 

.0aae	 38		sec		        SEC 

.0aaf	 e9 24		sbc #$24	        SBC 	#$24

.0ab1	 70 9f		bvs $0a52			BVS 	_MATH_LIMIT_POS

.0ab3	 50 a1		bvc $0a56				BVC 	MATH_LIMIT_EXIT

.0ab5	 98		tya		FP_ADD  TYA			; XY + 89

.0ab6	 38		sec		        SEC 

.0ab7	 e5 09		sbc $09		        SBC 	ab09

.0ab9	 70 db		bvs $0a96	        BVS 	b836C

.0abb	 85 18		sta $18		        STA 	ab18

.0abd	 69 01		adc #$01	        ADC 	#$01

.0abf	 70 d5		bvs $0a96	        BVS 	b836C

.0ac1	 30 5c		bmi $0b1f	        BMI 	b83F5

.0ac3	 4a		lsr		        LSR 

.0ac4	 4a		lsr		        LSR 

.0ac5	 f0 bc		beq $0a83	        BEQ 	FPADD_CONT

.0ac7	 c9 09		cmp #$09	        CMP 	#$09

.0ac9	 b0 2b		bcs $0af6	        BCS 	b83CC

.0acb	 49 0f		eor #$0f	        EOR 	#$0F

.0acd	 8d d5 0a	sta $0ad5	        STA 	ab83AB +1

.0ad0	 a5 08		lda $08		        LDA		ab08

.0ad2	 38		sec		        SEC 

.0ad3	 6a		ror		        ROR 

.0ad4	 d0 07		bne $0add	ab83AB 	BNE		b83B3 	; self modifiction code shift

.0ad6	 ea		nop		        NOP 

.0ad7	 ea		nop		        NOP 

.0ad8	 ea		nop		        NOP 

.0ad9	 ea		nop		        NOP 

.0ada	 ea		nop		        NOP 

.0adb	 ea		nop		        NOP 

.0adc	 ea		nop		        NOP 

.0add	 4a		lsr		b83B3   LSR 

.0ade	 4a		lsr		        LSR 

.0adf	 4a		lsr		        LSR 

.0ae0	 4a		lsr		        LSR 

.0ae1	 4a		lsr		        LSR 

.0ae2	 4a		lsr		        LSR 

.0ae3	 4a		lsr		        LSR 

.0ae4	 85 06		sta $06		        STA 	ab06

.0ae6	 a5 18		lda $18		        LDA 	ab18

.0ae8	 4a		lsr		        LSR 

.0ae9	 8a		txa		        TXA 

.0aea	 b0 0f		bcs $0afb	        BCS 	b83D1

.0aec	 65 06		adc $06		b83C2   ADC 	ab06

.0aee	 90 05		bcc $0af5	        BCC 	b83CB

.0af0	 4a		lsr		        LSR 

.0af1	 c8		iny		        INY 

.0af2	 c8		iny		        INY 

.0af3	 c8		iny		        INY 

.0af4	 c8		iny		        INY 

.0af5	 aa		tax		b83CB   TAX 

.0af6	 86 08		stx $08		b83CC   STX 	ab08

.0af8	 84 09		sty $09		        STY 	ab09

.0afa	 60		rts		        RTS 

.0afb	 e5 06		sbc $06		b83D1   SBC ab06

.0afd	 b0 f6		bcs $0af5	        BCS b83CB

.0aff	 84 06		sty $06		b83D5   STY ab06

.0b01	 a0 00		ldy #$00	        LDY #$00

.0b03	 0a		asl		b83D9   ASL 

.0b04	 88		dey		        DEY 

.0b05	 90 fc		bcc $0b03	        BCC b83D9

.0b07	 aa		tax		        TAX 

.0b08	 98		tya		        TYA 

.0b09	 0a		asl		        ASL 

.0b0a	 0a		asl		        ASL 

.0b0b	 18		clc		        CLC 

.0b0c	 65 06		adc $06		        ADC ab06

.0b0e	 70 06		bvs $0b16	        BVS b83EC

.0b10	 a8		tay		        TAY 

.0b11	 86 08		stx $08		        STX ab08

.0b13	 84 09		sty $09		        STY ab09

.0b15	 60		rts		        RTS 

.0b16	 a2 2a		ldx #$2a	b83EC   LDX #<p8400

.0b18	 a0 0b		ldy #$0b	        LDY #>p8400

.0b1a	 86 08		stx $08		        STX ab08

.0b1c	 84 09		sty $09		        STY ab09

.0b1e	 60		rts		        RTS 

.0b1f	 c9 e0		cmp #$e0	b83F5   CMP #$E0

.0b21	 90 20		bcc $0b43	        BCC j8419

.0b23	 4a		lsr		        LSR 

.0b24	 4a		lsr		        LSR 

.0b25	 29 07		and #$07	        AND #$07

.0b27	 8d 2e 0b	sta $0b2e	        STA ab8404 +1

.0b2a	 8a		txa		p8400   TXA 

.0b2b	 38		sec		        SEC 

.0b2c	 6a		ror		        ROR 

.0b2d	 d0 03		bne $0b32	ab8404  BNE b8408

.0b2f	 4a		lsr		        LSR 

.0b30	 4a		lsr		        LSR 

.0b31	 4a		lsr		        LSR 

.0b32	 4a		lsr		b8408   LSR 

.0b33	 4a		lsr		        LSR 

.0b34	 4a		lsr		        LSR 

.0b35	 4a		lsr		        LSR 

.0b36	 85 06		sta $06		        STA ab06

.0b38	 a4 09		ldy $09		        LDY ab09

.0b3a	 a5 18		lda $18		        LDA ab18

.0b3c	 4a		lsr		        LSR 

.0b3d	 a5 08		lda $08		        LDA ab08

.0b3f	 90 ab		bcc $0aec	        BCC b83C2

.0b41	 b0 b8		bcs $0afb	        BCS b83D1

.0b43	 a6 08		ldx $08		j8419   LDX ab08

.0b45	 a4 09		ldy $09		        LDY ab09

.0b47	 60		rts		        RTS 

.0b48	 c8		iny		COS_FP	INY 

.0b49	 98		tya		SIN_FP	TYA 

.0b4a	 4a		lsr				LSR 

.0b4b	 90 06		bcc $0b53			BCC b8429

.0b4d	 8a		txa					TXA 

.0b4e	 49 ff		eor #$ff				EOR #$FF

.0b50	 aa		tax					TAX 

.0b51	 98		tya					TYA 

.0b52	 4a		lsr					LSR 

.0b53	 29 01		and #$01	b8429   AND #$01

.0b55	 1d 00 20	ora $2000,x			ORA SIN_MSB,X

.0b58	 a8		tay				TAY 

.0b59	 bd 00 1f	lda $1f00,x			LDA SIN_LSB,X

.0b5c	 aa		tax				TAX 

.0b5d	 60		rts				RTS 

.0b5e	 98		tya		FPTO8BIT	TYA 				; transfer y (floating point position) to a

.0b5f	 30 25		bmi $0b86				BMI		b849F		; if negative

.0b61	 4a		lsr					LSR 				; divide and remove first bit

.0b62	 4a		lsr					LSR 				; divide and remove second bit

.0b63	 c9 07		cmp #$07				CMP 	#$07		; is it greater than 7

.0b65	 b0 26		bcs $0b8d				BCS 	b84A6		; yes so error so exit with carry set

.0b67	 8d 6e 0b	sta $0b6e				STA 	ab8487+1	; no so self modifying code to jump forward a number of divides

.0b6a	 8a		txa					TXA 				; transfer x (actual number) to a

.0b6b	 38		sec					SEC 				; set carry

.0b6c	 6a		ror					ROR 				; /2 - putting 1 in top bit (and putting 0 in carry?) 

.0b6d	 d0 04		bne $0b73	ab8487  	BNE 	b848C		; jump forward self modifying code - always done as carry is set so ROR result is never 0

.0b6f	 4a		lsr					LSR 				; /2

.0b70	 4a		lsr					LSR 				; /4

.0b71	 4a		lsr					LSR 				; /8

.0b72	 4a		lsr					LSR 				; /16

.0b73	 4a		lsr		b848C   	LSR 				; /32

.0b74	 4a		lsr					LSR 				; /64

.0b75	 4a		lsr					LSR 				; /128

.0b76	 69 00		adc #$00	b848F   	ADC 	#$00		; add carry?

.0b78	 30 12		bmi $0b8c				BMI 	b84A5		; if minus then error?

.0b7a	 aa		tax					TAX 				; backup result

.0b7b	 98		tya					TYA 				; transfer y to a

.0b7c	 4a		lsr					LSR					; / 2

.0b7d	 8a		txa					TXA 				; restore result

.0b7e	 90 05		bcc $0b85				BCC 	b849E		; clear carry so ok?

.0b80	 49 ff		eor #$ff					EOR 	#$FF	; negate?

.0b82	 69 00		adc #$00					ADC 	#$00	; negete by adding carry that is already set?

.0b84	 18		clc						CLC 			; clear carry for ok?

.0b85	 60		rts		b849E   	RTS 				; exit

.0b86	 c9 fc		cmp #$fc	b849F   	CMP 	#$FC		; sets the carry flag if greater than (11111100 binary)

.0b88	 a9 00		lda #$00				LDA 	#$00		; resets the output x value? 

.0b8a	 f0 ea		beq $0b76				BEQ 	b848F		; jump back into code

.0b8c	 38		sec		b84A5   	SEC 				; set carry for error?

.0b8d	 60		rts		b84A6   	RTS 				; exit

.0b8e	 98		tya		FPTO16BIT	TYA					; input X/Y - output X=HI/Y=LO	; get input (exponent?)

.0b8f	 30 57		bmi $0be8				BMI 	b8501 		; if negative

.0b91	 4a		lsr					LSR 				; ignore bit 1

.0b92	 4a		lsr					LSR 				; ignore bit 2

.0b93	 c9 0f		cmp #$0f				CMP 	#$0F		; compare with 15

.0b95	 b0 f6		bcs $0b8d				BCS 	b84A6		; greater so exit with carry set

.0b97	 85 06		sta $06					STA 	ab06		; store intermediate in temp var

.0b99	 0a		asl					ASL 				; *2

.0b9a	 65 06		adc $06					ADC 	ab06		; *3 

.0b9c	 8d a9 0b	sta $0ba9				STA 	ab84C2 +1	; number of bytes to jump

.0b9f	 a9 00		lda #$00				LDA 	#$00

.0ba1	 85 06		sta $06					STA 	ab06		; clear result

.0ba3	 8a		txa					TXA 				; get input (mantisa?)

.0ba4	 38		sec					SEC 				; set carry to move 1 into result

.0ba5	 6a		ror					ROR 				; rotate carry into high bit and low bit into carry

.0ba6	 66 06		ror $06					ROR 	ab06		; rotate carry into result

.0ba8	 90 0f		bcc $0bb9	ab84C2  	BCC 	b84D2		; jump forward

.0baa	 4a		lsr					LSR 				; half and shift lowest bit into carry  

.0bab	 66 06		ror $06					ROR 	ab06		; half and rotate carry bit into result

.0bad	 4a		lsr					LSR 

.0bae	 66 06		ror $06					ROR 	ab06

.0bb0	 4a		lsr					LSR 

.0bb1	 66 06		ror $06					ROR 	ab06

.0bb3	 4a		lsr					LSR 

.0bb4	 66 06		ror $06					ROR 	ab06

.0bb6	 4a		lsr					LSR 

.0bb7	 66 06		ror $06					ROR 	ab06

.0bb9	 4a		lsr		b84D2   	LSR 

.0bba	 66 06		ror $06					ROR 	ab06

.0bbc	 4a		lsr					LSR 

.0bbd	 66 06		ror $06					ROR 	ab06

.0bbf	 4a		lsr					LSR 

.0bc0	 66 06		ror $06					ROR 	ab06

.0bc2	 4a		lsr					LSR 

.0bc3	 66 06		ror $06					ROR		ab06

.0bc5	 4a		lsr					LSR 

.0bc6	 66 06		ror $06					ROR 	ab06

.0bc8	 4a		lsr					LSR 

.0bc9	 66 06		ror $06					ROR 	ab06

.0bcb	 4a		lsr					LSR 

.0bcc	 66 06		ror $06					ROR 	ab06

.0bce	 4a		lsr					LSR 

.0bcf	 66 06		ror $06					ROR 	ab06

.0bd1	 4a		lsr					LSR 

.0bd2	 66 06		ror $06					ROR 	ab06

.0bd4	 4a		lsr					LSR 

.0bd5	 66 06		ror $06					ROR 	ab06

.0bd7	 aa		tax					TAX 				; store low byte of result?

.0bd8	 98		tya					TYA 				; get input (exponent?)

.0bd9	 a4 06		ldy $06					LDY 	ab06		; store high byte of result?

.0bdb	 4a		lsr					LSR 				; move 1st bit of input into carry

.0bdc	 90 09		bcc $0be7				BCC 	b8500		; set y/n

.0bde	 8a		txa						TXA 			; yes

.0bdf	 49 ff		eor #$ff					EOR 	#$FF	; negate x

.0be1	 aa		tax						TAX 

.0be2	 98		tya						TYA 

.0be3	 49 ff		eor #$ff					EOR 	#$FF	; negate y

.0be5	 a8		tay						TAY 

.0be6	 18		clc						CLC 

.0be7	 60		rts		b8500   RTS 					; no

.0be8	 4a		lsr		b8501 		LSR 				; move 1st bit to carry

.0be9	 90 06		bcc $0bf1				BCC 	b850B		; set y/n

.0beb	 a2 ff		ldx #$ff					LDX 	#$FF	; yes

.0bed	 a0 ff		ldy #$ff					LDY 	#$FF

.0bef	 18		clc						CLC 

.0bf0	 60		rts					RTS 

.0bf1	 a2 00		ldx #$00	b850B   	LDX 	#$00		; no

.0bf3	 a0 00		ldy #$00				LDY 	#$00

.0bf5	 60		rts					RTS 

.0bf6					bit24tofp
.0bf6	 84 07		sty $07				STY	ab07 ; store lsb

.0bf8	 85 06		sta $06				STA ab06 ; store msb

.0bfa	 10 11		bpl $0c0d	        BPL b8527 ; positive ?

.0bfc	 a9 00		lda #$00				LDA #$00 ; negative so 

.0bfe	 38		sec					SEC 

.0bff	 e5 07		sbc $07					SBC ab07 ; negate lsb

.0c01	 85 07		sta $07					STA ab07

.0c03	 8a		txa					TXA 		; negate psb

.0c04	 49 ff		eor #$ff				EOR #$FF

.0c06	 69 00		adc #$00				ADC #$00

.0c08	 aa		tax					TAX 

.0c09	 a9 00		lda #$00				LDA #$00

.0c0b	 e5 06		sbc $06					SBC ab06	; negate msb

.0c0d	 d0 0f		bne $0c1e	b8527   BNE b8538	; if msb not 0

.0c0f	 8a		txa					TXA 		; move psb to a

.0c10	 d0 23		bne $0c35				BNE b854F	; if psb not 0

.0c12	 a5 07		lda $07						LDA ab07	; get lsb

.0c14	 f0 23		beq $0c39					BEQ b8553	; if lsb not 0

.0c16	 a2 00		ldx #$00						LDX #$00

.0c18	 86 07		stx $07							STX ab07

.0c1a	 a2 08		ldx #$08						LDX #$08

.0c1c	 d0 04		bne $0c22						BNE b853C ; jump?

.0c1e	 86 07		stx $07		b8538   STX ab07

.0c20	 a2 18		ldx #$18	        LDX #$18

.0c22	 ca		dex		b853C   	DEX 

.0c23	 06 07		asl $07					ASL ab07 ; *2

.0c25	 2a		rol					ROL 	 ; *2

.0c26	 90 fa		bcc $0c22				BCC b853C

.0c28	 85 08		sta $08		        STA ab08

.0c2a	 8a		txa		        TXA 

.0c2b	 0a		asl		        ASL 

.0c2c	 06 06		asl $06		        ASL ab06

.0c2e	 2a		rol		        ROL 

.0c2f	 aa		tax		        TAX 

.0c30	 86 09		stx $09		        STX ab09

.0c32	 a5 08		lda $08		        LDA ab08

.0c34	 60		rts		        RTS 

.0c35	 a2 10		ldx #$10	b854F   LDX #$10

.0c37	 d0 e9		bne $0c22	        BNE b853C ; jump?

.0c39	 a9 00		lda #$00	b8553   LDA #<OVERFLOW ; overflow?

.0c3b	 a2 e0		ldx #$e0	        LDX #>OVERFLOW

.0c3d	 85 08		sta $08		        STA ab08

.0c3f	 86 09		stx $09		        STX ab09

.0c41	 60		rts		        RTS 

=e000					OVERFLOW = $E000 ; overflow?

.0c42	 a4 b2		ldy $b2		DRAW_OBJECTS	LDY 	DRAW_OBJECT_COUNT 			; number of objects to draw

.0c44	 f0 0e		beq $0c54					BEQ 	DRAW_OBJECTS_EXIT 			; exit if none

.0c46	 84 b3		sty $b3						STY 	DRAW_OBJECT_COUNTER 		; store temp object count

.0c48	 be 1d 1a	ldx $1a1d,y	DRAW_OBJECTS_LOOP   LDX 	OBJECTS_TO_DRAW,Y 		; object number

.0c4b	 20 55 0c	jsr $0c55						JSR 	DRAW_OBJECT

.0c4e	 c6 b3		dec $b3							DEC 	DRAW_OBJECT_COUNTER 	; dec temp object count

.0c50	 a4 b3		ldy $b3							LDY 	DRAW_OBJECT_COUNTER 	; get temp object count

.0c52	 d0 f4		bne $0c48						BNE 	DRAW_OBJECTS_LOOP 		; exit y/n

.0c54	 60		rts		DRAW_OBJECTS_EXIT 	RTS 							; exit

.0c55	 86 af		stx $af		DRAW_OBJECT			STX		CURRENT_OBJECT					; store object number 

.0c57	 bd dd 18	lda $18dd,x						LDA		OBJECT_SHAPE_PTR_LO,X	; get object pos hi

.0c5a	 85 1d		sta $1d							STA		OBJECT_POINTER			; store in pointer

.0c5c	 bd 1d 19	lda $191d,x						LDA		OBJECT_SHAPE_PTR_HI,X	; get object pos lo

.0c5f	 85 1e		sta $1e							STA		OBJECT_POINTER+1		; store in pointer

.0c61	 20 37 0d	jsr $0d37						JSR		CAMERA_OBJECT_DIFF

.0c64	 a2 00		ldx #$00	DRAW_OBJECT_CONT   	LDX		#$00

.0c66	 86 19		stx $19							STX		POINT_LINE_COUNT

.0c68	 a0 01		ldy #$01						LDY		#$01

.0c6a	 20 7a 0d	jsr $0d7a						JSR		s999A

.0c6d	 90 5a		bcc $0cc9						BCC		DRAW_OBJECT_LINES

.0c6f	 a5 da		lda $da							LDA		DIFF_Y_HSB

.0c71	 10 09		bpl $0c7c						BPL		DRAW_OBJECT_POINT

.0c73	 a0 00		ldy #$00						LDY		#$00

.0c75	 a2 00		ldx #$00						LDX		#$00

.0c77	 20 7a 0d	jsr $0d7a						JSR		s999A

.0c7a	 b0 d8		bcs $0c54						BCS		DRAW_OBJECTS_EXIT

.0c7c	 a4 d5		ldy $d5		DRAW_OBJECT_POINT	LDY		DIFF_X_LSB	; object is a point

.0c7e	 a6 d6		ldx $d6							LDX		DIFF_X_MSB

.0c80	 a5 d7		lda $d7							LDA		DIFF_X_HSB

.0c82	 20 f6 0b	jsr $0bf6						JSR		BIT24TOFP

.0c85	 85 52		sta $52							STA		X_POS_HI

.0c87	 86 53		stx $53							STX		X_POS_LO

.0c89	 a4 d8		ldy $d8							LDY		DIFF_Y_LSB

.0c8b	 a6 d9		ldx $d9							LDX		DIFF_Y_MSB

.0c8d	 a5 da		lda $da							LDA		DIFF_Y_HSB

.0c8f	 85 54		sta $54							STA		Y_POS_HI

.0c91	 86 55		stx $55							STX		Y_POS_LO

.0c93	 a4 db		ldy $db							LDY		DIFF_Z_LSB

.0c95	 a6 dc		ldx $dc							LDX		DIFF_Z_MSB

.0c97	 a5 dd		lda $dd							LDA		DIFF_Z_HSB

.0c99	 20 f6 0b	jsr $0bf6						JSR		BIT24TOFP

.0c9c	 85 56		sta $56							STA		Z_POS_HI

.0c9e	 86 57		stx $57							STX		Z_POS_LO

.0ca0	 20 59 12	jsr $1259						JSR		ROTATE_PERS

.0ca3	 a2 00		ldx #$00						LDX		#$00

.0ca5	 bd 40 07	lda $0740,x	PLOT_POINT_CHK		LDA		POINT_CLASSIFICATION,X	; GET POINT FROM PLOT POINT TABLE ?

.0ca8	 d0 1e		bne $0cc8						BNE		PLOT_POINT_EXIT			; EXIT IF ITS not ZERO - this being set to not zero plots a point - what sets it to 0?

.0caa	 bc c0 06	ldy $06c0,x	PLOT_POINT				LDY		PERS_VER,X			; GET VER POS

.0cad	 b9 30 25	lda $2530,y							LDA		VER_POS_LO,Y 

.0cb0	 85 02		sta $02								STA		SCREEN_POS_LO

.0cb2	 bd 80 06	lda $0680,x							LDA		PERS_HOR,X			; GET HOR POS into A and X

.0cb5	 aa		tax								TAX 	

.0cb6	 0a		asl								ASL 

.0cb7	 b9 a0 24	lda $24a0,y							LDA		VER_POS_HI,Y

.0cba	 65 25		adc $25								ADC		SCREEN_BANK

.0cbc	 85 03		sta $03								STA		SCREEN_POS_HI

.0cbe	 bc c0 25	ldy $25c0,x							LDY		HOR_SCR_POS,X

.0cc1	 b1 02		lda ($02),y							LDA		(SCREEN_POS_PTR),Y	; GET SCREEN BYTE

.0cc3	 1d 00 24	ora $2400,x	LINE_DRAW_8_TYPE		ORA		ORA_PIXEL_POS,X		; AND PIXEL

.0cc6	 91 02		sta ($02),y							STA		(SCREEN_POS_PTR),Y	; PUT SCREEN BYTE

.0cc8	 60		rts		PLOT_POINT_EXIT 	RTS 

.0cc9	 a5 d6		lda $d6		DRAW_OBJECT_LINES	LDA 	DIFF_X_MSB

.0ccb	 38		sec							SEC 

.0ccc	 e9 08		sbc #$08						SBC 	#$08

.0cce	 85 d6		sta $d6							STA 	DIFF_X_MSB

.0cd0	 b0 02		bcs $0cd4						BCS 	b9795

.0cd2	 c6 d7		dec $d7								DEC 	DIFF_X_HSB		

.0cd4	 a5 d9		lda $d9		b9795   			LDA 	DIFF_Y_MSB

.0cd6	 38		sec							SEC 

.0cd7	 e9 08		sbc #$08						SBC 	#$08

.0cd9	 85 d9		sta $d9							STA 	DIFF_Y_MSB

.0cdb	 b0 02		bcs $0cdf						BCS 	b97A0

.0cdd	 c6 da		dec $da								DEC 	DIFF_Y_HSB

.0cdf	 a5 dc		lda $dc		b97A0   			LDA 	DIFF_Z_MSB

.0ce1	 38		sec							SEC 

.0ce2	 e9 08		sbc #$08						SBC 	#$08

.0ce4	 85 dc		sta $dc							STA 	DIFF_Z_MSB

.0ce6	 b0 02		bcs $0cea						BCS 	b97AB

.0ce8	 c6 dd		dec $dd								DEC 	DIFF_Z_HSB

.0cea	 a0 00		ldy #$00	b97AB   			LDY 	#0

.0cec	 84 19		sty $19							STY 	POINT_LINE_COUNT 	; start point count

.0cee	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y 	; object point count

.0cf0	 85 b0		sta $b0							STA 	NUMBER_OF_POINTS 	; number of points?

.0cf2	 84 ad		sty $ad							STY 	OBJECT_POINTER_POS 	; store mem pos

.0cf4	 20 bf 11	jsr $11bf	PROCESS_POINT_LOOP		JSR 	PROCESS_POINT_TO_FP		; get point then *16 then convert to 24bit fp

.0cf7	 20 59 12	jsr $1259							JSR 	ROTATE_PERS

.0cfa	 a5 19		lda $19								LDA 	POINT_LINE_COUNT		; get point count

.0cfc	 e6 19		inc $19								INC 	POINT_LINE_COUNT		; inc point count

.0cfe	 c5 b0		cmp $b0								CMP 	NUMBER_OF_POINTS	 	; last point yn

.0d00	 d0 f2		bne $0cf4							BNE 	PROCESS_POINT_LOOP  	; no so do next

.0d02	 e6 ad		inc $ad							INC 	OBJECT_POINTER_POS 			; inc mem pos

.0d04	 a4 ad		ldy $ad							LDY 	OBJECT_POINTER_POS 			; get mem pos

.0d06	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y  		; object line count

.0d08	 85 19		sta $19							STA 	POINT_LINE_COUNT  			; number of lines?

.0d0a	 10 13		bpl $0d1f						BPL 	NEXT_COMPRESSED_LINE

.0d0c	 a4 ad		ldy $ad		NEXT_LINE				LDY 	OBJECT_POINTER_POS 	; get mem pos

.0d0e	 c8		iny								INY  						; inc mem pos

.0d0f	 b3 1d		lax ($1d),y							LAX 	(OBJECT_POINTER),Y 	; get 1st point into a and x

.0d11	 c8		iny								INY 						; inc mem pos

.0d12	 b1 1d		lda ($1d),y							LDA 	(OBJECT_POINTER),Y 	; get 2nd point

.0d14	 84 ad		sty $ad								STY 	OBJECT_POINTER_POS 	; store 2nd point?

.0d16	 a8		tay								TAY 						; 2nd point

.0d17	 20 bd 0d	jsr $0dbd							JSR 	LINE_DRAW 			; draw line

.0d1a	 c6 19		dec $19								DEC 	POINT_LINE_COUNT 	; dec line count

.0d1c	 30 ee		bmi $0d0c							BMI 	NEXT_LINE 			; last line y/n

.0d1e	 60		rts							RTS 						; yes

.0d1f	 a4 ad		ldy $ad		NEXT_COMPRESSED_LINE 	LDY 	OBJECT_POINTER_POS 	; get mem pos ; first and second point are stored in 1 byte as 2 nibbles

.0d21	 c8		iny								INY  						; inc mem pos

.0d22	 84 ad		sty $ad								STY 	OBJECT_POINTER_POS 	; store mem pos

.0d24	 b3 1d		lax ($1d),y							LAX 	(OBJECT_POINTER),Y 	; get point count into a and x

.0d26	 29 0f		and #$0f							AND 	#$0F 				; and with 15 = 1st point

.0d28	 a8		tay								TAY 						; y = first point

.0d29	 8a		txa								TXA  						; get backup

.0d2a	 4a		lsr								LSR  						; /2

.0d2b	 4a		lsr								LSR  						; /2

.0d2c	 4a		lsr								LSR  						; /2

.0d2d	 4a		lsr								LSR  						; /2

.0d2e	 aa		tax								TAX  						; divide by 16 = 2nd point

.0d2f	 20 bd 0d	jsr $0dbd							JSR 	LINE_DRAW       	; DRAW LINE

.0d32	 c6 19		dec $19								DEC 	POINT_LINE_COUNT 	; dec line count

.0d34	 10 e9		bpl $0d1f							BPL 	NEXT_COMPRESSED_LINE ; last line yn

.0d36	 60		rts							RTS  						; yes

.0d37	 38		sec		CAMERA_OBJECT_DIFF	SEC 						; calc diff between object pos and current pos

.0d38	 bd 5d 19	lda $195d,x						LDA 	OBJ_X_LSB,X		;

.0d3b	 e5 72		sbc $72							SBC 	CURR_X_LSB		;

.0d3d	 85 d5		sta $d5							STA 	DIFF_X_LSB		;

.0d3f	 bd 5d 17	lda $175d,x						LDA 	OBJ_X_MSB,X		;

.0d42	 e5 73		sbc $73							SBC 	CURR_X_MSB		;

.0d44	 85 d6		sta $d6							STA 	DIFF_X_MSB		;

.0d46	 bd 1d 18	lda $181d,x						LDA 	OBJ_X_HSB,X		;

.0d49	 e5 74		sbc $74							SBC 	CURR_X_HSB		;

.0d4b	 85 d7		sta $d7							STA 	DIFF_X_HSB		;

.0d4d	 38		sec							SEC 

.0d4e	 bd 9d 19	lda $199d,x						LDA 	OBJ_Y_LSB,X		;

.0d51	 e5 75		sbc $75							SBC 	CURR_Y_LSB		;

.0d53	 85 d8		sta $d8							STA 	DIFF_Y_LSB		;

.0d55	 bd 9d 17	lda $179d,x						LDA 	OBJ_Y_MSB,X		;

.0d58	 e5 76		sbc $76							SBC 	CURR_Y_MSB		;

.0d5a	 85 d9		sta $d9							STA 	DIFF_Y_MSB		;

.0d5c	 bd 5d 18	lda $185d,x						LDA 	OBJ_Y_HSB,X		;

.0d5f	 e5 77		sbc $77							SBC 	CURR_Y_HSB		;

.0d61	 85 da		sta $da							STA 	DIFF_Y_HSB		;

.0d63	 38		sec							SEC 

.0d64	 bd dd 19	lda $19dd,x						LDA 	OBJ_Z_LSB,X		;

.0d67	 e5 78		sbc $78							SBC 	CURR_Z_LSB		;

.0d69	 85 db		sta $db							STA 	DIFF_Z_LSB		;

.0d6b	 bd dd 17	lda $17dd,x						LDA 	OBJ_Z_MSB,X		;

.0d6e	 e5 79		sbc $79							SBC 	CURR_Z_MSB		;

.0d70	 85 dc		sta $dc							STA 	DIFF_Z_MSB		;

.0d72	 bd 9d 18	lda $189d,x						LDA 	OBJ_Z_HSB,X		;

.0d75	 e5 7a		sbc $7a							SBC 	CURR_Z_HSB		;

.0d77	 85 dd		sta $dd							STA 	DIFF_Z_HSB		;

.0d79	 60		rts							RTS 

.0d7a	 86 08		stx $08		s999A   STX ab08

.0d7c	 84 09		sty $09		        STY ab09

.0d7e	 a5 d5		lda $d5		        LDA DIFF_X_LSB

.0d80	 a6 d6		ldx $d6		        LDX DIFF_X_MSB

.0d82	 a4 d7		ldy $d7		        LDY DIFF_X_HSB

.0d84	 20 9e 0d	jsr $0d9e	        JSR s99BE

.0d87	 b0 14		bcs $0d9d	        BCS b99BD ; error so exit

.0d89	 a5 d8		lda $d8		        LDA DIFF_Y_LSB

.0d8b	 a6 d9		ldx $d9		        LDX DIFF_Y_MSB

.0d8d	 a4 da		ldy $da		        LDY DIFF_Y_HSB

.0d8f	 20 9e 0d	jsr $0d9e	        JSR s99BE

.0d92	 b0 09		bcs $0d9d	        BCS b99BD ; error so exit

.0d94	 a5 db		lda $db		        LDA DIFF_Z_LSB

.0d96	 a6 dc		ldx $dc		        LDX DIFF_Z_MSB

.0d98	 a4 dd		ldy $dd		        LDY DIFF_Z_HSB

.0d9a	 20 9e 0d	jsr $0d9e	        JSR s99BE

.0d9d	 60		rts		b99BD   RTS 

.0d9e	 10 15		bpl $0db5	s99BE   	BPL 	CONTINUE1 	; if number is positive continue ; negate a/x/y which hold lsb/msb/hsb if needed and subtract 08 and 09 from msb/hsb 

.0da0	 49 ff		eor #$ff					EOR 	#$FF  	; negative so negate LSB

.0da2	 48		pha						PHA 			; backup LSB

.0da3	 8a		txa						TXA       		; negate MSB

.0da4	 49 ff		eor #$ff					EOR 	#$FF	;

.0da6	 aa		tax						TAX 			;

.0da7	 98		tya						TYA 			; negate HSB

.0da8	 49 ff		eor #$ff					EOR 	#$FF	;

.0daa	 a8		tay						TAY 			;

.0dab	 68		pla						PLA 			; restore LSB

.0dac	 18		clc						CLC 

.0dad	 69 01		adc #$01					ADC 	#$01		; inc LSB

.0daf	 90 04		bcc $0db5					BCC 	CONTINUE1	; no overlow so continue

.0db1	 e8		inx							INX 			; inc MSB

.0db2	 d0 01		bne $0db5						BNE 	CONTINUE1	; no overlow so continue

.0db4	 c8		iny								INY 			; inc HSB

.0db5	 38		sec		CONTINUE1   SEC 

.0db6	 8a		txa					TXA 

.0db7	 e5 08		sbc $08					SBC 	ab08		; subtract from MSB

.0db9	 98		tya					TYA 

.0dba	 e5 09		sbc $09					SBC 	ab09		; subtract from HSB

.0dbc	 60		rts					RTS 

.0dbd	 bd 40 07	lda $0740,x	LINE_DRAW		LDA		POINT_CLASSIFICATION,X 		; start point X classification ; LINE_DRAW_04 - DRAW LINE - x is start index - y is end index

.0dc0	 f0 25		beq $0de7					BEQ 	POINT_X_INFRONT 			; start point X onscreen

.0dc2	 30 17		bmi $0ddb					BMI 	POINT_X_BEHIND 				; start point X behind

.0dc4	 b9 40 07	lda $0740,y					LDA 	POINT_CLASSIFICATION,Y 		; end point Y classification 

.0dc7	 f0 12		beq $0ddb					BEQ 	POINT_X_BEHIND 				; end point Y onscreen

.0dc9	 30 1c		bmi $0de7					BMI 	POINT_X_INFRONT 			; end point Y behind	

.0dcb	 b9 80 03	lda $0380,y					LDA 	Z_ROT_TAB_HI,Y 

.0dce	 49 80		eor #$80					EOR 	#$80

.0dd0	 85 06		sta $06						STA 	ab06

.0dd2	 bd 80 03	lda $0380,x					LDA 	Z_ROT_TAB_HI,X

.0dd5	 49 80		eor #$80					EOR 	#$80

.0dd7	 c5 06		cmp $06						CMP 	ab06

.0dd9	 b0 0c		bcs $0de7					BCS	 	POINT_X_INFRONT

.0ddb	 98		tya		POINT_X_BEHIND 	TYA 			; start X is behind so swap start X and end Y pointer so that Y is behind and X start might be behind? so swap start and end - so Y is behind?

.0ddc	 86 06		stx $06						STX 	ab06	; swap start / end

.0dde	 aa		tax						TAX 			; swap start / end

.0ddf	 a4 06		ldy $06						LDY 	ab06	; swap start / end

.0de1	 bd 40 07	lda $0740,x					LDA 	POINT_CLASSIFICATION,X 	; start point X which was end point Y classification

.0de4	 10 01		bpl $0de7					BPL 	POINT_X_INFRONT 		; end point X point infront

.0de6	 60		rts								RTS 					; both points behind

.0de7	 bd 40 07	lda $0740,x	POINT_X_INFRONT	LDA 	POINT_CLASSIFICATION,X 	; at least 1 point is in front ; point 1 classification

.0dea	 85 6e		sta $6e						STA 	POINT_CLASSIFY_1

.0dec	 30 1e		bmi $0e0c					BMI 	X_ROT_COPY 				; point X is behind so x rotation points need to be copied and pers doesnt

.0dee	 bd 80 06	lda $0680,x						LDA 	PERS_HOR,X

.0df1	 85 6a		sta $6a							STA 	LINE_START_HOR

.0df3	 bd c0 06	lda $06c0,x						LDA 	PERS_VER,X

.0df6	 85 6b		sta $6b							STA 	LINE_START_VER

.0df8	 bd 00 06	lda $0600,x						LDA 	PERS_POINT_TAB_2,X

.0dfb	 85 5e		sta $5e							STA 	ab5E

.0dfd	 bd c0 03	lda $03c0,x						LDA 	PERS_POINT_TAB_3,X

.0e00	 85 5f		sta $5f							STA 	ab5F

.0e02	 bd 00 07	lda $0700,x						LDA 	PERS_POINT_TAB_4,X

.0e05	 85 60		sta $60							STA 	ab60

.0e07	 bd 40 06	lda $0640,x						LDA 	PERS_POINT_TAB_5,X

.0e0a	 85 61		sta $61							STA 	ab61

.0e0c	 bd 00 01	lda $0100,x	X_ROT_COPY		LDA 	X_ROT_TAB_LO,X ; a point is behind? so x and y rotation needs to be copied to be used in z clip

.0e0f	 85 52		sta $52						STA 	X_POS_HI

.0e11	 bd 40 01	lda $0140,x					LDA 	X_ROT_TAB_HI,X

.0e14	 85 53		sta $53						STA 	X_POS_LO

.0e16	 bd 80 01	lda $0180,x					LDA 	Y_ROT_TAB_LO,X

.0e19	 85 54		sta $54						STA 	Y_POS_HI

.0e1b	 bd c0 02	lda $02c0,x					LDA 	Y_ROT_TAB_HI,X

.0e1e	 85 55		sta $55						STA 	Y_POS_LO

.0e20	 bd 40 03	lda $0340,x					LDA 	Z_ROT_TAB_LO,X

.0e23	 85 56		sta $56						STA 	Z_POS_HI

.0e25	 bd 80 03	lda $0380,x					LDA 	Z_ROT_TAB_HI,X

.0e28	 85 57		sta $57						STA 	Z_POS_LO

.0e2a	 b9 40 07	lda $0740,y					LDA 	POINT_CLASSIFICATION,Y

.0e2d	 85 6f		sta $6f						STA 	POINT_CLASSIFY_2

.0e2f	 30 1e		bmi $0e4f					BMI 	Y_ROT_COPY				; Y is behind so y rotation points need to be copied and pers doesnt

.0e31	 b9 80 06	lda $0680,y						LDA 	PERS_HOR,Y

.0e34	 85 6c		sta $6c							STA 	ab6C

.0e36	 b9 c0 06	lda $06c0,y						LDA 	PERS_VER,Y

.0e39	 85 6d		sta $6d							STA 	ab6D

.0e3b	 b9 00 06	lda $0600,y						LDA 	PERS_POINT_TAB_2,Y

.0e3e	 85 62		sta $62							STA 	ab62

.0e40	 b9 c0 03	lda $03c0,y						LDA 	PERS_POINT_TAB_3,Y

.0e43	 85 63		sta $63							STA 	ab63

.0e45	 b9 00 07	lda $0700,y						LDA 	PERS_POINT_TAB_4,Y

.0e48	 85 64		sta $64							STA 	ab64

.0e4a	 b9 40 06	lda $0640,y						LDA 	PERS_POINT_TAB_5,Y

.0e4d	 85 65		sta $65							STA 	ab65

.0e4f	 b9 00 01	lda $0100,y	Y_ROT_COPY		LDA 	X_ROT_TAB_LO,Y

.0e52	 85 58		sta $58						STA 	X_ROTATION_LO

.0e54	 b9 40 01	lda $0140,y					LDA 	X_ROT_TAB_HI,Y

.0e57	 85 59		sta $59						STA 	X_ROTATION_HI

.0e59	 b9 80 01	lda $0180,y					LDA 	Y_ROT_TAB_LO,Y

.0e5c	 85 5a		sta $5a						STA 	Y_ROTATION_LO

.0e5e	 b9 c0 02	lda $02c0,y					LDA 	Y_ROT_TAB_HI,Y

.0e61	 85 5b		sta $5b						STA 	Y_ROTATION_HI

.0e63	 b9 40 03	lda $0340,y					LDA 	Z_ROT_TAB_LO,Y

.0e66	 85 5c		sta $5c						STA 	Z_ROTATION_LO

.0e68	 b9 80 03	lda $0380,y					LDA 	Z_ROT_TAB_HI,Y

.0e6b	 85 5d		sta $5d						STA 	Z_ROTATION_HI

.0e6d	 a5 6f		lda $6f						LDA 	POINT_CLASSIFY_2

.0e6f	 10 03		bpl $0e74					BPL 	b9A94

.0e71	 4c ee 0e	jmp $0eee						JMP 	j9B2C ; LINE DRAW

.0e74	 a6 5e		ldx $5e		b9A94   LDX ab5E

.0e76	 a5 5f		lda $5f		        LDA ab5F

.0e78	 49 01		eor #$01	        EOR #$01

.0e7a	 86 08		stx $08		        STX ab08

.0e7c	 85 09		sta $09		        STA ab09

.0e7e	 a6 62		ldx $62		        LDX ab62

.0e80	 a4 63		ldy $63		        LDY ab63

.0e82	 20 b5 0a	jsr $0ab5	        JSR FP_ADD ; 62-63 + 08-09 ?

.0e85	 86 0a		stx $0a		        STX ab0A

.0e87	 84 0b		sty $0b		        STY ab0B

.0e89	 98		tya		        TYA 

.0e8a	 0a		asl		        ASL 

.0e8b	 29 02		and #$02	        AND #$02

.0e8d	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0e8f	 a6 60		ldx $60		        LDX ab60

.0e91	 a5 61		lda $61		        LDA ab61

.0e93	 49 01		eor #$01	        EOR #$01

.0e95	 86 08		stx $08		        STX ab08

.0e97	 85 09		sta $09		        STA ab09

.0e99	 a6 64		ldx $64		        LDX ab64

.0e9b	 a4 65		ldy $65		        LDY ab65

.0e9d	 20 b5 0a	jsr $0ab5	        JSR FP_ADD	; 64-65 + 08-09	

.0ea0	 86 0c		stx $0c		        STX ab0C

.0ea2	 84 0d		sty $0d		        STY ab0D

.0ea4	 98		tya		        TYA 

.0ea5	 29 01		and #$01	        AND #$01				; sign? ; does the sign show the line direction?

.0ea7	 05 67		ora $67		        ORA LINE_TYPE_POINTER

.0ea9	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0eab	 a5 0a		lda $0a				LDA		ab0A

.0ead	 85 22		sta $22				STA		FP_DIVIDE_LO

.0eaf	 a6 09		ldx $09				LDX		ab09

.0eb1	 a4 08		ldy $08				LDY		ab08

.0eb3	 a5 0b		lda $0b				LDA		ab0B

.0eb5	 20 ee 09	jsr $09ee			JSR		FP_DIVIDE		; 0A-0B / 08-09 -> 68-69

.0eb8	 86 68		stx $68				STx		ab68

.0eba	 85 69		sta $69				STA		ab69

.0ebc	 a8		tay		        TAY 

.0ebd	 30 17		bmi $0ed6	        BMI b9B14

.0ebf	 a5 67		lda $67		        LDA LINE_TYPE_POINTER

.0ec1	 09 04		ora #$04	        ORA #$04

.0ec3	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0ec5	 a5 0c		lda $0c				LDA		ab0C

.0ec7	 85 22		sta $22				STA		FP_DIVIDE_LO

.0ec9	 a6 0b		ldx $0b				LDX		ab0B

.0ecb	 a4 0a		ldy $0a				LDY		ab0A

.0ecd	 a5 0d		lda $0d				LDA		ab0D

.0ecf	 20 ee 09	jsr $09ee			JSR		FP_DIVIDE		; 0A-0B / 0C-0D -> 08-09

.0ed2	 86 08		stx $08				STX		ab08

.0ed4	 85 09		sta $09				STA		ab09

.0ed6	 a8		tay		b9B14   TAY 

.0ed7	 30 07		bmi $0ee0	        BMI b9B1E

.0ed9	 a9 ff		lda #$ff	        LDA #$FF		; straight line?

.0edb	 85 66		sta $66		        STA LINE_INC

.0edd	 4c 89 0f	jmp $0f89	        JMP GET_LINE_TYPE

.0ee0	 18		clc		b9B1E   CLC 

.0ee1	 69 20		adc #$20	        ADC #$20		; possible *128 ?

.0ee3	 29 fc		and #$fc	        AND #$FC

.0ee5	 a8		tay		        TAY 

.0ee6	 20 8e 0b	jsr $0b8e	        JSR FPTO16BIT

.0ee9	 84 66		sty $66		        STY LINE_INC

.0eeb	 4c 89 0f	jmp $0f89	        JMP GET_LINE_TYPE

.0eee	 a5 56		lda $56		j9B2C	LDA		Z_POS_HI			 

.0ef0	 85 22		sta $22				STA		FP_DIVIDE_LO

.0ef2	 a6 5d		ldx $5d				LDX		Z_ROTATION_HI

.0ef4	 a4 5c		ldy $5c				LDY		Z_ROTATION_LO

.0ef6	 a5 57		lda $57				LDA		Z_POS_LO

.0ef8	 20 ee 09	jsr $09ee			JSR		FP_DIVIDE		; XPOS HI-LO / Z_ROTATION HI-LO -> 0A-0B

.0efb	 86 0a		stx $0a				STX		ab0A

.0efd	 85 0b		sta $0b				STA		ab0B

.0eff	 49 01		eor #$01			EOR #$01				; swap sign?

.0f01	 85 0b		sta $0b		        STA ab0B

.0f03	 a5 52		lda $52				LDA 	X_POS_HI

.0f05	 85 22		sta $22				STA		FP_MULTIPLY_LO

.0f07	 a5 53		lda $53				LDA 	X_POS_LO

.0f09	 a4 0b		ldy $0b				LDY 	ab0B

.0f0b	 a6 0a		ldx $0a		        LDX 	ab0A

.0f0d	 20 0a 0a	jsr $0a0a			JSR		FP_MULTIPLY		; XPOS HI-LO * 0A-0B -> 08-09

.0f10	 84 08		sty $08		        STy 	ab08

.0f12	 85 09		sta $09		        STA 	ab09

.0f14	 a6 58		ldx $58		        LDX X_ROTATION_LO

.0f16	 a4 59		ldy $59		        LDY X_ROTATION_HI

.0f18	 20 b5 0a	jsr $0ab5	        JSR FP_ADD				; XROT HI-LO + 08-09 -> 0c-0D

.0f1b	 86 0c		stx $0c		        STX ab0C

.0f1d	 84 0d		sty $0d		        STY ab0D

.0f1f	 98		tya		        TYA 

.0f20	 45 57		eor $57		        EOR Z_POS_LO

.0f22	 0a		asl		        ASL 

.0f23	 29 02		and #$02	        AND #$02

.0f25	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0f27	 a5 54		lda $54				LDA 	Y_POS_HI

.0f29	 85 22		sta $22				STA		FP_MULTIPLY_LO

.0f2b	 a5 55		lda $55				LDA 	Y_POS_LO

.0f2d	 a4 0b		ldy $0b				LDY 	ab0B

.0f2f	 a6 0a		ldx $0a		        LDX 	ab0A

.0f31	 20 0a 0a	jsr $0a0a			JSR		FP_MULTIPLY		; Y_POS HI-LO * 0A-0B -> 08-09

.0f34	 84 08		sty $08		        STy 	ab08

.0f36	 85 09		sta $09		        STA 	ab09

.0f38	 a6 5a		ldx $5a		        LDX Y_ROTATION_LO

.0f3a	 a4 5b		ldy $5b		        LDY Y_ROTATION_HI

.0f3c	 20 b5 0a	jsr $0ab5	        JSR FP_ADD				; YROT HI-LO + 08-09 -> 0A-0B

.0f3f	 86 0a		stx $0a		        STX ab0A

.0f41	 84 0b		sty $0b		        STY ab0B

.0f43	 98		tya		        TYA 

.0f44	 45 57		eor $57		        EOR Z_POS_LO

.0f46	 29 01		and #$01	        AND #$01

.0f48	 05 67		ora $67		        ORA LINE_TYPE_POINTER

.0f4a	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0f4c	 a5 0c		lda $0c				LDA		ab0C

.0f4e	 85 22		sta $22				STA		FP_DIVIDE_LO

.0f50	 a6 09		ldx $09				LDX		ab09

.0f52	 a4 08		ldy $08				LDY		ab08

.0f54	 a5 0d		lda $0d				LDA		ab0D

.0f56	 20 ee 09	jsr $09ee			JSR		FP_DIVIDE		; 0C-0D / 08-09 -> 68-69

.0f59	 86 68		stx $68				STX		ab68

.0f5b	 85 69		sta $69				STA		ab69

.0f5d	 a8		tay		        TAY 

.0f5e	 30 17		bmi $0f77	        BMI b9BFC

.0f60	 a5 67		lda $67		        LDA LINE_TYPE_POINTER

.0f62	 09 04		ora #$04	        ORA #$04

.0f64	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0f66	 a5 0a		lda $0a				LDA		ab0A

.0f68	 85 22		sta $22				STA		FP_DIVIDE_LO

.0f6a	 a6 0d		ldx $0d				LDX		ab0D

.0f6c	 a4 0c		ldy $0c				LDY		ab0C

.0f6e	 a5 0b		lda $0b				LDA		ab0B

.0f70	 20 ee 09	jsr $09ee			JSR		FP_DIVIDE		; 0A-0B / 0C-0D -> 08-09

.0f73	 86 08		stx $08				STX		ab08

.0f75	 85 09		sta $09				STA		ab09

.0f77	 a8		tay		b9BFC   TAY 

.0f78	 30 04		bmi $0f7e	        BMI b9C05

.0f7a	 a0 ff		ldy #$ff				LDY #$FF			; straight line?

.0f7c	 d0 09		bne $0f87				BNE LINE_CONT_99 ; jump

.0f7e	 18		clc		b9C05   CLC 

.0f7f	 69 20		adc #$20	        ADC #$20	; *128 ?

.0f81	 29 fc		and #$fc	        AND #$FC

.0f83	 a8		tay		        TAY 

.0f84	 20 8e 0b	jsr $0b8e	        JSR FPTO16BIT

.0f87	 84 66		sty $66		LINE_CONT_99	STY LINE_INC

.0f89	 a6 67		ldx $67		GET_LINE_TYPE	LDX 	LINE_TYPE_POINTER    ; GET LINE TYPE 0-7

.0f8b	 bc d0 26	ldy $26d0,x					LDY 	LINE_DRAW_CONV_PTR,X ; CONVERT LINE TYPE TO POINTER TYPE

.0f8e	 b9 c0 26	lda $26c0,y					LDA 	LINE_DRAW_PTR_LO,Y ; GET POINTER TO CORRECT LINE

.0f91	 85 04		sta $04						STA 	LINE_JUMP_PTR_LO    ; STORE AT JUMP TABLE ADDRESS

.0f93	 b9 c8 26	lda $26c8,y					LDA 	LINE_DRAW_PTR_HI,Y ; GET POINTER TO CORRECT LINE

.0f96	 85 05		sta $05						STA 	LINE_JUMP_PTR_HI    ; STORE AT JUMP TABLE ADDRESS

.0f98	 a5 6f		lda $6f						LDA 	POINT_CLASSIFY_2

.0f9a	 f0 0a		beq $0fa6					BEQ 	b9C2F

.0f9c	 b9 d8 26	lda $26d8,y					LDA 	fBBD8,Y

.0f9f	 85 6c		sta $6c						STA 	ab6C

.0fa1	 b9 e0 26	lda $26e0,y					LDA 	fBBE0,Y

.0fa4	 85 6d		sta $6d						STA 	ab6D

.0fa6	 a5 6e		lda $6e		b9C2F   		LDA 	POINT_CLASSIFY_1

.0fa8	 d0 03		bne $0fad					BNE 	b9C36				; point off screen

.0faa	 4c 04 11	jmp $1104					JMP		LINE_DRAW_JMP

.0fad	 a5 61		lda $61		b9C36   LDA ab61

.0faf	 0a		asl		        ASL 

.0fb0	 0a		asl		        ASL 

.0fb1	 29 04		and #$04	        AND #$04

.0fb3	 05 6e		ora $6e		        ORA POINT_CLASSIFY_1

.0fb5	 85 06		sta $06		        STA ab06

.0fb7	 a5 5f		lda $5f		        LDA ab5F

.0fb9	 0a		asl		        ASL 

.0fba	 0a		asl		        ASL 

.0fbb	 0a		asl		        ASL 

.0fbc	 29 08		and #$08	        AND #$08

.0fbe	 05 06		ora $06		        ORA ab06

.0fc0	 aa		tax		        TAX 

.0fc1	 98		tya		        TYA 

.0fc2	 1d e8 26	ora $26e8,x	        ORA fBBE8,X

.0fc5	 4a		lsr		        LSR 

.0fc6	 aa		tax		        TAX 

.0fc7	 bd f8 26	lda $26f8,x	        LDA fBBF8,X

.0fca	 d0 01		bne $0fcd	        BNE b9C56

.0fcc	 60		rts		        RTS 

.0fcd	 85 6e		sta $6e		b9C56   STA POINT_CLASSIFY_1

.0fcf	 a5 6f		lda $6f		        LDA POINT_CLASSIFY_2

.0fd1	 30 20		bmi $0ff3	        BMI b9C7C

.0fd3	 a5 65		lda $65		        LDA ab65

.0fd5	 0a		asl		        ASL 

.0fd6	 0a		asl		        ASL 

.0fd7	 29 04		and #$04	        AND #$04

.0fd9	 05 6f		ora $6f		        ORA POINT_CLASSIFY_2

.0fdb	 85 06		sta $06		        STA ab06

.0fdd	 a5 63		lda $63		        LDA ab63

.0fdf	 0a		asl		        ASL 

.0fe0	 0a		asl		        ASL 

.0fe1	 0a		asl		        ASL 

.0fe2	 29 08		and #$08	        AND #$08

.0fe4	 05 06		ora $06		        ORA ab06

.0fe6	 aa		tax		        TAX 

.0fe7	 98		tya		        TYA 

.0fe8	 1d e8 26	ora $26e8,x	        ORA fBBE8,X

.0feb	 4a		lsr		        LSR 

.0fec	 aa		tax		        TAX 

.0fed	 bd 18 27	lda $2718,x	        LDA fBC18,X

.0ff0	 d0 01		bne $0ff3	        BNE b9C7C

.0ff2	 60		rts		        RTS 

.0ff3	 a5 6e		lda $6e		b9C7C   LDA 	POINT_CLASSIFY_1

.0ff5	 29 01		and #$01	        AND 	#$01 ; off this edge

.0ff7	 f0 3f		beq $1038	        BEQ 	b9CC1 ; no

.0ff9	 a6 92		ldx $92					LDX 	ab92 ; yes

.0ffb	 a5 93		lda $93					LDA 	ab93

.0ffd	 38		sec					SEC 

.0ffe	 e9 18		sbc #$18				SBC 	#FOCUS ; ab21

.1000	 86 08		stx $08					STX 	ab08

.1002	 85 09		sta $09					STA 	ab09

.1004	 a6 5e		ldx $5e					LDX 	ab5E

.1006	 a5 5f		lda $5f					LDA 	ab5F

.1008	 49 01		eor #$01				EOR 	#$01

.100a	 a8		tay					TAY 

.100b	 20 b5 0a	jsr $0ab5				JSR 	FP_ADD			; 5E-5F + 92-93 -> 68-69

.100e	 a6 68		ldx $68					LDX 	ab68

.1010	 a4 69		ldy $69					LDY 	ab69

.1012	 20 24 0a	jsr $0a24				JSR 	FPMUL			; 92-93 * 68-69 -> 60-61

.1015	 a6 60		ldx $60					LDX 	ab60

.1017	 a4 61		ldy $61					LDY 	ab61

.1019	 20 b5 0a	jsr $0ab5				JSR 	FP_ADD			; 68-69 + 60-61 -> 

.101c	 98		tya					TYA 

.101d	 18		clc					CLC 

.101e	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.1020	 70 16		bvs $1038				BVS 	b9CC1

.1022	 a8		tay					TAY 

.1023	 20 5e 0b	jsr $0b5e				JSR 	FPTO8BIT

.1026	 b0 10		bcs $1038				BCS 	b9CC1

.1028	 18		clc					CLC 

.1029	 69 44		adc #$44				ADC 	#SCR_VER_MID

.102b	 c9 88		cmp #$88				CMP 	#CLIP_TEST_BOTTOM 	; clip test?

.102d	 b0 09		bcs $1038				BCS 	b9CC1

.102f	 85 6b		sta $6b						STA 	LINE_START_VER

.1031	 a9 9f		lda #$9f					LDA 	#CLIP_RIGHT 		; clip right ?

.1033	 85 6a		sta $6a						STA 	LINE_START_HOR 		; clip right ?

.1035	 4c 04 11	jmp $1104					JMP 	LINE_DRAW_JMP

.1038	 a5 6e		lda $6e		b9CC1   LDA 	POINT_CLASSIFY_1

.103a	 29 02		and #$02	        AND 	#$02 ; off this edge

.103c	 f0 3f		beq $107d	        BEQ 	b9D06 ; no

.103e	 a6 96		ldx $96					LDX 	ab96 ; yes

.1040	 a5 97		lda $97					LDA 	ab97

.1042	 38		sec					SEC 

.1043	 e9 18		sbc #$18				SBC 	#FOCUS ; ab21

.1045	 86 08		stx $08					STX 	ab08

.1047	 85 09		sta $09					STA 	ab09

.1049	 a6 60		ldx $60					LDX 	ab60

.104b	 a5 61		lda $61					LDA 	ab61

.104d	 49 01		eor #$01				EOR 	#$01

.104f	 a8		tay					TAY 

.1050	 20 b5 0a	jsr $0ab5				JSR 	FP_ADD				; 60-61 + 96-97 -> 68-69

.1053	 a6 68		ldx $68					LDX 	ab68

.1055	 a4 69		ldy $69					LDY 	ab69

.1057	 20 5e 0a	jsr $0a5e				JSR 	FPDIV				; 96-97 / 68-69 -> 5E-5F

.105a	 a6 5e		ldx $5e					LDX 	ab5E

.105c	 a4 5f		ldy $5f					LDY 	ab5F

.105e	 20 b5 0a	jsr $0ab5				JSR 	FP_ADD				; 5E-5F + 96-97 ->

.1061	 98		tya					TYA 

.1062	 18		clc					CLC 

.1063	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.1065	 70 16		bvs $107d				BVS 	b9D06

.1067	 a8		tay					TAY 

.1068	 20 5e 0b	jsr $0b5e				JSR 	FPTO8BIT

.106b	 b0 10		bcs $107d				BCS 	b9D06

.106d	 18		clc					CLC 

.106e	 69 50		adc #$50				ADC 	#SCR_HOR_MID

.1070	 c9 a0		cmp #$a0				CMP 	#CLIP_TEST_RIGHT 		; clip test

.1072	 b0 09		bcs $107d				BCS 	b9D06

.1074	 85 6a		sta $6a						STA 	LINE_START_HOR

.1076	 a9 87		lda #$87					LDA 	#CLIP_BOTTOM 			; clip bottom

.1078	 85 6b		sta $6b						STA 	LINE_START_VER 			; clip bottom

.107a	 4c 04 11	jmp $1104					JMP 	LINE_DRAW_JMP

.107d	 a5 6e		lda $6e		b9D06   LDA 	POINT_CLASSIFY_1 ; LINE DRAW

.107f	 29 04		and #$04	        AND 	#$04 ; off this edge

.1081	 f0 3f		beq $10c2	        BEQ 	b9D4B ; no

.1083	 a6 90		ldx $90					LDX 	ab90 ; yes

.1085	 a5 91		lda $91					LDA 	ab91

.1087	 38		sec					SEC 

.1088	 e9 18		sbc #$18				SBC 	#FOCUS ; ab21

.108a	 86 08		stx $08					STX 	ab08

.108c	 85 09		sta $09					STA 	ab09

.108e	 a6 5e		ldx $5e					LDX 	ab5E

.1090	 a5 5f		lda $5f					LDA 	ab5F

.1092	 49 01		eor #$01				EOR 	#$01

.1094	 a8		tay					TAY 

.1095	 20 b5 0a	jsr $0ab5				JSR 	FP_ADD				; 90-91 + 5E+5F -> 68-69

.1098	 a6 68		ldx $68					LDX 	ab68

.109a	 a4 69		ldy $69					LDY 	ab69

.109c	 20 24 0a	jsr $0a24				JSR 	FPMUL				; 68-69 * 90-91 -> 60-61

.109f	 a6 60		ldx $60					LDX 	ab60

.10a1	 a4 61		ldy $61					LDY 	ab61

.10a3	 20 b5 0a	jsr $0ab5				JSR 	FP_ADD				; 60-61 + 90-91 ->

.10a6	 98		tya					TYA 

.10a7	 18		clc					CLC 

.10a8	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.10aa	 70 16		bvs $10c2				BVS 	b9D4B

.10ac	 a8		tay					TAY 

.10ad	 20 5e 0b	jsr $0b5e				JSR 	FPTO8BIT

.10b0	 b0 10		bcs $10c2				BCS 	b9D4B

.10b2	 18		clc					CLC 

.10b3	 69 44		adc #$44				ADC 	#SCR_VER_MID

.10b5	 c9 88		cmp #$88				CMP 	#CLIP_TEST_BOTTOM ; clip test

.10b7	 b0 09		bcs $10c2				BCS 	b9D4B

.10b9	 85 6b		sta $6b						STA 	LINE_START_VER

.10bb	 a9 00		lda #$00					LDA 	#CLIP_TEST_TOP 	; clip off top

.10bd	 85 6a		sta $6a						STA 	LINE_START_HOR 	; clip off top 

.10bf	 4c 04 11	jmp $1104					JMP 	LINE_DRAW_JMP

.10c2	 a5 6e		lda $6e		b9D4B   LDA 	POINT_CLASSIFY_1 ; LINE DRAW

.10c4	 29 08		and #$08	        AND 	#$08 ; off this edge

.10c6	 f0 47		beq $110f			BEQ 	b9D98 ; no

.10c8	 a6 94		ldx $94					LDX 	ab94 ; yes

.10ca	 a5 95		lda $95					LDA 	ab95

.10cc	 38		sec					SEC 

.10cd	 e9 18		sbc #$18				SBC 	#FOCUS ; ab21

.10cf	 86 08		stx $08					STX 	ab08

.10d1	 85 09		sta $09					STA 	ab09

.10d3	 a6 60		ldx $60					LDX 	ab60

.10d5	 a5 61		lda $61					LDA 	ab61

.10d7	 49 01		eor #$01				EOR 	#$01

.10d9	 a8		tay					TAY 

.10da	 20 b5 0a	jsr $0ab5				JSR 	FP_ADD				; 94-95 + 60-61 -> 68-69

.10dd	 a6 68		ldx $68					LDX 	ab68

.10df	 a4 69		ldy $69					LDY 	ab69

.10e1	 20 5e 0a	jsr $0a5e				JSR 	FPDIV				; 94-95 / 68-69 -> 5E-5F

.10e4	 a6 5e		ldx $5e					LDX 	ab5E

.10e6	 a4 5f		ldy $5f					LDY 	ab5F

.10e8	 20 b5 0a	jsr $0ab5				JSR 	FP_ADD				; 94-95 + 5E-5F ->

.10eb	 98		tya					TYA 

.10ec	 18		clc					CLC 

.10ed	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.10ef	 70 1e		bvs $110f				BVS 	b9D98

.10f1	 a8		tay					TAY 

.10f2	 20 5e 0b	jsr $0b5e				JSR 	FPTO8BIT

.10f5	 b0 18		bcs $110f				BCS 	b9D98

.10f7	 18		clc					CLC 

.10f8	 69 50		adc #$50				ADC 	#SCR_HOR_MID

.10fa	 c9 a0		cmp #$a0				CMP 	#CLIP_TEST_RIGHT 	; clip test

.10fc	 b0 11		bcs $110f				BCS 	b9D98

.10fe	 85 6a		sta $6a						STA 	LINE_START_HOR

.1100	 a9 00		lda #$00					LDA 	#CLIP_TEST_LEFT 	; clip off left

.1102	 85 6b		sta $6b						STA 	LINE_START_VER 		; clip off left

.1104	 a6 6a		ldx $6a		LINE_DRAW_JMP	LDX 	LINE_START_HOR

.1106	 a4 6b		ldy $6b					LDY 	LINE_START_VER

.1108	 a9 80		lda #$80				LDA 	#$80 					; set fraction to half 

.110a	 85 08		sta $08					STA 	LINE_FRACTION_ab08 		; set line fraction

.110c	 6c 04 00	jmp ($0004)				JMP 	(LINE_JUMP_PTR) 		; LINE_DRAW_01

.110f	 60		rts		b9D98   	RTS 

.1110	 a9 01		lda #$01	MOVEMENT	LDA 	#$01                    ; UP

.1112	 24 80		bit $80		        BIT JOYSTICK_MOVEMENT

.1114	 d0 05		bne $111b	        BNE bA1A1

.1116	 a9 01		lda #$01				LDA #$01 ; FORWARD

.1118	 20 51 11	jsr $1151				JSR FORWARD_BACK

.111b	 a9 02		lda #$02	bA1A1   LDA #$02					; DOWN

.111d	 24 80		bit $80		        BIT JOYSTICK_MOVEMENT

.111f	 d0 05		bne $1126	        BNE bA1AC

.1121	 a9 00		lda #$00				LDA #$00	; BACKWARD

.1123	 20 51 11	jsr $1151				JSR FORWARD_BACK

.1126	 a9 04		lda #$04	bA1AC   LDA #$04					; LEFT

.1128	 24 80		bit $80		        BIT JOYSTICK_MOVEMENT

.112a	 d0 0f		bne $113b	        BNE bA1C1

.112c	 a5 2c		lda $2c					LDA ROT_LO	; LEFT

.112e	 18		clc					CLC 

.112f	 65 ac		adc $ac					ADC ROT_SPD

.1131	 85 2c		sta $2c					STA ROT_LO

.1133	 a5 2d		lda $2d					LDA ROT_HI

.1135	 69 00		adc #$00				ADC #$00

.1137	 29 03		and #$03				AND #$03

.1139	 85 2d		sta $2d					STA ROT_HI

.113b	 a9 08		lda #$08	bA1C1   LDA #$08					; RIGHT

.113d	 24 80		bit $80		        BIT JOYSTICK_MOVEMENT

.113f	 d0 0f		bne $1150	        BNE bA1D6

.1141	 a5 2c		lda $2c					LDA ROT_LO	; RIGHT

.1143	 38		sec					SEC 

.1144	 e5 ac		sbc $ac					SBC ROT_SPD

.1146	 85 2c		sta $2c					STA ROT_LO

.1148	 a5 2d		lda $2d					LDA ROT_HI

.114a	 e9 00		sbc #$00				SBC #$00

.114c	 29 03		and #$03				AND #$03

.114e	 85 2d		sta $2d					STA ROT_HI

.1150	 60		rts		bA1D6 	RTS

.1151	 48		pha		FORWARD_BACK	PHA 			; push sign/direction

.1152	 a6 aa		ldx $aa						LDX 	SPEED_LO

.1154	 45 ab		eor $ab						EOR 	SPEED_HI 	; set direction

.1156	 86 08		stx $08						STX 	ab08

.1158	 85 09		sta $09						STA 	ab09

.115a	 a6 3e		ldx $3e						LDX 	COS_LO

.115c	 a4 3f		ldy $3f						LDY 	COS_HI

.115e	 20 24 0a	jsr $0a24					JSR 	FPMUL

.1161	 20 8e 0b	jsr $0b8e					JSR 	FPTO16BIT

.1164	 98		tya						TYA 

.1165	 18		clc						CLC 

.1166	 65 78		adc $78						ADC 	CURR_Z_LSB

.1168	 85 78		sta $78						STA 	CURR_Z_LSB

.116a	 8a		txa						TXA 

.116b	 65 79		adc $79						ADC 	CURR_Z_MSB

.116d	 85 79		sta $79						STA 	CURR_Z_MSB

.116f	 8a		txa						TXA 

.1170	 10 04		bpl $1176					BPL 	_Z_PLUS 		; if +

.1172	 a9 ff		lda #$ff						LDA 	#$FF		; set to 255 for -

.1174	 30 02		bmi $1178						BMI 	_Z_NEG_CONT	; jmp

.1176	 a9 00		lda #$00	_Z_PLUS   		LDA 	#$00			; set to 0 for +

.1178	 65 7a		adc $7a		_Z_NEG_CONT 	ADC 	CURR_Z_HSB		; either add or sub depending on + or -

.117a	 85 7a		sta $7a						STA 	CURR_Z_HSB

.117c	 68		pla						PLA 			; pop sign

.117d	 a6 aa		ldx $aa						LDX 	SPEED_LO

.117f	 45 ab		eor $ab						EOR 	SPEED_HI	; set direction

.1181	 86 08		stx $08						STX 	ab08

.1183	 85 09		sta $09						STA 	ab09

.1185	 a6 3c		ldx $3c						LDX 	SIN_LO

.1187	 a4 3d		ldy $3d						LDY 	SIN_HI

.1189	 20 24 0a	jsr $0a24					JSR 	FPMUL

.118c	 20 8e 0b	jsr $0b8e					JSR 	FPTO16BIT

.118f	 98		tya						TYA 

.1190	 18		clc						CLC 

.1191	 65 72		adc $72						ADC 	CURR_X_LSB

.1193	 85 72		sta $72						STA 	CURR_X_LSB

.1195	 8a		txa						TXA 

.1196	 65 73		adc $73						ADC 	CURR_X_MSB

.1198	 85 73		sta $73						STA 	CURR_X_MSB

.119a	 8a		txa						TXA 

.119b	 10 04		bpl $11a1					BPL 	_X_PLUS			; positive

.119d	 a9 ff		lda #$ff						LDA 	#$FF		; negative so set to 255

.119f	 30 02		bmi $11a3						BMI 	_X_NEG_CONT ; jump to calc

.11a1	 a9 00		lda #$00	_X_PLUS	   		LDA 	#$00			; positive so set to 0

.11a3	 65 74		adc $74		_X_NEG_CONT    	ADC 	CURR_X_HSB		; calc

.11a5	 85 74		sta $74						STA 	CURR_X_HSB

.11a7	 60		rts						RTS 

.11a8	 a6 2c		ldx $2c		SIN_COS	LDX 	ROT_LO

.11aa	 a4 2d		ldy $2d		        LDY 	ROT_HI

.11ac	 20 49 0b	jsr $0b49	        JSR 	SIN_FP

.11af	 86 3c		stx $3c		        STX 	SIN_LO ; sin_lo

.11b1	 84 3d		sty $3d		        STY 	SIN_HI ; sin_hi

.11b3	 a6 2c		ldx $2c		        LDX 	ROT_LO

.11b5	 a4 2d		ldy $2d		        LDY 	ROT_HI

.11b7	 20 48 0b	jsr $0b48	        JSR 	COS_FP

.11ba	 86 3e		stx $3e		        STX 	COS_LO ; cos_lo

.11bc	 84 3f		sty $3f		        STY 	COS_HI ; cos_hi

.11be	 60		rts		        RTS 

.11bf	 a4 ad		ldy $ad		PROCESS_POINT_TO_FP	LDY 	OBJECT_POINTER_POS 	; get point then *16 then conveert to 24bit fp

.11c1	 c8		iny							INY 

.11c2	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y ; get x

.11c4	 85 cf		sta $cf							STA 	OBJ_PNT_X

.11c6	 c8		iny							INY 

.11c7	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y ; get y

.11c9	 85 d1		sta $d1							STA 	OBJ_PNT_Y

.11cb	 c8		iny							INY 

.11cc	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y ; get z

.11ce	 85 d3		sta $d3							STA 	OBJ_PNT_Z

.11d0	 84 ad		sty $ad							STY 	OBJECT_POINTER_POS

.11d2	 20 18 12	jsr $1218						JSR 	POINT_X16

.11d5	 a5 d5		lda $d5							LDA 	DIFF_X_LSB

.11d7	 18		clc							CLC 	 			; clear

.11d8	 65 cf		adc $cf							ADC 	OBJ_PNT_X 	; x lsb

.11da	 a8		tay							TAY

.11db	 a5 d6		lda $d6							LDA 	DIFF_X_MSB

.11dd	 65 d0		adc $d0							ADC 	OBJ_PNT_X_MSB

.11df	 aa		tax							TAX 

.11e0	 a5 d7		lda $d7							LDA 	DIFF_X_HSB

.11e2	 69 00		adc #$00						ADC 	#$00

.11e4	 20 f6 0b	jsr $0bf6						JSR 	BIT24TOFP

.11e7	 85 52		sta $52							STA 	X_POS_HI

.11e9	 86 53		stx $53							STX 	X_POS_LO

.11eb	 a5 d8		lda $d8							LDA 	DIFF_Y_LSB

.11ed	 18		clc							CLC 

.11ee	 65 d1		adc $d1							ADC 	OBJ_PNT_Y ; y lsb

.11f0	 a8		tay							TAY

.11f1	 a5 d9		lda $d9							LDA 	DIFF_Y_MSB

.11f3	 65 d2		adc $d2							ADC 	OBJ_PNT_Y_MSB

.11f5	 aa		tax							TAX 

.11f6	 a5 da		lda $da							LDA 	DIFF_Y_HSB

.11f8	 69 00		adc #$00						ADC 	#$00

.11fa	 20 f6 0b	jsr $0bf6						JSR 	BIT24TOFP

.11fd	 85 54		sta $54							STA 	Y_POS_HI

.11ff	 86 55		stx $55							STX 	Y_POS_LO

.1201	 a5 db		lda $db							LDA 	DIFF_Z_LSB

.1203	 18		clc							CLC 

.1204	 65 d3		adc $d3							ADC 	OBJ_PNT_Z ; z lsb

.1206	 a8		tay							TAY

.1207	 a5 dc		lda $dc							LDA 	DIFF_Z_MSB

.1209	 65 d4		adc $d4							ADC 	OBJ_PNT_Z_MSB

.120b	 aa		tax							TAX 

.120c	 a5 dd		lda $dd							LDA 	DIFF_Z_HSB

.120e	 69 00		adc #$00						ADC 	#$00

.1210	 20 f6 0b	jsr $0bf6						JSR 	BIT24TOFP

.1213	 85 56		sta $56							STA 	Z_POS_HI

.1215	 86 57		stx $57							STX 	Z_POS_LO

.1217	 60		rts							RTS 

.1218	 a9 00		lda #$00	POINT_X16	LDA 	#$00			; MULTIPLY POINT *16 ?

.121a	 85 d0		sta $d0					STA 	OBJ_PNT_X_MSB

.121c	 85 d2		sta $d2					STA 	OBJ_PNT_Y_MSB

.121e	 85 d4		sta $d4					STA 	OBJ_PNT_Z_MSB

.1220	 a6 af		ldx $af					LDX 	CURRENT_OBJECT

.1222	 a5 cf		lda $cf					LDA 	OBJ_PNT_X

.1224	 49 80		eor #$80				EOR 	#$80 ; change the sign?

.1226	 0a		asl					ASL 

.1227	 26 d0		rol $d0					ROL 	OBJ_PNT_X_MSB ; *2

.1229	 0a		asl					ASL 

.122a	 26 d0		rol $d0					ROL 	OBJ_PNT_X_MSB ; *4

.122c	 0a		asl					ASL 

.122d	 26 d0		rol $d0					ROL 	OBJ_PNT_X_MSB ; *8

.122f	 0a		asl					ASL 

.1230	 26 d0		rol $d0					ROL 	OBJ_PNT_X_MSB ; *16

.1232	 85 cf		sta $cf					STA 	OBJ_PNT_X

.1234	 a5 d1		lda $d1					LDA 	OBJ_PNT_Y

.1236	 49 80		eor #$80				EOR 	#$80

.1238	 0a		asl					ASL 

.1239	 26 d2		rol $d2					ROL 	OBJ_PNT_Y_MSB

.123b	 0a		asl					ASL 

.123c	 26 d2		rol $d2					ROL 	OBJ_PNT_Y_MSB

.123e	 0a		asl					ASL 

.123f	 26 d2		rol $d2					ROL 	OBJ_PNT_Y_MSB

.1241	 0a		asl					ASL 

.1242	 26 d2		rol $d2					ROL 	OBJ_PNT_Y_MSB

.1244	 85 d1		sta $d1					STA 	OBJ_PNT_Y

.1246	 a5 d3		lda $d3					LDA 	OBJ_PNT_Z

.1248	 49 80		eor #$80				EOR 	#$80

.124a	 0a		asl					ASL 

.124b	 26 d4		rol $d4					ROL 	OBJ_PNT_Z_MSB

.124d	 0a		asl					ASL 

.124e	 26 d4		rol $d4					ROL 	OBJ_PNT_Z_MSB

.1250	 0a		asl					ASL 

.1251	 26 d4		rol $d4					ROL 	OBJ_PNT_Z_MSB

.1253	 0a		asl					ASL 

.1254	 26 d4		rol $d4					ROL 	OBJ_PNT_Z_MSB

.1256	 85 d3		sta $d3					STA 	OBJ_PNT_Z

.1258	 60		rts					RTS 

.1259					rotate_pers
.1259	 a5 3c		lda $3c					LDA 	SIN_LO

.125b	 85 22		sta $22					STA		FP_MULTIPLY_LO

.125d	 a5 3d		lda $3d					LDA 	SIN_HI

.125f	 a6 52		ldx $52					LDX		X_POS_HI

.1261	 a4 53		ldy $53					LDY		X_POS_LO

.1263	 20 0a 0a	jsr $0a0a				JSR		FP_MULTIPLY			; X * SIN

.1266	 84 0a		sty $0a					STy 	X_ROT_LO

.1268	 85 0b		sta $0b					STA		X_ROT_HI

.126a	 a5 3e		lda $3e					LDA 	COS_LO

.126c	 85 22		sta $22					STA		FP_MULTIPLY_LO

.126e	 a5 3f		lda $3f					LDA 	COS_HI

.1270	 a6 56		ldx $56					LDX		Z_POS_HI

.1272	 a4 57		ldy $57					LDY		Z_POS_LO

.1274	 20 0a 0a	jsr $0a0a				JSR		FP_MULTIPLY			; Z * COS

.1277	 84 08		sty $08					STy 	Z_ROT_LO

.1279	 85 09		sta $09					STA		Z_ROT_HI

.127b	 a6 0a		ldx $0a					LDX 	X_ROT_LO

.127d	 a4 0b		ldy $0b					LDY 	X_ROT_HI

.127f	 20 b5 0a	jsr $0ab5				JSR 	FP_ADD				; Z = (X * SIN) + (Z * COS)

.1282	 86 5c		stx $5c					STX 	Z_ROTATION_LO		; Z rotation result?

.1284	 98		tya					TYA 

.1285	 49 01		eor #$01				EOR 	#$01

.1287	 85 5d		sta $5d					STA 	Z_ROTATION_HI		; Z rotation result?

.1289	 29 01		and #$01				AND 	#$01				; keep fp sign

.128b	 4a		lsr					LSR 						; shift sign

.128c	 6a		ror					ROR 						; rotate sign into top bit

.128d	 85 6e		sta $6e					STA 	POINT_CLASSIFY_1	; so -ve = $80 / +ve = $00 ? = behind point classification?

.128f	 a5 3e		lda $3e					LDA 	COS_LO

.1291	 85 22		sta $22					STA		FP_MULTIPLY_LO

.1293	 a5 3f		lda $3f					LDA 	COS_HI

.1295	 a6 52		ldx $52					LDX		X_POS_HI

.1297	 a4 53		ldy $53					LDY		X_POS_LO

.1299	 20 0a 0a	jsr $0a0a				JSR		FP_MULTIPLY			; X * COS

.129c	 84 0a		sty $0a					STy 	X_ROT_LO

.129e	 85 0b		sta $0b					STA		X_ROT_HI

.12a0	 a5 3c		lda $3c					LDA 	SIN_LO

.12a2	 85 22		sta $22					STA		FP_MULTIPLY_LO

.12a4	 a5 3d		lda $3d					LDA 	SIN_HI

.12a6	 a6 56		ldx $56					LDX		Z_POS_HI

.12a8	 a4 57		ldy $57					LDY		Z_POS_LO

.12aa	 20 0a 0a	jsr $0a0a				JSR		FP_MULTIPLY			; Z * SIN

.12ad	 84 08		sty $08					STy 	Z_ROT_LO

.12af	 49 01		eor #$01				EOR 	#$01 				; -Z * SIN

.12b1	 85 09		sta $09					STA 	Z_ROT_HI

.12b3	 a6 0a		ldx $0a					LDX 	X_ROT_LO

.12b5	 a4 0b		ldy $0b					LDY 	X_ROT_HI

.12b7	 20 b5 0a	jsr $0ab5				JSR 	FP_ADD 				; X = (X * COS) + (-Z * SIN)

.12ba	 86 58		stx $58					STX 	X_ROTATION_LO		; X rotation result?

.12bc	 98		tya					TYA 

.12bd	 85 59		sta $59					STA 	X_ROTATION_HI		; X rotation result?

.12bf	 a4 6e		ldy $6e		        LDY POINT_CLASSIFY_1	; z classification? (see #1 above) 0 is infront - !0 is behind

.12c1	 d0 2a		bne $12ed	        BNE bAA54				; behind?

.12c3	 85 09		sta $09		        STA ab09

.12c5	 a5 5c		lda $5c				LDA		Z_ROTATION_LO

.12c7	 85 22		sta $22				STA		FP_DIVIDE_LO

.12c9	 a6 09		ldx $09				LDX		ab09

.12cb	 a4 08		ldy $08				LDY		ab08

.12cd	 a5 5d		lda $5d				LDA		Z_ROTATION_HI

.12cf	 20 ee 09	jsr $09ee			JSR		FP_DIVIDE		; Z_ROTATION LO-HI / 08-09 -> 5E-5F

.12d2	 86 5e		stx $5e				STX		ab5E

.12d4	 85 5f		sta $5f				STA		ab5F

.12d6	 18		clc		        CLC 

.12d7	 69 18		adc #$18	        ADC #FOCUS ; ab21

.12d9	 70 0e		bvs $12e9	        BVS bAA50

.12db	 a8		tay		        TAY 

.12dc	 20 5e 0b	jsr $0b5e	        JSR FPTO8BIT

.12df	 b0 08		bcs $12e9	        BCS bAA50

.12e1	 69 50		adc #$50	        ADC #SCR_HOR_MID

.12e3	 85 6a		sta $6a		        STA LINE_START_HOR

.12e5	 c9 a0		cmp #$a0	        CMP #CLIP_TEST_RIGHT ; clip test

.12e7	 90 04		bcc $12ed	        BCC bAA54 ; off right

.12e9	 a9 01		lda #$01	bAA50   LDA #PNT_OFF_RIGHT ; right clip

.12eb	 85 6e		sta $6e		        STA POINT_CLASSIFY_1

.12ed	 a6 54		ldx $54		bAA54   LDX Y_POS_HI

.12ef	 a5 55		lda $55		        LDA Y_POS_LO

.12f1	 49 01		eor #$01	        EOR #$01

.12f3	 a8		tay		        TAY 

.12f4	 86 08		stx $08		        STX ab08

.12f6	 84 09		sty $09		        STY ab09

.12f8	 86 5a		stx $5a		jA8E9   STX 	Y_ROTATION_LO

.12fa	 98		tya		        TYA 

.12fb	 18		clc		        CLC 

.12fc	 69 04		adc #$04	        ADC #$04

.12fe	 70 01		bvs $1301	        BVS bA8F2

.1300	 a8		tay					TAY 

.1301	 84 5b		sty $5b		bA8F2   STY 	Y_ROTATION_HI

.1303	 84 09		sty $09		        STY ab09

.1305	 a5 6e		lda $6e		        LDA 	POINT_CLASSIFY_1

.1307	 30 2a		bmi $1333	        BMI 	bA933

.1309	 a5 5c		lda $5c				LDA		Z_ROTATION_LO

.130b	 85 22		sta $22				STA		FP_DIVIDE_LO

.130d	 a6 09		ldx $09				LDX		ab09

.130f	 a4 08		ldy $08				LDY		ab08

.1311	 a5 5d		lda $5d				LDA		Z_ROTATION_HI

.1313	 20 ee 09	jsr $09ee			JSR		FP_DIVIDE		; Z_ROTATION LO-HI / 08-09 -> 60-61

.1316	 86 60		stx $60				STX		ab60

.1318	 85 61		sta $61				STA		ab61

.131a	 18		clc		        CLC 

.131b	 69 18		adc #$18	        ADC 	#FOCUS ; ab21

.131d	 70 0e		bvs $132d	        BVS 	bA92D

.131f	 a8		tay					TAY 

.1320	 20 5e 0b	jsr $0b5e				JSR 	FPTO8BIT

.1323	 b0 08		bcs $132d	        BCS 	bA92D

.1325	 69 44		adc #$44				ADC 	#SCR_VER_MID

.1327	 85 6b		sta $6b					STA 	LINE_START_VER

.1329	 c9 88		cmp #$88				CMP 	#CLIP_TEST_BOTTOM ; clip test

.132b	 90 06		bcc $1333				BCC 	bA933

.132d	 a5 6e		lda $6e		bA92D   LDA 	POINT_CLASSIFY_1

.132f	 09 02		ora #$02	        ORA 	#PNT_OFF_BOTTOM

.1331	 85 6e		sta $6e		        STA 	POINT_CLASSIFY_1

.1333	 a4 19		ldy $19		bA933   LDY 	POINT_LINE_COUNT						; point position?

.1335	 a5 6e		lda $6e		        LDA 	POINT_CLASSIFY_1

.1337	 99 40 07	sta $0740,y	        STA 	POINT_CLASSIFICATION,Y

.133a	 30 1e		bmi $135a	        BMI 	bA95A					; behind

.133c	 a5 5e		lda $5e					LDA 	ab5E

.133e	 99 00 06	sta $0600,y				STA 	PERS_POINT_TAB_2,Y	; pers point?

.1341	 a5 5f		lda $5f					LDA 	ab5F

.1343	 99 c0 03	sta $03c0,y				STA 	PERS_POINT_TAB_3,Y	; pers point?

.1346	 a5 60		lda $60					LDA 	ab60

.1348	 99 00 07	sta $0700,y				STA 	PERS_POINT_TAB_4,Y	; pers point?

.134b	 a5 61		lda $61					LDA 	ab61

.134d	 99 40 06	sta $0640,y				STA 	PERS_POINT_TAB_5,Y	; pers point?

.1350	 a5 6a		lda $6a					LDA 	LINE_START_HOR 			; get perspective ver

.1352	 99 80 06	sta $0680,y				STA 	PERS_HOR,Y 				; put perspective ver

.1355	 a5 6b		lda $6b					LDA 	LINE_START_VER 			; get perspective hor

.1357	 99 c0 06	sta $06c0,y				STA 	PERS_VER,Y 				; put perspective hor

.135a	 a5 58		lda $58		bA95A   LDA 	X_ROTATION_LO

.135c	 99 00 01	sta $0100,y	        STA 	X_ROT_TAB_LO,Y 	; X rotation result x pos lo

.135f	 a5 59		lda $59		        LDA 	X_ROTATION_HI

.1361	 99 40 01	sta $0140,y	        STA 	X_ROT_TAB_HI,Y 	; X rotation result x pos hi

.1364	 a5 5a		lda $5a		        LDA 	Y_ROTATION_LO

.1366	 99 80 01	sta $0180,y	        STA 	Y_ROT_TAB_LO,Y	; rotation result y pos lo

.1369	 a5 5b		lda $5b		        LDA 	Y_ROTATION_HI

.136b	 99 c0 02	sta $02c0,y	        STA 	Y_ROT_TAB_HI,Y	; rotation result y pos hi

.136e	 a5 5c		lda $5c		        LDA 	Z_ROTATION_LO

.1370	 99 40 03	sta $0340,y	        STA 	Z_ROT_TAB_LO,Y	; rotation result z pos lo

.1373	 a5 5d		lda $5d		        LDA 	Z_ROTATION_HI

.1375	 99 80 03	sta $0380,y	        STA 	Z_ROT_TAB_HI,Y	; rotation result z pos hi

.1378	 60		rts		        RTS 

.1379	 e8		inx		LINE_DRAW_0_LOOP  	INX 

.137a	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.137c	 65 66		adc $66							ADC 	LINE_INC

.137e	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.1380	 90 05		bcc $1387						BCC 	LINE_DRAW_0

.1382	 c8		iny								INY 

.1383	 c0 88		cpy #$88							CPY 	#CLIP_TEST_BOTTOM

.1385	 f0 20		beq $13a7							BEQ 	LINE_DRAW_0_EXIT

.1387	 b9 30 25	lda $2530,y	LINE_DRAW_0			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.138a	 85 02		sta $02							STA 	SCREEN_POS_LO

.138c	 8a		txa							TXA 

.138d	 0a		asl							ASL 

.138e	 b9 a0 24	lda $24a0,y						LDA 	VER_POS_HI,Y

.1391	 65 25		adc $25							ADC 	SCREEN_BANK

.1393	 85 03		sta $03							STA 	SCREEN_POS_HI

.1395	 84 06		sty $06							STY 	ab06

.1397	 bc c0 25	ldy $25c0,x						LDY 	HOR_SCR_POS,X

.139a	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.139c	 1d 00 24	ora $2400,x	LINE_DRAW_0_TYPE	ORA 	ORA_PIXEL_POS,X

.139f	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.13a1	 a4 06		ldy $06							LDY 	ab06

.13a3	 e4 6c		cpx $6c							CPX 	ab6C

.13a5	 d0 d2		bne $1379						BNE 	LINE_DRAW_0_LOOP

.13a7	 60		rts		LINE_DRAW_0_EXIT   RTS 

.13a8	 c8		iny		LINE_DRAW_1_LOOP   INY  ; LINE-DRAW

.13a9	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.13ab	 65 66		adc $66							ADC 	LINE_INC

.13ad	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.13af	 90 05		bcc $13b6						BCC 	LINE_DRAW_1

.13b1	 e8		inx								INX 

.13b2	 e0 a0		cpx #$a0							CPX 	#CLIP_TEST_RIGHT ; clip test

.13b4	 f0 20		beq $13d6							BEQ 	LINE_DRAW_1_EXIT

.13b6	 b9 30 25	lda $2530,y	LINE_DRAW_1			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.13b9	 85 02		sta $02							STA 	SCREEN_POS_LO

.13bb	 8a		txa							TXA 

.13bc	 0a		asl							ASL 

.13bd	 b9 a0 24	lda $24a0,y						LDA 	VER_POS_HI,Y

.13c0	 65 25		adc $25							ADC 	SCREEN_BANK

.13c2	 85 03		sta $03							STA 	SCREEN_POS_HI

.13c4	 84 06		sty $06							STY 	ab06

.13c6	 bc c0 25	ldy $25c0,x						LDY 	HOR_SCR_POS,X

.13c9	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.13cb	 1d 00 24	ora $2400,x	LINE_DRAW_1_TYPE	ORA 	ORA_PIXEL_POS,X

.13ce	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.13d0	 a4 06		ldy $06							LDY 	ab06

.13d2	 c4 6d		cpy $6d							CPY 	ab6D

.13d4	 d0 d2		bne $13a8						BNE 	LINE_DRAW_1_LOOP ; GOTO LINE-DRAW

.13d6	 60		rts		LINE_DRAW_1_EXIT   	RTS 

.13d7	 c8		iny		LINE_DRAW_2_LOOP   	INY  ; LINE-DRAW

.13d8	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.13da	 65 66		adc $66							ADC 	LINE_INC

.13dc	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.13de	 90 05		bcc $13e5						BCC 	LINE_DRAW_2

.13e0	 ca		dex								DEX 

.13e1	 e0 ff		cpx #$ff							CPX 	#$FF

.13e3	 f0 20		beq $1405							BEQ 	LINE_DRAW_2_EXIT

.13e5	 b9 30 25	lda $2530,y	LINE_DRAW_2			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.13e8	 85 02		sta $02							STA 	SCREEN_POS_LO

.13ea	 8a		txa							TXA 

.13eb	 0a		asl							ASL 

.13ec	 b9 a0 24	lda $24a0,y						LDA 	VER_POS_HI,Y

.13ef	 65 25		adc $25							ADC 	SCREEN_BANK

.13f1	 85 03		sta $03							STA 	SCREEN_POS_HI

.13f3	 84 06		sty $06							STY 	ab06

.13f5	 bc c0 25	ldy $25c0,x						LDY 	HOR_SCR_POS,X

.13f8	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.13fa	 1d 00 24	ora $2400,x	LINE_DRAW_2_TYPE	ORA 	ORA_PIXEL_POS,X

.13fd	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.13ff	 a4 06		ldy $06							LDY 	ab06

.1401	 c4 6d		cpy $6d							CPY 	ab6D

.1403	 d0 d2		bne $13d7						BNE 	LINE_DRAW_2_LOOP ; GOTO LINE-DRAW

.1405	 60		rts		LINE_DRAW_2_EXIT   	RTS 

.1406	 ca		dex		LINE_DRAW_3_LOOP  	DEX ; LINE-DRAW

.1407	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.1409	 e5 66		sbc $66							SBC 	LINE_INC

.140b	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.140d	 b0 05		bcs $1414						BCS 	LINE_DRAW_3

.140f	 c8		iny								INY 

.1410	 c0 88		cpy #$88							CPY 	#CLIP_TEST_BOTTOM

.1412	 f0 20		beq $1434							BEQ 	LINE_DRAW_3_EXIT

.1414	 b9 30 25	lda $2530,y	LINE_DRAW_3			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.1417	 85 02		sta $02							STA 	SCREEN_POS_LO

.1419	 8a		txa							TXA 

.141a	 0a		asl							ASL 

.141b	 b9 a0 24	lda $24a0,y						LDA 	VER_POS_HI,Y

.141e	 65 25		adc $25							ADC 	SCREEN_BANK

.1420	 85 03		sta $03							STA 	SCREEN_POS_HI

.1422	 84 06		sty $06							STY 	ab06

.1424	 bc c0 25	ldy $25c0,x						LDY 	HOR_SCR_POS,X

.1427	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.1429	 1d 00 24	ora $2400,x	LINE_DRAW_3_TYPE	ORA 	ORA_PIXEL_POS,X

.142c	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.142e	 a4 06		ldy $06							LDY 	ab06

.1430	 e4 6c		cpx $6c							CPX 	ab6C

.1432	 d0 d2		bne $1406						BNE 	LINE_DRAW_3_LOOP ; GOTO LINE-DRAW

.1434	 60		rts		LINE_DRAW_3_EXIT   	RTS 

.1435	 ca		dex		LINE_DRAW_4_LOOP   	DEX  ; LINE-DRAW

.1436	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.1438	 e5 66		sbc $66							SBC 	LINE_INC

.143a	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.143c	 b0 05		bcs $1443						BCS 	LINE_DRAW_4

.143e	 88		dey								DEY 

.143f	 c0 ff		cpy #$ff							CPY 	#$FF

.1441	 f0 20		beq $1463							BEQ 	LINE_DRAW_4_EXIT

.1443	 b9 30 25	lda $2530,y	LINE_DRAW_4			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.1446	 85 02		sta $02							STA 	SCREEN_POS_LO

.1448	 8a		txa							TXA 

.1449	 0a		asl							ASL 

.144a	 b9 a0 24	lda $24a0,y						LDA 	VER_POS_HI,Y

.144d	 65 25		adc $25							ADC 	SCREEN_BANK

.144f	 85 03		sta $03							STA 	SCREEN_POS_HI

.1451	 84 06		sty $06							STY 	ab06

.1453	 bc c0 25	ldy $25c0,x						LDY 	HOR_SCR_POS,X

.1456	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.1458	 1d 00 24	ora $2400,x	LINE_DRAW_4_TYPE  	ORA 	ORA_PIXEL_POS,X

.145b	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.145d	 a4 06		ldy $06							LDY 	ab06

.145f	 e4 6c		cpx $6c							CPX 	ab6C

.1461	 d0 d2		bne $1435						BNE 	LINE_DRAW_4_LOOP ; GOTO LINE-DRAW

.1463	 60		rts		LINE_DRAW_4_EXIT   	RTS 

.1464	 88		dey		LINE_DRAW_5_LOOP   	DEY  ; LINE-DRAW

.1465	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.1467	 65 66		adc $66							ADC 	LINE_INC

.1469	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.146b	 90 05		bcc $1472						BCC 	LINE_DRAW_5

.146d	 ca		dex								DEX 

.146e	 e0 ff		cpx #$ff							CPX 	#$FF

.1470	 f0 20		beq $1492							BEQ 	LINE_DRAW_5_EXIT

.1472	 b9 30 25	lda $2530,y	LINE_DRAW_5			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.1475	 85 02		sta $02							STA 	SCREEN_POS_LO

.1477	 8a		txa							TXA 

.1478	 0a		asl							ASL 

.1479	 b9 a0 24	lda $24a0,y						LDA 	VER_POS_HI,Y

.147c	 65 25		adc $25							ADC 	SCREEN_BANK

.147e	 85 03		sta $03							STA 	SCREEN_POS_HI

.1480	 84 06		sty $06							STY 	ab06

.1482	 bc c0 25	ldy $25c0,x						LDY 	HOR_SCR_POS,X

.1485	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.1487	 1d 00 24	ora $2400,x	LINE_DRAW_5_TYPE  	ORA 	ORA_PIXEL_POS,X

.148a	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.148c	 a4 06		ldy $06							LDY 	ab06

.148e	 c4 6d		cpy $6d							CPY 	ab6D

.1490	 d0 d2		bne $1464						BNE 	LINE_DRAW_5_LOOP ; GOTO LINE-DRAW

.1492	 60		rts		LINE_DRAW_5_EXIT  	RTS

.1493	 88		dey		LINE_DRAW_6_LOOP   	DEY  ; LINE-DRAW

.1494	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.1496	 e5 66		sbc $66							SBC 	LINE_INC

.1498	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.149a	 b0 05		bcs $14a1						BCS 	LINE_DRAW_6

.149c	 e8		inx								INX             ; NEXT VER

.149d	 e0 a0		cpx #$a0							CPX 	#$A0        ; OFF BOTTOM

.149f	 f0 20		beq $14c1							BEQ 	LINE_DRAW_6_EXIT       ; EXIT

.14a1	 b9 30 25	lda $2530,y	LINE_DRAW_6			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.14a4	 85 02		sta $02							STA 	SCREEN_POS_LO

.14a6	 8a		txa							TXA 

.14a7	 0a		asl							ASL 

.14a8	 b9 a0 24	lda $24a0,y						LDA 	VER_POS_HI,Y

.14ab	 65 25		adc $25							ADC 	SCREEN_BANK

.14ad	 85 03		sta $03							STA 	SCREEN_POS_HI

.14af	 84 06		sty $06							STY 	ab06

.14b1	 bc c0 25	ldy $25c0,x						LDY 	HOR_SCR_POS,X

.14b4	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.14b6	 1d 00 24	ora $2400,x	LINE_DRAW_6_TYPE	ORA 	ORA_PIXEL_POS,X

.14b9	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.14bb	 a4 06		ldy $06							LDY 	ab06

.14bd	 c4 6d		cpy $6d							CPY 	ab6D

.14bf	 d0 d2		bne $1493						BNE 	LINE_DRAW_6_LOOP ; GOTO LINE-DRAW 

.14c1	 60		rts		LINE_DRAW_6_EXIT	RTS 

.14c2	 e8		inx		LINE_DRAW_7_LOOP   	INX	; LINE-DRAW

.14c3	 a5 08		lda $08							LDA		LINE_FRACTION_ab08

.14c5	 65 66		adc $66							ADC		LINE_INC

.14c7	 85 08		sta $08							STA		LINE_FRACTION_ab08

.14c9	 90 05		bcc $14d0						BCC		LINE_DRAW_7

.14cb	 88		dey								DEY 

.14cc	 c0 ff		cpy #$ff							CPY		#$FF

.14ce	 f0 20		beq $14f0							BEQ		LINE_DRAW_7_EXIT

.14d0	 b9 30 25	lda $2530,y	LINE_DRAW_7			LDA		VER_POS_LO,Y ; LINE-DRAW-START

.14d3	 85 02		sta $02							STA		SCREEN_POS_LO

.14d5	 8a		txa							TXA 

.14d6	 0a		asl							ASL 

.14d7	 b9 a0 24	lda $24a0,y						LDA 	VER_POS_HI,Y

.14da	 65 25		adc $25							ADC 	SCREEN_BANK

.14dc	 85 03		sta $03							STA 	SCREEN_POS_HI

.14de	 84 06		sty $06							STY 	ab06

.14e0	 bc c0 25	ldy $25c0,x						LDY 	HOR_SCR_POS,X

.14e3	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.14e5	 1d 00 24	ora $2400,x	LINE_DRAW_7_TYPE	ORA 	ORA_PIXEL_POS,X

.14e8	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.14ea	 a4 06		ldy $06							LDY 	ab06

.14ec	 e4 6c		cpx $6c							CPX 	ab6C

.14ee	 d0 d2		bne $14c2						BNE 	LINE_DRAW_7_LOOP ; GOTO LINE DRAW

.14f0	 60		rts		LINE_DRAW_7_EXIT   	RTS 

.14f1	 a9 23		lda #$23	COLOUR_SETUP_WHITE	LDA 	#>AND_PIXEL_POS

.14f3	 a2 3d		ldx #$3d						LDX 	#$3D				; AND

.14f5	 d0 04		bne $14fb						BNE 	COLOUR_SETUP 		; JUMP

.14f7	 a9 24		lda #$24	COLOUR_SETUP_BLACK	LDA 	#>ORA_PIXEL_POS

.14f9	 a2 1d		ldx #$1d						LDX 	#$1D				; ORA

.14fb	 8d 9e 13	sta $139e	COLOUR_SETUP		STA 	LINE_DRAW_0_TYPE +2

.14fe	 8d cd 13	sta $13cd						STA 	LINE_DRAW_1_TYPE +2

.1501	 8d fc 13	sta $13fc						STA 	LINE_DRAW_2_TYPE +2

.1504	 8d 2b 14	sta $142b						STA 	LINE_DRAW_3_TYPE +2

.1507	 8d 5a 14	sta $145a						STA 	LINE_DRAW_4_TYPE +2

.150a	 8d 89 14	sta $1489						STA 	LINE_DRAW_5_TYPE +2

.150d	 8d b8 14	sta $14b8						STA 	LINE_DRAW_6_TYPE +2

.1510	 8d e7 14	sta $14e7						STA 	LINE_DRAW_7_TYPE +2

.1513	 8d c5 0c	sta $0cc5						STA 	LINE_DRAW_8_TYPE +2

.1516	 8e 9c 13	stx $139c						STX 	LINE_DRAW_0_TYPE

.1519	 8e cb 13	stx $13cb						STX 	LINE_DRAW_1_TYPE

.151c	 8e fa 13	stx $13fa						STX 	LINE_DRAW_2_TYPE

.151f	 8e 29 14	stx $1429						STX 	LINE_DRAW_3_TYPE

.1522	 8e 58 14	stx $1458						STX 	LINE_DRAW_4_TYPE

.1525	 8e 87 14	stx $1487						STX 	LINE_DRAW_5_TYPE

.1528	 8e b6 14	stx $14b6						STX 	LINE_DRAW_6_TYPE

.152b	 8e e5 14	stx $14e5						STX 	LINE_DRAW_7_TYPE

.152e	 8e c3 0c	stx $0cc3						STX 	LINE_DRAW_8_TYPE

.1531	 60		rts							RTS

.1532	 a9 e0		lda #$e0	DRAW_SCREEN	LDA		#$E0

.1534	 cd 12 d0	cmp $d012	WAIT_RASTER	CMP		$D012

.1537	 d0 fb		bne $1534				BNE 	WAIT_RASTER

.1539	 e6 24		inc $24					INC		SCREEN_FLIP		; INCREMENT SCREEN FLIP

.153b	 a5 24		lda $24					LDA		SCREEN_FLIP		; GET SCREEN FLIP

.153d	 4a		lsr					LSR 					; SHIFT BIT0 INTO CARRY

.153e	 b0 0a		bcs $154a				BCS		SCRN_2			; CARRY SET ?

.1540	 a9 40		lda #$40				LDA		#SCREEN_0		; SCREEN 1 OFFSET

.1542	 85 25		sta $25					STA		SCREEN_BANK		; SCREEN 1 OFFSET

.1544	 a9 78		lda #$78				LDA		#$78

.1546	 85 c7		sta $c7					STA		VIC_SCREEN_BANK

.1548	 d0 08		bne $1552				BNE		SCNCLR			; JUMP

.154a	 a9 60		lda #$60	SCRN_2  	LDA		#SCREEN_1		; SCREEN 2 OFFSET

.154c	 85 25		sta $25					STA		SCREEN_BANK		; SCREEN 2 OFFSET

.154e	 a9 70		lda #$70				LDA		#$70

.1550	 85 c7		sta $c7					STA		VIC_SCREEN_BANK

.1552	 a9 a5		lda #$a5	SCNCLR  	LDA 	#$A5

.1554	 a2 88		ldx #$88				LDX 	#136

.1556	 a4 25		ldy $25					LDY 	SCREEN_BANK

.1558	 c0 60		cpy #$60				CPY 	#SCREEN_1

.155a	 f0 7c		beq $15d8				BEQ 	CLSN1LP

.155c	 9d ff 3f	sta $3fff,x	CLSN0LP		STA 	SCREEN0-1+(136*00),X ; 1

.155f	 9d 87 40	sta $4087,x				STA 	SCREEN0-1+(136*01),X ;f40F7,X ; 2

.1562	 9d 0f 41	sta $410f,x				STA 	SCREEN0-1+(136*02),X ;f41EF,X ;3

.1565	 9d 97 41	sta $4197,x				STA 	SCREEN0-1+(136*03),X ;f42E7,X ;4

.1568	 9d 1f 42	sta $421f,x				STA 	SCREEN0-1+(136*04),X ;f43DF,X ;5

.156b	 9d a7 42	sta $42a7,x				STA 	SCREEN0-1+(136*05),X ;f44D7,X ;6

.156e	 9d 2f 43	sta $432f,x				STA 	SCREEN0-1+(136*06),X ;f45CF,X ;7

.1571	 9d b7 43	sta $43b7,x				STA 	SCREEN0-1+(136*07),X ;f46C7,X ;8

.1574	 9d 3f 44	sta $443f,x				STA 	SCREEN0-1+(136*08),X ;f47BF,X ;9

.1577	 9d c7 44	sta $44c7,x				STA 	SCREEN0-1+(136*09),X ;f48B7,X ;10

.157a	 9d 4f 45	sta $454f,x				STA 	SCREEN0-1+(136*10),X ;f49AF,X ;11

.157d	 9d d7 45	sta $45d7,x				STA 	SCREEN0-1+(136*11),X ;f4AA7,X ;12

.1580	 9d 5f 46	sta $465f,x				STA 	SCREEN0-1+(136*12),X ;f4B9F,X ;13

.1583	 9d e7 46	sta $46e7,x				STA 	SCREEN0-1+(136*13),X ;f4C97,X ;14

.1586	 9d 6f 47	sta $476f,x				STA 	SCREEN0-1+(136*14),X ;f4D8F,X ;15

.1589	 9d f7 47	sta $47f7,x				STA 	SCREEN0-1+(136*15),X ;f4E87,X ;16

.158c	 9d 7f 48	sta $487f,x				STA 	SCREEN0-1+(136*16),X ;f4F7F,X ;17

.158f	 9d 07 49	sta $4907,x				STA 	SCREEN0-1+(136*17),X ;f5077,X ;18

.1592	 9d 8f 49	sta $498f,x				STA 	SCREEN0-1+(136*18),X ;f516F,X ;19

.1595	 9d 17 4a	sta $4a17,x				STA 	SCREEN0-1+(136*19),X ;f5267,X ;20

.1598	 9d 9f 4a	sta $4a9f,x				STA 	SCREEN0-1+(136*20),X ;f535F,X ;21

.159b	 9d 27 4b	sta $4b27,x				STA 	SCREEN0-1+(136*21),X ;f5447,X ;22

.159e	 9d af 4b	sta $4baf,x				sta 	SCREEN0-1+(136*22),X ;f5447,x ;23

.15a1	 9d 37 4c	sta $4c37,x				sta 	SCREEN0-1+(136*23),X ;f5447,x ;24

.15a4	 9d bf 4c	sta $4cbf,x				sta 	SCREEN0-1+(136*24),X ;f5447,x ;25

.15a7	 9d 47 4d	sta $4d47,x				sta 	SCREEN0-1+(136*25),X ;f5447,x ;26

.15aa	 9d cf 4d	sta $4dcf,x				sta 	SCREEN0-1+(136*26),X ;f5447,x ;27

.15ad	 9d 57 4e	sta $4e57,x				sta 	SCREEN0-1+(136*27),X ;f5447,x ;28

.15b0	 9d df 4e	sta $4edf,x				sta 	SCREEN0-1+(136*28),X ;f5447,x ;29

.15b3	 9d 67 4f	sta $4f67,x				sta 	SCREEN0-1+(136*29),X ;f5447,x ;30

.15b6	 9d ef 4f	sta $4fef,x				sta 	SCREEN0-1+(136*30),X ;f5447,x ;31

.15b9	 9d 77 50	sta $5077,x				sta 	SCREEN0-1+(136*31),X ;f5447,x ;32

.15bc	 9d ff 50	sta $50ff,x				sta 	SCREEN0-1+(136*32),X ;f5447,x ;33

.15bf	 9d 87 51	sta $5187,x				sta 	SCREEN0-1+(136*33),X ;f5447,x ;34

.15c2	 9d 0f 52	sta $520f,x				sta 	SCREEN0-1+(136*34),X ;f5447,x ;35

.15c5	 9d 97 52	sta $5297,x				sta 	SCREEN0-1+(136*35),X ;f5447,x ;36

.15c8	 9d 1f 53	sta $531f,x				sta 	SCREEN0-1+(136*36),X ;f5447,x ;37

.15cb	 9d a7 53	sta $53a7,x				sta 	SCREEN0-1+(136*37),X ;f5447,x ;38

.15ce	 9d 2f 54	sta $542f,x				sta 	SCREEN0-1+(136*38),X ;f5447,x ;39

.15d1	 9d b7 54	sta $54b7,x				sta 	SCREEN0-1+(136*39),X ;f5447,x ;40

.15d4	 ca		dex					DEX 

.15d5	 d0 85		bne $155c				BNE 	CLSN0LP

.15d7	 60		rts					RTS 

.15d8	 9d ff 5f	sta $5fff,x	CLSN1LP		STA 	SCREEN1-1+(136*00),X ; 1

.15db	 9d 87 60	sta $6087,x				STA 	SCREEN1-1+(136*01),X ;f40F7,X ; 2

.15de	 9d 0f 61	sta $610f,x				STA 	SCREEN1-1+(136*02),X ;f41EF,X ;3

.15e1	 9d 97 61	sta $6197,x				STA 	SCREEN1-1+(136*03),X ;f42E7,X ;4

.15e4	 9d 1f 62	sta $621f,x				STA 	SCREEN1-1+(136*04),X ;f43DF,X ;5

.15e7	 9d a7 62	sta $62a7,x				STA 	SCREEN1-1+(136*05),X ;f44D7,X ;6

.15ea	 9d 2f 63	sta $632f,x				STA 	SCREEN1-1+(136*06),X ;f45CF,X ;7

.15ed	 9d b7 63	sta $63b7,x				STA 	SCREEN1-1+(136*07),X ;f46C7,X ;8

.15f0	 9d 3f 64	sta $643f,x				STA 	SCREEN1-1+(136*08),X ;f47BF,X ;9

.15f3	 9d c7 64	sta $64c7,x				STA 	SCREEN1-1+(136*09),X ;f48B7,X ;10

.15f6	 9d 4f 65	sta $654f,x				STA 	SCREEN1-1+(136*10),X ;f49AF,X ;11

.15f9	 9d d7 65	sta $65d7,x				STA 	SCREEN1-1+(136*11),X ;f4AA7,X ;12

.15fc	 9d 5f 66	sta $665f,x				STA 	SCREEN1-1+(136*12),X ;f4B9F,X ;13

.15ff	 9d e7 66	sta $66e7,x				STA 	SCREEN1-1+(136*13),X ;f4C97,X ;14

.1602	 9d 6f 67	sta $676f,x				STA 	SCREEN1-1+(136*14),X ;f4D8F,X ;15

.1605	 9d f7 67	sta $67f7,x				STA 	SCREEN1-1+(136*15),X ;f4E87,X ;16

.1608	 9d 7f 68	sta $687f,x				STA 	SCREEN1-1+(136*16),X ;f4F7F,X ;17

.160b	 9d 07 69	sta $6907,x				STA 	SCREEN1-1+(136*17),X ;f5077,X ;18

.160e	 9d 8f 69	sta $698f,x				STA 	SCREEN1-1+(136*18),X ;f516F,X ;19

.1611	 9d 17 6a	sta $6a17,x				STA 	SCREEN1-1+(136*19),X ;f5267,X ;20

.1614	 9d 9f 6a	sta $6a9f,x				STA 	SCREEN1-1+(136*20),X ;f535F,X ;21

.1617	 9d 27 6b	sta $6b27,x				STA 	SCREEN1-1+(136*21),X ;f5447,X ;22

.161a	 9d af 6b	sta $6baf,x				sta 	SCREEN1-1+(136*22),X ;f5447,x ;23

.161d	 9d 37 6c	sta $6c37,x				sta 	SCREEN1-1+(136*23),X ;f5447,x ;24

.1620	 9d bf 6c	sta $6cbf,x				sta 	SCREEN1-1+(136*24),X ;f5447,x ;25

.1623	 9d 47 6d	sta $6d47,x				sta 	SCREEN1-1+(136*25),X ;f5447,x ;26

.1626	 9d cf 6d	sta $6dcf,x				sta 	SCREEN1-1+(136*26),X ;f5447,x ;27

.1629	 9d 57 6e	sta $6e57,x				sta 	SCREEN1-1+(136*27),X ;f5447,x ;28

.162c	 9d df 6e	sta $6edf,x				sta 	SCREEN1-1+(136*28),X ;f5447,x ;29

.162f	 9d 67 6f	sta $6f67,x				sta 	SCREEN1-1+(136*29),X ;f5447,x ;30

.1632	 9d ef 6f	sta $6fef,x				sta 	SCREEN1-1+(136*30),X ;f5447,x ;31

.1635	 9d 77 70	sta $7077,x				sta 	SCREEN1-1+(136*31),X ;f5447,x ;32

.1638	 9d ff 70	sta $70ff,x				sta 	SCREEN1-1+(136*32),X ;f5447,x ;33

.163b	 9d 87 71	sta $7187,x				sta 	SCREEN1-1+(136*33),X ;f5447,x ;34

.163e	 9d 0f 72	sta $720f,x				sta 	SCREEN1-1+(136*34),X ;f5447,x ;35

.1641	 9d 97 72	sta $7297,x				sta 	SCREEN1-1+(136*35),X ;f5447,x ;36

.1644	 9d 1f 73	sta $731f,x				sta 	SCREEN1-1+(136*36),X ;f5447,x ;37

.1647	 9d a7 73	sta $73a7,x				sta 	SCREEN1-1+(136*37),X ;f5447,x ;38

.164a	 9d 2f 74	sta $742f,x				sta 	SCREEN1-1+(136*38),X ;f5447,x ;39

.164d	 9d b7 74	sta $74b7,x				sta 	SCREEN1-1+(136*39),X ;f5447,x ;40

.1650	 ca		dex					DEX 

.1651	 d0 85		bne $15d8				BNE 	CLSN1LP

.1653	 60		rts					RTS 

.1654					read_joystick_keyboard
.1654	 a9 00		lda #$00	        LDA #$00

.1656	 8d 02 dc	sta $dc02	        STA $DC02    ;CIA1: Data Direction Register A

.1659	 af 00 dc	lax $dc00	        LAX $DC00    ;CIA1: Data Port Register A into A and X

.165c	 29 0f		and #$0f	        AND #$0F

.165e	 85 80		sta $80		        STA JOYSTICK_MOVEMENT ; JOYSTICK MOVEMENT

.1660	 8a		txa		        TXA 

.1661	 4a		lsr		        LSR 

.1662	 4a		lsr		        LSR 

.1663	 4a		lsr		        LSR 

.1664	 4a		lsr		        LSR 

.1665	 29 01		and #$01	        AND #$01

.1667	 d0 0b		bne $1674			bne rjk

.1669	 ad 1e 1a	lda $1a1e				lda OBJECTS_TO_DRAW+1

.166c	 18		clc					clc

.166d	 69 01		adc #$01				adc #1

.166f	 29 1f		and #$1f				and #31

.1671	 8d 1e 1a	sta $1a1e				sta OBJECTS_TO_DRAW+1

.1674	 60		rts		rjk		RTS 

.1675	 b9 0d 17	lda $170d,y	HEXCHAR		LDA		HEX0,Y

.1678	 9d cd ab	sta $abcd,x	HEX_NUMBER0	STA		$ABCD,X

.167b	 b9 1d 17	lda $171d,y				LDA		HEX1,Y

.167e	 9d cd ab	sta $abcd,x	HEX_NUMBER1	STA		$ABCD,X

.1681	 b9 2d 17	lda $172d,y				LDA		HEX2,Y

.1684	 9d cd ab	sta $abcd,x	HEX_NUMBER2	STA		$ABCD,X

.1687	 b9 3d 17	lda $173d,y				LDA		HEX3,Y

.168a	 9d cd ab	sta $abcd,x	HEX_NUMBER3	STA		$ABCD,X

.168d	 b9 4d 17	lda $174d,y				LDA		HEX4,Y

.1690	 9d cd ab	sta $abcd,x	HEX_NUMBER4	STA		$ABCD,X

.1693	 60		rts					RTS

.1694					hex16
.1694	 84 20		sty $20					STY		REGY

.1696	 86 0f		stx $0f					STX		REGX		

.1698	 a2 00		ldx #$00				LDX		#0

.169a	 20 a7 16	jsr $16a7				JSR		HEX8

.169d	 a5 0f		lda $0f					LDA		REGX

.169f	 a4 20		ldy $20					LDY		REGY

.16a1	 a2 10		ldx #$10				LDX		#16

.16a3	 20 a7 16	jsr $16a7				JSR		HEX8

.16a6	 60		rts					RTS

.16a7					hex8
.16a7	 18		clc					CLC

.16a8	 85 0e		sta $0e					STA		REGA

.16aa	 b9 30 25	lda $2530,y				LDA		VER_POS_LO+0,Y

.16ad	 8d 79 16	sta $1679				STA		HEX_NUMBER0+1

.16b0	 b9 a0 24	lda $24a0,y				LDA		VER_POS_HI+0,Y

.16b3	 18		clc					CLC

.16b4	 65 25		adc $25					ADC 	SCREEN_BANK

.16b6	 8d 7a 16	sta $167a				STA		HEX_NUMBER0+2

.16b9	 b9 31 25	lda $2531,y				LDA		VER_POS_LO+1,Y

.16bc	 8d 7f 16	sta $167f				STA		HEX_NUMBER1+1

.16bf	 b9 a1 24	lda $24a1,y				LDA		VER_POS_HI+1,Y 

.16c2	 18		clc					CLC

.16c3	 65 25		adc $25					ADC 	SCREEN_BANK

.16c5	 8d 80 16	sta $1680				STA		HEX_NUMBER1+2

.16c8	 b9 32 25	lda $2532,y				LDA		VER_POS_LO+2,Y

.16cb	 8d 85 16	sta $1685				STA		HEX_NUMBER2+1

.16ce	 b9 a2 24	lda $24a2,y				LDA		VER_POS_HI+2,Y 

.16d1	 18		clc					CLC

.16d2	 65 25		adc $25					ADC 	SCREEN_BANK

.16d4	 8d 86 16	sta $1686				STA		HEX_NUMBER2+2

.16d7	 b9 33 25	lda $2533,y				LDA		VER_POS_LO+3,Y

.16da	 8d 8b 16	sta $168b				STA		HEX_NUMBER3+1

.16dd	 b9 a3 24	lda $24a3,y				LDA		VER_POS_HI+3,Y 

.16e0	 18		clc					CLC

.16e1	 65 25		adc $25					ADC 	SCREEN_BANK

.16e3	 8d 8c 16	sta $168c				STA		HEX_NUMBER3+2

.16e6	 b9 34 25	lda $2534,y				LDA		VER_POS_LO+4,Y

.16e9	 8d 91 16	sta $1691				STA		HEX_NUMBER4+1

.16ec	 b9 a4 24	lda $24a4,y				LDA		VER_POS_HI+4,Y 

.16ef	 18		clc					CLC

.16f0	 65 25		adc $25					ADC 	SCREEN_BANK

.16f2	 8d 92 16	sta $1692				STA		HEX_NUMBER4+2

.16f5	 a5 0e		lda $0e					LDA		REGA

.16f7	 4a		lsr					LSR

.16f8	 4a		lsr					LSR

.16f9	 4a		lsr					LSR

.16fa	 4a		lsr					LSR

.16fb	 a8		tay					TAY

.16fc	 20 75 16	jsr $1675				JSR		HEXCHAR

.16ff	 8a		txa					TXA

.1700	 18		clc					CLC

.1701	 69 08		adc #$08				ADC 	#8

.1703	 aa		tax					TAX

.1704	 a5 0e		lda $0e					LDA		REGA

.1706	 29 0f		and #$0f				AND		#15

.1708	 a8		tay					TAY

.1709	 20 75 16	jsr $1675				JSR		HEXCHAR

.170c	 60		rts					RTS

=0100					X_ROT_TAB_LO =$0100 ; UNKNOWN_POINT_TAB_6

=0140					X_ROT_TAB_HI = $0140

=0180					Y_ROT_TAB_LO = $0180

=02c0					Y_ROT_TAB_HI = $02C0

=0340					Z_ROT_TAB_LO = $0340 

=0380					Z_ROT_TAB_HI = $0380

=03c0					PERS_POINT_TAB_3 = $03C0

=0600					PERS_POINT_TAB_2 = $0600

=0640					PERS_POINT_TAB_5 = $0640

=0680					PERS_HOR = $0680

=06c0					PERS_VER = $06C0

=0700					PERS_POINT_TAB_4 = $0700 ; .FILL 64,0  ; 7600

=0740					POINT_CLASSIFICATION = $0740 ; 00 = point is onscreen - 01 = point needs off left/right - 02 = point is off top/bottom - 03 = point is off left/right + top/bottom - 80 / minus = point is behind


>170d	 80 a2 80 80 88 80 80 80 	HEX0	.BYTE %10000000,%10100010,%10000000,%10000000,%10001000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000010,%10000000,%10000000 

>1715	 80 80 80 80 80 82 80 80 
>171d	 88 82 a8 a8 88 8a 8a a8 	HEX1	.BYTE %10001000,%10000010,%10101000,%10101000,%10001000,%10001010,%10001010,%10101000,%10001000,%10001000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010 

>1725	 88 88 88 88 8a 88 8a 8a 
>172d	 88 a2 80 80 80 80 80 a8 	HEX2	.BYTE %10001000,%10100010,%10000000,%10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10000000,%10000010,%10001010,%10001000,%10000000,%10000000

>1735	 80 80 80 82 8a 88 80 80 
>173d	 88 a2 8a a8 a8 a8 88 a8 	HEX3	.BYTE %10001000,%10100010,%10001010,%10101000,%10101000,%10101000,%10001000,%10101000,%10001000,%10101000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010

>1745	 88 a8 88 88 8a 88 8a 8a 
>174d	 80 80 80 80 a8 80 80 a8 	HEX4	.BYTE %10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10101000,%10000000,%10000000,%10001000,%10000000,%10100000,%10000010,%10000000,%10001010

>1755	 80 80 88 80 a0 82 80 8a 

.175d					obj_x_msb

>175d	 00 14 28 3c 50 64 78 8c 	.BYTE 00,20,40,60,80,100,120,140,160,180,200,220

>1765	 a0 b4 c8 dc 

.179d					obj_y_msb
.17dd					obj_z_msb

>17dd	 00 14 28 3c 50 64 78 8c 	.BYTE 00,20,40,60,80,100,120,140,160,180,200,220

>17e5	 a0 b4 c8 dc 

.181d					obj_x_hsb
.185d					obj_y_hsb
.189d					obj_z_hsb
.18dd					object_shape_ptr_lo

>18dd	 5d a7 e6 12 2f 4c 93 b9  		.BYTE <OBJ_01,<OBJ_02,<OBJ_03,<OBJ_04,<OBJ_05,<OBJ_06,<OBJ_07,<OBJ_08

>18e5	 ea 07 25 4d 73 a2 d1 f7  	    .BYTE <OBJ_09,<OBJ_10,<OBJ_11,<OBJ_12,<OBJ_13,<OBJ_14,<OBJ_15,<OBJ_16

>18ed	 2f 67 95 c5 fe a7 e6 12  		.BYTE <OBJ_17,<OBJ_18,<OBJ_19,<OBJ_20,<OBJ_21,<OBJ_02,<OBJ_03,<OBJ_04

>18f5	 2f 4c 93 b9 ea 07 25 4d  		.BYTE <OBJ_05,<OBJ_06,<OBJ_07,<OBJ_08,<OBJ_09,<OBJ_10,<OBJ_11,<OBJ_12

>18fd	 73 a2 d1 f7 2f 67 95 c5  		.BYTE <OBJ_13,<OBJ_14,<OBJ_15,<OBJ_16,<OBJ_17,<OBJ_18,<OBJ_19,<OBJ_20

>1905	 80 06 74 76 e5 28 b8 87  	        .BYTE $80,$06,$74,$76,$E5,$28,$B8,$87

>190d	 fa cf 5e 0c be 61 8f bf  	        .BYTE $FA,$CF,$5E,$0C,$BE,$61,$8F,$BF

>1915	 45 f8 00 00 f8 4a 4a 8d  	        .BYTE $45,$F8,$00,$00,$F8,$4A,$4A,$8D


.191d					object_shape_ptr_hi

>191d	 1a 1a 1a 1b 1b 1b 1b 1b  		.BYTE >OBJ_01,>OBJ_02,>OBJ_03,>OBJ_04,>OBJ_05,>OBJ_06,>OBJ_07,>OBJ_08

>1925	 1b 1c 1c 1c 1c 1c 1c 1c  	    .BYTE >OBJ_09,>OBJ_10,>OBJ_11,>OBJ_12,>OBJ_13,>OBJ_14,>OBJ_15,>OBJ_16

>192d	 1d 1d 1d 1d 1d 1a 1a 1b  		.BYTE >OBJ_17,>OBJ_18,>OBJ_19,>OBJ_20,>OBJ_21,>OBJ_02,>OBJ_03,>OBJ_04

>1935	 1b 1b 1b 1b 1b 1c 1c 1c  		.BYTE >OBJ_05,>OBJ_06,>OBJ_07,>OBJ_08,>OBJ_09,>OBJ_10,>OBJ_11,>OBJ_12

>193d	 1c 1c 1c 1c 1d 1d 1d 1d  		.BYTE >OBJ_13,>OBJ_14,>OBJ_15,>OBJ_16,>OBJ_17,>OBJ_18,>OBJ_19,>OBJ_20

>1945	 1a 19 19 1d 1a 1b 1a 18  	        .BYTE $1A,$19,$19,$1D,$1A,$1B,$1A,$18

>194d	 17 1e 1b 1f 1c 3e 3e 3e  	        .BYTE $17,$1E,$1B,$1F,$1C,$3E,$3E,$3E

>1955	 1b 3e 17 17 3e 3f 3f 3f  	        .BYTE $1B,$3E,$17,$17,$3E,$3F,$3F,$3F


.195d					obj_x_lsb
.199d					obj_y_lsb
.19dd					obj_z_lsb
.1a1d					objects_to_draw

>1a1d	 00                       			.BYTE 00

>1a1e	 01                       			.BYTE 01 ; object being drawn

>1a1f	 02 03 04 05 06 07        			.BYTE 02,03,04,05,06,07

>1a25	 08 09 0a 0b 0c 0d 0e 0f  	        .BYTE 08,09,10,11,12,13,14,15

>1a2d	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a35	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a3d	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a45	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a4d	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a55	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a5d	 0f                       	OBJ_01	.BYTE $0F

>1a5e	 f8 00 10                 			.BYTE $F8,$00,$10

>1a61	 fa 0c 0c                 			.BYTE $FA,$0C,$0C

>1a64	 fa 0c 00                 			.BYTE $FA,$0C,$00

>1a67	 f9 06 fd                 			.BYTE $F9,$06,$FD

>1a6a	 f9 04 f4                 			.BYTE $F9,$04,$F4

>1a6d	 fc 04 f0                 			.BYTE $FC,$04,$F0

>1a70	 fc 00 f0                 			.BYTE $FC,$00,$F0

>1a73	 f9 00 f4                 	        .BYTE $F9,$00,$F4

>1a76	 08 00 10                 			.BYTE $08,$00,$10

>1a79	 06 0c 0c                 			.BYTE $06,$0C,$0C

>1a7c	 06 0c 00                 			.BYTE $06,$0C,$00

>1a7f	 07 06 fd                 			.BYTE $07,$06,$FD

>1a82	 07 04 f4                 			.BYTE $07,$04,$F4

>1a85	 04 04 f0                 			.BYTE $04,$04,$F0

>1a88	 04 00 f0                 			.BYTE $04,$00,$F0

>1a8b	 07 00 f4                 	        .BYTE $07,$00,$F4

>1a8e	 17                       			.BYTE $17

>1a8f	 01 12 23 34 45 56 67 70 			.BYTE $01,$12,$23,$34,$45,$56,$67,$70,$89,$9A,$AB,$BC,$CD,$DE,$EF,$F8,$47,$CF,$08,$19,$2A,$3B,$5D,$6E

>1a97	 89 9a ab bc cd de ef f8 
>1a9f	 47 cf 08 19 2a 3b 5d 6e 
>1aa7	 0f                       	OBJ_02	.BYTE $0F

>1aa8	 f8 04 18                 			.BYTE $F8,$04,$18

>1aab	 08 04 18                 	        .BYTE $08,$04,$18

>1aae	 00 04 e8                 			.BYTE $00,$04,$E8

>1ab1	 00 0c 18                 			.BYTE $00,$0C,$18

>1ab4	 e2 04 18                 			.BYTE $E2,$04,$18

>1ab7	 1e 04 18                 			.BYTE $1E,$04,$18

>1aba	 fc 04 00                 			.BYTE $FC,$04,$00

>1abd	 04 04 00                 			.BYTE $04,$04,$00

>1ac0	 00 14 18                 			.BYTE $00,$14,$18

>1ac3	 00 0a 0c                 	        .BYTE $00,$0A,$0C

>1ac6	 f2 04 10                 			.BYTE $F2,$04,$10

>1ac9	 f2 00 10                 			.BYTE $F2,$00,$10

>1acc	 0e 04 10                 			.BYTE $0E,$04,$10

>1acf	 0e 00 10                 			.BYTE $0E,$00,$10

>1ad2	 00 04 f0                 			.BYTE $00,$04,$F0

>1ad5	 00 00 f0                 			.BYTE $00,$00,$F0

>1ad8	 0c                       			.BYTE $0C

>1ad9	 20 23 21 13 03 45 46 57 			.BYTE $20,$23,$21,$13,$03,$45,$46,$57,$38,$89,$AB,$CD,$EF

>1ae1	 38 89 ab cd ef 
>1ae6	 07                       	OBJ_03	.BYTE $07

>1ae7	 00 00 00                 			.BYTE $00,$00,$00

>1aea	 ec 07 00                 			.BYTE $EC,$07,$00

>1aed	 f6 07 11                 			.BYTE $F6,$07,$11

>1af0	 0a 07 11                 			.BYTE $0A,$07,$11

>1af3	 14 07 00                 	        .BYTE $14,$07,$00

>1af6	 0a 07 ef                 			.BYTE $0A,$07,$EF

>1af9	 f6 07 ef                 			.BYTE $F6,$07,$EF

>1afc	 00 10 00                 			.BYTE $00,$10,$00

>1aff	 11                       			.BYTE $11

>1b00	 01 02 03 04 05 06 71 72 			.BYTE $01,$02,$03,$04,$05,$06,$71,$72,$73,$74,$75,$76,$12,$23,$34,$45,$56,$61

>1b08	 73 74 75 76 12 23 34 45 
>1b10	 56 61 
>1b12	 05                       	OBJ_04	.BYTE $05

>1b13	 f4 00 10                 	        .BYTE $F4,$00,$10

>1b16	 00 00 f0                 			.BYTE $00,$00,$F0

>1b19	 0c 00 10                 			.BYTE $0C,$00,$10

>1b1c	 f4 0a 10                 			.BYTE $F4,$0A,$10

>1b1f	 00 0a f0                 			.BYTE $00,$0A,$F0

>1b22	 0c 0a 10                 			.BYTE $0C,$0A,$10

>1b25	 08                       			.BYTE $08

>1b26	 01 12 20 34 45 53 03 14 			.BYTE $01,$12,$20,$34,$45,$53,$03,$14,$25

>1b2e	 25 
>1b2f	 05                       	OBJ_05	.BYTE $05

>1b30	 fb 00 ff                 			.BYTE $FB,$00,$FF

>1b33	 05 00 ff                 			.BYTE $05,$00,$FF

>1b36	 00 0c ff                 			.BYTE $00,$0C,$FF

>1b39	 fb 00 01                 			.BYTE $FB,$00,$01

>1b3c	 05 00 01                 			.BYTE $05,$00,$01

>1b3f	 00 0c 01                 			.BYTE $00,$0C,$01

>1b42	 08                       			.BYTE $08

>1b43	 01 12 20 34 45 53 03 14 			.BYTE $01,$12,$20,$34,$45,$53,$03,$14,$25

>1b4b	 25 
>1b4c	 0f                       	OBJ_06	.BYTE $0F

>1b4d	 f0 00 10                 			.BYTE $F0,$00,$10

>1b50	 10 00 10                 	        .BYTE $10,$00,$10

>1b53	 00 00 ec                 			.BYTE $00,$00,$EC

>1b56	 fc 00 04                 			.BYTE $FC,$00,$04

>1b59	 04 00 04                 			.BYTE $04,$00,$04

>1b5c	 00 00 fc                 			.BYTE $00,$00,$FC

>1b5f	 fd 04 03                 			.BYTE $FD,$04,$03

>1b62	 03 04 03                 			.BYTE $03,$04,$03

>1b65	 00 04 fd                 			.BYTE $00,$04,$FD

>1b68	 fe 14 02                 	        .BYTE $FE,$14,$02

>1b6b	 02 14 02                 			.BYTE $02,$14,$02

>1b6e	 00 14 fe                 			.BYTE $00,$14,$FE

>1b71	 ff 04 01                 			.BYTE $FF,$04,$01

>1b74	 01 04 01                 			.BYTE $01,$04,$01

>1b77	 00 04 ff                 			.BYTE $00,$04,$FF

>1b7a	 00 34 00                 			.BYTE $00,$34,$00

>1b7d	 14                       			.BYTE $14

>1b7e	 f6 f7 f8 90 a1 b2 06 17 			.BYTE $F6,$F7,$F8,$90,$A1,$B2,$06,$17,$28,$C3,$D4,$E5,$34,$45,$53,$67,$78,$86,$CD,$DE,$EC

>1b86	 28 c3 d4 e5 34 45 53 67 
>1b8e	 78 86 cd de ec 
>1b93	 07                       	OBJ_07	.BYTE $07

>1b94	 f8 f8 f8                 			.BYTE $F8,$F8,$F8

>1b97	 08 f8 f8                 			.BYTE $08,$F8,$F8

>1b9a	 08 f8 08                 			.BYTE $08,$F8,$08

>1b9d	 f8 f8 08                 			.BYTE $F8,$F8,$08

>1ba0	 f8 08 f8                 			.BYTE $F8,$08,$F8

>1ba3	 08 08 f8                 			.BYTE $08,$08,$F8

>1ba6	 08 08 08                 			.BYTE $08,$08,$08

>1ba9	 f8 08 08                 			.BYTE $F8,$08,$08

>1bac	 0b                       			.BYTE $0B

>1bad	 01 12 23 30 04 15 26 37 			.BYTE $01,$12,$23,$30,$04,$15,$26,$37,$45,$56,$67,$74

>1bb5	 45 56 67 74 
>1bb9	 09                       	OBJ_08	.BYTE $09

>1bba	 fc 07 04                 			.BYTE $FC,$07,$04

>1bbd	 04 07 04                 			.BYTE $04,$07,$04

>1bc0	 00 07 fc                 	        .BYTE $00,$07,$FC

>1bc3	 00 0e 00                 			.BYTE $00,$0E,$00

>1bc6	 ff 07 01                 			.BYTE $FF,$07,$01

>1bc9	 01 07 01                 			.BYTE $01,$07,$01

>1bcc	 00 07 ff                 			.BYTE $00,$07,$FF

>1bcf	 fe 00 02                 			.BYTE $FE,$00,$02

>1bd2	 02 00 02                 			.BYTE $02,$00,$02

>1bd5	 00 00 fe                 			.BYTE $00,$00,$FE

>1bd8	 0e                       	        .BYTE $0E

>1bd9	 01 12 20 03 13 23 45 56 			.BYTE $01,$12,$20,$03,$13,$23,$45,$56,$64,$78,$89,$97,$47,$58,$69,$0F,$F9

>1be1	 64 78 89 97 47 58 69 0f 
>1be9	 f9 
>1bea	 05                       	OBJ_09  .BYTE $05

>1beb	 8b 00 8f                 	        .BYTE $8B,$00,$8F

>1bee	 75 00 8f                 	        .BYTE $75,$00,$8F

>1bf1	 00 0c 8f                 	        .BYTE $00,$0C,$8F

>1bf4	 8b 00 71                 	        .BYTE $8B,$00,$71

>1bf7	 75 00 71                 	        .BYTE $75,$00,$71

>1bfa	 00 0c 71                 	        .BYTE $00,$0C,$71

>1bfd	 08                       	        .BYTE $08

>1bfe	 01 12 20 34 45 53 03 14 	        .BYTE $01,$12,$20, $34,$45,$53, $03,$14,$25

>1c06	 25 
>1c07	 05                       	OBJ_10  .BYTE $05

>1c08	 f0 00 20                 			.BYTE $F0,$00,$20

>1c0b	 10 00 20                 			.BYTE $10,$00,$20

>1c0e	 fd 02 20                 			.BYTE $FD,$02,$20

>1c11	 03 02 20                 			.BYTE $03,$02,$20

>1c14	 00 0c 20                 			.BYTE $00,$0C,$20

>1c17	 00 00 e1                 			.BYTE $00,$00,$E1

>1c1a	 09                       			.BYTE $09

>1c1b	 01 13 34 42 20 05 15 25 			.BYTE $01,$13,$34,$42,$20,$05,$15,$25,$35,$45

>1c23	 35 45 
>1c25	 07                       	OBJ_11	.BYTE $07

>1c26	 f8 f8 f8                 			.BYTE $F8,$F8,$F8

>1c29	 08 f8 f8                 			.BYTE $08,$F8,$F8

>1c2c	 08 f8 08                 			.BYTE $08,$F8,$08

>1c2f	 f8 f8 08                 			.BYTE $F8,$F8,$08

>1c32	 f8 08 f8                 			.BYTE $F8,$08,$F8

>1c35	 08 08 f8                 			.BYTE $08,$08,$F8

>1c38	 08 08 08                 			.BYTE $08,$08,$08

>1c3b	 f8 08 08                 			.BYTE $F8,$08,$08

>1c3e	 0b                       			.BYTE $0B

>1c3f	 01 12 23 30 04 15 26 37 			.BYTE $01,$12,$23,$30,$04,$15,$26,$37,$45,$56,$67,$74,$09,$FC

>1c47	 45 56 67 74 09 fc 
>1c4d	 07                       	OBJ_12	.BYTE $07

>1c4e	 ff 00 fc                 			.BYTE $FF,$00,$FC

>1c51	 ff 00 04                 			.BYTE $FF,$00,$04

>1c54	 ff 0c 02                 			.BYTE $FF,$0C,$02

>1c57	 ff 0c fe                 			.BYTE $FF,$0C,$FE

>1c5a	 01 00 fc                 			.BYTE $01,$00,$FC

>1c5d	 01 00 04                 			.BYTE $01,$00,$04

>1c60	 01 0c 02                 			.BYTE $01,$0C,$02

>1c63	 01 0c fe                 			.BYTE $01,$0C,$FE

>1c66	 0b                       			.BYTE $0B

>1c67	 01 12 23 30 45 56 67 74 			.BYTE $01,$12,$23,$30,$45,$56,$67,$74,$04,$15,$26,$37

>1c6f	 04 15 26 37 
>1c73	 09                       	OBJ_13	.BYTE $09

>1c74	 04 00 ff                 			.BYTE $04,$00,$FF

>1c77	 fc 00 ff                 			.BYTE $FC,$00,$FF

>1c7a	 fa 08 ff                 			.BYTE $FA,$08,$FF

>1c7d	 00 0c ff                 			.BYTE $00,$0C,$FF

>1c80	 06 08 ff                 			.BYTE $06,$08,$FF

>1c83	 04 00 01                 			.BYTE $04,$00,$01

>1c86	 fc 00 01                 			.BYTE $FC,$00,$01

>1c89	 fa 08 01                 			.BYTE $FA,$08,$01

>1c8c	 00 0c 01                 			.BYTE $00,$0C,$01

>1c8f	 06 08 01                 			.BYTE $06,$08,$01

>1c92	 0e                       			.BYTE $0E

>1c93	 01 12 23 34 40 56 67 78 			.BYTE $01,$12,$23,$34,$40,$56,$67,$78,$89,$95,$05,$16,$27,$38,$49

>1c9b	 89 95 05 16 27 38 49 

.1ca2					obj_14

>1ca2	 09                       			.BYTE $09

>1ca3	 fd 00 ff                 			.BYTE $FD,$00,$FF

>1ca6	 03 00 ff                 			.BYTE $03,$00,$FF

>1ca9	 03 0a ff                 			.BYTE $03,$0A,$FF

>1cac	 00 0c ff                 			.BYTE $00,$0C,$FF

>1caf	 fd 0a ff                 			.BYTE $FD,$0A,$FF

>1cb2	 fd 00 01                 			.BYTE $FD,$00,$01

>1cb5	 03 00 01                 			.BYTE $03,$00,$01

>1cb8	 03 0a 01                 			.BYTE $03,$0A,$01

>1cbb	 00 0c 01                 			.BYTE $00,$0C,$01

>1cbe	 fd 0a 01                 			.BYTE $FD,$0A,$01

>1cc1	 0e                       			.BYTE $0E

>1cc2	 01 12 23 34 40 56 67 78 			.BYTE $01,$12,$23,$34,$40,$56,$67,$78,$89,$95,$05,$16,$27,$38,$49

>1cca	 89 95 05 16 27 38 49 
>1cd1	 07                       	OBJ_15	.BYTE $07

>1cd2	 fe 00 ff                 			.BYTE $FE,$00,$FF

>1cd5	 02 00 ff                 			.BYTE $02,$00,$FF

>1cd8	 04 0c ff                 			.BYTE $04,$0C,$FF

>1cdb	 fc 0c ff                 			.BYTE $FC,$0C,$FF

>1cde	 fe 00 01                 			.BYTE $FE,$00,$01

>1ce1	 02 00 01                 			.BYTE $02,$00,$01

>1ce4	 04 0c 01                 			.BYTE $04,$0C,$01

>1ce7	 fc 0c 01                 			.BYTE $FC,$0C,$01

>1cea	 0b                       			.BYTE $0B

>1ceb	 01 12 23 30 45 56 67 74 			.BYTE $01,$12,$23,$30,$45,$56,$67,$74,$04,$15,$26,$37

>1cf3	 04 15 26 37 
>1cf7	 0b                       	OBJ_16	.BYTE $0B

>1cf8	 02 00 ff                 			.BYTE $02,$00,$FF

>1cfb	 04 06 ff                 			.BYTE $04,$06,$FF

>1cfe	 02 0c ff                 			.BYTE $02,$0C,$FF

>1d01	 fe 0c ff                 			.BYTE $FE,$0C,$FF

>1d04	 fc 06 ff                 			.BYTE $FC,$06,$FF

>1d07	 fe 00 ff                 			.BYTE $FE,$00,$FF

>1d0a	 02 00 01                 			.BYTE $02,$00,$01

>1d0d	 04 06 01                 			.BYTE $04,$06,$01

>1d10	 02 0c 01                 			.BYTE $02,$0C,$01

>1d13	 fe 0c 01                 			.BYTE $FE,$0C,$01

>1d16	 fc 06 01                 			.BYTE $FC,$06,$01

>1d19	 fe 00 01                 			.BYTE $FE,$00,$01

>1d1c	 11                       			.BYTE $11

>1d1d	 01 12 23 34 45 50 67 78 			.BYTE $01,$12,$23,$34,$45,$50,$67,$78,$89,$9A,$AB,$B6,$06,$17,$28,$39,$4A,$5B

>1d25	 89 9a ab b6 06 17 28 39 
>1d2d	 4a 5b 
>1d2f	 0b                       	OBJ_17	.BYTE $0B

>1d30	 03 00 ff                 			.BYTE $03,$00,$FF

>1d33	 03 08 ff                 			.BYTE $03,$08,$FF

>1d36	 01 0c ff                 			.BYTE $01,$0C,$FF

>1d39	 ff 0c ff                 			.BYTE $FF,$0C,$FF

>1d3c	 fd 08 ff                 			.BYTE $FD,$08,$FF

>1d3f	 fd 00 ff                 			.BYTE $FD,$00,$FF

>1d42	 03 00 01                 			.BYTE $03,$00,$01

>1d45	 03 08 01                 			.BYTE $03,$08,$01

>1d48	 01 0c 01                 			.BYTE $01,$0C,$01

>1d4b	 ff 0c 01                 			.BYTE $FF,$0C,$01

>1d4e	 fd 08 01                 			.BYTE $FD,$08,$01

>1d51	 fd 00 01                 			.BYTE $FD,$00,$01

>1d54	 11                       			.BYTE $11

>1d55	 01 12 23 34 45 50 67 78 			.BYTE $01,$12,$23,$34,$45,$50,$67,$78,$89,$9A,$AB,$B6,$06,$17,$28,$39,$4A,$5B

>1d5d	 89 9a ab b6 06 17 28 39 
>1d65	 4a 5b 
>1d67	 0b                       	OBJ_18	.BYTE $0B

>1d68	 f9 00 f3                 			.BYTE $F9,$00,$F3

>1d6b	 07 00 f3                 			.BYTE $07,$00,$F3

>1d6e	 07 00 0d                 			.BYTE $07,$00,$0D

>1d71	 f9 00 0d                 			.BYTE $F9,$00,$0D

>1d74	 f9 06 f3                 			.BYTE $F9,$06,$F3

>1d77	 07 06 f3                 			.BYTE $07,$06,$F3

>1d7a	 07 06 0d                 			.BYTE $07,$06,$0D

>1d7d	 f9 06 0d                 			.BYTE $F9,$06,$0D

>1d80	 f6 06 f0                 			.BYTE $F6,$06,$F0

>1d83	 0a 06 f0                 			.BYTE $0A,$06,$F0

>1d86	 0a 06 10                 			.BYTE $0A,$06,$10

>1d89	 f6 06 10                 			.BYTE $F6,$06,$10

>1d8c	 07                       			.BYTE $07

>1d8d	 04 15 26 37 89 9a ab b8  			.BYTE $04,$15,$26,$37,$89,$9A,$AB,$B8

>1d95	 0b                       	OBJ_19	.BYTE $0B

>1d96	 fe 00 fe                 			.BYTE $FE,$00,$FE

>1d99	 fe 00 02                 			.BYTE $FE,$00,$02

>1d9c	 02 00 02                 			.BYTE $02,$00,$02

>1d9f	 02 00 fe                 			.BYTE $02,$00,$FE

>1da2	 fe 04 fe                 			.BYTE $FE,$04,$FE

>1da5	 fe 04 02                 			.BYTE $FE,$04,$02

>1da8	 02 04 02                 			.BYTE $02,$04,$02

>1dab	 02 04 fe                 			.BYTE $02,$04,$FE

>1dae	 02 06 02                 			.BYTE $02,$06,$02

>1db1	 02 06 fe                 			.BYTE $02,$06,$FE

>1db4	 02 07 02                 			.BYTE $02,$07,$02

>1db7	 02 07 fe                 			.BYTE $02,$07,$FE

>1dba	 09                       			.BYTE $09

>1dbb	 04 15 2a 3b 45 56 67 74 			.BYTE $04,$15,$2A,$3B,$45,$56,$67,$74,$89,$AB

>1dc3	 89 ab 
>1dc5	 0d                       	OBJ_20	.BYTE $0D

>1dc6	 f6 00 fb                 			.BYTE $F6,$00,$FB

>1dc9	 f6 00 05                 			.BYTE $F6,$00,$05

>1dcc	 0a 00 05                 			.BYTE $0A,$00,$05

>1dcf	 0a 00 fb                 			.BYTE $0A,$00,$FB

>1dd2	 f6 02 fb                 			.BYTE $F6,$02,$FB

>1dd5	 f6 02 05                 			.BYTE $F6,$02,$05

>1dd8	 0a 02 05                 			.BYTE $0A,$02,$05

>1ddb	 0a 02 fb                 			.BYTE $0A,$02,$FB

>1dde	 f6 04 fb                 			.BYTE $F6,$04,$FB

>1de1	 f6 04 05                 			.BYTE $F6,$04,$05

>1de4	 0a 04 05                 			.BYTE $0A,$04,$05

>1de7	 0a 04 fb                 			.BYTE $0A,$04,$FB

>1dea	 0a 08 05                 			.BYTE $0A,$08,$05

>1ded	 0a 08 fb                 			.BYTE $0A,$08,$FB

>1df0	 0c                       			.BYTE $0C

>1df1	 08 19 2c 3d 45 56 67 74 			.BYTE $08,$19,$2C,$3D,$45,$56,$67,$74,$89,$9A,$AB,$B8,$CD

>1df9	 89 9a ab b8 cd 
>1dfe	 03                       	OBJ_21	.BYTE 4-1

>1dff	 80 a5 00                 			.BYTE 255-127, 255-90, 0

>1e02	 7f a5 00                 			.BYTE 127, 255-90, 0

>1e05	 00 5a 80                 			.BYTE 0, 90, 255-127

>1e08	 00 5a 7f                 			.BYTE 0, 90, 127

>1e0b	 05                       			.BYTE 6-1

>1e0c	 01 02 03 12 13 23        			.BYTE $01,$02,$03,$12,$13,$23

>1e12	 07                       	OBJ_99	.BYTE $07

>1e13	 00 00 00                 			.BYTE 0,0,0

>1e16	 00 00 ff                 			.BYTE 0,0,255

>1e19	 00 ff 00                 			.BYTE 0,255,0

>1e1c	 00 ff ff                 			.BYTE 0,255,255

>1e1f	 ff 00 00                 			.BYTE 255,0,0

>1e22	 ff 00 ff                 			.BYTE 255,0,255

>1e25	 ff ff 00                 			.BYTE 255,255,0

>1e28	 ff ff ff                 			.BYTE 255,255,255

>1e2b	 0b                       	        .BYTE $0B

>1e2c	 01 13 32 20              	        .BYTE $01,$13,$32,$20

>1e30	 45 57 76 64              	        .BYTE $45,$57,$76,$64

>1e34	 04 15 26 37              	        .BYTE $04,$15,$26,$37


.1f00					sin_lsb

>1f00	 92 2e f7 60 c4 14 47 79  			.BYTE $92,$2E,$F7,$60,$C4,$14,$47,$79

>1f08	 ab dd 08 21 3a 53 6c 85  	        .BYTE $AB,$DD,$08,$21,$3A,$53,$6C,$85

>1f10	 9e b7 d0 e9 01 0d 1a 26  	        .BYTE $9E,$B7,$D0,$E9,$01,$0D,$1A,$26

>1f18	 33 3f 4c 58 64 71 7d 89  	        .BYTE $33,$3F,$4C,$58,$64,$71,$7D,$89

>1f20	 96 a2 ae bb c7 d3 df ec  	        .BYTE $96,$A2,$AE,$BB,$C7,$D3,$DF,$EC

>1f28	 f8 02 08 0e 14 1a 20 26  	        .BYTE $F8,$02,$08,$0E,$14,$1A,$20,$26

>1f30	 2c 32 38 3e 44 4a 50 56  	        .BYTE $2C,$32,$38,$3E,$44,$4A,$50,$56

>1f38	 5c 62 68 6e 73 79 7f 85  	        .BYTE $5C,$62,$68,$6E,$73,$79,$7F,$85

>1f40	 8b 91 96 9c a2 a8 ad b3  	        .BYTE $8B,$91,$96,$9C,$A2,$A8,$AD,$B3

>1f48	 b9 be c4 ca cf d5 da e0  	        .BYTE $B9,$BE,$C4,$CA,$CF,$D5,$DA,$E0

>1f50	 e5 eb f1 f6 fb 00 03 06  	        .BYTE $E5,$EB,$F1,$F6,$FB,$00,$03,$06

>1f58	 09 0b 0e 11 13 16 19 1b  	        .BYTE $09,$0B,$0E,$11,$13,$16,$19,$1B

>1f60	 1e 20 23 26 28 2b 2d 30  	        .BYTE $1E,$20,$23,$26,$28,$2B,$2D,$30

>1f68	 32 35 37 3a 3c 3f 41 44  	        .BYTE $32,$35,$37,$3A,$3C,$3F,$41,$44

>1f70	 46 48 4b 4d 50 52 54 57  	        .BYTE $46,$48,$4B,$4D,$50,$52,$54,$57

>1f78	 59 5b 5e 60 62 64 67 69  	        .BYTE $59,$5B,$5E,$60,$62,$64,$67,$69

>1f80	 6b 6d 70 72 74 76 78 7a  	        .BYTE $6B,$6D,$70,$72,$74,$76,$78,$7A

>1f88	 7c 7f 81 83 85 87 89 8b  	        .BYTE $7C,$7F,$81,$83,$85,$87,$89,$8B

>1f90	 8d 8f 91 93 95 97 98 9a  	        .BYTE $8D,$8F,$91,$93,$95,$97,$98,$9A

>1f98	 9c 9e a0 a2 a4 a5 a7 a9  	        .BYTE $9C,$9E,$A0,$A2,$A4,$A5,$A7,$A9

>1fa0	 ab ac ae b0 b1 b3 b5 b6  	        .BYTE $AB,$AC,$AE,$B0,$B1,$B3,$B5,$B6

>1fa8	 b8 ba bb bd be c0 c1 c3  	        .BYTE $B8,$BA,$BB,$BD,$BE,$C0,$C1,$C3

>1fb0	 c4 c6 c7 c9 ca cb cd ce  	        .BYTE $C4,$C6,$C7,$C9,$CA,$CB,$CD,$CE

>1fb8	 d0 d1 d2 d3 d5 d6 d7 d8  	        .BYTE $D0,$D1,$D2,$D3,$D5,$D6,$D7,$D8

>1fc0	 da db dc dd de df e0 e2  	        .BYTE $DA,$DB,$DC,$DD,$DE,$DF,$E0,$E2

>1fc8	 e3 e4 e5 e6 e7 e8 e9 e9  	        .BYTE $E3,$E4,$E5,$E6,$E7,$E8,$E9,$E9

>1fd0	 ea eb ec ed ee ef ef f0  	        .BYTE $EA,$EB,$EC,$ED,$EE,$EF,$EF,$F0

>1fd8	 f1 f2 f3 f3 f4 f5 f5 f6  	        .BYTE $F1,$F2,$F3,$F3,$F4,$F5,$F5,$F6

>1fe0	 f6 f7 f8 f8 f9 f9 fa fa  	        .BYTE $F6,$F7,$F8,$F8,$F9,$F9,$FA,$FA

>1fe8	 fb fb fc fc fc fd fd fd  	        .BYTE $FB,$FB,$FC,$FC,$FC,$FD,$FD,$FD

>1ff0	 fe fe fe fe ff ff ff ff  	        .BYTE $FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF

>1ff8	 ff 00 00 00 00 00 00 00  	        .BYTE $FF,$00,$00,$00,$00,$00,$00,$00


.2000					sin_msb

>2000	 dc e4 e4 e8 e8 ec ec ec  			.BYTE $DC,$E4,$E4,$E8,$E8,$EC,$EC,$EC

>2008	 ec ec f0 f0 f0 f0 f0 f0  	        .BYTE $EC,$EC,$F0,$F0,$F0,$F0,$F0,$F0

>2010	 f0 f0 f0 f0 f4 f4 f4 f4  	        .BYTE $F0,$F0,$F0,$F0,$F4,$F4,$F4,$F4

>2018	 f4 f4 f4 f4 f4 f4 f4 f4  	        .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4

>2020	 f4 f4 f4 f4 f4 f4 f4 f4  	        .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4

>2028	 f4 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F4,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2030	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2038	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2040	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2048	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2050	 f8 f8 f8 f8 f8 fc fc fc  	        .BYTE $F8,$F8,$F8,$F8,$F8,$FC,$FC,$FC

>2058	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2060	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2068	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2070	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2078	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2080	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2088	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2090	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2098	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20a0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20a8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20b0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20b8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20c0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20c8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20d0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20d8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20e0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20e8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20f0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20f8	 fc 00 00 00 00 00 00 00  	        .BYTE $FC,$00,$00,$00,$00,$00,$00,$00


.2100					log_table

>2100	 00 01 03 04 06 07 09 0a  			.BYTE $00,$01,$03,$04,$06,$07,$09,$0A

>2108	 0b 0d 0e 10 11 12 14 15  	        .BYTE $0B,$0D,$0E,$10,$11,$12,$14,$15

>2110	 16 18 19 1a 1c 1d 1e 20  	        .BYTE $16,$18,$19,$1A,$1C,$1D,$1E,$20

>2118	 21 22 24 25 26 28 29 2a  	        .BYTE $21,$22,$24,$25,$26,$28,$29,$2A

>2120	 2c 2d 2e 2f 31 32 33 34  	        .BYTE $2C,$2D,$2E,$2F,$31,$32,$33,$34

>2128	 36 37 38 39 3b 3c 3d 3e  	        .BYTE $36,$37,$38,$39,$3B,$3C,$3D,$3E

>2130	 3f 41 42 43 44 45 47 48  	        .BYTE $3F,$41,$42,$43,$44,$45,$47,$48

>2138	 49 4a 4b 4d 4e 4f 50 51  	        .BYTE $49,$4A,$4B,$4D,$4E,$4F,$50,$51

>2140	 52 54 55 56 57 58 59 5a  	        .BYTE $52,$54,$55,$56,$57,$58,$59,$5A

>2148	 5c 5d 5e 5f 60 61 62 63  	        .BYTE $5C,$5D,$5E,$5F,$60,$61,$62,$63

>2150	 64 66 67 68 69 6a 6b 6c  	        .BYTE $64,$66,$67,$68,$69,$6A,$6B,$6C

>2158	 6d 6e 6f 70 71 72 74 75  	        .BYTE $6D,$6E,$6F,$70,$71,$72,$74,$75

>2160	 76 77 78 79 7a 7b 7c 7d  	        .BYTE $76,$77,$78,$79,$7A,$7B,$7C,$7D

>2168	 7e 7f 80 81 82 83 84 85  	        .BYTE $7E,$7F,$80,$81,$82,$83,$84,$85

>2170	 86 87 88 89 8a 8b 8c 8d  	        .BYTE $86,$87,$88,$89,$8A,$8B,$8C,$8D

>2178	 8e 8f 90 91 92 93 94 95  	        .BYTE $8E,$8F,$90,$91,$92,$93,$94,$95

>2180	 96 97 98 99 9a 9b 9b 9c  	        .BYTE $96,$97,$98,$99,$9A,$9B,$9B,$9C

>2188	 9d 9e 9f a0 a1 a2 a3 a4  	        .BYTE $9D,$9E,$9F,$A0,$A1,$A2,$A3,$A4

>2190	 a5 a6 a7 a8 a9 a9 aa ab  	        .BYTE $A5,$A6,$A7,$A8,$A9,$A9,$AA,$AB

>2198	 ac ad ae af b0 b1 b2 b2  	        .BYTE $AC,$AD,$AE,$AF,$B0,$B1,$B2,$B2

>21a0	 b3 b4 b5 b6 b7 b8 b9 b9  	        .BYTE $B3,$B4,$B5,$B6,$B7,$B8,$B9,$B9

>21a8	 ba bb bc bd be bf c0 c0  	        .BYTE $BA,$BB,$BC,$BD,$BE,$BF,$C0,$C0

>21b0	 c1 c2 c3 c4 c5 c6 c6 c7  	        .BYTE $C1,$C2,$C3,$C4,$C5,$C6,$C6,$C7

>21b8	 c8 c9 ca cb cb cc cd ce  	        .BYTE $C8,$C9,$CA,$CB,$CB,$CC,$CD,$CE

>21c0	 cf d0 d0 d1 d2 d3 d4 d4  	        .BYTE $CF,$D0,$D0,$D1,$D2,$D3,$D4,$D4

>21c8	 d5 d6 d7 d8 d8 d9 da db  	        .BYTE $D5,$D6,$D7,$D8,$D8,$D9,$DA,$DB

>21d0	 dc dc dd de df e0 e0 e1  	        .BYTE $DC,$DC,$DD,$DE,$DF,$E0,$E0,$E1

>21d8	 e2 e3 e4 e4 e5 e6 e7 e7  	        .BYTE $E2,$E3,$E4,$E4,$E5,$E6,$E7,$E7

>21e0	 e8 e9 ea ea eb ec ed ee  	        .BYTE $E8,$E9,$EA,$EA,$EB,$EC,$ED,$EE

>21e8	 ee ef f0 f1 f1 f2 f3 f4  	        .BYTE $EE,$EF,$F0,$F1,$F1,$F2,$F3,$F4

>21f0	 f4 f5 f6 f7 f7 f8 f9 f9  	        .BYTE $F4,$F5,$F6,$F7,$F7,$F8,$F9,$F9

>21f8	 fa fb fc fc fd fe ff ff  	        .BYTE $FA,$FB,$FC,$FC,$FD,$FE,$FF,$FF


.2200					exp_table

>2200	 00 01 01 02 03 03 04 05  			.BYTE $00,$01,$01,$02,$03,$03,$04,$05

>2208	 06 06 07 08 08 09 0a 0b  	        .BYTE $06,$06,$07,$08,$08,$09,$0A,$0B

>2210	 0b 0c 0d 0e 0e 0f 10 10  	        .BYTE $0B,$0C,$0D,$0E,$0E,$0F,$10,$10

>2218	 11 12 13 13 14 15 16 16  	        .BYTE $11,$12,$13,$13,$14,$15,$16,$16

>2220	 17 18 19 19 1a 1b 1c 1d  	        .BYTE $17,$18,$19,$19,$1A,$1B,$1C,$1D

>2228	 1d 1e 1f 20 20 21 22 23  	        .BYTE $1D,$1E,$1F,$20,$20,$21,$22,$23

>2230	 24 24 25 26 27 28 28 29  	        .BYTE $24,$24,$25,$26,$27,$28,$28,$29

>2238	 2a 2b 2c 2c 2d 2e 2f 30  	        .BYTE $2A,$2B,$2C,$2C,$2D,$2E,$2F,$30

>2240	 30 31 32 33 34 35 35 36  	        .BYTE $30,$31,$32,$33,$34,$35,$35,$36

>2248	 37 38 39 3a 3a 3b 3c 3d  	        .BYTE $37,$38,$39,$3A,$3A,$3B,$3C,$3D

>2250	 3e 3f 40 41 41 42 43 44  	        .BYTE $3E,$3F,$40,$41,$41,$42,$43,$44

>2258	 45 46 47 48 48 49 4a 4b  	        .BYTE $45,$46,$47,$48,$48,$49,$4A,$4B

>2260	 4c 4d 4e 4f 50 51 51 52  	        .BYTE $4C,$4D,$4E,$4F,$50,$51,$51,$52

>2268	 53 54 55 56 57 58 59 5a  	        .BYTE $53,$54,$55,$56,$57,$58,$59,$5A

>2270	 5b 5c 5d 5e 5e 5f 60 61  	        .BYTE $5B,$5C,$5D,$5E,$5E,$5F,$60,$61

>2278	 62 63 64 65 66 67 68 69  	        .BYTE $62,$63,$64,$65,$66,$67,$68,$69

>2280	 6a 6b 6c 6d 6e 6f 70 71  	        .BYTE $6A,$6B,$6C,$6D,$6E,$6F,$70,$71

>2288	 72 73 74 75 76 77 78 79  	        .BYTE $72,$73,$74,$75,$76,$77,$78,$79

>2290	 7a 7b 7c 7d 7e 7f 80 81  	        .BYTE $7A,$7B,$7C,$7D,$7E,$7F,$80,$81

>2298	 82 83 84 85 87 88 89 8a  	        .BYTE $82,$83,$84,$85,$87,$88,$89,$8A

>22a0	 8b 8c 8d 8e 8f 90 91 92  	        .BYTE $8B,$8C,$8D,$8E,$8F,$90,$91,$92

>22a8	 93 95 96 97 98 99 9a 9b  	        .BYTE $93,$95,$96,$97,$98,$99,$9A,$9B

>22b0	 9c 9d 9f a0 a1 a2 a3 a4  	        .BYTE $9C,$9D,$9F,$A0,$A1,$A2,$A3,$A4

>22b8	 a5 a6 a8 a9 aa ab ac ad  	        .BYTE $A5,$A6,$A8,$A9,$AA,$AB,$AC,$AD

>22c0	 af b0 b1 b2 b3 b4 b6 b7  	        .BYTE $AF,$B0,$B1,$B2,$B3,$B4,$B6,$B7

>22c8	 b8 b9 ba bc bd be bf c0  	        .BYTE $B8,$B9,$BA,$BC,$BD,$BE,$BF,$C0

>22d0	 c2 c3 c4 c5 c6 c8 c9 ca  	        .BYTE $C2,$C3,$C4,$C5,$C6,$C8,$C9,$CA

>22d8	 cb cd ce cf d0 d2 d3 d4  	        .BYTE $CB,$CD,$CE,$CF,$D0,$D2,$D3,$D4

>22e0	 d6 d7 d8 d9 db dc dd de  	        .BYTE $D6,$D7,$D8,$D9,$DB,$DC,$DD,$DE

>22e8	 e0 e1 e2 e4 e5 e6 e8 e9  	        .BYTE $E0,$E1,$E2,$E4,$E5,$E6,$E8,$E9

>22f0	 ea ec ed ee f0 f1 f2 f4  	        .BYTE $EA,$EC,$ED,$EE,$F0,$F1,$F2,$F4

>22f8	 f5 f6 f8 f9 fa fc fd ff  	        .BYTE $F5,$F6,$F8,$F9,$FA,$FC,$FD,$FF


.2300					and_pixel_pos

>2300	 3f cf f3 fc 3f cf f3 fc  			.BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2308	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2310	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2318	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2320	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2328	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2330	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2338	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2340	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2348	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2350	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2358	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2360	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2368	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2370	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2378	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2380	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2388	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2390	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2398	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC


.2400					ora_pixel_pos

>2400	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2408	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2410	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2418	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2420	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2428	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2430	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2438	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2440	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2448	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2450	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2458	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2460	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2468	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2470	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2478	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2480	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2488	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2490	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2498	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03


.24a0					ver_pos_hi

>24a0	 00 00 00 00 00 00 00 00  			.BYTE $00,$00,$00,$00,$00,$00,$00,$00

>24a8	 01 01 01 01 01 01 01 01  	        .BYTE $01,$01,$01,$01,$01,$01,$01,$01

>24b0	 02 02 02 02 02 02 02 02  	        .BYTE $02,$02,$02,$02,$02,$02,$02,$02

>24b8	 03 03 03 03 03 03 03 03  	        .BYTE $03,$03,$03,$03,$03,$03,$03,$03

>24c0	 05 05 05 05 05 05 05 05  	        .BYTE $05,$05,$05,$05,$05,$05,$05,$05

>24c8	 06 06 06 06 06 06 06 06  	        .BYTE $06,$06,$06,$06,$06,$06,$06,$06

>24d0	 07 07 07 07 07 07 07 07  	        .BYTE $07,$07,$07,$07,$07,$07,$07,$07

>24d8	 08 08 08 08 08 08 08 08  	        .BYTE $08,$08,$08,$08,$08,$08,$08,$08

>24e0	 0a 0a 0a 0a 0a 0a 0a 0a  	        .BYTE $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A

>24e8	 0b 0b 0b 0b 0b 0b 0b 0b  	        .BYTE $0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B

>24f0	 0c 0c 0c 0c 0c 0c 0c 0c  	        .BYTE $0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C

>24f8	 0d 0d 0d 0d 0d 0d 0d 0d  	        .BYTE $0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D

>2500	 0f 0f 0f 0f 0f 0f 0f 0f  	        .BYTE $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F

>2508	 10 10 10 10 10 10 10 10  	        .BYTE $10,$10,$10,$10,$10,$10,$10,$10

>2510	 11 11 11 11 11 11 11 11  	        .BYTE $11,$11,$11,$11,$11,$11,$11,$11

>2518	 12 12 12 12 12 12 12 12  	        .BYTE $12,$12,$12,$12,$12,$12,$12,$12

>2520	 14 14 14 14 14 14 14 14  	        .BYTE $14,$14,$14,$14,$14,$14,$14,$14

>2528	 aa aa aa aa aa aa aa aa  	        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA


.2530					ver_pos_lo

>2530	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>2538	 40 41 42 43 44 45 46 47  	        .BYTE $40,$41,$42,$43,$44,$45,$46,$47

>2540	 80 81 82 83 84 85 86 87  	        .BYTE $80,$81,$82,$83,$84,$85,$86,$87

>2548	 c0 c1 c2 c3 c4 c5 c6 c7  	        .BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>2550	 00 01 02 03 04 05 06 07  	        .BYTE $00,$01,$02,$03,$04,$05,$06,$07

>2558	 40 41 42 43 44 45 46 47  	        .BYTE $40,$41,$42,$43,$44,$45,$46,$47

>2560	 80 81 82 83 84 85 86 87  	        .BYTE $80,$81,$82,$83,$84,$85,$86,$87

>2568	 c0 c1 c2 c3 c4 c5 c6 c7  			.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>2570	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>2578	 40 41 42 43 44 45 46 47  			.BYTE $40,$41,$42,$43,$44,$45,$46,$47

>2580	 80 81 82 83 84 85 86 87  			.BYTE $80,$81,$82,$83,$84,$85,$86,$87

>2588	 c0 c1 c2 c3 c4 c5 c6 c7  			.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>2590	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>2598	 40 41 42 43 44 45 46 47  			.BYTE $40,$41,$42,$43,$44,$45,$46,$47

>25a0	 80 81 82 83 84 85 86 87  			.BYTE $80,$81,$82,$83,$84,$85,$86,$87

>25a8	 c0 c1 c2 c3 c4 c5 c6 c7  			.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>25b0	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>25b8	 aa aa aa aa aa aa aa aa  			.BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA


.25c0					hor_scr_pos

>25c0	 00 00 00 00 08 08 08 08  			.BYTE $00,$00,$00,$00,$08,$08,$08,$08

>25c8	 10 10 10 10 18 18 18 18  	        .BYTE $10,$10,$10,$10,$18,$18,$18,$18

>25d0	 20 20 20 20 28 28 28 28  	        .BYTE $20,$20,$20,$20,$28,$28,$28,$28

>25d8	 30 30 30 30 38 38 38 38  	        .BYTE $30,$30,$30,$30,$38,$38,$38,$38

>25e0	 40 40 40 40 48 48 48 48  	        .BYTE $40,$40,$40,$40,$48,$48,$48,$48

>25e8	 50 50 50 50 58 58 58 58  	        .BYTE $50,$50,$50,$50,$58,$58,$58,$58

>25f0	 60 60 60 60 68 68 68 68  	        .BYTE $60,$60,$60,$60,$68,$68,$68,$68

>25f8	 70 70 70 70 78 78 78 78  	        .BYTE $70,$70,$70,$70,$78,$78,$78,$78

>2600	 80 80 80 80 88 88 88 88  	        .BYTE $80,$80,$80,$80,$88,$88,$88,$88

>2608	 90 90 90 90 98 98 98 98  	        .BYTE $90,$90,$90,$90,$98,$98,$98,$98

>2610	 a0 a0 a0 a0 a8 a8 a8 a8  	        .BYTE $A0,$A0,$A0,$A0,$A8,$A8,$A8,$A8

>2618	 b0 b0 b0 b0 b8 b8 b8 b8  	        .BYTE $B0,$B0,$B0,$B0,$B8,$B8,$B8,$B8

>2620	 c0 c0 c0 c0 c8 c8 c8 c8  	        .BYTE $C0,$C0,$C0,$C0,$C8,$C8,$C8,$C8

>2628	 d0 d0 d0 d0 d8 d8 d8 d8  	        .BYTE $D0,$D0,$D0,$D0,$D8,$D8,$D8,$D8

>2630	 e0 e0 e0 e0 e8 e8 e8 e8  	        .BYTE $E0,$E0,$E0,$E0,$E8,$E8,$E8,$E8

>2638	 f0 f0 f0 f0 f8 f8 f8 f8  	        .BYTE $F0,$F0,$F0,$F0,$F8,$F8,$F8,$F8

>2640	 00 00 00 00 08 08 08 08  	        .BYTE $00,$00,$00,$00,$08,$08,$08,$08

>2648	 10 10 10 10 18 18 18 18  	        .BYTE $10,$10,$10,$10,$18,$18,$18,$18

>2650	 20 20 20 20 28 28 28 28  			.BYTE $20,$20,$20,$20,$28,$28,$28,$28

>2658	 30 30 30 30 38 38 38 38  			.BYTE $30,$30,$30,$30,$38,$38,$38,$38

>2660	 c0 c0 c0 c0 c0 c0 aa aa  			.BYTE $C0,$C0,$C0,$C0,$C0,$C0,$AA,$AA

>2668	 aa aa aa aa aa aa aa aa  	        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

>2670	 25 25 28 29 24 24 aa aa  			.BYTE $25,$25,$28,$29,$24,$24,$AA,$AA

>2678	 aa aa aa aa aa aa aa aa  	        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

>2680	 80 80 00 00 80 80 14 15  			.BYTE $80,$80,$00,$00,$80,$80,$14,$15

>2688	 15 16 16 17 17 0c 00 0c  	        .BYTE $15,$16,$16,$17,$17,$0C,$00,$0C

>2690	 29 28 19 18 28 29 04 10  			.BYTE $29,$28,$19,$18,$28,$29,$04,$10

>2698	 05 11 06 12 07 13 08 14  	        .BYTE $05,$11,$06,$12,$07,$13,$08,$14

>26a0	 09 15 0a 16 0b 17 18 19  			.BYTE $09,$15,$0A,$16,$0B,$17,$18,$19

>26a8	 19 1a 1b 1c 1c 1d 01 3d  	        .BYTE $19,$1A,$1B,$1C,$1C,$1D,$01,$3D

>26b0	 1b 3d 1a 3c 1d 3c 22 e2  			.BYTE $1B,$3D,$1A,$3C,$1D,$3C,$22,$E2

>26b8	 22 60 1f 60 1f e2 1d 62  			.BYTE $22,$60,$1F,$60,$1F,$E2,$1D,$62

>26c0	 87 b6 e5 14 43 72 a1 d0  	LINE_DRAW_PTR_LO   .BYTE <LINE_DRAW_0,<LINE_DRAW_1,<LINE_DRAW_2,<LINE_DRAW_3,<LINE_DRAW_4,<LINE_DRAW_5,<LINE_DRAW_6,<LINE_DRAW_7 

>26c8	 13 13 13 14 14 14 14 14  	LINE_DRAW_PTR_HI   .BYTE >LINE_DRAW_0,>LINE_DRAW_1,>LINE_DRAW_2,>LINE_DRAW_3,>LINE_DRAW_4,>LINE_DRAW_5,>LINE_DRAW_6,>LINE_DRAW_7 

>26d0	 00 07 03 04 01 06 02 05  	LINE_DRAW_CONV_PTR .BYTE $00,$07,$03,$04,$01,$06,$02,$05

>26d8	 9f 9f 00 00 00 00 9f 9f  	fBBD8   .BYTE $9F,$9F,$00,$00,$00,$00,$9F,$9F

>26e0	 87 87 87 87 00 00 00 00  	fBBE0   .BYTE $87,$87,$87,$87,$00,$00,$00,$00

>26e8	 40 38 08 00 40 38 28 30  	fBBE8   .BYTE $40,$38,$08,$00,$40,$38,$28,$30

>26f0	 40 18 08 10 40 18 28 20  			.BYTE $40,$18,$08,$10,$40,$18,$28,$20

>26f8	 00 00 03 00 00 00 02 02  	fBBF8   .BYTE $00,$00,$03,$00,$00,$00,$02,$02

>2700	 00 00 00 06 04 00 00 04  			.BYTE $00,$00,$00,$06,$04,$00,$00,$04

>2708	 0c 00 00 00 08 08 00 00  			.BYTE $0C,$00,$00,$00,$08,$08,$00,$00

>2710	 00 09 00 00 00 01 01 00  			.BYTE $00,$09,$00,$00,$00,$01,$01,$00	

>2718	 01 00 00 00 01 01 00 00  	fBC18   .BYTE $01,$00,$00,$00,$01,$01,$00,$00

>2720	 00 01 00 00 00 01 01 00  			.BYTE $00,$01,$00,$00,$00,$01,$01,$00

>2728	 00 00 01 00 00 00 01 01  			.BYTE $00,$00,$01,$00,$00,$00,$01,$01

>2730	 00 00 00 01 01 00 00 01  			.BYTE $00,$00,$00,$01,$01,$00,$00,$01

=4000					SCREEN0 = $4000

=5c00					SCREEN_COLOUR =  $5C00

=6000					SCREEN1 = $6000


;******  end of code
