
;6502/65C02/65816/CPU64/DTV Turbo Assembler V1.47 listing file of "mu89_128_v06.tas"
;done on Mon Jan 30 15:23:12 2023

=0002					SCREEN_POS_LO = $02

=0003					SCREEN_POS_HI = $03

=0024					SCREEN_FLIP = $24

=0066					LINE_INC = $66

=0002					SCREEN_POS_PTR = $02

=0040					SCREEN_0 = $40

=0060					SCREEN_1 = $60

=0052					X_POS_HI = $52 ; is actually start?

=0053					X_POS_LO = $53

=0054					Y_POS_HI = $54

=0055					Y_POS_LO = $55

=0056					Z_POS_HI = $56

=0057					Z_POS_LO = $57

=0006					ab06 = $06 ; math temp?

=0007					ab07 = $07 ; math temp?

=0008					LINE_FRACTION_ab08 = $08

=0008					ab08 = $08 ; math temp? line draw fraction?

=0009					ab09 = $09 ; math temp?

=0008					Z_ROT_LO = $08 ; math temp?

=0009					Z_ROT_HI = $09 

=000a					ab0A = $0A ; math temp?

=000b					ab0B = $0B ; math temp?

=000a					Z_CLIP_LO_ab0A = $0A

=000b					Z_CLIP_HI_ab0B = $0B

=000a					H_PERS_FP_LO_DIFF_ab0A = $0A

=000b					H_PERS_FP_HI_DIFF_ab0B = $0B

=000a					X_ROT_LO = $0A

=000b					X_ROT_HI = $0B

=000c					Z_CLIP_LO_ab0C = $0C ; math temp?

=000d					Z_CLIP_HI_ab0D = $0D ; math temp?

=000c					V_PERS_FP_LO_DIFF_ab0C = $0C

=000d					V_PERS_FP_HI_DIFF_ab0D = $0D

=0018					ab18 = $18 ; math temp?

=0019					POINT_LINE_COUNT = $19

=000e					REGA = $0E

=000f					REGX = $0F

=0020					REGY = $20

=0018					FOCUS = $18 ; focus value not location

=0022					FP_MULTIPLY_LO = $22

=0023					FP_MULTIPLY_HI = $23

=0022					FP_DIVIDE_LO = FP_MULTIPLY_LO

=0023					FP_DIVIDE_HI = FP_MULTIPLY_HI

=002c					ROT_LO = $2C

=002d					ROT_HI = $2D

=003c					SIN_LO = $3C

=003d					SIN_HI = $3D

=003e					COS_LO = $3E

=003f					COS_HI = $3F

=0058					X_ROTATION_LO = $58 ; is actually end?

=0059					X_ROTATION_HI = $59

=005a					Y_ROTATION_LO = $5A

=005b					Y_ROTATION_HI = $5B

=005c					Z_ROTATION_LO = $5C

=005d					Z_ROTATION_HI = $5D

=005e					H_PERS_FP_LO_ST = $5E	; hor pers pos lo fp point start

=005f					H_PERS_FP_HI_ST = $5F	; hor pers pos hi fp point start

=0060					V_PERS_FP_LO_ST = $60	; ver pers pos lo fp point start

=0061					V_PERS_FP_HI_ST = $61	; ver pers pos hi fp point start

=0062					H_PERS_FP_LO_EN = $62	; hor pers pos lo fp point end

=0063					H_PERS_FP_HI_EN = $63	; hor pers pos hi fp point end

=0064					V_PERS_FP_LO_EN = $64	; ver pers pos lo fp point end

=0065					V_PERS_FP_HI_EN = $65	; ver pers pos hi fp point end

=0067					LINE_TYPE_POINTER = $67 ; line type?

=0068					ab68 = $68

=0069					ab69 = $69

=006a					LINE_START_HOR = $6A ; line start x?

=006b					LINE_START_VER = $6B ; line start y?

=006c					PERS_HOR_ab6C = $6C	; pers?

=006d					PERS_VER_ab6D = $6D  ; pers?

=006e					POINT_CLASSIFY_ST = $6E	; start point classification of this point?

=006f					POINT_CLASSIFY_EN = $6F  ; end point classification

=0072					CURR_X_LSB = $72

=0073					CURR_X_MSB = $73

=0074					CURR_X_HSB = $74

=0075					CURR_Y_LSB = $75

=0076					CURR_Y_MSB = $76

=0077					CURR_Y_HSB = $77

=0078					CURR_Z_LSB = $78

=0079					CURR_Z_MSB = $79

=007a					CURR_Z_HSB = $7A

=0040					SCR_HOR_MID = 128/2 ; tobe 128/2 was 160/2

=0040					SCR_VER_MID = 128/2 ; tobe 128/2 was 136/2

=0004					ab90_VAL = $04	; -80

=0019					ab91_VAL = $19 	; -80

=00f8					ab92_VAL = $f8  ; +79 ; tobe $04 was $3C

=0014					ab93_VAL = $14  ; +79

=0004					ab94_VAL = $04  ; -68

=0019					ab95_VAL = $19  ; -68

=00f8					ab96_VAL = $f8	; +67

=0014					ab97_VAL = $14  ; +67

=0080					CLIP_TEST_BOTTOM = 128 ; $88 	; tobe 128 was $88

=007f					CLIP_BOTTOM = CLIP_TEST_BOTTOM-1

=0080					CLIP_TEST_RIGHT = 128 ; $A0 	; tobe 128 was $A0

=007f					CLIP_RIGHT = CLIP_TEST_RIGHT-1

=0000					CLIP_TEST_TOP = $00

=0000					CLIP_TEST_LEFT = $00

=00aa					SPEED_LO = $AA

=00ab					SPEED_HI = $AB

=00ac					ROT_SPD = $AC

=00ad					OBJECT_POINTER_POS = $AD

=00af					CURRENT_OBJECT = $AF

=00b0					NUMBER_OF_POINTS = $B0

=00b2					DRAW_OBJECT_COUNT = $B2

=00b3					DRAW_OBJECT_COUNTER = $B3

=00cf					OBJ_PNT_X_LSB 	= $CF

=00d0					OBJ_PNT_X_MSB 	= $D0

=00d1					OBJ_PNT_Y_LSB 	= $D1

=00d2					OBJ_PNT_Y_MSB 	= $D2

=00d3					OBJ_PNT_Z_LSB 	= $D3

=00d4					OBJ_PNT_Z_MSB 	= $D4

=00d5					DIFF_X_LSB = $D5

=00d6					DIFF_X_MSB = $D6

=00d7					DIFF_X_HSB = $D7

=00d8					DIFF_Y_LSB = $D8

=00d9					DIFF_Y_MSB = $D9

=00da					DIFF_Y_HSB = $DA

=00db					DIFF_Z_LSB = $DB

=00dc					DIFF_Z_MSB = $DC

=00dd					DIFF_Z_HSB = $DD

=001d					OBJECT_POINTER = $1D

=fffe					IRQ = $FFFE

=0001					PNT_OFF_HOR = $01	; PNT_OFF_RIGHT = $01

=0002					PNT_OFF_VER = $02	; PNT_OFF_BOTTOM = $02

=e000					OVERFLOW = $E000 ; overflow?

.0801					startup

.0801	 78		sei			SEI

.0802	 a2 ff		ldx #$ff		LDX #$FF

.0804	 9a		txs			TXS

.0805	 a9 00		lda #$00	 LDA #$00

.0807	 8d 20 d0	sta $d020	 STA $D020

.080a	 a9 01		lda #$01	 LDA #$01 ; $00

.080c	 8d 21 d0	sta $d021	 STA $D021

.080f	 a9 0b		lda #$0b	 LDA #$0B ; $00

.0811	 8d 22 d0	sta $d022	 STA $D022

.0814	 a9 0c		lda #$0c	 LDA #$0C ; $00

.0816	 8d 23 d0	sta $d023	 STA $D023

.0819	 a9 00		lda #$00	 LDA #$00 ; $01 ; colour 11 

.081b	 a2 00		ldx #$00	 LDX #<$D800

.081d	 a0 d8		ldy #$d8	 LDY #>$D800

.081f	 86 02		stx $02		 STX SCREEN_POS_LO+0

.0821	 84 03		sty $03		 STY SCREEN_POS_LO+1

.0823	 a2 03		ldx #$03	 LDX #>1000 

.0825	 a0 e8		ldy #$e8	 LDY #<1000

.0827	 20 40 09	jsr $0940	 JSR MEMSET

.082a	 a9 bc		lda #$bc	 LDA #$BC ;$65 ; colour 01 (0000????) and colour 10 (????0000) - bank 1

.082c	 a2 00		ldx #$00	 LDX #<(SCREEN_COLOUR)

.082e	 a0 5c		ldy #$5c	 LDY #>(SCREEN_COLOUR)

.0830	 86 02		stx $02		 STX SCREEN_POS_LO+0

.0832	 84 03		sty $03		 STY SCREEN_POS_LO+1

.0834	 a2 03		ldx #$03	 LDX #>1000 

.0836	 a0 e8		ldy #$e8	 LDY #<1000

.0838	 20 40 09	jsr $0940	 JSR MEMSET

.083b	 a9 35		lda #$35		LDA #$35

.083d	 85 01		sta $01			STA $1

.083f	 a9 70		lda #$70		LDA #$70

.0841	 8d 18 d0	sta $d018		STA $D018

.0844	 a9 3b		lda #$3b		LDA #$3B

.0846	 8d 11 d0	sta $d011		STA $D011

.0849	 a9 18		lda #$18		LDA #$18

.084b	 8d 16 d0	sta $d016		STA $D016

.084e	 a9 ef		lda #$ef		LDA #<IRQ_1

.0850	 8d fe ff	sta $fffe		STA $FFFE

.0853	 a9 08		lda #$08		LDA #>IRQ_1

.0855	 8d ff ff	sta $ffff		STA $FFFF

.0858	 a9 7f		lda #$7f	 LDA #$7F

.085a	 8d 0d dc	sta $dc0d	 STA $DC0D  ; disable timer interrupts which can be generated by the two CIA chips

.085d	 8d 0d dd	sta $dd0d	 STA $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

.0860	 ad 0d dc	lda $dc0d	 LDA $DC0D  ; by reading this two registers we negate any pending CIA irqs.

.0863	 ad 0d dd	lda $dd0d	 LDA $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

.0866	 a9 01		lda #$01	  LDA #$01   ; this is how to tell the VICII to generate a raster interrupt

.0868	 8d 1a d0	sta $d01a	 STA $D01A

.086b	 a9 02		lda #$02	 LDA #2 ; SCRNBANK

.086d	 8d 00 dd	sta $dd00	 STA $DD00 ; bank

.0870	 a9 ba		lda #$ba		LDA #$BA

.0872	 8d 12 d0	sta $d012		STA $D012

.0875	 a9 01		lda #$01		LDA #$01

.0877	 8d 19 d0	sta $d019		STA $D019

.087a	 a9 07		lda #$07		LDA		#7

.087c	 85 ac		sta $ac			STA		ROT_SPD

.087e	 a9 40		lda #$40		LDA		#$40

.0880	 85 aa		sta $aa			STA		SPEED_LO

.0882	 a9 18		lda #$18		LDA		#$18

.0884	 85 ab		sta $ab			STA		SPEED_HI

.0886	 a9 01		lda #$01		LDA		#1 ;7

.0888	 85 b2		sta $b2			STA		DRAW_OBJECT_COUNT

.088a	 a9 00		lda #$00		LDA		#0

.088c	 85 2c		sta $2c			STA		ROT_LO

.088e	 85 2d		sta $2d			STA		ROT_HI

.0890	 85 73		sta $73			STA		CURR_X_MSB

.0892	 85 74		sta $74			STA		CURR_X_HSB

.0894	 85 76		sta $76			STA		CURR_Y_MSB

.0896	 85 77		sta $77			STA		CURR_Y_HSB

.0898	 85 79		sta $79			STA		CURR_Z_MSB

.089a	 85 7a		sta $7a			STA		CURR_Z_HSB

.089c	 58		cli			CLI

.089d					main_loop
.089d	 20 85 17	jsr $1785				JSR 	READ_JOYSTICK_KEYBOARD

.08a0	 20 cc 10	jsr $10cc				JSR		SIN_COS

.08a3	 20 26 14	jsr $1426				JSR 	DRAW_SCREEN

.08a6	 20 eb 13	jsr $13eb				JSR 	COLOUR_SETUP_BLACK ; COLOUR_SETUP_WHITE ; BLACK

.08a9	 20 b3 0b	jsr $0bb3				JSR 	DRAW_OBJECTS

.08ac	 a6 73		ldx $73					LDX CURR_X_MSB

.08ae	 a5 74		lda $74					LDA CURR_X_HSB

.08b0	 a0 00		ldy #$00				LDY	#0

.08b2	 20 f2 17	jsr $17f2				JSR	HEX16

.08b5	 a5 72		lda $72					LDA CURR_X_LSB

.08b7	 a2 20		ldx #$20				LDX #32

.08b9	 a0 00		ldy #$00				LDY	#0

.08bb	 20 05 18	jsr $1805				JSR	HEX8

.08be	 a6 76		ldx $76					LDX CURR_Y_MSB

.08c0	 a5 77		lda $77					LDA CURR_Y_HSB

.08c2	 a0 06		ldy #$06				LDY	#6

.08c4	 20 f2 17	jsr $17f2				JSR	HEX16

.08c7	 a5 75		lda $75					LDA CURR_Y_LSB

.08c9	 a2 20		ldx #$20				LDX #32

.08cb	 a0 06		ldy #$06				LDY	#6

.08cd	 20 05 18	jsr $1805				JSR	HEX8

.08d0	 a6 79		ldx $79					LDX CURR_Z_MSB

.08d2	 a5 7a		lda $7a					LDA CURR_Z_HSB

.08d4	 a0 0c		ldy #$0c				LDY	#12

.08d6	 20 f2 17	jsr $17f2				JSR	HEX16

.08d9	 a5 78		lda $78					LDA CURR_Z_LSB

.08db	 a2 20		ldx #$20				LDX #32

.08dd	 a0 0c		ldy #$0c				LDY	#12

.08df	 20 05 18	jsr $1805				JSR	HEX8

.08e2	 ad 2d 1a	lda $1a2d				LDA OBJECTS_TO_DRAW+1

.08e5	 a2 00		ldx #$00				LDX #0

.08e7	 a0 12		ldy #$12				LDY	#18

.08e9	 20 05 18	jsr $1805				JSR	HEX8

.08ec	 4c 9d 08	jmp $089d				JMP MAIN_LOOP

.08ef	 48		pha		IRQ_1   		PHA

.08f0	 a9 1a		lda #$1a					LDA 	#<IRQ_2

.08f2	 8d fe ff	sta $fffe					STA 	IRQ   	;IRQ

.08f5	 a9 09		lda #$09					LDA 	#>IRQ_2

.08f7	 8d ff ff	sta $ffff					STA 	IRQ+1   ;IRQ

.08fa	 a9 00		lda #$00					LDA 	#$00

.08fc	 8d 12 d0	sta $d012					STA 	$D012	;Raster Position

.08ff	 a9 01		lda #$01					LDA 	#$01

.0901	 8d 19 d0	sta $d019					STA 	$D019   ;VIC Interrupt Request Register (IRR)

.0904	 a9 7e		lda #$7e					LDA 	#$7E

.0906	 8d 18 d0	sta $d018					STA 	$D018   ;VIC Memory Control Register

.0909	 a9 1b		lda #$1b					LDA 	#$1B

.090b	 8d 11 d0	sta $d011					STA 	$D011   ;VIC Control Register 1

.090e	 a9 01		lda #$01					LDA 	#$01

.0910	 8d 21 d0	sta $d021					STA 	$D021   ;Background Color 0

.0913	 a9 08		lda #$08					LDA 	#$08

.0915	 8d 16 d0	sta $d016					STA 	$D016   ;VIC Control Register 2

.0918	 68		pla						PLA 

.0919	 40		rti		NMI_NOP			RTI ; This is the irq handler for the NMI. Just returns without acknowledge. This prevents subsequent NMI's from interfering.

.091a	 48		pha		IRQ_2  			PHA

.091b	 a9 00		lda #$00	VIC_SCREEN_BANK	LDA 	#0

.091d	 8d 18 d0	sta $d018					STA 	$D018    ;VIC Memory Control Register

.0920	 a9 3b		lda #$3b					LDA 	#$3B

.0922	 8d 11 d0	sta $d011					STA 	$D011    ;VIC Control Register 1

.0925	 a9 18		lda #$18					LDA 	#$18

.0927	 8d 16 d0	sta $d016					STA 	$D016    ;VIC Control Register 2

.092a	 a9 ef		lda #$ef					LDA 	#<IRQ_1

.092c	 8d fe ff	sta $fffe					STA 	IRQ   ;IRQ

.092f	 a9 08		lda #$08					LDA 	#>IRQ_1

.0931	 8d ff ff	sta $ffff					STA 	IRQ+1   ;IRQ

.0934	 a9 b2		lda #$b2					LDA 	#178	; 186

.0936	 8d 12 d0	sta $d012					STA 	$D012    ;Raster Position

.0939	 a9 01		lda #$01					LDA 	#$01

.093b	 8d 19 d0	sta $d019					STA 	$D019    ;VIC Interrupt Request Register (IRR)

.093e	 68		pla						PLA 

.093f	 40		rti						RTI

.0940	 8c 54 09	sty $0954	MEMSET       STY    LSB_ONLY+1 ; store LSB count

.0943	 e0 00		cpx #$00	             CPX    #0          ; MSB?     

.0945	 f0 0c		beq $0953	             BEQ    LSB_ONLY   ; no

.0947	 a0 00		ldy #$00	             LDY    #0          ; yes so reset LSB

.0949					msb_loop
.0949	 91 02		sta ($02),y	LSB_LOOP      STA    (SCREEN_POS_LO),Y   ; clear whole MSB

.094b	 88		dey		               DEY 

.094c	 d0 fb		bne $0949	               BNE    LSB_LOOP

.094e	 e6 03		inc $03		              INC    SCREEN_POS_LO+1      ; inc MSB

.0950	 ca		dex		              DEX               ; dec MSB count

.0951	 d0 f6		bne $0949	              BNE    MSB_LOOP

.0953	 a0 00		ldy #$00	LSB_ONLY    LDY    #0          ; LSB count 

.0955	 f0 07		beq $095e	             BEQ    MS_END

.0957	 91 02		sta ($02),y	LAST_LSB_LOOP STA   (SCREEN_POS_LO),Y

.0959	 88		dey		               DEY 

.095a	 d0 fb		bne $0957	               BNE   LAST_LSB_LOOP               

.095c	 91 02		sta ($02),y	              STA   (SCREEN_POS_LO),Y     ; clear last Y (0)

.095e	 60		rts		MS_END      RTS

.095f	 85 23		sta $23		FP_DIVIDE	STA		FP_DIVIDE_HI	; inputs = X-(LO) + Y-(HI) + A (HI) + FP_MULTILPLY_LO - outputs = AY

.0961	 b9 00 30	lda $3000,y				LDA 	LOG_TABLE,Y

.0964	 a4 22		ldy $22					LDY 	FP_DIVIDE_LO

.0966	 38		sec					SEC 

.0967	 f9 00 30	sbc $3000,y				SBC 	LOG_TABLE,Y

.096a	 a8		tay					TAY

.096b	 8a		txa					TXA

.096c	 09 02		ora #$02				ORA 	#$02

.096e	 b0 03		bcs $0973				BCS 	_FP_DIV_CNT

.0970	 e9 03		sbc #$03						SBC 	#$03	; subtract 4?

.0972	 38		sec							SEC 

.0973	 e5 23		sbc $23		_FP_DIV_CNT SBC 	FP_DIVIDE_HI

.0975	 29 fd		and #$fd				AND 	#$FD

.0977	 be 00 31	ldx $3100,y				LDX 	EXP_TABLE,Y

.097a	 60		rts					RTS

.097b	 85 23		sta $23		FP_MULTIPLY	STA		FP_MULTIPLY_HI	; inputs = X-(LO) + Y-(HI) + A (HI) + FP_MULTILPLY_LO - outputs = AY

.097d	 bd 00 30	lda $3000,x				LDA 	LOG_TABLE,X		

.0980	 a6 22		ldx $22					LDX 	FP_MULTIPLY_LO

.0982	 18		clc					CLC 

.0983	 7d 00 30	adc $3000,x				ADC 	LOG_TABLE,X

.0986	 aa		tax					TAX 

.0987	 98		tya					TYA 

.0988	 90 03		bcc $098d				BCC 	_FP_MUL_CNT

.098a	 69 03		adc #$03						ADC 	#$03	; add 4?

.098c	 18		clc							CLC 

.098d	 65 23		adc $23		_FP_MUL_CNT	ADC 	FP_MULTIPLY_HI

.098f	 29 fd		and #$fd				AND 	#$FD

.0991	 bc 00 31	ldy $3100,x				LDY 	EXP_TABLE,X

.0994	 60		rts					RTS 

.0995	 bd 00 30	lda $3000,x	FPMUL		LDA LOG_TABLE,X		; fpMul - ; Input:  [08] = fp multiplier ;         XY   = fp multiplicand ; Output: [08] and XY = result

.0998	 a6 08		ldx $08					LDX ab08

.099a	 18		clc					CLC 

.099b	 7d 00 30	adc $3000,x				ADC LOG_TABLE,X

.099e	 aa		tax					TAX 

.099f	 98		tya					TYA 

.09a0	 90 03		bcc $09a5				BCC _PF_MUL_CNT

.09a2	 69 03		adc #$03					ADC #$03			; add 4?

.09a4	 18		clc						CLC 

.09a5	 65 09		adc $09		_PF_MUL_CNT   	ADC ab09

.09a7	 70 0c		bvs $09b5				BVS MATH_LIMIT 

.09a9	 29 fd		and #$fd				AND #$FD

.09ab	 85 09		sta $09					STA ab09

.09ad	 a8		tay					TAY 

.09ae	 bd 00 31	lda $3100,x				LDA EXP_TABLE,X

.09b1	 aa		tax					TAX 

.09b2	 85 08		sta $08					STA ab08

.09b4	 60		rts					RTS 

.09b5	 10 0c		bpl $09c3	MATH_LIMIT	BPL _MATH_LIMIT_POS

.09b7	 29 01		and #$01				AND #$01

.09b9	 09 78		ora #$78				ORA #$78

.09bb	 a8		tay					TAY 

.09bc	 a2 00		ldx #$00				LDX #$00

.09be	 86 08		stx $08					STX ab08

.09c0	 84 09		sty $09					STY ab09

.09c2	 60		rts					RTS 

.09c3	 29 01		and #$01	_MATH_LIMIT_POS	AND #$01

.09c5	 09 84		ora #$84					ORA #$84

.09c7	 a8		tay		MATH_LIMIT_EXIT	TAY 

.09c8	 a2 00		ldx #$00					LDX #$00

.09ca	 86 08		stx $08						STX ab08

.09cc	 84 09		sty $09						STY ab09

.09ce	 60		rts						RTS 

.09cf	 84 06		sty $06		FPDIV	STY 	ab06	 ; fpDiv - Input:  [08] = fp divisor - XY   = fp dividend - Output: [08] and XY = result

.09d1	 a4 08		ldy $08		        LDY 	ab08

.09d3	 b9 00 30	lda $3000,y	        LDA 	LOG_TABLE,Y

.09d6	 38		sec		        SEC 

.09d7	 fd 00 30	sbc $3000,x	        SBC 	LOG_TABLE,X

.09da	 aa		tax		        TAX 

.09db	 a5 09		lda $09		        LDA 	ab09

.09dd	 09 02		ora #$02	        ORA 	#$02

.09df	 b0 03		bcs $09e4	        BCS 	b8349

.09e1	 e9 03		sbc #$03				SBC 	#$03		; subtract 4?

.09e3	 38		sec					SEC 

.09e4	 e5 06		sbc $06		b8349   SBC 	ab06

.09e6	 70 cd		bvs $09b5	        BVS 	MATH_LIMIT 

.09e8	 29 fd		and #$fd	        AND 	#$FD

.09ea	 85 09		sta $09		        STA 	ab09

.09ec	 a8		tay		        TAY 

.09ed	 bd 00 31	lda $3100,x	        LDA 	EXP_TABLE,X

.09f0	 aa		tax		        TAX 

.09f1	 85 08		sta $08		        STA 	ab08

.09f3	 60		rts		        RTS 

.09f4	 a5 18		lda $18		FPADD_CONT	LDA		ab18	; ($838B entry point)  

.09f6	 4a		lsr					LSR 

.09f7	 b0 15		bcs $0a0e				BCS 	b8373

.09f9	 8a		txa		        TXA 

.09fa	 65 08		adc $08		        ADC 	ab08

.09fc	 6a		ror		        ROR 

.09fd	 c8		iny		        INY 

.09fe	 c8		iny		        INY 

.09ff	 c8		iny		        INY 

.0a00	 c8		iny		        INY 

.0a01	 aa		tax		        TAX 

.0a02	 85 08		sta $08		        STA 	ab08

.0a04	 84 09		sty $09		        STY 	ab09

.0a06	 60		rts		        RTS 

.0a07	 98		tya		b836C   TYA 

.0a08	 0a		asl		        ASL 

.0a09	 90 5c		bcc $0a67	        BCC 	b83CC

.0a0b	 4c b4 0a	jmp $0ab4	        JMP 	j8419

.0a0e	 8a		txa		b8373   TXA 

.0a0f	 e5 08		sbc $08		        SBC 	ab08

.0a11	 f0 0b		beq $0a1e	        BEQ 	b8383

.0a13	 b0 5b		bcs $0a70				BCS 	b83D5

.0a15	 a4 09		ldy $09					LDY 	ab09

.0a17	 49 ff		eor #$ff				EOR 	#$FF

.0a19	 69 01		adc #$01				ADC 	#$01

.0a1b	 4c 70 0a	jmp $0a70				JMP 	b83D5

.0a1e	 98		tya		b8383   TYA 

.0a1f	 38		sec		        SEC 

.0a20	 e9 24		sbc #$24	        SBC 	#$24

.0a22	 70 9f		bvs $09c3			BVS 	_MATH_LIMIT_POS

.0a24	 50 a1		bvc $09c7				BVC 	MATH_LIMIT_EXIT

.0a26	 98		tya		FP_ADD  TYA			; XY + 89

.0a27	 38		sec		        SEC 

.0a28	 e5 09		sbc $09		        SBC 	ab09

.0a2a	 70 db		bvs $0a07	        BVS 	b836C

.0a2c	 85 18		sta $18		        STA 	ab18

.0a2e	 69 01		adc #$01	        ADC 	#$01

.0a30	 70 d5		bvs $0a07	        BVS 	b836C

.0a32	 30 5c		bmi $0a90	        BMI 	b83F5

.0a34	 4a		lsr		        LSR 

.0a35	 4a		lsr		        LSR 

.0a36	 f0 bc		beq $09f4	        BEQ 	FPADD_CONT

.0a38	 c9 09		cmp #$09	        CMP 	#$09

.0a3a	 b0 2b		bcs $0a67	        BCS 	b83CC

.0a3c	 49 0f		eor #$0f	        EOR 	#$0F

.0a3e	 8d 46 0a	sta $0a46	        STA 	ab83AB +1

.0a41	 a5 08		lda $08		        LDA		ab08

.0a43	 38		sec		        SEC 

.0a44	 6a		ror		        ROR 

.0a45	 d0 07		bne $0a4e	ab83AB 	BNE		b83B3 	; self modifiction code shift

.0a47	 ea		nop		        NOP 

.0a48	 ea		nop		        NOP 

.0a49	 ea		nop		        NOP 

.0a4a	 ea		nop		        NOP 

.0a4b	 ea		nop		        NOP 

.0a4c	 ea		nop		        NOP 

.0a4d	 ea		nop		        NOP 

.0a4e	 4a		lsr		b83B3   LSR 

.0a4f	 4a		lsr		        LSR 

.0a50	 4a		lsr		        LSR 

.0a51	 4a		lsr		        LSR 

.0a52	 4a		lsr		        LSR 

.0a53	 4a		lsr		        LSR 

.0a54	 4a		lsr		        LSR 

.0a55	 85 06		sta $06		        STA 	ab06

.0a57	 a5 18		lda $18		        LDA 	ab18

.0a59	 4a		lsr		        LSR 

.0a5a	 8a		txa		        TXA 

.0a5b	 b0 0f		bcs $0a6c	        BCS 	b83D1

.0a5d	 65 06		adc $06		b83C2   ADC 	ab06

.0a5f	 90 05		bcc $0a66	        BCC 	b83CB

.0a61	 4a		lsr					LSR 

.0a62	 c8		iny					INY 

.0a63	 c8		iny					INY 

.0a64	 c8		iny					INY 

.0a65	 c8		iny					INY 

.0a66	 aa		tax		b83CB   TAX 

.0a67	 86 08		stx $08		b83CC   STX 	ab08

.0a69	 84 09		sty $09		        STY 	ab09

.0a6b	 60		rts		        RTS 

.0a6c	 e5 06		sbc $06		b83D1   SBC ab06

.0a6e	 b0 f6		bcs $0a66	        BCS b83CB

.0a70	 84 06		sty $06		b83D5   STY ab06

.0a72	 a0 00		ldy #$00	        LDY #$00

.0a74	 0a		asl		b83D9   ASL 

.0a75	 88		dey		        DEY 

.0a76	 90 fc		bcc $0a74	        BCC b83D9

.0a78	 aa		tax		        TAX 

.0a79	 98		tya		        TYA 

.0a7a	 0a		asl		        ASL 

.0a7b	 0a		asl		        ASL 

.0a7c	 18		clc		        CLC 

.0a7d	 65 06		adc $06		        ADC ab06

.0a7f	 70 06		bvs $0a87	        BVS b83EC

.0a81	 a8		tay		        TAY 

.0a82	 86 08		stx $08		        STX ab08

.0a84	 84 09		sty $09		        STY ab09

.0a86	 60		rts		        RTS 

.0a87	 a2 9b		ldx #$9b	b83EC   LDX #<p8400

.0a89	 a0 0a		ldy #$0a	        LDY #>p8400

.0a8b	 86 08		stx $08		        STX ab08

.0a8d	 84 09		sty $09		        STY ab09

.0a8f	 60		rts		        RTS 

.0a90	 c9 e0		cmp #$e0	b83F5   CMP #$E0

.0a92	 90 20		bcc $0ab4	        BCC j8419

.0a94	 4a		lsr		        LSR 

.0a95	 4a		lsr		        LSR 

.0a96	 29 07		and #$07	        AND #$07

.0a98	 8d 9f 0a	sta $0a9f	        STA ab8404 +1

.0a9b	 8a		txa		p8400   TXA 

.0a9c	 38		sec		        SEC 

.0a9d	 6a		ror		        ROR 

.0a9e	 d0 03		bne $0aa3	ab8404  BNE b8408

.0aa0	 4a		lsr		        LSR 

.0aa1	 4a		lsr		        LSR 

.0aa2	 4a		lsr		        LSR 

.0aa3	 4a		lsr		b8408   LSR 

.0aa4	 4a		lsr		        LSR 

.0aa5	 4a		lsr		        LSR 

.0aa6	 4a		lsr		        LSR 

.0aa7	 85 06		sta $06		        STA ab06

.0aa9	 a4 09		ldy $09		        LDY ab09

.0aab	 a5 18		lda $18		        LDA ab18

.0aad	 4a		lsr		        LSR 

.0aae	 a5 08		lda $08		        LDA ab08

.0ab0	 90 ab		bcc $0a5d	        BCC b83C2

.0ab2	 b0 b8		bcs $0a6c	        BCS b83D1

.0ab4	 a6 08		ldx $08		j8419   LDX ab08

.0ab6	 a4 09		ldy $09		        LDY ab09

.0ab8	 60		rts		        RTS 

.0ab9	 c8		iny		COS_FP	INY 

.0aba	 98		tya		SIN_FP	TYA 

.0abb	 4a		lsr				LSR 

.0abc	 90 06		bcc $0ac4			BCC 	SIN_CNT

.0abe	 8a		txa						TXA 

.0abf	 49 ff		eor #$ff					EOR #$FF

.0ac1	 aa		tax						TAX 

.0ac2	 98		tya						TYA 

.0ac3	 4a		lsr						LSR 

.0ac4	 29 01		and #$01	SIN_CNT AND 	#$01

.0ac6	 1d 00 2f	ora $2f00,x			ORA 	SIN_MSB,X

.0ac9	 a8		tay				TAY 

.0aca	 bd 00 2e	lda $2e00,x			LDA 	SIN_LSB,X

.0acd	 aa		tax				TAX 

.0ace	 60		rts				RTS 

.0acf	 98		tya		FPTO8BIT	TYA 				; input X/Y (mantisa/exponent) -  output X=HI/Y=LO ; transfer exponent? to a

.0ad0	 30 25		bmi $0af7				BMI		b849F		; if negative

.0ad2	 4a		lsr					LSR 				; half and put bit into carry

.0ad3	 4a		lsr					LSR 				; half and put bit into carry

.0ad4	 c9 07		cmp #$07				CMP 	#$07		; is it greater than 7

.0ad6	 b0 26		bcs $0afe				BCS 	FP8BIT_ERR		; yes so error so exit with carry set

.0ad8	 8d df 0a	sta $0adf				STA 	FP8BIT_JMP +1	; no so self modifying code to jump forward a number of divides

.0adb	 8a		txa					TXA 				; transfer mantisa? to a

.0adc	 38		sec					SEC 				; set carry

.0add	 6a		ror					ROR 				; /2 - putting 1 in top bit (and putting 0 in carry?) 

.0ade	 d0 04		bne $0ae4	FP8BIT_JMP	BNE 	b848C		; jump forward self modifying code - always done as carry is set so ROR result is never 0

.0ae0	 4a		lsr					LSR 				; /2

.0ae1	 4a		lsr					LSR 				; /4

.0ae2	 4a		lsr					LSR 				; /8

.0ae3	 4a		lsr					LSR 				; /16

.0ae4	 4a		lsr		b848C   	LSR 				; /32

.0ae5	 4a		lsr					LSR 				; /64

.0ae6	 4a		lsr					LSR 				; /128

.0ae7	 69 00		adc #$00	b848F   	ADC 	#0			; add carry?

.0ae9	 30 12		bmi $0afd				BMI 	b84A5		; if minus then error?

.0aeb	 aa		tax					TAX 				; backup result

.0aec	 98		tya					TYA 				; transfer y to a

.0aed	 4a		lsr					LSR					; / 2

.0aee	 8a		txa					TXA 				; restore result

.0aef	 90 05		bcc $0af6				BCC 	b849E		; clear carry so ok?

.0af1	 49 ff		eor #$ff					EOR 	#$FF	; negate?

.0af3	 69 00		adc #$00					ADC 	#$00	; negate by adding carry that is already set?

.0af5	 18		clc						CLC 			; clear carry for ok?

.0af6	 60		rts		b849E   	RTS 				; exit

.0af7	 c9 fc		cmp #$fc	b849F   	CMP 	#$FC		; sets the carry flag if greater than (11111100 binary)

.0af9	 a9 00		lda #$00				LDA 	#$00		; resets the output x value? 

.0afb	 f0 ea		beq $0ae7				BEQ 	b848F		; jump back into code

.0afd	 38		sec		b84A5   	SEC 				; set carry for error?

.0afe	 60		rts		FP8BIT_ERR	RTS 				; exit

.0aff	 98		tya		FPTO16BIT	TYA					; input X/Y (mantisa/exponent) -  output X=HI/Y=LO	; transfer exponent? to a

.0b00	 30 57		bmi $0b59				BMI 	b8501 		; if negative

.0b02	 4a		lsr					LSR 				; half and put bit into carry

.0b03	 4a		lsr					LSR 				; half and put bit into carry

.0b04	 c9 0f		cmp #$0f				CMP 	#15			; is it greater than 15

.0b06	 b0 f6		bcs $0afe				BCS 	FP8BIT_ERR		; yes so error so exit with carry set

.0b08	 85 06		sta $06					STA 	ab06		; store intermediate in temp var

.0b0a	 0a		asl					ASL 				; *2

.0b0b	 65 06		adc $06					ADC 	ab06		; *3 

.0b0d	 8d 1a 0b	sta $0b1a				STA 	FP16BIT_JMP +1	; number of bytes to jump

.0b10	 a9 00		lda #$00				LDA 	#0

.0b12	 85 06		sta $06					STA 	ab06		; clear result

.0b14	 8a		txa					TXA 				; get input (mantisa?)

.0b15	 38		sec					SEC 				; set carry to move 1 into result

.0b16	 6a		ror					ROR 				; rotate carry into high bit and low bit into carry

.0b17	 66 06		ror $06					ROR 	ab06		; rotate carry into result

.0b19	 90 0f		bcc $0b2a	FP16BIT_JMP BCC 	b84D2		; jump forward

.0b1b	 4a		lsr					LSR 				; half and shift lowest bit into carry  

.0b1c	 66 06		ror $06					ROR 	ab06		; half and rotate carry bit into result

.0b1e	 4a		lsr					LSR 

.0b1f	 66 06		ror $06					ROR 	ab06

.0b21	 4a		lsr					LSR 

.0b22	 66 06		ror $06					ROR 	ab06

.0b24	 4a		lsr					LSR 

.0b25	 66 06		ror $06					ROR 	ab06

.0b27	 4a		lsr					LSR 

.0b28	 66 06		ror $06					ROR 	ab06

.0b2a	 4a		lsr		b84D2   	LSR 

.0b2b	 66 06		ror $06					ROR 	ab06

.0b2d	 4a		lsr					LSR 

.0b2e	 66 06		ror $06					ROR 	ab06

.0b30	 4a		lsr					LSR 

.0b31	 66 06		ror $06					ROR 	ab06

.0b33	 4a		lsr					LSR 

.0b34	 66 06		ror $06					ROR		ab06

.0b36	 4a		lsr					LSR 

.0b37	 66 06		ror $06					ROR 	ab06

.0b39	 4a		lsr					LSR 

.0b3a	 66 06		ror $06					ROR 	ab06

.0b3c	 4a		lsr					LSR 

.0b3d	 66 06		ror $06					ROR 	ab06

.0b3f	 4a		lsr					LSR 

.0b40	 66 06		ror $06					ROR 	ab06

.0b42	 4a		lsr					LSR 

.0b43	 66 06		ror $06					ROR 	ab06

.0b45	 4a		lsr					LSR 

.0b46	 66 06		ror $06					ROR 	ab06

.0b48	 aa		tax					TAX 				; store low byte of result?

.0b49	 98		tya					TYA 				; get input (exponent?)

.0b4a	 a4 06		ldy $06					LDY 	ab06		; store high byte of result?

.0b4c	 4a		lsr					LSR 				; move 1st bit of input (sign) into carry

.0b4d	 90 09		bcc $0b58				BCC 	b8500		; clear so positive

.0b4f	 8a		txa						TXA 			; negtive so

.0b50	 49 ff		eor #$ff					EOR 	#$FF	; negate x

.0b52	 aa		tax						TAX 

.0b53	 98		tya						TYA 

.0b54	 49 ff		eor #$ff					EOR 	#$FF	; negate y

.0b56	 a8		tay						TAY 

.0b57	 18		clc						CLC 

.0b58	 60		rts		b8500   RTS 					; no

.0b59	 4a		lsr		b8501 		LSR 				; move 1st bit to carry

.0b5a	 90 06		bcc $0b62				BCC 	b850B		; set y/n

.0b5c	 a2 ff		ldx #$ff					LDX 	#$FF	; yes

.0b5e	 a0 ff		ldy #$ff					LDY 	#$FF

.0b60	 18		clc						CLC 

.0b61	 60		rts					RTS 

.0b62	 a2 00		ldx #$00	b850B   	LDX 	#0			; no

.0b64	 a0 00		ldy #$00				LDY 	#0

.0b66	 60		rts					RTS 

.0b67	 84 07		sty $07		BIT24TOFP 	STY		ab07 	; store lsb	; MATH_24BitToFP (FP.SetToObjectSpaceCoordinate24) ; Enter: A = Coordinate.MSB X = Coordinate.PSB Y = Coordinate.LSB ; Usese: [06].b  Temporary store for coordinate MSB ; Exit:  [08].fp Result, also stored in X:A (exp:man)

.0b69	 85 06		sta $06					STA 	ab06 	; store msb

.0b6b	 10 11		bpl $0b7e				BPL 	b8527	 ; positive ?

.0b6d	 a9 00		lda #$00					LDA 	#0	 	; negative so 

.0b6f	 38		sec						SEC 

.0b70	 e5 07		sbc $07						SBC 	ab07 	; negate lsb

.0b72	 85 07		sta $07						STA 	ab07

.0b74	 8a		txa						TXA 			; negate psb

.0b75	 49 ff		eor #$ff					EOR 	#$FF

.0b77	 69 00		adc #$00					ADC 	#0

.0b79	 aa		tax						TAX 

.0b7a	 a9 00		lda #$00					LDA 	#0

.0b7c	 e5 06		sbc $06						SBC 	ab06	; negate msb

.0b7e	 d0 0f		bne $0b8f	b8527   	BNE 	b8538			; if msb not 0 - jump to set loop counter to 24 ($18)?

.0b80	 8a		txa						TXA 				; move psb to a

.0b81	 d0 23		bne $0ba6					BNE 	b854F			; if psb not 0 - jump to set loop counter to 16 ($10)?

.0b83	 a5 07		lda $07							LDA 	ab07			; get lsb

.0b85	 f0 23		beq $0baa						BEQ 	b8553			; if lsb is 0 - jump to overflow and exit

.0b87	 a2 00		ldx #$00							LDX 	#0

.0b89	 86 07		stx $07								STX 	ab07

.0b8b	 a2 08		ldx #$08							LDX 	#8			; set loop counter to 8?

.0b8d	 d0 04		bne $0b93							BNE 	b853C 		; jump?

.0b8f	 86 07		stx $07		b8538   	STX 	ab07	; store psb?

.0b91	 a2 18		ldx #$18				LDX 	#24		; set loop counter to 24?

.0b93	 ca		dex		b853C   		DEX 			; find exponent - start from whatever x is passed in and reduce until x a bit set found 

.0b94	 06 07		asl $07						ASL 	ab07 	; shift lsb up into carry

.0b96	 2a		rol						ROL 	 		; shift msb up with carry - mantisa?

.0b97	 90 fa		bcc $0b93					BCC 	b853C	; as soon as first bit is set then exit

.0b99	 85 08		sta $08					STA 	ab08		; store mantisa?

.0b9b	 8a		txa					TXA 				; x is exponent?

.0b9c	 0a		asl					ASL 				; exponent *2?

.0b9d	 06 06		asl $06					ASL 	ab06		; shift msb putting sign into carry 

.0b9f	 2a		rol					ROL 				; rotate carry into first bit of exponent

.0ba0	 aa		tax					TAX 				; copy exponent to x - bit 0 is sign

.0ba1	 86 09		stx $09					STX 	ab09

.0ba3	 a5 08		lda $08					LDA 	ab08		; copy mantisa to a

.0ba5	 60		rts					RTS

.0ba6	 a2 10		ldx #$10	b854F   	LDX 	#16		; set loop counter to 16?

.0ba8	 d0 e9		bne $0b93				BNE 	b853C 	; jump?

.0baa	 a9 00		lda #$00	b8553   	LDA 	#<OVERFLOW ; overflow?

.0bac	 a2 e0		ldx #$e0				LDX 	#>OVERFLOW

.0bae	 85 08		sta $08					STA 	ab08

.0bb0	 86 09		stx $09					STX 	ab09

.0bb2	 60		rts					RTS 

.0bb3	 a4 b2		ldy $b2		DRAW_OBJECTS	LDY 	DRAW_OBJECT_COUNT 			; number of objects to draw

.0bb5	 f0 0e		beq $0bc5					BEQ 	DRAW_OBJECTS_EXIT 			; exit if none

.0bb7	 84 b3		sty $b3						STY 	DRAW_OBJECT_COUNTER 		; store temp object count

.0bb9	 be 2c 1a	ldx $1a2c,y	DRAW_OBJECTS_LOOP   LDX 	OBJECTS_TO_DRAW,Y 		; object number

.0bbc	 20 c6 0b	jsr $0bc6						JSR 	DRAW_OBJECT

.0bbf	 c6 b3		dec $b3							DEC 	DRAW_OBJECT_COUNTER 	; dec temp object count

.0bc1	 a4 b3		ldy $b3							LDY 	DRAW_OBJECT_COUNTER 	; get temp object count

.0bc3	 d0 f4		bne $0bb9						BNE 	DRAW_OBJECTS_LOOP 		; exit y/n

.0bc5	 60		rts		DRAW_OBJECTS_EXIT 	RTS 							; exit

.0bc6	 86 af		stx $af		DRAW_OBJECT			STX		CURRENT_OBJECT					; store object number 

.0bc8	 bd 81 2c	lda $2c81,x						LDA		OBJECT_SHAPE_PTR_LO,X	; get object pos hi

.0bcb	 85 1d		sta $1d							STA		OBJECT_POINTER			; store in pointer

.0bcd	 bd c1 2c	lda $2cc1,x						LDA		OBJECT_SHAPE_PTR_HI,X	; get object pos lo

.0bd0	 85 1e		sta $1e							STA		OBJECT_POINTER+1		; store in pointer

.0bd2	 20 a4 0c	jsr $0ca4						JSR		CAMERA_OBJECT_DIFF

.0bd5	 a2 00		ldx #$00	DRAW_OBJECT_CONT   	LDX		#$00

.0bd7	 86 19		stx $19							STX		POINT_LINE_COUNT

.0bd9	 a0 01		ldy #$01						LDY		#$01

.0bdb	 20 e7 0c	jsr $0ce7						JSR		CHK_ABS_DIST

.0bde	 90 56		bcc $0c36						BCC		DRAW_OBJECT_LINES	; draw the object

.0be0	 a5 da		lda $da							LDA		DIFF_Y_HSB			; above ground?

.0be2	 10 09		bpl $0bed						BPL		DRAW_OBJECT_POINT	; not underground?

.0be4	 a0 00		ldy #$00						LDY		#$00

.0be6	 a2 00		ldx #$00						LDX		#$00

.0be8	 20 e7 0c	jsr $0ce7						JSR		CHK_ABS_DIST

.0beb	 b0 d8		bcs $0bc5						BCS		DRAW_OBJECTS_EXIT

.0bed	 a4 d5		ldy $d5		DRAW_OBJECT_POINT	LDY		DIFF_X_LSB		; object is a point

.0bef	 a6 d6		ldx $d6							LDX		DIFF_X_MSB

.0bf1	 a5 d7		lda $d7							LDA		DIFF_X_HSB

.0bf3	 20 67 0b	jsr $0b67						JSR		BIT24TOFP

.0bf6	 85 52		sta $52							STA		X_POS_HI

.0bf8	 86 53		stx $53							STX		X_POS_LO

.0bfa	 a4 d8		ldy $d8							LDY		DIFF_Y_LSB

.0bfc	 a6 d9		ldx $d9							LDX		DIFF_Y_MSB

.0bfe	 a5 da		lda $da							LDA		DIFF_Y_HSB

.0c00	 20 67 0b	jsr $0b67						JSR		BIT24TOFP	; ????

.0c03	 85 54		sta $54							STA		Y_POS_HI

.0c05	 86 55		stx $55							STX		Y_POS_LO

.0c07	 a4 db		ldy $db							LDY		DIFF_Z_LSB

.0c09	 a6 dc		ldx $dc							LDX		DIFF_Z_MSB

.0c0b	 a5 dd		lda $dd							LDA		DIFF_Z_HSB

.0c0d	 20 67 0b	jsr $0b67						JSR		BIT24TOFP

.0c10	 85 56		sta $56							STA		Z_POS_HI

.0c12	 86 57		stx $57							STX		Z_POS_LO

.0c14	 20 7d 11	jsr $117d						JSR		ROTATE_PERS

.0c17	 a2 00		ldx #$00						LDX		#$00

.0c19	 bd 40 07	lda $0740,x	PLOT_POINT_CHK		LDA		POINT_CLASSIFICATION,X	; GET POINT FROM PLOT POINT TABLE ?

.0c1c	 d0 17		bne $0c35						BNE		PLOT_POINT_EXIT			; EXIT IF ITS not ZERO - this being set to not zero plots a point - what sets it to 0?

.0c1e	 bc c0 06	ldy $06c0,x	PLOT_POINT				LDY		PERS_VER_TAB,X			; GET VER POS

.0c21	 b9 00 34	lda $3400,y							LDA		VER_POS_LO,Y 

.0c24	 85 02		sta $02								STA		SCREEN_POS_LO

.0c26	 b9 00 32	lda $3200,y	PLOT_POINT_SCN			LDA 	VER_POS_SCN0_HI,Y

.0c29	 85 03		sta $03								STA		SCREEN_POS_HI

.0c2b	 bc 88 34	ldy $3488,x							LDY		HOR_SCR_POS,X

.0c2e	 b1 02		lda ($02),y							LDA		(SCREEN_POS_PTR),Y	; GET SCREEN BYTE

.0c30	 1d 80 33	ora $3380,x	LINE_DRAW_8_TYPE		ORA		ORA_PIXEL_POS,X		; AND PIXEL

.0c33	 91 02		sta ($02),y							STA		(SCREEN_POS_PTR),Y	; PUT SCREEN BYTE

.0c35	 60		rts		PLOT_POINT_EXIT 	RTS 

.0c36	 a5 d6		lda $d6		DRAW_OBJECT_LINES	LDA 	DIFF_X_MSB

.0c38	 38		sec							SEC 

.0c39	 e9 08		sbc #$08						SBC 	#$08

.0c3b	 85 d6		sta $d6							STA 	DIFF_X_MSB

.0c3d	 b0 02		bcs $0c41						BCS 	b9795

.0c3f	 c6 d7		dec $d7								DEC 	DIFF_X_HSB		

.0c41	 a5 d9		lda $d9		b9795   			LDA 	DIFF_Y_MSB

.0c43	 38		sec							SEC 

.0c44	 e9 08		sbc #$08						SBC 	#$08

.0c46	 85 d9		sta $d9							STA 	DIFF_Y_MSB

.0c48	 b0 02		bcs $0c4c						BCS 	b97A0

.0c4a	 c6 da		dec $da								DEC 	DIFF_Y_HSB

.0c4c	 a5 dc		lda $dc		b97A0   			LDA 	DIFF_Z_MSB

.0c4e	 38		sec							SEC 

.0c4f	 e9 08		sbc #$08						SBC 	#$08

.0c51	 85 dc		sta $dc							STA 	DIFF_Z_MSB

.0c53	 b0 02		bcs $0c57						BCS 	b97AB

.0c55	 c6 dd		dec $dd								DEC 	DIFF_Z_HSB

.0c57	 a0 00		ldy #$00	b97AB   			LDY 	#0

.0c59	 84 19		sty $19							STY 	POINT_LINE_COUNT 	; start point count

.0c5b	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y 	; object point count

.0c5d	 85 b0		sta $b0							STA 	NUMBER_OF_POINTS 	; number of points?

.0c5f	 84 ad		sty $ad							STY 	OBJECT_POINTER_POS 	; store mem pos

.0c61	 20 e3 10	jsr $10e3	PROCESS_POINT_LOOP		JSR 	PROCESS_POINT_TO_FP		; get point then *16 then convert to 24bit fp

.0c64	 20 7d 11	jsr $117d							JSR 	ROTATE_PERS

.0c67	 a5 19		lda $19								LDA 	POINT_LINE_COUNT		; get point count

.0c69	 e6 19		inc $19								INC 	POINT_LINE_COUNT		; inc point count

.0c6b	 c5 b0		cmp $b0								CMP 	NUMBER_OF_POINTS	 	; last point yn

.0c6d	 d0 f2		bne $0c61							BNE 	PROCESS_POINT_LOOP  	; no so do next

.0c6f	 e6 ad		inc $ad							INC 	OBJECT_POINTER_POS 			; inc mem pos

.0c71	 a4 ad		ldy $ad							LDY 	OBJECT_POINTER_POS 			; get mem pos

.0c73	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y  		; object line count

.0c75	 85 19		sta $19							STA 	POINT_LINE_COUNT  			; number of lines?

.0c77	 10 13		bpl $0c8c						BPL 	NEXT_COMPRESSED_LINE		; line count is positive so lines are compressed

.0c79	 a4 ad		ldy $ad		NEXT_LINE				LDY 	OBJECT_POINTER_POS 	; get mem pos

.0c7b	 c8		iny								INY  						; inc mem pos

.0c7c	 b3 1d		lax ($1d),y							LAX 	(OBJECT_POINTER),Y 	; get 1st point into a and x

.0c7e	 c8		iny								INY 						; inc mem pos

.0c7f	 b1 1d		lda ($1d),y							LDA 	(OBJECT_POINTER),Y 	; get 2nd point

.0c81	 84 ad		sty $ad								STY 	OBJECT_POINTER_POS 	; store 2nd point?

.0c83	 a8		tay								TAY 						; 2nd point

.0c84	 20 2a 0d	jsr $0d2a							JSR 	LINE_DRAW 			; draw line

.0c87	 c6 19		dec $19								DEC 	POINT_LINE_COUNT 	; dec line count

.0c89	 30 ee		bmi $0c79							BMI 	NEXT_LINE 			; last line y/n

.0c8b	 60		rts							RTS 						; yes

.0c8c	 a4 ad		ldy $ad		NEXT_COMPRESSED_LINE 	LDY 	OBJECT_POINTER_POS 	; get mem pos ; first and second point are stored in 1 byte as 2 nibbles

.0c8e	 c8		iny								INY  						; inc mem pos

.0c8f	 84 ad		sty $ad								STY 	OBJECT_POINTER_POS 	; store mem pos

.0c91	 b3 1d		lax ($1d),y							LAX 	(OBJECT_POINTER),Y 	; get point count into a and x

.0c93	 29 0f		and #$0f							AND 	#$0F 				; and with 15 = 1st point

.0c95	 a8		tay								TAY 						; y = first point

.0c96	 8a		txa								TXA  						; get backup

.0c97	 4a		lsr								LSR  						; /2

.0c98	 4a		lsr								LSR  						; /2

.0c99	 4a		lsr								LSR  						; /2

.0c9a	 4a		lsr								LSR  						; /2

.0c9b	 aa		tax								TAX  						; divide by 16 = 2nd point

.0c9c	 20 2a 0d	jsr $0d2a							JSR 	LINE_DRAW       	; DRAW LINE

.0c9f	 c6 19		dec $19								DEC 	POINT_LINE_COUNT 	; dec line count

.0ca1	 10 e9		bpl $0c8c							BPL 	NEXT_COMPRESSED_LINE ; last line yn

.0ca3	 60		rts							RTS  						; yes

.0ca4	 38		sec		CAMERA_OBJECT_DIFF	SEC 						; calc diff between object pos and current pos

.0ca5	 bd 80 07	lda $0780,x						LDA 	OBJ_X_LSB,X		;

.0ca8	 e5 72		sbc $72							SBC 	CURR_X_LSB		;

.0caa	 85 d5		sta $d5							STA 	DIFF_X_LSB		;

.0cac	 bd ac 18	lda $18ac,x						LDA 	OBJ_X_MSB,X		;

.0caf	 e5 73		sbc $73							SBC 	CURR_X_MSB		;

.0cb1	 85 d6		sta $d6							STA 	DIFF_X_MSB		;

.0cb3	 bd 6c 19	lda $196c,x						LDA 	OBJ_X_HSB,X		;

.0cb6	 e5 74		sbc $74							SBC 	CURR_X_HSB		;

.0cb8	 85 d7		sta $d7							STA 	DIFF_X_HSB		;

.0cba	 38		sec							SEC 

.0cbb	 bd c0 07	lda $07c0,x						LDA 	OBJ_Y_LSB,X		;

.0cbe	 e5 75		sbc $75							SBC 	CURR_Y_LSB		;

.0cc0	 85 d8		sta $d8							STA 	DIFF_Y_LSB		;

.0cc2	 bd ec 18	lda $18ec,x						LDA 	OBJ_Y_MSB,X		;

.0cc5	 e5 76		sbc $76							SBC 	CURR_Y_MSB		;

.0cc7	 85 d9		sta $d9							STA 	DIFF_Y_MSB		;

.0cc9	 bd ac 19	lda $19ac,x						LDA 	OBJ_Y_HSB,X		;

.0ccc	 e5 77		sbc $77							SBC 	CURR_Y_HSB		;

.0cce	 85 da		sta $da							STA 	DIFF_Y_HSB		;

.0cd0	 38		sec							SEC 

.0cd1	 bd 00 03	lda $0300,x						LDA 	OBJ_Z_LSB,X		;

.0cd4	 e5 78		sbc $78							SBC 	CURR_Z_LSB		;

.0cd6	 85 db		sta $db							STA 	DIFF_Z_LSB		;

.0cd8	 bd 2c 19	lda $192c,x						LDA 	OBJ_Z_MSB,X		;

.0cdb	 e5 79		sbc $79							SBC 	CURR_Z_MSB		;

.0cdd	 85 dc		sta $dc							STA 	DIFF_Z_MSB		;

.0cdf	 bd ec 19	lda $19ec,x						LDA 	OBJ_Z_HSB,X		;

.0ce2	 e5 7a		sbc $7a							SBC 	CURR_Z_HSB		;

.0ce4	 85 dd		sta $dd							STA 	DIFF_Z_HSB		;

.0ce6	 60		rts							RTS 

.0ce7	 86 08		stx $08		CHK_ABS_DIST	STX 	ab08

.0ce9	 84 09		sty $09						STY 	ab09

.0ceb	 a5 d5		lda $d5						LDA 	DIFF_X_LSB

.0ced	 a6 d6		ldx $d6						LDX 	DIFF_X_MSB

.0cef	 a4 d7		ldy $d7						LDY 	DIFF_X_HSB

.0cf1	 20 0b 0d	jsr $0d0b					JSR 	ABS_DIFF

.0cf4	 b0 14		bcs $0d0a					BCS 	b99BD 		; return carry set

.0cf6	 a5 d8		lda $d8						LDA 	DIFF_Y_LSB

.0cf8	 a6 d9		ldx $d9						LDX 	DIFF_Y_MSB

.0cfa	 a4 da		ldy $da						LDY 	DIFF_Y_HSB

.0cfc	 20 0b 0d	jsr $0d0b					JSR 	ABS_DIFF

.0cff	 b0 09		bcs $0d0a					BCS 	b99BD 		; return carry set

.0d01	 a5 db		lda $db						LDA 	DIFF_Z_LSB

.0d03	 a6 dc		ldx $dc						LDX 	DIFF_Z_MSB

.0d05	 a4 dd		ldy $dd						LDY 	DIFF_Z_HSB

.0d07	 20 0b 0d	jsr $0d0b					JSR		ABS_DIFF

.0d0a	 60		rts		b99BD   		RTS

.0d0b	 10 15		bpl $0d22	ABS_DIFF   	BPL 	CONTINUE1 	; calc absolute difference returning carry if too far away?  if number is positive continue ; negate a/x/y which hold lsb/msb/hsb if needed and subtract 08 and 09 from msb/hsb 

.0d0d	 49 ff		eor #$ff					EOR 	#$FF  	; negative so negate LSB

.0d0f	 48		pha						PHA 			; backup LSB

.0d10	 8a		txa						TXA       		; negate MSB

.0d11	 49 ff		eor #$ff					EOR 	#$FF	;

.0d13	 aa		tax						TAX 			;

.0d14	 98		tya						TYA 			; negate HSB

.0d15	 49 ff		eor #$ff					EOR 	#$FF	;

.0d17	 a8		tay						TAY 			;

.0d18	 68		pla						PLA 			; restore LSB

.0d19	 18		clc						CLC 

.0d1a	 69 01		adc #$01					ADC 	#$01		; inc LSB

.0d1c	 90 04		bcc $0d22					BCC 	CONTINUE1	; no overlow so continue

.0d1e	 e8		inx							INX 			; inc MSB

.0d1f	 d0 01		bne $0d22						BNE 	CONTINUE1	; no overlow so continue

.0d21	 c8		iny								INY 			; inc HSB

.0d22	 38		sec		CONTINUE1   SEC 				; subtract 

.0d23	 8a		txa					TXA 

.0d24	 e5 08		sbc $08					SBC 	ab08		; subtract from MSB

.0d26	 98		tya					TYA 

.0d27	 e5 09		sbc $09					SBC 	ab09		; subtract from HSB

.0d29	 60		rts					RTS 

.0d2a	 bd 40 07	lda $0740,x	LINE_DRAW		LDA		POINT_CLASSIFICATION,X 		; start point X classification ; LINE_DRAW_04 - DRAW LINE - x is start index - y is end index

.0d2d	 f0 25		beq $0d54					BEQ 	POINT_X_INFRONT 			; start point X onscreen

.0d2f	 30 17		bmi $0d48					BMI 	POINT_X_BEHIND 				; start point X behind

.0d31	 b9 40 07	lda $0740,y					LDA 	POINT_CLASSIFICATION,Y 		; end point Y classification 

.0d34	 f0 12		beq $0d48					BEQ 	POINT_X_BEHIND 				; end point Y onscreen

.0d36	 30 1c		bmi $0d54					BMI 	POINT_X_INFRONT 			; end point Y behind	

.0d38	 b9 80 03	lda $0380,y					LDA 	Z_ROT_TAB_HI,Y 

.0d3b	 49 80		eor #$80					EOR 	#$80

.0d3d	 85 06		sta $06						STA 	ab06

.0d3f	 bd 80 03	lda $0380,x					LDA 	Z_ROT_TAB_HI,X

.0d42	 49 80		eor #$80					EOR 	#$80

.0d44	 c5 06		cmp $06						CMP 	ab06

.0d46	 b0 0c		bcs $0d54					BCS	 	POINT_X_INFRONT

.0d48	 98		tya		POINT_X_BEHIND 	TYA 			; start X is behind so swap start X and end Y pointer so that Y is behind and X start might be behind? so swap start and end - so Y is behind?

.0d49	 86 06		stx $06						STX 	ab06	; swap start / end

.0d4b	 aa		tax						TAX 			; swap start / end

.0d4c	 a4 06		ldy $06						LDY 	ab06	; swap start / end

.0d4e	 bd 40 07	lda $0740,x					LDA 	POINT_CLASSIFICATION,X 	; start point X which was end point Y classification

.0d51	 10 01		bpl $0d54					BPL 	POINT_X_INFRONT 		; end point X point infront

.0d53	 60		rts								RTS 					; both points behind

.0d54	 bd 40 07	lda $0740,x	POINT_X_INFRONT	LDA 	POINT_CLASSIFICATION,X 	; at least 1 point is in front ; point 1 classification

.0d57	 85 6e		sta $6e						STA 	POINT_CLASSIFY_ST

.0d59	 30 1e		bmi $0d79					BMI 	X_ROT_COPY 				; point X is behind so x rotation points need to be copied and pers doesnt

.0d5b	 bd 80 06	lda $0680,x						LDA 	PERS_HOR_TAB,X

.0d5e	 85 6a		sta $6a							STA 	LINE_START_HOR

.0d60	 bd c0 06	lda $06c0,x						LDA 	PERS_VER_TAB,X

.0d63	 85 6b		sta $6b							STA 	LINE_START_VER

.0d65	 bd 00 06	lda $0600,x						LDA 	H_PERS_FP_LO,X

.0d68	 85 5e		sta $5e							STA 	H_PERS_FP_LO_ST

.0d6a	 bd c0 03	lda $03c0,x						LDA 	H_PERS_FP_HI,X

.0d6d	 85 5f		sta $5f							STA 	H_PERS_FP_HI_ST

.0d6f	 bd 00 07	lda $0700,x						LDA 	V_PERS_FP_LO,X

.0d72	 85 60		sta $60							STA 	V_PERS_FP_LO_ST

.0d74	 bd 40 06	lda $0640,x						LDA 	V_PERS_FP_HI,X

.0d77	 85 61		sta $61							STA 	V_PERS_FP_HI_ST

.0d79	 bd 00 01	lda $0100,x	X_ROT_COPY		LDA 	X_ROT_TAB_LO,X ; a point is behind? so x and y rotation needs to be copied to be used in z clip

.0d7c	 85 52		sta $52						STA 	X_POS_HI

.0d7e	 bd 40 01	lda $0140,x					LDA 	X_ROT_TAB_HI,X

.0d81	 85 53		sta $53						STA 	X_POS_LO

.0d83	 bd 80 01	lda $0180,x					LDA 	Y_ROT_TAB_LO,X

.0d86	 85 54		sta $54						STA 	Y_POS_HI

.0d88	 bd c0 02	lda $02c0,x					LDA 	Y_ROT_TAB_HI,X

.0d8b	 85 55		sta $55						STA 	Y_POS_LO

.0d8d	 bd 40 03	lda $0340,x					LDA 	Z_ROT_TAB_LO,X

.0d90	 85 56		sta $56						STA 	Z_POS_HI

.0d92	 bd 80 03	lda $0380,x					LDA 	Z_ROT_TAB_HI,X

.0d95	 85 57		sta $57						STA 	Z_POS_LO

.0d97	 b9 40 07	lda $0740,y					LDA 	POINT_CLASSIFICATION,Y

.0d9a	 85 6f		sta $6f						STA 	POINT_CLASSIFY_EN

.0d9c	 30 1e		bmi $0dbc					BMI 	Y_ROT_COPY				; Y is behind so y rotation points need to be copied and pers doesnt

.0d9e	 b9 80 06	lda $0680,y						LDA 	PERS_HOR_TAB,Y

.0da1	 85 6c		sta $6c							STA 	PERS_HOR_ab6C

.0da3	 b9 c0 06	lda $06c0,y						LDA 	PERS_VER_TAB,Y

.0da6	 85 6d		sta $6d							STA 	PERS_VER_ab6D

.0da8	 b9 00 06	lda $0600,y						LDA 	H_PERS_FP_LO,Y

.0dab	 85 62		sta $62							STA 	H_PERS_FP_LO_EN

.0dad	 b9 c0 03	lda $03c0,y						LDA 	H_PERS_FP_HI,Y

.0db0	 85 63		sta $63							STA 	H_PERS_FP_HI_EN

.0db2	 b9 00 07	lda $0700,y						LDA 	V_PERS_FP_LO,Y

.0db5	 85 64		sta $64							STA 	V_PERS_FP_LO_EN

.0db7	 b9 40 06	lda $0640,y						LDA 	V_PERS_FP_HI,Y

.0dba	 85 65		sta $65							STA 	V_PERS_FP_HI_EN

.0dbc	 b9 00 01	lda $0100,y	Y_ROT_COPY		LDA 	X_ROT_TAB_LO,Y

.0dbf	 85 58		sta $58						STA 	X_ROTATION_LO

.0dc1	 b9 40 01	lda $0140,y					LDA 	X_ROT_TAB_HI,Y

.0dc4	 85 59		sta $59						STA 	X_ROTATION_HI

.0dc6	 b9 80 01	lda $0180,y					LDA 	Y_ROT_TAB_LO,Y

.0dc9	 85 5a		sta $5a						STA 	Y_ROTATION_LO

.0dcb	 b9 c0 02	lda $02c0,y					LDA 	Y_ROT_TAB_HI,Y

.0dce	 85 5b		sta $5b						STA 	Y_ROTATION_HI

.0dd0	 b9 40 03	lda $0340,y					LDA 	Z_ROT_TAB_LO,Y

.0dd3	 85 5c		sta $5c						STA 	Z_ROTATION_LO

.0dd5	 b9 80 03	lda $0380,y					LDA 	Z_ROT_TAB_HI,Y

.0dd8	 85 5d		sta $5d						STA 	Z_ROTATION_HI

.0dda	 a5 6f		lda $6f						LDA 	POINT_CLASSIFY_EN

.0ddc	 10 03		bpl $0de1					BPL 	CALC_HOR_VER_DIFF_SLOPE

.0dde	 4c 57 0e	jmp $0e57						JMP 	Z_CLIP ; z clip? as end is negative so is behind

.0de1					calc_hor_ver_diff_slope
.0de1	 a6 5e		ldx $5e				LDX H_PERS_FP_LO_ST		; calc hor difference

.0de3	 a5 5f		lda $5f		        LDA H_PERS_FP_HI_ST

.0de5	 49 01		eor #$01	        EOR #$01

.0de7	 86 08		stx $08		        STX ab08

.0de9	 85 09		sta $09		        STA ab09

.0deb	 a6 62		ldx $62		        LDX H_PERS_FP_LO_EN

.0ded	 a4 63		ldy $63		        LDY H_PERS_FP_HI_EN

.0def	 20 26 0a	jsr $0a26	        JSR FP_ADD 					; H_PERS_FP_HI_EN + (-H_PERS_FP_HI_ST) ? 

.0df2	 86 0a		stx $0a		        STX H_PERS_FP_LO_DIFF_ab0A	; h line difference?

.0df4	 84 0b		sty $0b		        STY H_PERS_FP_HI_DIFF_ab0B

.0df6	 98		tya		        TYA 

.0df7	 0a		asl		        ASL 

.0df8	 29 02		and #$02	        AND #$02

.0dfa	 85 67		sta $67		        STA LINE_TYPE_POINTER 	; sign? *2? ; does the sign show the line direction?

.0dfc	 a6 60		ldx $60		        LDX V_PERS_FP_LO_ST		; calc ver difference

.0dfe	 a5 61		lda $61		        LDA V_PERS_FP_HI_ST

.0e00	 49 01		eor #$01	        EOR #$01

.0e02	 86 08		stx $08		        STX ab08

.0e04	 85 09		sta $09		        STA ab09

.0e06	 a6 64		ldx $64		        LDX V_PERS_FP_LO_EN

.0e08	 a4 65		ldy $65		        LDY V_PERS_FP_HI_EN

.0e0a	 20 26 0a	jsr $0a26	        JSR FP_ADD					; V_PERS_FP_HI_EN + (-V_PERS_FP_HI_ST) ? 

.0e0d	 86 0c		stx $0c		        STX V_PERS_FP_LO_DIFF_ab0C	; v line difference?

.0e0f	 84 0d		sty $0d		        STY V_PERS_FP_HI_DIFF_ab0D

.0e11	 98		tya		        TYA 

.0e12	 29 01		and #$01	        AND #$01				; sign? ; does the sign show the line direction?

.0e14	 05 67		ora $67		        ORA LINE_TYPE_POINTER

.0e16	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0e18	 a5 0a		lda $0a				LDA		H_PERS_FP_LO_DIFF_ab0A	; hdiff - calc hdiff / vdiff slope?

.0e1a	 85 22		sta $22				STA		FP_DIVIDE_LO

.0e1c	 a6 09		ldx $09				LDX		ab09					; vdiff

.0e1e	 a4 08		ldy $08				LDY		ab08					; vdiff

.0e20	 a5 0b		lda $0b				LDA		H_PERS_FP_HI_DIFF_ab0B	; hdiff

.0e22	 20 5f 09	jsr $095f			JSR		FP_DIVIDE		; 0A-0B / 08-09 -> 68-69 = hdiff / vdiff slope?

.0e25	 86 68		stx $68				STx		ab68

.0e27	 85 69		sta $69				STA		ab69

.0e29	 a8		tay		        TAY ; not needed?

.0e2a	 30 17		bmi $0e43	        BMI b9B14

.0e2c	 a5 67		lda $67					LDA LINE_TYPE_POINTER

.0e2e	 09 04		ora #$04				ORA #$04

.0e30	 85 67		sta $67					STA LINE_TYPE_POINTER

.0e32	 a5 0c		lda $0c					LDA		V_PERS_FP_LO_DIFF_ab0C ; vdiff - calc vdiff / hdiff slope?

.0e34	 85 22		sta $22					STA		FP_DIVIDE_LO

.0e36	 a6 0b		ldx $0b					LDX		H_PERS_FP_HI_DIFF_ab0B ; hdiff

.0e38	 a4 0a		ldy $0a					LDY		H_PERS_FP_LO_DIFF_ab0A ; hdiff

.0e3a	 a5 0d		lda $0d					LDA		V_PERS_FP_HI_DIFF_ab0D ; vdiff 

.0e3c	 20 5f 09	jsr $095f				JSR		FP_DIVIDE		; 0A-0B / 0C-0D -> 08-09 = vdiff / hdiff slope?

.0e3f	 86 08		stx $08					STX		ab08

.0e41	 85 09		sta $09					STA		ab09

.0e43	 a8		tay		b9B14	TAY  ; not needed?

.0e44	 30 05		bmi $0e4b	        BMI 	b9B1E

.0e46	 a0 ff		ldy #$ff				LDY 	#$FF		; straight line?	LDA 	#$FF

.0e48	 4c ee 0e	jmp $0eee				JMP 	STORE_LINE_INC

.0e4b	 18		clc		b9B1E   CLC 

.0e4c	 69 20		adc #$20	        ADC #$20		; possible *128 ?

.0e4e	 29 fc		and #$fc	        AND #$FC

.0e50	 a8		tay		        TAY 

.0e51	 20 ff 0a	jsr $0aff	        JSR FPTO16BIT

.0e54	 4c ee 0e	jmp $0eee			JMP 	STORE_LINE_INC

.0e57	 a5 56		lda $56		Z_CLIP	LDA		Z_POS_HI			 ; do z_clip  zclip z-clip ; calc z-diff = z-st / z-en?

.0e59	 85 22		sta $22				STA		FP_DIVIDE_LO

.0e5b	 a6 5d		ldx $5d				LDX		Z_ROTATION_HI

.0e5d	 a4 5c		ldy $5c				LDY		Z_ROTATION_LO

.0e5f	 a5 57		lda $57				LDA		Z_POS_LO

.0e61	 20 5f 09	jsr $095f			JSR		FP_DIVIDE		; ZPOS HI-LO / Z_ROTATION HI-LO -> 0A-0B

.0e64	 86 0a		stx $0a				STX		Z_CLIP_LO_ab0A

.0e66	 49 01		eor #$01			EOR #$01				; swap sign?

.0e68	 85 0b		sta $0b		        STA Z_CLIP_HI_ab0B

.0e6a	 a5 52		lda $52				LDA 	X_POS_HI		; calc x start distance based on z

.0e6c	 85 22		sta $22				STA		FP_MULTIPLY_LO

.0e6e	 a5 53		lda $53				LDA 	X_POS_LO

.0e70	 a4 0b		ldy $0b				LDY 	Z_CLIP_HI_ab0B

.0e72	 a6 0a		ldx $0a		        LDX 	Z_CLIP_LO_ab0A

.0e74	 20 7b 09	jsr $097b			JSR		FP_MULTIPLY		; XPOS HI-LO * 0A-0B -> 08-09

.0e77	 84 08		sty $08		        STy 	ab08

.0e79	 85 09		sta $09		        STA 	ab09

.0e7b	 a6 58		ldx $58		        LDX X_ROTATION_LO		; calc x end distance based on z

.0e7d	 a4 59		ldy $59		        LDY X_ROTATION_HI

.0e7f	 20 26 0a	jsr $0a26	        JSR FP_ADD				; XROT HI-LO + 08-09 -> 0c-0D

.0e82	 86 0c		stx $0c		        STX Z_CLIP_LO_ab0C

.0e84	 84 0d		sty $0d		        STY Z_CLIP_HI_ab0D

.0e86	 98		tya		        TYA 

.0e87	 45 57		eor $57		        EOR Z_POS_LO

.0e89	 0a		asl		        ASL 

.0e8a	 29 02		and #$02	        AND #$02

.0e8c	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0e8e	 a5 54		lda $54				LDA 	Y_POS_HI		; calc y start distance based on z

.0e90	 85 22		sta $22				STA		FP_MULTIPLY_LO

.0e92	 a5 55		lda $55				LDA 	Y_POS_LO

.0e94	 a4 0b		ldy $0b				LDY 	Z_CLIP_HI_ab0B

.0e96	 a6 0a		ldx $0a		        LDX 	Z_CLIP_LO_ab0A

.0e98	 20 7b 09	jsr $097b			JSR		FP_MULTIPLY		; Y_POS HI-LO * 0A-0B -> 08-09

.0e9b	 84 08		sty $08		        STy 	ab08

.0e9d	 85 09		sta $09		        STA 	ab09

.0e9f	 a6 5a		ldx $5a		        LDX Y_ROTATION_LO		; calc y end distance based on z

.0ea1	 a4 5b		ldy $5b		        LDY Y_ROTATION_HI

.0ea3	 20 26 0a	jsr $0a26	        JSR FP_ADD				; YROT HI-LO + 08-09 -> 0A-0B

.0ea6	 86 0a		stx $0a		        STX Z_CLIP_LO_ab0A

.0ea8	 84 0b		sty $0b		        STY Z_CLIP_HI_ab0B

.0eaa	 98		tya		        TYA 

.0eab	 45 57		eor $57		        EOR Z_POS_LO

.0ead	 29 01		and #$01	        AND #$01

.0eaf	 05 67		ora $67		        ORA LINE_TYPE_POINTER

.0eb1	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0eb3	 a5 0c		lda $0c				LDA		Z_CLIP_LO_ab0C

.0eb5	 85 22		sta $22				STA		FP_DIVIDE_LO

.0eb7	 a6 09		ldx $09				LDX		ab09

.0eb9	 a4 08		ldy $08				LDY		ab08

.0ebb	 a5 0d		lda $0d				LDA		Z_CLIP_HI_ab0D

.0ebd	 20 5f 09	jsr $095f			JSR		FP_DIVIDE		; 0C-0D / 08-09 -> 68-69

.0ec0	 86 68		stx $68				STX		ab68

.0ec2	 85 69		sta $69				STA		ab69

.0ec4	 a8		tay		        TAY 		; not needed?

.0ec5	 30 17		bmi $0ede	        BMI b9BFC

.0ec7	 a5 67		lda $67					LDA LINE_TYPE_POINTER

.0ec9	 09 04		ora #$04				ORA #$04

.0ecb	 85 67		sta $67					STA LINE_TYPE_POINTER

.0ecd	 a5 0a		lda $0a					LDA		Z_CLIP_LO_ab0A

.0ecf	 85 22		sta $22					STA		FP_DIVIDE_LO

.0ed1	 a6 0d		ldx $0d					LDX		Z_CLIP_HI_ab0D

.0ed3	 a4 0c		ldy $0c					LDY		Z_CLIP_LO_ab0C

.0ed5	 a5 0b		lda $0b					LDA		Z_CLIP_HI_ab0B

.0ed7	 20 5f 09	jsr $095f				JSR		FP_DIVIDE		; 0A-0B / 0C-0D -> 08-09

.0eda	 86 08		stx $08					STX		ab08

.0edc	 85 09		sta $09					STA		ab09

.0ede	 a8		tay		b9BFC   	TAY 			; not needed?

.0edf	 30 04		bmi $0ee5				BMI 	b9C05

.0ee1	 a0 ff		ldy #$ff					LDY 	#$FF			; straight line?

.0ee3	 d0 09		bne $0eee					BNE 	STORE_LINE_INC ; jump

.0ee5	 18		clc		b9C05   CLC 

.0ee6	 69 20		adc #$20	        ADC #$20	; *128 ?

.0ee8	 29 fc		and #$fc	        AND #$FC

.0eea	 a8		tay		        TAY 

.0eeb	 20 ff 0a	jsr $0aff	        JSR 	FPTO16BIT

.0eee	 84 66		sty $66		STORE_LINE_INC	STY 	LINE_INC

.0ef0	 a6 67		ldx $67		GET_LINE_TYPE	LDX 	LINE_TYPE_POINTER    	; GET LINE TYPE 0-7

.0ef2	 bc 18 35	ldy $3518,x					LDY 	LINE_DRAW_CONV_PTR,X 	; CONVERT LINE TYPE TO POINTER TYPE

.0ef5	 b9 08 35	lda $3508,y					LDA 	LINE_DRAW_PTR_LO,Y 		; GET POINTER TO CORRECT LINE

.0ef8	 8d 72 10	sta $1072					STA 	LINE_JP_PTR +1    		; STORE AT JUMP TABLE ADDRESS

.0efb	 b9 10 35	lda $3510,y					LDA 	LINE_DRAW_PTR_HI,Y		; GET POINTER TO CORRECT LINE

.0efe	 8d 73 10	sta $1073					STA 	LINE_JP_PTR +2    		; STORE AT JUMP TABLE ADDRESS

.0f01	 a5 6f		lda $6f						LDA 	POINT_CLASSIFY_EN

.0f03	 f0 0a		beq $0f0f					BEQ 	END_ONSCREEN

.0f05	 b9 20 35	lda $3520,y					LDA 	PERS_HOR_EDGE,Y			; Y is line type

.0f08	 85 6c		sta $6c						STA 	PERS_HOR_ab6C

.0f0a	 b9 28 35	lda $3528,y					LDA 	PERS_VER_EDGE,Y			; y is line type

.0f0d	 85 6d		sta $6d						STA 	PERS_VER_ab6D

.0f0f	 a5 6e		lda $6e		END_ONSCREEN   	LDA 	POINT_CLASSIFY_ST

.0f11	 d0 03		bne $0f16					BNE 	ST_OFF_SCRN				; point off screen

.0f13	 4c 6d 10	jmp $106d					JMP		LINE_DRW_JP

.0f16	 a5 61		lda $61		ST_OFF_SCRN LDA V_PERS_FP_HI_ST

.0f18	 0a		asl		        ASL 

.0f19	 0a		asl		        ASL 

.0f1a	 29 04		and #$04	        AND #$04

.0f1c	 05 6e		ora $6e		        ORA POINT_CLASSIFY_ST

.0f1e	 85 06		sta $06		        STA ab06

.0f20	 a5 5f		lda $5f		        LDA H_PERS_FP_HI_ST

.0f22	 0a		asl		        ASL 

.0f23	 0a		asl		        ASL 

.0f24	 0a		asl		        ASL 

.0f25	 29 08		and #$08	        AND #$08

.0f27	 05 06		ora $06		        ORA ab06

.0f29	 aa		tax		        TAX 

.0f2a	 98		tya		        TYA 

.0f2b	 1d 30 35	ora $3530,x	        ORA fBBE8,X

.0f2e	 4a		lsr		        LSR 

.0f2f	 aa		tax		        TAX 

.0f30	 bd 40 35	lda $3540,x	        LDA fBBF8,X

.0f33	 d0 01		bne $0f36	        BNE b9C56

.0f35	 60		rts					RTS 

.0f36	 85 6e		sta $6e		b9C56   STA POINT_CLASSIFY_ST

.0f38	 a5 6f		lda $6f		        LDA POINT_CLASSIFY_EN

.0f3a	 30 20		bmi $0f5c	        BMI b9C7C

.0f3c	 a5 65		lda $65					LDA V_PERS_FP_HI_EN

.0f3e	 0a		asl					ASL 

.0f3f	 0a		asl					ASL 

.0f40	 29 04		and #$04				AND #$04

.0f42	 05 6f		ora $6f					ORA POINT_CLASSIFY_EN

.0f44	 85 06		sta $06					STA ab06

.0f46	 a5 63		lda $63					LDA H_PERS_FP_HI_EN

.0f48	 0a		asl					ASL 

.0f49	 0a		asl					ASL 

.0f4a	 0a		asl					ASL 

.0f4b	 29 08		and #$08				AND #$08

.0f4d	 05 06		ora $06					ORA ab06

.0f4f	 aa		tax					TAX 

.0f50	 98		tya					TYA 

.0f51	 1d 30 35	ora $3530,x				ORA fBBE8,X

.0f54	 4a		lsr					LSR 

.0f55	 aa		tax					TAX 

.0f56	 bd 60 35	lda $3560,x				LDA fBC18,X

.0f59	 d0 01		bne $0f5c				BNE b9C7C

.0f5b	 60		rts						RTS 

.0f5c	 a5 6e		lda $6e		b9C7C   LDA 	POINT_CLASSIFY_ST ; CHECK TOP?

.0f5e	 29 01		and #$01	        AND 	#$01 ; off this edge

.0f60	 f0 3f		beq $0fa1	        BEQ 	b9CC1 ; no

.0f62	 a2 f8		ldx #$f8				LDX 	#ab92_VAL ; ab92 ; yes

.0f64	 a9 14		lda #$14				LDA 	#ab93_VAL ; ab93

.0f66	 38		sec					SEC 

.0f67	 e9 18		sbc #$18				SBC 	#FOCUS ; ab21

.0f69	 86 08		stx $08					STX 	ab08

.0f6b	 85 09		sta $09					STA 	ab09

.0f6d	 a6 5e		ldx $5e					LDX 	H_PERS_FP_LO_ST

.0f6f	 a5 5f		lda $5f					LDA 	H_PERS_FP_HI_ST

.0f71	 49 01		eor #$01				EOR 	#$01			; swap sign

.0f73	 a8		tay					TAY 

.0f74	 20 26 0a	jsr $0a26				JSR 	FP_ADD			; 5E-5F + 92-93 -> 68-69 (due to sign swap its actually fp minus?)

.0f77	 a6 68		ldx $68					LDX 	ab68

.0f79	 a4 69		ldy $69					LDY 	ab69

.0f7b	 20 95 09	jsr $0995				JSR 	FPMUL			; 92-93 * 68-69 -> 60-61

.0f7e	 a6 60		ldx $60					LDX 	V_PERS_FP_LO_ST

.0f80	 a4 61		ldy $61					LDY 	V_PERS_FP_HI_ST

.0f82	 20 26 0a	jsr $0a26				JSR 	FP_ADD			; 68-69 + 60-61 -> 

.0f85	 98		tya					TYA 

.0f86	 18		clc					CLC 

.0f87	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.0f89	 70 16		bvs $0fa1				BVS 	b9CC1

.0f8b	 a8		tay						TAY 

.0f8c	 20 cf 0a	jsr $0acf					JSR 	FPTO8BIT

.0f8f	 b0 10		bcs $0fa1					BCS 	b9CC1

.0f91	 18		clc						CLC 

.0f92	 69 40		adc #$40					ADC 	#SCR_VER_MID

.0f94	 c9 80		cmp #$80					CMP 	#CLIP_TEST_BOTTOM 	; clip test?

.0f96	 b0 09		bcs $0fa1					BCS 	b9CC1

.0f98	 85 6b		sta $6b						STA 	LINE_START_VER

.0f9a	 a9 7f		lda #$7f					LDA 	#CLIP_RIGHT 		; clip right ?

.0f9c	 85 6a		sta $6a						STA 	LINE_START_HOR 		; clip right ?

.0f9e	 4c 6d 10	jmp $106d					JMP 	LINE_DRW_JP

.0fa1	 a5 6e		lda $6e		b9CC1   LDA 	POINT_CLASSIFY_ST

.0fa3	 29 02		and #$02	        AND 	#$02 ; off this edge

.0fa5	 f0 3f		beq $0fe6	        BEQ 	b9D06 ; no

.0fa7	 a2 f8		ldx #$f8				LDX 	#ab96_VAL ; ab96 ; yes

.0fa9	 a9 14		lda #$14				LDA 	#ab97_VAL ; ab97

.0fab	 38		sec					SEC 

.0fac	 e9 18		sbc #$18				SBC 	#FOCUS ; ab21

.0fae	 86 08		stx $08					STX 	ab08

.0fb0	 85 09		sta $09					STA 	ab09

.0fb2	 a6 60		ldx $60					LDX 	V_PERS_FP_LO_ST

.0fb4	 a5 61		lda $61					LDA 	V_PERS_FP_HI_ST

.0fb6	 49 01		eor #$01				EOR 	#$01				; sign swap?

.0fb8	 a8		tay					TAY 

.0fb9	 20 26 0a	jsr $0a26				JSR 	FP_ADD				; 60-61 + 96-97 -> 68-69 (due to sign swap actually fp minus?)

.0fbc	 a6 68		ldx $68					LDX 	ab68

.0fbe	 a4 69		ldy $69					LDY 	ab69

.0fc0	 20 cf 09	jsr $09cf				JSR 	FPDIV				; 96-97 / 68-69 -> 5E-5F

.0fc3	 a6 5e		ldx $5e					LDX 	H_PERS_FP_LO_ST

.0fc5	 a4 5f		ldy $5f					LDY 	H_PERS_FP_HI_ST

.0fc7	 20 26 0a	jsr $0a26				JSR 	FP_ADD				; 5E-5F + 96-97 ->

.0fca	 98		tya					TYA 

.0fcb	 18		clc					CLC 

.0fcc	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.0fce	 70 16		bvs $0fe6				BVS 	b9D06

.0fd0	 a8		tay						TAY 

.0fd1	 20 cf 0a	jsr $0acf					JSR 	FPTO8BIT

.0fd4	 b0 10		bcs $0fe6					BCS 	b9D06

.0fd6	 18		clc						CLC 

.0fd7	 69 40		adc #$40					ADC 	#SCR_HOR_MID

.0fd9	 c9 80		cmp #$80					CMP 	#CLIP_TEST_RIGHT 		; clip test

.0fdb	 b0 09		bcs $0fe6					BCS 	b9D06

.0fdd	 85 6a		sta $6a						STA 	LINE_START_HOR

.0fdf	 a9 7f		lda #$7f					LDA 	#CLIP_BOTTOM 			; clip bottom

.0fe1	 85 6b		sta $6b						STA 	LINE_START_VER 			; clip bottom

.0fe3	 4c 6d 10	jmp $106d					JMP 	LINE_DRW_JP

.0fe6	 a5 6e		lda $6e		b9D06   LDA 	POINT_CLASSIFY_ST ; LINE DRAW

.0fe8	 29 04		and #$04	        AND 	#$04 ; off this edge

.0fea	 f0 3f		beq $102b	        BEQ 	b9D4B ; no

.0fec	 a2 04		ldx #$04				LDX 	#ab90_VAL ; ab90 ; yes

.0fee	 a9 19		lda #$19				LDA 	#ab91_VAL ; ab91

.0ff0	 38		sec					SEC 

.0ff1	 e9 18		sbc #$18				SBC 	#FOCUS ; ab21

.0ff3	 86 08		stx $08					STX 	ab08

.0ff5	 85 09		sta $09					STA 	ab09

.0ff7	 a6 5e		ldx $5e					LDX 	H_PERS_FP_LO_ST

.0ff9	 a5 5f		lda $5f					LDA 	H_PERS_FP_HI_ST

.0ffb	 49 01		eor #$01				EOR 	#$01				; swap sign?

.0ffd	 a8		tay					TAY 

.0ffe	 20 26 0a	jsr $0a26				JSR 	FP_ADD				; 90-91 + 5E+5F -> 68-69 (its actually fp minus due to sign swap?)

.1001	 a6 68		ldx $68					LDX 	ab68

.1003	 a4 69		ldy $69					LDY 	ab69

.1005	 20 95 09	jsr $0995				JSR 	FPMUL				; 68-69 * 90-91 -> 60-61

.1008	 a6 60		ldx $60					LDX 	V_PERS_FP_LO_ST

.100a	 a4 61		ldy $61					LDY 	V_PERS_FP_HI_ST

.100c	 20 26 0a	jsr $0a26				JSR 	FP_ADD				; 60-61 + 90-91 -> 

.100f	 98		tya					TYA 

.1010	 18		clc					CLC 

.1011	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.1013	 70 16		bvs $102b				BVS 	b9D4B

.1015	 a8		tay						TAY 

.1016	 20 cf 0a	jsr $0acf					JSR 	FPTO8BIT

.1019	 b0 10		bcs $102b					BCS 	b9D4B

.101b	 18		clc						CLC 

.101c	 69 40		adc #$40					ADC 	#SCR_VER_MID

.101e	 c9 80		cmp #$80					CMP 	#CLIP_TEST_BOTTOM ; clip test

.1020	 b0 09		bcs $102b					BCS 	b9D4B

.1022	 85 6b		sta $6b						STA 	LINE_START_VER

.1024	 a9 00		lda #$00					LDA 	#CLIP_TEST_TOP 	; clip off top

.1026	 85 6a		sta $6a						STA 	LINE_START_HOR 	; clip off top 

.1028	 4c 6d 10	jmp $106d					JMP 	LINE_DRW_JP

.102b	 a5 6e		lda $6e		b9D4B   LDA 	POINT_CLASSIFY_ST ; LINE DRAW

.102d	 29 08		and #$08	        AND 	#$08 ; off this edge

.102f	 f0 43		beq $1074			BEQ 	b9D98 ; no

.1031	 a2 04		ldx #$04				LDX 	#ab94_VAL ; ab94 ; yes

.1033	 a9 19		lda #$19				LDA 	#ab95_VAL ; ab95

.1035	 38		sec					SEC 

.1036	 e9 18		sbc #$18				SBC 	#FOCUS ; ab21

.1038	 86 08		stx $08					STX 	ab08

.103a	 85 09		sta $09					STA 	ab09

.103c	 a6 60		ldx $60					LDX 	V_PERS_FP_LO_ST

.103e	 a5 61		lda $61					LDA 	V_PERS_FP_HI_ST

.1040	 49 01		eor #$01				EOR 	#$01				; sign swap

.1042	 a8		tay					TAY 

.1043	 20 26 0a	jsr $0a26				JSR 	FP_ADD				; 94-95 + 60-61 -> 68-69 (due to sign swap actually fp minus?)

.1046	 a6 68		ldx $68					LDX 	ab68

.1048	 a4 69		ldy $69					LDY 	ab69

.104a	 20 cf 09	jsr $09cf				JSR 	FPDIV				; 94-95 / 68-69 -> 5E-5F

.104d	 a6 5e		ldx $5e					LDX 	H_PERS_FP_LO_ST

.104f	 a4 5f		ldy $5f					LDY 	H_PERS_FP_HI_ST

.1051	 20 26 0a	jsr $0a26				JSR 	FP_ADD				; 94-95 + 5E-5F ->

.1054	 98		tya					TYA 

.1055	 18		clc					CLC 

.1056	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.1058	 70 1a		bvs $1074				BVS 	b9D98

.105a	 a8		tay						TAY 

.105b	 20 cf 0a	jsr $0acf					JSR 	FPTO8BIT

.105e	 b0 14		bcs $1074					BCS 	b9D98

.1060	 18		clc						CLC 

.1061	 69 40		adc #$40					ADC 	#SCR_HOR_MID

.1063	 c9 80		cmp #$80					CMP 	#CLIP_TEST_RIGHT 	; clip test

.1065	 b0 0d		bcs $1074					BCS 	b9D98

.1067	 85 6a		sta $6a						STA 	LINE_START_HOR

.1069	 a9 00		lda #$00					LDA 	#CLIP_TEST_LEFT 	; clip off left

.106b	 85 6b		sta $6b						STA 	LINE_START_VER 		; clip off left

.106d	 a6 6a		ldx $6a		LINE_DRW_JP	LDX 	LINE_START_HOR

.106f	 a4 6b		ldy $6b					LDY 	LINE_START_VER

.1071	 4c cd ab	jmp $abcd	LINE_JP_PTR	JMP 	$ABCD 					; LINE_DRAW_01

.1074	 60		rts		b9D98   	RTS 

.1075	 48		pha		FORWARD_BACK	PHA 			; push sign/direction

.1076	 a6 aa		ldx $aa						LDX 	SPEED_LO

.1078	 45 ab		eor $ab						EOR 	SPEED_HI 	; set direction

.107a	 86 08		stx $08						STX 	ab08

.107c	 85 09		sta $09						STA 	ab09

.107e	 a6 3e		ldx $3e						LDX 	COS_LO

.1080	 a4 3f		ldy $3f						LDY 	COS_HI

.1082	 20 95 09	jsr $0995					JSR 	FPMUL

.1085	 20 ff 0a	jsr $0aff					JSR 	FPTO16BIT

.1088	 98		tya						TYA 

.1089	 18		clc						CLC 

.108a	 65 78		adc $78						ADC 	CURR_Z_LSB

.108c	 85 78		sta $78						STA 	CURR_Z_LSB

.108e	 8a		txa						TXA 

.108f	 65 79		adc $79						ADC 	CURR_Z_MSB

.1091	 85 79		sta $79						STA 	CURR_Z_MSB

.1093	 8a		txa						TXA 

.1094	 10 04		bpl $109a					BPL 	_Z_PLUS 		; if +

.1096	 a9 ff		lda #$ff						LDA 	#$FF		; set to 255 for -

.1098	 30 02		bmi $109c						BMI 	_Z_NEG_CONT	; jmp

.109a	 a9 00		lda #$00	_Z_PLUS   		LDA 	#$00			; set to 0 for +

.109c	 65 7a		adc $7a		_Z_NEG_CONT 	ADC 	CURR_Z_HSB		; either add or sub depending on + or -

.109e	 85 7a		sta $7a						STA 	CURR_Z_HSB

.10a0	 68		pla						PLA 			; pop sign

.10a1	 a6 aa		ldx $aa						LDX 	SPEED_LO

.10a3	 45 ab		eor $ab						EOR 	SPEED_HI	; set direction

.10a5	 86 08		stx $08						STX 	ab08

.10a7	 85 09		sta $09						STA 	ab09

.10a9	 a6 3c		ldx $3c						LDX 	SIN_LO

.10ab	 a4 3d		ldy $3d						LDY 	SIN_HI

.10ad	 20 95 09	jsr $0995					JSR 	FPMUL

.10b0	 20 ff 0a	jsr $0aff					JSR 	FPTO16BIT

.10b3	 98		tya						TYA 

.10b4	 18		clc						CLC 

.10b5	 65 72		adc $72						ADC 	CURR_X_LSB

.10b7	 85 72		sta $72						STA 	CURR_X_LSB

.10b9	 8a		txa						TXA 

.10ba	 65 73		adc $73						ADC 	CURR_X_MSB

.10bc	 85 73		sta $73						STA 	CURR_X_MSB

.10be	 8a		txa						TXA 

.10bf	 10 04		bpl $10c5					BPL 	_X_PLUS			; positive

.10c1	 a9 ff		lda #$ff						LDA 	#$FF		; negative so set to 255

.10c3	 30 02		bmi $10c7						BMI 	_X_NEG_CONT ; jump to calc

.10c5	 a9 00		lda #$00	_X_PLUS	   		LDA 	#$00			; positive so set to 0

.10c7	 65 74		adc $74		_X_NEG_CONT    	ADC 	CURR_X_HSB		; calc

.10c9	 85 74		sta $74						STA 	CURR_X_HSB

.10cb	 60		rts						RTS 

.10cc	 a6 2c		ldx $2c		SIN_COS	LDX 	ROT_LO

.10ce	 a4 2d		ldy $2d		        LDY 	ROT_HI

.10d0	 20 ba 0a	jsr $0aba	        JSR 	SIN_FP

.10d3	 86 3c		stx $3c		        STX 	SIN_LO ; sin_lo

.10d5	 84 3d		sty $3d		        STY 	SIN_HI ; sin_hi

.10d7	 a6 2c		ldx $2c		        LDX 	ROT_LO

.10d9	 a4 2d		ldy $2d		        LDY 	ROT_HI

.10db	 20 b9 0a	jsr $0ab9	        JSR 	COS_FP

.10de	 86 3e		stx $3e		        STX 	COS_LO ; cos_lo

.10e0	 84 3f		sty $3f		        STY 	COS_HI ; cos_hi

.10e2	 60		rts		        RTS 

.10e3	 a4 ad		ldy $ad		PROCESS_POINT_TO_FP	LDY 	OBJECT_POINTER_POS 	; get point then *16 then conveert to 24bit fp

.10e5	 c8		iny							INY 

.10e6	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y ; get x

.10e8	 85 cf		sta $cf							STA 	OBJ_PNT_X_LSB

.10ea	 c8		iny							INY 

.10eb	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y ; get y

.10ed	 85 d1		sta $d1							STA 	OBJ_PNT_Y_LSB

.10ef	 c8		iny							INY 

.10f0	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y ; get z

.10f2	 85 d3		sta $d3							STA 	OBJ_PNT_Z_LSB

.10f4	 84 ad		sty $ad							STY 	OBJECT_POINTER_POS

.10f6	 20 3c 11	jsr $113c						JSR 	POINT_X16

.10f9	 a5 d5		lda $d5							LDA 	DIFF_X_LSB

.10fb	 18		clc							CLC 	 			; clear

.10fc	 65 cf		adc $cf							ADC 	OBJ_PNT_X_LSB

.10fe	 a8		tay							TAY

.10ff	 a5 d6		lda $d6							LDA 	DIFF_X_MSB

.1101	 65 d0		adc $d0							ADC 	OBJ_PNT_X_MSB

.1103	 aa		tax							TAX 

.1104	 a5 d7		lda $d7							LDA 	DIFF_X_HSB

.1106	 69 00		adc #$00						ADC 	#$00

.1108	 20 67 0b	jsr $0b67						JSR 	BIT24TOFP

.110b	 85 52		sta $52							STA 	X_POS_HI

.110d	 86 53		stx $53							STX 	X_POS_LO

.110f	 a5 d8		lda $d8							LDA 	DIFF_Y_LSB

.1111	 18		clc							CLC 

.1112	 65 d1		adc $d1							ADC 	OBJ_PNT_Y_LSB

.1114	 a8		tay							TAY

.1115	 a5 d9		lda $d9							LDA 	DIFF_Y_MSB

.1117	 65 d2		adc $d2							ADC 	OBJ_PNT_Y_MSB

.1119	 aa		tax							TAX 

.111a	 a5 da		lda $da							LDA 	DIFF_Y_HSB

.111c	 69 00		adc #$00						ADC 	#$00

.111e	 20 67 0b	jsr $0b67						JSR 	BIT24TOFP

.1121	 85 54		sta $54							STA 	Y_POS_HI

.1123	 86 55		stx $55							STX 	Y_POS_LO

.1125	 a5 db		lda $db							LDA 	DIFF_Z_LSB

.1127	 18		clc							CLC 

.1128	 65 d3		adc $d3							ADC 	OBJ_PNT_Z_LSB

.112a	 a8		tay							TAY

.112b	 a5 dc		lda $dc							LDA 	DIFF_Z_MSB

.112d	 65 d4		adc $d4							ADC 	OBJ_PNT_Z_MSB

.112f	 aa		tax							TAX 

.1130	 a5 dd		lda $dd							LDA 	DIFF_Z_HSB

.1132	 69 00		adc #$00						ADC 	#$00

.1134	 20 67 0b	jsr $0b67						JSR 	BIT24TOFP

.1137	 85 56		sta $56							STA 	Z_POS_HI

.1139	 86 57		stx $57							STX 	Z_POS_LO

.113b	 60		rts							RTS 

.113c	 a9 00		lda #$00	POINT_X16	LDA 	#0				; MULTIPLY POINT *16 ?

.113e	 85 d0		sta $d0					STA 	OBJ_PNT_X_MSB

.1140	 85 d2		sta $d2					STA 	OBJ_PNT_Y_MSB

.1142	 85 d4		sta $d4					STA 	OBJ_PNT_Z_MSB

.1144	 a5 cf		lda $cf					LDA 	OBJ_PNT_X_LSB

.1146	 49 80		eor #$80				EOR 	#$80 			; reverse the sign?

.1148	 0a		asl					ASL 

.1149	 26 d0		rol $d0					ROL 	OBJ_PNT_X_MSB ; *2

.114b	 0a		asl					ASL 

.114c	 26 d0		rol $d0					ROL 	OBJ_PNT_X_MSB ; *4

.114e	 0a		asl					ASL 

.114f	 26 d0		rol $d0					ROL 	OBJ_PNT_X_MSB ; *8

.1151	 0a		asl					ASL 

.1152	 26 d0		rol $d0					ROL 	OBJ_PNT_X_MSB ; *16

.1154	 85 cf		sta $cf					STA 	OBJ_PNT_X_LSB

.1156	 a5 d0		lda $d0					LDA OBJ_PNT_X_MSB ; *16

.1158	 a5 d1		lda $d1					LDA 	OBJ_PNT_Y_LSB

.115a	 49 80		eor #$80				EOR 	#$80

.115c	 0a		asl					ASL 

.115d	 26 d2		rol $d2					ROL 	OBJ_PNT_Y_MSB

.115f	 0a		asl					ASL 

.1160	 26 d2		rol $d2					ROL 	OBJ_PNT_Y_MSB

.1162	 0a		asl					ASL 

.1163	 26 d2		rol $d2					ROL 	OBJ_PNT_Y_MSB

.1165	 0a		asl					ASL 

.1166	 26 d2		rol $d2					ROL 	OBJ_PNT_Y_MSB

.1168	 85 d1		sta $d1					STA 	OBJ_PNT_Y_LSB

.116a	 a5 d3		lda $d3					LDA 	OBJ_PNT_Z_LSB

.116c	 49 80		eor #$80				EOR 	#$80

.116e	 0a		asl					ASL 

.116f	 26 d4		rol $d4					ROL 	OBJ_PNT_Z_MSB

.1171	 0a		asl					ASL 

.1172	 26 d4		rol $d4					ROL 	OBJ_PNT_Z_MSB

.1174	 0a		asl					ASL 

.1175	 26 d4		rol $d4					ROL 	OBJ_PNT_Z_MSB

.1177	 0a		asl					ASL 

.1178	 26 d4		rol $d4					ROL 	OBJ_PNT_Z_MSB

.117a	 85 d3		sta $d3					STA 	OBJ_PNT_Z_LSB

.117c	 60		rts					RTS 

.117d	 a5 3c		lda $3c		ROTATE_PERS LDA 	SIN_LO

.117f	 85 22		sta $22					STA		FP_MULTIPLY_LO

.1181	 a5 3d		lda $3d					LDA 	SIN_HI

.1183	 a6 52		ldx $52					LDX		X_POS_HI

.1185	 a4 53		ldy $53					LDY		X_POS_LO

.1187	 20 7b 09	jsr $097b				JSR		FP_MULTIPLY			; X * SIN

.118a	 84 0a		sty $0a					STy 	X_ROT_LO

.118c	 85 0b		sta $0b					STA		X_ROT_HI

.118e	 a5 3e		lda $3e					LDA 	COS_LO

.1190	 85 22		sta $22					STA		FP_MULTIPLY_LO

.1192	 a5 3f		lda $3f					LDA 	COS_HI

.1194	 a6 56		ldx $56					LDX		Z_POS_HI

.1196	 a4 57		ldy $57					LDY		Z_POS_LO

.1198	 20 7b 09	jsr $097b				JSR		FP_MULTIPLY			; Z * COS

.119b	 84 08		sty $08					STy 	Z_ROT_LO

.119d	 85 09		sta $09					STA		Z_ROT_HI

.119f	 a6 0a		ldx $0a					LDX 	X_ROT_LO

.11a1	 a4 0b		ldy $0b					LDY 	X_ROT_HI

.11a3	 20 26 0a	jsr $0a26				JSR 	FP_ADD				; Z = (X * SIN) + (Z * COS)

.11a6	 86 5c		stx $5c					STX 	Z_ROTATION_LO		; Z rotation result?

.11a8	 98		tya					TYA 

.11a9	 49 01		eor #$01				EOR 	#$01				; swap sign?

.11ab	 85 5d		sta $5d					STA 	Z_ROTATION_HI		; Z rotation result?

.11ad	 29 01		and #$01				AND 	#$01				; keep fp sign

.11af	 4a		lsr					LSR 						; shift sign

.11b0	 6a		ror					ROR 						; rotate sign into top bit

.11b1	 85 6e		sta $6e					STA 	POINT_CLASSIFY_ST	; so -ve = $80 / +ve = $00 ? = behind point classification?

.11b3	 a5 3e		lda $3e					LDA 	COS_LO

.11b5	 85 22		sta $22					STA		FP_MULTIPLY_LO

.11b7	 a5 3f		lda $3f					LDA 	COS_HI

.11b9	 a6 52		ldx $52					LDX		X_POS_HI

.11bb	 a4 53		ldy $53					LDY		X_POS_LO

.11bd	 20 7b 09	jsr $097b				JSR		FP_MULTIPLY			; X * COS

.11c0	 84 0a		sty $0a					STy 	X_ROT_LO

.11c2	 85 0b		sta $0b					STA		X_ROT_HI

.11c4	 a5 3c		lda $3c					LDA 	SIN_LO

.11c6	 85 22		sta $22					STA		FP_MULTIPLY_LO

.11c8	 a5 3d		lda $3d					LDA 	SIN_HI

.11ca	 a6 56		ldx $56					LDX		Z_POS_HI

.11cc	 a4 57		ldy $57					LDY		Z_POS_LO

.11ce	 20 7b 09	jsr $097b				JSR		FP_MULTIPLY			; Z * SIN

.11d1	 84 08		sty $08					STy 	Z_ROT_LO

.11d3	 49 01		eor #$01				EOR 	#$01 				; -Z * SIN

.11d5	 85 09		sta $09					STA 	Z_ROT_HI

.11d7	 a6 0a		ldx $0a					LDX 	X_ROT_LO

.11d9	 a4 0b		ldy $0b					LDY 	X_ROT_HI

.11db	 20 26 0a	jsr $0a26				JSR 	FP_ADD 				; X = (X * COS) + (-Z * SIN)

.11de	 86 58		stx $58					STX 	X_ROTATION_LO		; X rotation result?

.11e0	 98		tya					TYA 

.11e1	 85 59		sta $59					STA 	X_ROTATION_HI		; X rotation result?

.11e3	 a4 6e		ldy $6e		        LDY POINT_CLASSIFY_ST	; z classification? (see #1 above) 0 is infront - !0 is behind

.11e5	 d0 2a		bne $1211	        BNE bAA54				; behind?

.11e7	 85 09		sta $09		        STA ab09

.11e9	 a5 5c		lda $5c				LDA		Z_ROTATION_LO

.11eb	 85 22		sta $22				STA		FP_DIVIDE_LO

.11ed	 a6 09		ldx $09				LDX		ab09

.11ef	 a4 08		ldy $08				LDY		ab08

.11f1	 a5 5d		lda $5d				LDA		Z_ROTATION_HI

.11f3	 20 5f 09	jsr $095f			JSR		FP_DIVIDE		; Z_ROTATION LO-HI / 08-09 -> 5E-5F

.11f6	 86 5e		stx $5e				STX		H_PERS_FP_LO_ST			; hor pers pos

.11f8	 85 5f		sta $5f				STA		H_PERS_FP_HI_ST			; hor pers pos

.11fa	 18		clc		        CLC 

.11fb	 69 18		adc #$18	        ADC #FOCUS ; ab21		; add focus to mantisa?

.11fd	 70 0e		bvs $120d	        BVS bAA50

.11ff	 a8		tay					TAY 					; copy to mantisa?

.1200	 20 cf 0a	jsr $0acf				JSR FPTO8BIT			; convert X/Y back to 

.1203	 b0 08		bcs $120d				BCS bAA50

.1205	 69 40		adc #$40				ADC #SCR_HOR_MID		; add hor middle

.1207	 85 6a		sta $6a					STA LINE_START_HOR

.1209	 c9 80		cmp #$80				CMP #CLIP_TEST_RIGHT 	; clip test

.120b	 90 04		bcc $1211				BCC bAA54 				; off right

.120d	 a9 01		lda #$01	bAA50   	LDA 	#PNT_OFF_HOR		; PNT_OFF_RIGHT 		; right clip

.120f	 85 6e		sta $6e					STA 	POINT_CLASSIFY_ST

.1211	 a6 54		ldx $54		bAA54   LDX Y_POS_HI

.1213	 a5 55		lda $55		        LDA Y_POS_LO

.1215	 49 01		eor #$01	        EOR #$01				; reverses the sign?

.1217	 a8		tay		        TAY 

.1218	 86 08		stx $08		        STX ab08

.121a	 84 09		sty $09		        STY ab09

.121c	 86 5a		stx $5a		jA8E9   STX 	Y_ROTATION_LO

.121e	 98		tya		        TYA 

.121f	 18		clc		        CLC 

.1220	 69 04		adc #$04	        ADC #$04

.1222	 70 01		bvs $1225	        BVS bA8F2

.1224	 a8		tay					TAY 

.1225	 84 5b		sty $5b		bA8F2   STY 	Y_ROTATION_HI

.1227	 84 09		sty $09		        STY ab09

.1229	 a5 6e		lda $6e		        LDA 	POINT_CLASSIFY_ST

.122b	 30 2a		bmi $1257	        BMI 	bA933

.122d	 a5 5c		lda $5c					LDA		Z_ROTATION_LO

.122f	 85 22		sta $22					STA		FP_DIVIDE_LO

.1231	 a6 09		ldx $09					LDX		ab09

.1233	 a4 08		ldy $08					LDY		ab08

.1235	 a5 5d		lda $5d					LDA		Z_ROTATION_HI

.1237	 20 5f 09	jsr $095f				JSR		FP_DIVIDE		; Z_ROTATION LO-HI / 08-09 -> 60-61

.123a	 86 60		stx $60					STX		V_PERS_FP_LO_ST			; ver pers pos

.123c	 85 61		sta $61					STA		V_PERS_FP_HI_ST			; ver pers pos

.123e	 18		clc					CLC 

.123f	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.1241	 70 0e		bvs $1251				BVS 	bA92D

.1243	 a8		tay						TAY 

.1244	 20 cf 0a	jsr $0acf					JSR 	FPTO8BIT

.1247	 b0 08		bcs $1251					BCS 	bA92D

.1249	 69 40		adc #$40					ADC 	#SCR_VER_MID

.124b	 85 6b		sta $6b						STA 	LINE_START_VER

.124d	 c9 80		cmp #$80					CMP 	#CLIP_TEST_BOTTOM ; clip test

.124f	 90 06		bcc $1257					BCC 	bA933

.1251	 a5 6e		lda $6e		bA92D   			LDA 	POINT_CLASSIFY_ST

.1253	 09 02		ora #$02						ORA 	#PNT_OFF_VER

.1255	 85 6e		sta $6e							STA 	POINT_CLASSIFY_ST

.1257	 a4 19		ldy $19		bA933   LDY 	POINT_LINE_COUNT						; point position?

.1259	 a5 6e		lda $6e		        LDA 	POINT_CLASSIFY_ST

.125b	 99 40 07	sta $0740,y	        STA 	POINT_CLASSIFICATION,Y

.125e	 30 1e		bmi $127e	        BMI 	bA95A					; behind

.1260	 a5 5e		lda $5e					LDA 	H_PERS_FP_LO_ST

.1262	 99 00 06	sta $0600,y				STA 	H_PERS_FP_LO,Y	; pers point?

.1265	 a5 5f		lda $5f					LDA 	H_PERS_FP_HI_ST

.1267	 99 c0 03	sta $03c0,y				STA 	H_PERS_FP_HI,Y	; pers point?

.126a	 a5 60		lda $60					LDA 	V_PERS_FP_LO_ST

.126c	 99 00 07	sta $0700,y				STA 	V_PERS_FP_LO,Y	; pers point?

.126f	 a5 61		lda $61					LDA 	V_PERS_FP_HI_ST

.1271	 99 40 06	sta $0640,y				STA 	V_PERS_FP_HI,Y	; pers point?

.1274	 a5 6a		lda $6a					LDA 	LINE_START_HOR 			; get perspective ver

.1276	 99 80 06	sta $0680,y				STA 	PERS_HOR_TAB,Y 				; put perspective ver

.1279	 a5 6b		lda $6b					LDA 	LINE_START_VER 			; get perspective hor

.127b	 99 c0 06	sta $06c0,y				STA 	PERS_VER_TAB,Y 				; put perspective hor

.127e	 a5 58		lda $58		bA95A   LDA 	X_ROTATION_LO

.1280	 99 00 01	sta $0100,y	        STA 	X_ROT_TAB_LO,Y 	; X rotation result x pos lo

.1283	 a5 59		lda $59		        LDA 	X_ROTATION_HI

.1285	 99 40 01	sta $0140,y	        STA 	X_ROT_TAB_HI,Y 	; X rotation result x pos hi

.1288	 a5 5a		lda $5a		        LDA 	Y_ROTATION_LO

.128a	 99 80 01	sta $0180,y	        STA 	Y_ROT_TAB_LO,Y	; rotation result y pos lo

.128d	 a5 5b		lda $5b		        LDA 	Y_ROTATION_HI

.128f	 99 c0 02	sta $02c0,y	        STA 	Y_ROT_TAB_HI,Y	; rotation result y pos hi

.1292	 a5 5c		lda $5c		        LDA 	Z_ROTATION_LO

.1294	 99 40 03	sta $0340,y	        STA 	Z_ROT_TAB_LO,Y	; rotation result z pos lo

.1297	 a5 5d		lda $5d		        LDA 	Z_ROTATION_HI

.1299	 99 80 03	sta $0380,y	        STA 	Z_ROT_TAB_HI,Y	; rotation result z pos hi

.129c	 60		rts		        RTS 

.129d	 e8		inx		LINE_DRAW_0_LOOP  	INX 

.129e	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.12a0	 65 66		adc $66							ADC 	LINE_INC

.12a2	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.12a4	 90 0f		bcc $12b5						BCC 	LINE_DRAW_0_CONT

.12a6	 c8		iny								INY

.12a7	 30 1c		bmi $12c5							BMI 	LINE_DRAW_0_EXIT

.12a9	 b9 00 34	lda $3400,y	LINE_DRAW_0				LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.12ac	 85 02		sta $02								STA 	SCREEN_POS_LO

.12ae	 b9 00 32	lda $3200,y	LINE_DRAW_0_SCN			LDA 	VER_POS_SCN0_HI,Y

.12b1	 85 03		sta $03								STA 	SCREEN_POS_HI

.12b3	 84 06		sty $06								STY 	ab06

.12b5	 bc 88 34	ldy $3488,x	LINE_DRAW_0_CONT	LDY 	HOR_SCR_POS,X

.12b8	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.12ba	 1d 80 33	ora $3380,x	LINE_DRAW_0_TYPE	ORA 	ORA_PIXEL_POS,X

.12bd	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.12bf	 a4 06		ldy $06							LDY 	ab06

.12c1	 e4 6c		cpx $6c							CPX 	PERS_HOR_ab6C

.12c3	 d0 d8		bne $129d						BNE 	LINE_DRAW_0_LOOP

.12c5	 60		rts		LINE_DRAW_0_EXIT   RTS 

.12c6	 c8		iny		LINE_DRAW_1_LOOP   INY  ; LINE-DRAW

.12c7	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.12c9	 65 66		adc $66							ADC 	LINE_INC

.12cb	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.12cd	 90 03		bcc $12d2						BCC 	LINE_DRAW_1

.12cf	 e8		inx								INX 

.12d0	 30 1c		bmi $12ee							BMI 	LINE_DRAW_1_EXIT

.12d2	 b9 00 34	lda $3400,y	LINE_DRAW_1			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.12d5	 85 02		sta $02							STA 	SCREEN_POS_LO

.12d7	 b9 00 32	lda $3200,y	LINE_DRAW_1_SCN		LDA 	VER_POS_SCN0_HI,Y

.12da	 85 03		sta $03							STA 	SCREEN_POS_HI

.12dc	 84 06		sty $06							STY 	ab06

.12de	 bc 88 34	ldy $3488,x						LDY 	HOR_SCR_POS,X

.12e1	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.12e3	 1d 80 33	ora $3380,x	LINE_DRAW_1_TYPE	ORA 	ORA_PIXEL_POS,X

.12e6	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.12e8	 a4 06		ldy $06							LDY 	ab06

.12ea	 c4 6d		cpy $6d							CPY 	PERS_VER_ab6D

.12ec	 d0 d8		bne $12c6						BNE 	LINE_DRAW_1_LOOP ; GOTO LINE-DRAW

.12ee	 60		rts		LINE_DRAW_1_EXIT   	RTS 

.12ef	 c8		iny		LINE_DRAW_2_LOOP   	INY  ; LINE-DRAW

.12f0	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.12f2	 65 66		adc $66							ADC 	LINE_INC

.12f4	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.12f6	 90 03		bcc $12fb						BCC 	LINE_DRAW_2

.12f8	 ca		dex								DEX 

.12f9	 30 1c		bmi $1317							BMI 	LINE_DRAW_2_EXIT

.12fb	 b9 00 34	lda $3400,y	LINE_DRAW_2			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.12fe	 85 02		sta $02							STA 	SCREEN_POS_LO

.1300	 b9 00 32	lda $3200,y	LINE_DRAW_2_SCN		LDA 	VER_POS_SCN0_HI,Y

.1303	 85 03		sta $03							STA 	SCREEN_POS_HI

.1305	 84 06		sty $06							STY 	ab06

.1307	 bc 88 34	ldy $3488,x						LDY 	HOR_SCR_POS,X

.130a	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.130c	 1d 80 33	ora $3380,x	LINE_DRAW_2_TYPE	ORA 	ORA_PIXEL_POS,X

.130f	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.1311	 a4 06		ldy $06							LDY 	ab06

.1313	 c4 6d		cpy $6d							CPY 	PERS_VER_ab6D

.1315	 d0 d8		bne $12ef						BNE 	LINE_DRAW_2_LOOP ; GOTO LINE-DRAW

.1317	 60		rts		LINE_DRAW_2_EXIT   	RTS 

.1318	 ca		dex		LINE_DRAW_3_LOOP  	DEX ; LINE-DRAW

.1319	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.131b	 e5 66		sbc $66							SBC 	LINE_INC

.131d	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.131f	 b0 0f		bcs $1330						BCS 	LINE_DRAW_3_CONT

.1321	 c8		iny								INY 

.1322	 30 1c		bmi $1340							BMI 	LINE_DRAW_3_EXIT

.1324	 b9 00 34	lda $3400,y	LINE_DRAW_3				LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.1327	 85 02		sta $02								STA 	SCREEN_POS_LO

.1329	 b9 00 32	lda $3200,y	LINE_DRAW_3_SCN			LDA 	VER_POS_SCN0_HI,Y

.132c	 85 03		sta $03								STA 	SCREEN_POS_HI

.132e	 84 06		sty $06								STY 	ab06

.1330	 bc 88 34	ldy $3488,x	LINE_DRAW_3_CONT	LDY 	HOR_SCR_POS,X

.1333	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.1335	 1d 80 33	ora $3380,x	LINE_DRAW_3_TYPE	ORA 	ORA_PIXEL_POS,X

.1338	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.133a	 a4 06		ldy $06							LDY 	ab06

.133c	 e4 6c		cpx $6c							CPX 	PERS_HOR_ab6C

.133e	 d0 d8		bne $1318						BNE 	LINE_DRAW_3_LOOP ; GOTO LINE-DRAW

.1340	 60		rts		LINE_DRAW_3_EXIT   	RTS 

.1341	 ca		dex		LINE_DRAW_4_LOOP   	DEX  ; LINE-DRAW

.1342	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.1344	 e5 66		sbc $66							SBC 	LINE_INC

.1346	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.1348	 b0 0f		bcs $1359						BCS 	LINE_DRAW_4_CONT

.134a	 88		dey								DEY 

.134b	 30 1c		bmi $1369							BMI 	LINE_DRAW_4_EXIT

.134d	 b9 00 34	lda $3400,y	LINE_DRAW_4				LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.1350	 85 02		sta $02								STA 	SCREEN_POS_LO

.1352	 b9 00 32	lda $3200,y	LINE_DRAW_4_SCN			LDA 	VER_POS_SCN0_HI,Y

.1355	 85 03		sta $03								STA 	SCREEN_POS_HI

.1357	 84 06		sty $06								STY 	ab06

.1359	 bc 88 34	ldy $3488,x	LINE_DRAW_4_CONT	LDY 	HOR_SCR_POS,X

.135c	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.135e	 1d 80 33	ora $3380,x	LINE_DRAW_4_TYPE  	ORA 	ORA_PIXEL_POS,X

.1361	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.1363	 a4 06		ldy $06							LDY 	ab06

.1365	 e4 6c		cpx $6c							CPX 	PERS_HOR_ab6C

.1367	 d0 d8		bne $1341						BNE 	LINE_DRAW_4_LOOP ; GOTO LINE-DRAW

.1369	 60		rts		LINE_DRAW_4_EXIT   	RTS 

.136a	 88		dey		LINE_DRAW_5_LOOP   	DEY  ; LINE-DRAW

.136b	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.136d	 65 66		adc $66							ADC 	LINE_INC

.136f	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.1371	 90 03		bcc $1376						BCC 	LINE_DRAW_5

.1373	 ca		dex								DEX 

.1374	 30 1c		bmi $1392							BMI 	LINE_DRAW_5_EXIT

.1376	 b9 00 34	lda $3400,y	LINE_DRAW_5			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.1379	 85 02		sta $02							STA 	SCREEN_POS_LO

.137b	 b9 00 32	lda $3200,y	LINE_DRAW_5_SCN		LDA 	VER_POS_SCN0_HI,Y

.137e	 85 03		sta $03							STA 	SCREEN_POS_HI

.1380	 84 06		sty $06							STY 	ab06

.1382	 bc 88 34	ldy $3488,x						LDY 	HOR_SCR_POS,X

.1385	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.1387	 1d 80 33	ora $3380,x	LINE_DRAW_5_TYPE  	ORA 	ORA_PIXEL_POS,X

.138a	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.138c	 a4 06		ldy $06							LDY 	ab06

.138e	 c4 6d		cpy $6d							CPY 	PERS_VER_ab6D

.1390	 d0 d8		bne $136a						BNE 	LINE_DRAW_5_LOOP ; GOTO LINE-DRAW

.1392	 60		rts		LINE_DRAW_5_EXIT  	RTS

.1393	 88		dey		LINE_DRAW_6_LOOP   	DEY  ; LINE-DRAW

.1394	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.1396	 e5 66		sbc $66							SBC 	LINE_INC

.1398	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.139a	 b0 03		bcs $139f						BCS 	LINE_DRAW_6

.139c	 e8		inx								INX             ; NEXT VER

.139d	 30 1c		bmi $13bb							BMI 	LINE_DRAW_6_EXIT       ; EXIT

.139f	 b9 00 34	lda $3400,y	LINE_DRAW_6			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.13a2	 85 02		sta $02							STA 	SCREEN_POS_LO

.13a4	 b9 00 32	lda $3200,y	LINE_DRAW_6_SCN		LDA 	VER_POS_SCN0_HI,Y

.13a7	 85 03		sta $03							STA 	SCREEN_POS_HI

.13a9	 84 06		sty $06							STY 	ab06

.13ab	 bc 88 34	ldy $3488,x						LDY 	HOR_SCR_POS,X

.13ae	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.13b0	 1d 80 33	ora $3380,x	LINE_DRAW_6_TYPE	ORA 	ORA_PIXEL_POS,X

.13b3	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.13b5	 a4 06		ldy $06							LDY 	ab06

.13b7	 c4 6d		cpy $6d							CPY 	PERS_VER_ab6D

.13b9	 d0 d8		bne $1393						BNE 	LINE_DRAW_6_LOOP ; GOTO LINE-DRAW 

.13bb	 60		rts		LINE_DRAW_6_EXIT	RTS 

.13bc	 e8		inx		LINE_DRAW_7_LOOP   	INX	; LINE-DRAW

.13bd	 a5 08		lda $08							LDA		LINE_FRACTION_ab08

.13bf	 65 66		adc $66							ADC		LINE_INC

.13c1	 85 08		sta $08							STA		LINE_FRACTION_ab08

.13c3	 90 0f		bcc $13d4						BCC		LINE_DRAW_7_CONT

.13c5	 88		dey								DEY 

.13c6	 30 1c		bmi $13e4							BMI		LINE_DRAW_7_EXIT

.13c8	 b9 00 34	lda $3400,y	LINE_DRAW_7				LDA		VER_POS_LO,Y ; LINE-DRAW-START

.13cb	 85 02		sta $02								STA		SCREEN_POS_LO

.13cd	 b9 00 32	lda $3200,y	LINE_DRAW_7_SCN			LDA 	VER_POS_SCN0_HI,Y

.13d0	 85 03		sta $03								STA 	SCREEN_POS_HI

.13d2	 84 06		sty $06								STY 	ab06

.13d4	 bc 88 34	ldy $3488,x	LINE_DRAW_7_CONT	LDY 	HOR_SCR_POS,X

.13d7	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.13d9	 1d 80 33	ora $3380,x	LINE_DRAW_7_TYPE	ORA 	ORA_PIXEL_POS,X

.13dc	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.13de	 a4 06		ldy $06							LDY 	ab06

.13e0	 e4 6c		cpx $6c							CPX 	PERS_HOR_ab6C

.13e2	 d0 d8		bne $13bc						BNE 	LINE_DRAW_7_LOOP ; GOTO LINE DRAW

.13e4	 60		rts		LINE_DRAW_7_EXIT   	RTS 

.13e5	 a9 32		lda #$32	COLOUR_SETUP_WHITE	LDA 	#>AND_PIXEL_POS

.13e7	 a2 3d		ldx #$3d						LDX 	#$3D				; AND

.13e9	 d0 04		bne $13ef						BNE 	COLOUR_SETUP 		; JUMP

.13eb	 a9 33		lda #$33	COLOUR_SETUP_BLACK	LDA 	#>ORA_PIXEL_POS

.13ed	 a2 1d		ldx #$1d						LDX 	#$1D				; ORA

.13ef	 8d bc 12	sta $12bc	COLOUR_SETUP		STA 	LINE_DRAW_0_TYPE +2

.13f2	 8d e5 12	sta $12e5						STA 	LINE_DRAW_1_TYPE +2

.13f5	 8d 0e 13	sta $130e						STA 	LINE_DRAW_2_TYPE +2

.13f8	 8d 37 13	sta $1337						STA 	LINE_DRAW_3_TYPE +2

.13fb	 8d 60 13	sta $1360						STA 	LINE_DRAW_4_TYPE +2

.13fe	 8d 89 13	sta $1389						STA 	LINE_DRAW_5_TYPE +2

.1401	 8d b2 13	sta $13b2						STA 	LINE_DRAW_6_TYPE +2

.1404	 8d db 13	sta $13db						STA 	LINE_DRAW_7_TYPE +2

.1407	 8d 32 0c	sta $0c32						STA 	LINE_DRAW_8_TYPE +2

.140a	 8e ba 12	stx $12ba						STX 	LINE_DRAW_0_TYPE

.140d	 8e e3 12	stx $12e3						STX 	LINE_DRAW_1_TYPE

.1410	 8e 0c 13	stx $130c						STX 	LINE_DRAW_2_TYPE

.1413	 8e 35 13	stx $1335						STX 	LINE_DRAW_3_TYPE

.1416	 8e 5e 13	stx $135e						STX 	LINE_DRAW_4_TYPE

.1419	 8e 87 13	stx $1387						STX 	LINE_DRAW_5_TYPE

.141c	 8e b0 13	stx $13b0						STX 	LINE_DRAW_6_TYPE

.141f	 8e d9 13	stx $13d9						STX 	LINE_DRAW_7_TYPE

.1422	 8e 30 0c	stx $0c30						STX 	LINE_DRAW_8_TYPE

.1425	 60		rts							RTS

.1426	 a9 e0		lda #$e0	DRAW_SCREEN	LDA		#$E0

.1428	 cd 12 d0	cmp $d012	WAIT_RASTER	CMP		$D012

.142b	 d0 fb		bne $1428				BNE 	WAIT_RASTER

.142d	 e6 24		inc $24					INC		SCREEN_FLIP		; INCREMENT SCREEN FLIP

.142f	 a5 24		lda $24					LDA		SCREEN_FLIP		; GET SCREEN FLIP

.1431	 4a		lsr					LSR 					; SHIFT BIT0 INTO CARRY

.1432	 b0 08		bcs $143c				BCS		SCRN_2			; CARRY SET ?

.1434	 a0 40		ldy #$40				LDY		#SCREEN_0		; SCREEN 1 OFFSET

.1436	 a9 32		lda #$32				lda		#>VER_POS_SCN0_HI

.1438	 a2 78		ldx #$78				LDX		#$78

.143a	 d0 06		bne $1442				BNE		SCNCLR			; JUMP

.143c	 a0 60		ldy #$60	SCRN_2  	LDY		#SCREEN_1		; SCREEN 2 OFFSET

.143e	 a9 33		lda #$33				lda		#>VER_POS_SCN1_HI

.1440	 a2 70		ldx #$70				LDX		#$70

.1442	 8d b0 12	sta $12b0	SCNCLR		sta		LINE_DRAW_0_SCN +2

.1445	 8d d9 12	sta $12d9				sta		LINE_DRAW_1_SCN +2

.1448	 8d 02 13	sta $1302				sta		LINE_DRAW_2_SCN +2

.144b	 8d 2b 13	sta $132b				sta		LINE_DRAW_3_SCN +2

.144e	 8d 54 13	sta $1354				sta		LINE_DRAW_4_SCN +2

.1451	 8d 7d 13	sta $137d				sta		LINE_DRAW_5_SCN +2

.1454	 8d a6 13	sta $13a6				sta		LINE_DRAW_6_SCN +2

.1457	 8d cf 13	sta $13cf				sta		LINE_DRAW_7_SCN +2

.145a	 8d 28 0c	sta $0c28				sta		PLOT_POINT_SCN +2

.145d	 8e 1c 09	stx $091c				STX		VIC_SCREEN_BANK +1

.1460	 a2 20		ldx #$20				LDX 	#32

.1462	 c0 60		cpy #$60				CPY 	#SCREEN_1

.1464	 d0 03		bne $1469				BNE	CLSSCN0_LP

.1466	 4c f7 15	jmp $15f7					JMP CLSSCN1_LP

.1469	 a9 a5		lda #$a5	CLSSCN0_LP	LDA 	#$A5

.146b	 99 00 40	sta $4000,y				STA SCREEN0+( 0*320)+0,Y

.146e	 99 01 40	sta $4001,y				STA SCREEN0+( 0*320)+1,Y

.1471	 99 02 40	sta $4002,y				STA SCREEN0+( 0*320)+2,Y

.1474	 99 03 40	sta $4003,y				STA SCREEN0+( 0*320)+3,Y

.1477	 99 04 40	sta $4004,y				STA SCREEN0+( 0*320)+4,Y

.147a	 99 05 40	sta $4005,y				STA SCREEN0+( 0*320)+5,Y

.147d	 99 06 40	sta $4006,y				STA SCREEN0+( 0*320)+6,Y

.1480	 99 07 40	sta $4007,y				STA SCREEN0+( 0*320)+7,Y

.1483	 99 40 41	sta $4140,y				STA SCREEN0+( 1*320)+0,Y

.1486	 99 41 41	sta $4141,y				STA SCREEN0+( 1*320)+1,Y

.1489	 99 42 41	sta $4142,y				STA SCREEN0+( 1*320)+2,Y

.148c	 99 43 41	sta $4143,y				STA SCREEN0+( 1*320)+3,Y

.148f	 99 44 41	sta $4144,y				STA SCREEN0+( 1*320)+4,Y

.1492	 99 45 41	sta $4145,y				STA SCREEN0+( 1*320)+5,Y

.1495	 99 46 41	sta $4146,y				STA SCREEN0+( 1*320)+6,Y

.1498	 99 47 41	sta $4147,y				STA SCREEN0+( 1*320)+7,Y

.149b	 99 80 42	sta $4280,y				STA SCREEN0+( 2*320)+0,Y

.149e	 99 81 42	sta $4281,y				STA SCREEN0+( 2*320)+1,Y

.14a1	 99 82 42	sta $4282,y				STA SCREEN0+( 2*320)+2,Y

.14a4	 99 83 42	sta $4283,y				STA SCREEN0+( 2*320)+3,Y

.14a7	 99 84 42	sta $4284,y				STA SCREEN0+( 2*320)+4,Y

.14aa	 99 85 42	sta $4285,y				STA SCREEN0+( 2*320)+5,Y

.14ad	 99 86 42	sta $4286,y				STA SCREEN0+( 2*320)+6,Y

.14b0	 99 87 42	sta $4287,y				STA SCREEN0+( 2*320)+7,Y

.14b3	 99 c0 43	sta $43c0,y				STA SCREEN0+( 3*320)+0,Y

.14b6	 99 c1 43	sta $43c1,y				STA SCREEN0+( 3*320)+1,Y

.14b9	 99 c2 43	sta $43c2,y				STA SCREEN0+( 3*320)+2,Y

.14bc	 99 c3 43	sta $43c3,y				STA SCREEN0+( 3*320)+3,Y

.14bf	 99 c4 43	sta $43c4,y				STA SCREEN0+( 3*320)+4,Y

.14c2	 99 c5 43	sta $43c5,y				STA SCREEN0+( 3*320)+5,Y

.14c5	 99 c6 43	sta $43c6,y				STA SCREEN0+( 3*320)+6,Y

.14c8	 99 c7 43	sta $43c7,y				STA SCREEN0+( 3*320)+7,Y

.14cb	 99 00 45	sta $4500,y				STA SCREEN0+( 4*320)+0,Y

.14ce	 99 01 45	sta $4501,y				STA SCREEN0+( 4*320)+1,Y

.14d1	 99 02 45	sta $4502,y				STA SCREEN0+( 4*320)+2,Y

.14d4	 99 03 45	sta $4503,y				STA SCREEN0+( 4*320)+3,Y

.14d7	 99 04 45	sta $4504,y				STA SCREEN0+( 4*320)+4,Y

.14da	 99 05 45	sta $4505,y				STA SCREEN0+( 4*320)+5,Y

.14dd	 99 06 45	sta $4506,y				STA SCREEN0+( 4*320)+6,Y

.14e0	 99 07 45	sta $4507,y				STA SCREEN0+( 4*320)+7,Y

.14e3	 99 40 46	sta $4640,y				STA SCREEN0+( 5*320)+0,Y

.14e6	 99 41 46	sta $4641,y				STA SCREEN0+( 5*320)+1,Y

.14e9	 99 42 46	sta $4642,y				STA SCREEN0+( 5*320)+2,Y

.14ec	 99 43 46	sta $4643,y				STA SCREEN0+( 5*320)+3,Y

.14ef	 99 44 46	sta $4644,y				STA SCREEN0+( 5*320)+4,Y

.14f2	 99 45 46	sta $4645,y				STA SCREEN0+( 5*320)+5,Y

.14f5	 99 46 46	sta $4646,y				STA SCREEN0+( 5*320)+6,Y

.14f8	 99 47 46	sta $4647,y				STA SCREEN0+( 5*320)+7,Y

.14fb	 99 80 47	sta $4780,y				STA SCREEN0+( 6*320)+0,Y

.14fe	 99 81 47	sta $4781,y				STA SCREEN0+( 6*320)+1,Y

.1501	 99 82 47	sta $4782,y				STA SCREEN0+( 6*320)+2,Y

.1504	 99 83 47	sta $4783,y				STA SCREEN0+( 6*320)+3,Y

.1507	 99 84 47	sta $4784,y				STA SCREEN0+( 6*320)+4,Y

.150a	 99 85 47	sta $4785,y				STA SCREEN0+( 6*320)+5,Y

.150d	 99 86 47	sta $4786,y				STA SCREEN0+( 6*320)+6,Y

.1510	 99 87 47	sta $4787,y				STA SCREEN0+( 6*320)+7,Y

.1513	 99 c0 48	sta $48c0,y				STA SCREEN0+( 7*320)+0,Y

.1516	 99 c1 48	sta $48c1,y				STA SCREEN0+( 7*320)+1,Y

.1519	 99 c2 48	sta $48c2,y				STA SCREEN0+( 7*320)+2,Y

.151c	 99 c3 48	sta $48c3,y				STA SCREEN0+( 7*320)+3,Y

.151f	 99 c4 48	sta $48c4,y				STA SCREEN0+( 7*320)+4,Y

.1522	 99 c5 48	sta $48c5,y				STA SCREEN0+( 7*320)+5,Y

.1525	 99 c6 48	sta $48c6,y				STA SCREEN0+( 7*320)+6,Y

.1528	 99 c7 48	sta $48c7,y				STA SCREEN0+( 7*320)+7,Y

.152b	 99 00 4a	sta $4a00,y				STA SCREEN0+( 8*320)+0,Y

.152e	 99 01 4a	sta $4a01,y				STA SCREEN0+( 8*320)+1,Y

.1531	 99 02 4a	sta $4a02,y				STA SCREEN0+( 8*320)+2,Y

.1534	 99 03 4a	sta $4a03,y				STA SCREEN0+( 8*320)+3,Y

.1537	 99 04 4a	sta $4a04,y				STA SCREEN0+( 8*320)+4,Y

.153a	 99 05 4a	sta $4a05,y				STA SCREEN0+( 8*320)+5,Y

.153d	 99 06 4a	sta $4a06,y				STA SCREEN0+( 8*320)+6,Y

.1540	 99 07 4a	sta $4a07,y				STA SCREEN0+( 8*320)+7,Y

.1543	 99 40 4b	sta $4b40,y				STA SCREEN0+( 9*320)+0,Y

.1546	 99 41 4b	sta $4b41,y				STA SCREEN0+( 9*320)+1,Y

.1549	 99 42 4b	sta $4b42,y				STA SCREEN0+( 9*320)+2,Y

.154c	 99 43 4b	sta $4b43,y				STA SCREEN0+( 9*320)+3,Y

.154f	 99 44 4b	sta $4b44,y				STA SCREEN0+( 9*320)+4,Y

.1552	 99 45 4b	sta $4b45,y				STA SCREEN0+( 9*320)+5,Y

.1555	 99 46 4b	sta $4b46,y				STA SCREEN0+( 9*320)+6,Y

.1558	 99 47 4b	sta $4b47,y				STA SCREEN0+( 9*320)+7,Y

.155b	 99 80 4c	sta $4c80,y				STA SCREEN0+( 10*320)+0,Y

.155e	 99 81 4c	sta $4c81,y				STA SCREEN0+( 10*320)+1,Y

.1561	 99 82 4c	sta $4c82,y				STA SCREEN0+( 10*320)+2,Y

.1564	 99 83 4c	sta $4c83,y				STA SCREEN0+( 10*320)+3,Y

.1567	 99 84 4c	sta $4c84,y				STA SCREEN0+( 10*320)+4,Y

.156a	 99 85 4c	sta $4c85,y				STA SCREEN0+( 10*320)+5,Y

.156d	 99 86 4c	sta $4c86,y				STA SCREEN0+( 10*320)+6,Y

.1570	 99 87 4c	sta $4c87,y				STA SCREEN0+( 10*320)+7,Y

.1573	 99 c0 4d	sta $4dc0,y				STA SCREEN0+( 11*320)+0,Y

.1576	 99 c1 4d	sta $4dc1,y				STA SCREEN0+( 11*320)+1,Y

.1579	 99 c2 4d	sta $4dc2,y				STA SCREEN0+( 11*320)+2,Y

.157c	 99 c3 4d	sta $4dc3,y				STA SCREEN0+( 11*320)+3,Y

.157f	 99 c4 4d	sta $4dc4,y				STA SCREEN0+( 11*320)+4,Y

.1582	 99 c5 4d	sta $4dc5,y				STA SCREEN0+( 11*320)+5,Y

.1585	 99 c6 4d	sta $4dc6,y				STA SCREEN0+( 11*320)+6,Y

.1588	 99 c7 4d	sta $4dc7,y				STA SCREEN0+( 11*320)+7,Y

.158b	 99 00 4f	sta $4f00,y				STA SCREEN0+( 12*320)+0,Y

.158e	 99 01 4f	sta $4f01,y				STA SCREEN0+( 12*320)+1,Y

.1591	 99 02 4f	sta $4f02,y				STA SCREEN0+( 12*320)+2,Y

.1594	 99 03 4f	sta $4f03,y				STA SCREEN0+( 12*320)+3,Y

.1597	 99 04 4f	sta $4f04,y				STA SCREEN0+( 12*320)+4,Y

.159a	 99 05 4f	sta $4f05,y				STA SCREEN0+( 12*320)+5,Y

.159d	 99 06 4f	sta $4f06,y				STA SCREEN0+( 12*320)+6,Y

.15a0	 99 07 4f	sta $4f07,y				STA SCREEN0+( 12*320)+7,Y

.15a3	 99 40 50	sta $5040,y				STA SCREEN0+( 13*320)+0,Y

.15a6	 99 41 50	sta $5041,y				STA SCREEN0+( 13*320)+1,Y

.15a9	 99 42 50	sta $5042,y				STA SCREEN0+( 13*320)+2,Y

.15ac	 99 43 50	sta $5043,y				STA SCREEN0+( 13*320)+3,Y

.15af	 99 44 50	sta $5044,y				STA SCREEN0+( 13*320)+4,Y

.15b2	 99 45 50	sta $5045,y				STA SCREEN0+( 13*320)+5,Y

.15b5	 99 46 50	sta $5046,y				STA SCREEN0+( 13*320)+6,Y

.15b8	 99 47 50	sta $5047,y				STA SCREEN0+( 13*320)+7,Y

.15bb	 99 80 51	sta $5180,y				STA SCREEN0+( 14*320)+0,Y

.15be	 99 81 51	sta $5181,y				STA SCREEN0+( 14*320)+1,Y

.15c1	 99 82 51	sta $5182,y				STA SCREEN0+( 14*320)+2,Y

.15c4	 99 83 51	sta $5183,y				STA SCREEN0+( 14*320)+3,Y

.15c7	 99 84 51	sta $5184,y				STA SCREEN0+( 14*320)+4,Y

.15ca	 99 85 51	sta $5185,y				STA SCREEN0+( 14*320)+5,Y

.15cd	 99 86 51	sta $5186,y				STA SCREEN0+( 14*320)+6,Y

.15d0	 99 87 51	sta $5187,y				STA SCREEN0+( 14*320)+7,Y

.15d3	 99 c0 52	sta $52c0,y				STA SCREEN0+( 15*320)+0,Y

.15d6	 99 c1 52	sta $52c1,y				STA SCREEN0+( 15*320)+1,Y

.15d9	 99 c2 52	sta $52c2,y				STA SCREEN0+( 15*320)+2,Y

.15dc	 99 c3 52	sta $52c3,y				STA SCREEN0+( 15*320)+3,Y

.15df	 99 c4 52	sta $52c4,y				STA SCREEN0+( 15*320)+4,Y

.15e2	 99 c5 52	sta $52c5,y				STA SCREEN0+( 15*320)+5,Y

.15e5	 99 c6 52	sta $52c6,y				STA SCREEN0+( 15*320)+6,Y

.15e8	 99 c7 52	sta $52c7,y				STA SCREEN0+( 15*320)+7,Y

.15eb	 ca		dex					DEX

.15ec	 f0 08		beq $15f6				BEQ 	CLSSCN0_END

.15ee	 98		tya						TYA

.15ef	 18		clc						CLC

.15f0	 69 08		adc #$08					ADC	#8

.15f2	 a8		tay						TAY

.15f3	 4c 69 14	jmp $1469					JMP		CLSSCN0_LP

.15f6	 60		rts		CLSSCN0_END	RTS

.15f7					clsscn1_lp
.15f7	 a9 a5		lda #$a5				LDA 	#$A5

.15f9	 99 00 60	sta $6000,y				STA SCREEN1+( 0*320)+0,Y

.15fc	 99 01 60	sta $6001,y				STA SCREEN1+( 0*320)+1,Y

.15ff	 99 02 60	sta $6002,y				STA SCREEN1+( 0*320)+2,Y

.1602	 99 03 60	sta $6003,y				STA SCREEN1+( 0*320)+3,Y

.1605	 99 04 60	sta $6004,y				STA SCREEN1+( 0*320)+4,Y

.1608	 99 05 60	sta $6005,y				STA SCREEN1+( 0*320)+5,Y

.160b	 99 06 60	sta $6006,y				STA SCREEN1+( 0*320)+6,Y

.160e	 99 07 60	sta $6007,y				STA SCREEN1+( 0*320)+7,Y

.1611	 99 40 61	sta $6140,y				STA SCREEN1+( 1*320)+0,Y

.1614	 99 41 61	sta $6141,y				STA SCREEN1+( 1*320)+1,Y

.1617	 99 42 61	sta $6142,y				STA SCREEN1+( 1*320)+2,Y

.161a	 99 43 61	sta $6143,y				STA SCREEN1+( 1*320)+3,Y

.161d	 99 44 61	sta $6144,y				STA SCREEN1+( 1*320)+4,Y

.1620	 99 45 61	sta $6145,y				STA SCREEN1+( 1*320)+5,Y

.1623	 99 46 61	sta $6146,y				STA SCREEN1+( 1*320)+6,Y

.1626	 99 47 61	sta $6147,y				STA SCREEN1+( 1*320)+7,Y

.1629	 99 80 62	sta $6280,y				STA SCREEN1+( 2*320)+0,Y

.162c	 99 81 62	sta $6281,y				STA SCREEN1+( 2*320)+1,Y

.162f	 99 82 62	sta $6282,y				STA SCREEN1+( 2*320)+2,Y

.1632	 99 83 62	sta $6283,y				STA SCREEN1+( 2*320)+3,Y

.1635	 99 84 62	sta $6284,y				STA SCREEN1+( 2*320)+4,Y

.1638	 99 85 62	sta $6285,y				STA SCREEN1+( 2*320)+5,Y

.163b	 99 86 62	sta $6286,y				STA SCREEN1+( 2*320)+6,Y

.163e	 99 87 62	sta $6287,y				STA SCREEN1+( 2*320)+7,Y

.1641	 99 c0 63	sta $63c0,y				STA SCREEN1+( 3*320)+0,Y

.1644	 99 c1 63	sta $63c1,y				STA SCREEN1+( 3*320)+1,Y

.1647	 99 c2 63	sta $63c2,y				STA SCREEN1+( 3*320)+2,Y

.164a	 99 c3 63	sta $63c3,y				STA SCREEN1+( 3*320)+3,Y

.164d	 99 c4 63	sta $63c4,y				STA SCREEN1+( 3*320)+4,Y

.1650	 99 c5 63	sta $63c5,y				STA SCREEN1+( 3*320)+5,Y

.1653	 99 c6 63	sta $63c6,y				STA SCREEN1+( 3*320)+6,Y

.1656	 99 c7 63	sta $63c7,y				STA SCREEN1+( 3*320)+7,Y

.1659	 99 00 65	sta $6500,y				STA SCREEN1+( 4*320)+0,Y

.165c	 99 01 65	sta $6501,y				STA SCREEN1+( 4*320)+1,Y

.165f	 99 02 65	sta $6502,y				STA SCREEN1+( 4*320)+2,Y

.1662	 99 03 65	sta $6503,y				STA SCREEN1+( 4*320)+3,Y

.1665	 99 04 65	sta $6504,y				STA SCREEN1+( 4*320)+4,Y

.1668	 99 05 65	sta $6505,y				STA SCREEN1+( 4*320)+5,Y

.166b	 99 06 65	sta $6506,y				STA SCREEN1+( 4*320)+6,Y

.166e	 99 07 65	sta $6507,y				STA SCREEN1+( 4*320)+7,Y

.1671	 99 40 66	sta $6640,y				STA SCREEN1+( 5*320)+0,Y

.1674	 99 41 66	sta $6641,y				STA SCREEN1+( 5*320)+1,Y

.1677	 99 42 66	sta $6642,y				STA SCREEN1+( 5*320)+2,Y

.167a	 99 43 66	sta $6643,y				STA SCREEN1+( 5*320)+3,Y

.167d	 99 44 66	sta $6644,y				STA SCREEN1+( 5*320)+4,Y

.1680	 99 45 66	sta $6645,y				STA SCREEN1+( 5*320)+5,Y

.1683	 99 46 66	sta $6646,y				STA SCREEN1+( 5*320)+6,Y

.1686	 99 47 66	sta $6647,y				STA SCREEN1+( 5*320)+7,Y

.1689	 99 80 67	sta $6780,y				STA SCREEN1+( 6*320)+0,Y

.168c	 99 81 67	sta $6781,y				STA SCREEN1+( 6*320)+1,Y

.168f	 99 82 67	sta $6782,y				STA SCREEN1+( 6*320)+2,Y

.1692	 99 83 67	sta $6783,y				STA SCREEN1+( 6*320)+3,Y

.1695	 99 84 67	sta $6784,y				STA SCREEN1+( 6*320)+4,Y

.1698	 99 85 67	sta $6785,y				STA SCREEN1+( 6*320)+5,Y

.169b	 99 86 67	sta $6786,y				STA SCREEN1+( 6*320)+6,Y

.169e	 99 87 67	sta $6787,y				STA SCREEN1+( 6*320)+7,Y

.16a1	 99 c0 68	sta $68c0,y				STA SCREEN1+( 7*320)+0,Y

.16a4	 99 c1 68	sta $68c1,y				STA SCREEN1+( 7*320)+1,Y

.16a7	 99 c2 68	sta $68c2,y				STA SCREEN1+( 7*320)+2,Y

.16aa	 99 c3 68	sta $68c3,y				STA SCREEN1+( 7*320)+3,Y

.16ad	 99 c4 68	sta $68c4,y				STA SCREEN1+( 7*320)+4,Y

.16b0	 99 c5 68	sta $68c5,y				STA SCREEN1+( 7*320)+5,Y

.16b3	 99 c6 68	sta $68c6,y				STA SCREEN1+( 7*320)+6,Y

.16b6	 99 c7 68	sta $68c7,y				STA SCREEN1+( 7*320)+7,Y

.16b9	 99 00 6a	sta $6a00,y				STA SCREEN1+( 8*320)+0,Y

.16bc	 99 01 6a	sta $6a01,y				STA SCREEN1+( 8*320)+1,Y

.16bf	 99 02 6a	sta $6a02,y				STA SCREEN1+( 8*320)+2,Y

.16c2	 99 03 6a	sta $6a03,y				STA SCREEN1+( 8*320)+3,Y

.16c5	 99 04 6a	sta $6a04,y				STA SCREEN1+( 8*320)+4,Y

.16c8	 99 05 6a	sta $6a05,y				STA SCREEN1+( 8*320)+5,Y

.16cb	 99 06 6a	sta $6a06,y				STA SCREEN1+( 8*320)+6,Y

.16ce	 99 07 6a	sta $6a07,y				STA SCREEN1+( 8*320)+7,Y

.16d1	 99 40 6b	sta $6b40,y				STA SCREEN1+( 9*320)+0,Y

.16d4	 99 41 6b	sta $6b41,y				STA SCREEN1+( 9*320)+1,Y

.16d7	 99 42 6b	sta $6b42,y				STA SCREEN1+( 9*320)+2,Y

.16da	 99 43 6b	sta $6b43,y				STA SCREEN1+( 9*320)+3,Y

.16dd	 99 44 6b	sta $6b44,y				STA SCREEN1+( 9*320)+4,Y

.16e0	 99 45 6b	sta $6b45,y				STA SCREEN1+( 9*320)+5,Y

.16e3	 99 46 6b	sta $6b46,y				STA SCREEN1+( 9*320)+6,Y

.16e6	 99 47 6b	sta $6b47,y				STA SCREEN1+( 9*320)+7,Y

.16e9	 99 80 6c	sta $6c80,y				STA SCREEN1+( 10*320)+0,Y

.16ec	 99 81 6c	sta $6c81,y				STA SCREEN1+( 10*320)+1,Y

.16ef	 99 82 6c	sta $6c82,y				STA SCREEN1+( 10*320)+2,Y

.16f2	 99 83 6c	sta $6c83,y				STA SCREEN1+( 10*320)+3,Y

.16f5	 99 84 6c	sta $6c84,y				STA SCREEN1+( 10*320)+4,Y

.16f8	 99 85 6c	sta $6c85,y				STA SCREEN1+( 10*320)+5,Y

.16fb	 99 86 6c	sta $6c86,y				STA SCREEN1+( 10*320)+6,Y

.16fe	 99 87 6c	sta $6c87,y				STA SCREEN1+( 10*320)+7,Y

.1701	 99 c0 6d	sta $6dc0,y				STA SCREEN1+( 11*320)+0,Y

.1704	 99 c1 6d	sta $6dc1,y				STA SCREEN1+( 11*320)+1,Y

.1707	 99 c2 6d	sta $6dc2,y				STA SCREEN1+( 11*320)+2,Y

.170a	 99 c3 6d	sta $6dc3,y				STA SCREEN1+( 11*320)+3,Y

.170d	 99 c4 6d	sta $6dc4,y				STA SCREEN1+( 11*320)+4,Y

.1710	 99 c5 6d	sta $6dc5,y				STA SCREEN1+( 11*320)+5,Y

.1713	 99 c6 6d	sta $6dc6,y				STA SCREEN1+( 11*320)+6,Y

.1716	 99 c7 6d	sta $6dc7,y				STA SCREEN1+( 11*320)+7,Y

.1719	 99 00 6f	sta $6f00,y				STA SCREEN1+( 12*320)+0,Y

.171c	 99 01 6f	sta $6f01,y				STA SCREEN1+( 12*320)+1,Y

.171f	 99 02 6f	sta $6f02,y				STA SCREEN1+( 12*320)+2,Y

.1722	 99 03 6f	sta $6f03,y				STA SCREEN1+( 12*320)+3,Y

.1725	 99 04 6f	sta $6f04,y				STA SCREEN1+( 12*320)+4,Y

.1728	 99 05 6f	sta $6f05,y				STA SCREEN1+( 12*320)+5,Y

.172b	 99 06 6f	sta $6f06,y				STA SCREEN1+( 12*320)+6,Y

.172e	 99 07 6f	sta $6f07,y				STA SCREEN1+( 12*320)+7,Y

.1731	 99 40 70	sta $7040,y				STA SCREEN1+( 13*320)+0,Y

.1734	 99 41 70	sta $7041,y				STA SCREEN1+( 13*320)+1,Y

.1737	 99 42 70	sta $7042,y				STA SCREEN1+( 13*320)+2,Y

.173a	 99 43 70	sta $7043,y				STA SCREEN1+( 13*320)+3,Y

.173d	 99 44 70	sta $7044,y				STA SCREEN1+( 13*320)+4,Y

.1740	 99 45 70	sta $7045,y				STA SCREEN1+( 13*320)+5,Y

.1743	 99 46 70	sta $7046,y				STA SCREEN1+( 13*320)+6,Y

.1746	 99 47 70	sta $7047,y				STA SCREEN1+( 13*320)+7,Y

.1749	 99 80 71	sta $7180,y				STA SCREEN1+( 14*320)+0,Y

.174c	 99 81 71	sta $7181,y				STA SCREEN1+( 14*320)+1,Y

.174f	 99 82 71	sta $7182,y				STA SCREEN1+( 14*320)+2,Y

.1752	 99 83 71	sta $7183,y				STA SCREEN1+( 14*320)+3,Y

.1755	 99 84 71	sta $7184,y				STA SCREEN1+( 14*320)+4,Y

.1758	 99 85 71	sta $7185,y				STA SCREEN1+( 14*320)+5,Y

.175b	 99 86 71	sta $7186,y				STA SCREEN1+( 14*320)+6,Y

.175e	 99 87 71	sta $7187,y				STA SCREEN1+( 14*320)+7,Y

.1761	 99 c0 72	sta $72c0,y				STA SCREEN1+( 15*320)+0,Y

.1764	 99 c1 72	sta $72c1,y				STA SCREEN1+( 15*320)+1,Y

.1767	 99 c2 72	sta $72c2,y				STA SCREEN1+( 15*320)+2,Y

.176a	 99 c3 72	sta $72c3,y				STA SCREEN1+( 15*320)+3,Y

.176d	 99 c4 72	sta $72c4,y				STA SCREEN1+( 15*320)+4,Y

.1770	 99 c5 72	sta $72c5,y				STA SCREEN1+( 15*320)+5,Y

.1773	 99 c6 72	sta $72c6,y				STA SCREEN1+( 15*320)+6,Y

.1776	 99 c7 72	sta $72c7,y				STA SCREEN1+( 15*320)+7,Y

.1779	 ca		dex					DEX

.177a	 f0 08		beq $1784				BEQ 	CLSSCN1_END

.177c	 98		tya						TYA

.177d	 18		clc						CLC

.177e	 69 08		adc #$08					ADC  #8

.1780	 a8		tay						TAY

.1781	 4c f7 15	jmp $15f7					JMP 	CLSSCN1_LP

.1784	 60		rts		CLSSCN1_END	RTS

.1785					read_joystick_keyboard
.1785	 ad 00 dc	lda $dc00	        LDA 	$DC00    ;CIA1: Data Port Register A into A and X

.1788	 4a		lsr		MVMENT	LSR

.1789	 b0 07		bcs $1792			BCS 	MVE_DWN

.178b	 48		pha					PHA

.178c	 a9 01		lda #$01				LDA 	#$01 ; FORWARD

.178e	 20 75 10	jsr $1075				JSR 	FORWARD_BACK

.1791	 68		pla					PLA

.1792	 4a		lsr		MVE_DWN LSR

.1793	 b0 07		bcs $179c			BCS 	MVE_LFT

.1795	 48		pha					PHA

.1796	 a9 00		lda #$00				LDA 	#$00	; BACKWARD

.1798	 20 75 10	jsr $1075				JSR 	FORWARD_BACK

.179b	 68		pla					PLA

.179c	 4a		lsr		MVE_LFT LSR

.179d	 b0 11		bcs $17b0			BCS 	MVE_RGT

.179f	 a8		tay					TAY

.17a0	 a5 2c		lda $2c					LDA 	ROT_LO	; LEFT

.17a2	 18		clc					CLC 

.17a3	 65 ac		adc $ac					ADC 	ROT_SPD

.17a5	 85 2c		sta $2c					STA 	ROT_LO

.17a7	 a5 2d		lda $2d					LDA 	ROT_HI

.17a9	 69 00		adc #$00				ADC 	#$00

.17ab	 29 03		and #$03				AND 	#$03

.17ad	 85 2d		sta $2d					STA 	ROT_HI

.17af	 98		tya					TYA

.17b0	 4a		lsr		MVE_RGT LSR

.17b1	 b0 11		bcs $17c4			BCS 	MVE_FRE

.17b3	 a8		tay					TAY

.17b4	 a5 2c		lda $2c					LDA 	ROT_LO	; RIGHT

.17b6	 38		sec					SEC 

.17b7	 e5 ac		sbc $ac					SBC 	ROT_SPD

.17b9	 85 2c		sta $2c					STA 	ROT_LO

.17bb	 a5 2d		lda $2d					LDA 	ROT_HI

.17bd	 e9 00		sbc #$00				SBC 	#$00

.17bf	 29 03		and #$03				AND 	#$03

.17c1	 85 2d		sta $2d					STA 	ROT_HI

.17c3	 98		tya					TYA

.17c4	 4a		lsr		MVE_FRE LSR

.17c5	 b0 0b		bcs $17d2			BCS 	MVE_EXT

.17c7	 ad 2d 1a	lda $1a2d				lda 	OBJECTS_TO_DRAW+1

.17ca	 18		clc					clc

.17cb	 69 01		adc #$01				adc 	#1

.17cd	 29 3f		and #$3f				and 	#63

.17cf	 8d 2d 1a	sta $1a2d				sta 	OBJECTS_TO_DRAW+1

.17d2	 60		rts		MVE_EXT	RTS

.17d3	 b9 5c 18	lda $185c,y	HEXCHAR		LDA		HEX0,Y

.17d6	 9d cd ab	sta $abcd,x	HEX_NUMBER0	STA		$ABCD,X

.17d9	 b9 6c 18	lda $186c,y				LDA		HEX1,Y

.17dc	 9d cd ab	sta $abcd,x	HEX_NUMBER1	STA		$ABCD,X

.17df	 b9 7c 18	lda $187c,y				LDA		HEX2,Y

.17e2	 9d cd ab	sta $abcd,x	HEX_NUMBER2	STA		$ABCD,X

.17e5	 b9 8c 18	lda $188c,y				LDA		HEX3,Y

.17e8	 9d cd ab	sta $abcd,x	HEX_NUMBER3	STA		$ABCD,X

.17eb	 b9 9c 18	lda $189c,y				LDA		HEX4,Y

.17ee	 9d cd ab	sta $abcd,x	HEX_NUMBER4	STA		$ABCD,X

.17f1	 60		rts					RTS

.17f2	 84 20		sty $20		HEX16		STY		REGY	; Y = YPOS / A = HI / X = LO

.17f4	 86 0f		stx $0f					STX		REGX		

.17f6	 a2 00		ldx #$00				LDX		#0

.17f8	 20 05 18	jsr $1805				JSR		HEX8

.17fb	 a5 0f		lda $0f					LDA		REGX

.17fd	 a4 20		ldy $20					LDY		REGY

.17ff	 a2 10		ldx #$10				LDX		#16

.1801	 20 05 18	jsr $1805				JSR		HEX8

.1804	 60		rts					RTS

.1805	 18		clc		HEX8		CLC		; A = NUM / Y = YPOS / X = XPOS

.1806	 85 0e		sta $0e					STA		REGA

.1808	 b9 00 34	lda $3400,y				LDA		VER_POS_LO+0,Y

.180b	 8d d7 17	sta $17d7				STA		HEX_NUMBER0+1

.180e	 b9 00 32	lda $3200,y				LDA 	VER_POS_SCN0_HI+0,Y

.1811	 8d d8 17	sta $17d8				STA		HEX_NUMBER0+2

.1814	 b9 01 34	lda $3401,y				LDA		VER_POS_LO+1,Y

.1817	 8d dd 17	sta $17dd				STA		HEX_NUMBER1+1

.181a	 b9 01 32	lda $3201,y				LDA 	VER_POS_SCN0_HI+1,Y

.181d	 8d de 17	sta $17de				STA		HEX_NUMBER1+2

.1820	 b9 02 34	lda $3402,y				LDA		VER_POS_LO+2,Y

.1823	 8d e3 17	sta $17e3				STA		HEX_NUMBER2+1			

.1826	 b9 02 32	lda $3202,y				LDA 	VER_POS_SCN0_HI+2,Y

.1829	 8d e4 17	sta $17e4				STA		HEX_NUMBER2+2

.182c	 b9 03 34	lda $3403,y				LDA		VER_POS_LO+3,Y

.182f	 8d e9 17	sta $17e9				STA		HEX_NUMBER3+1

.1832	 b9 03 32	lda $3203,y				LDA 	VER_POS_SCN0_HI+3,Y

.1835	 8d ea 17	sta $17ea				STA		HEX_NUMBER3+2

.1838	 b9 04 34	lda $3404,y				LDA		VER_POS_LO+4,Y

.183b	 8d ef 17	sta $17ef				STA		HEX_NUMBER4+1

.183e	 b9 04 32	lda $3204,y				LDA 	VER_POS_SCN0_HI+4,Y

.1841	 8d f0 17	sta $17f0				STA		HEX_NUMBER4+2

.1844	 a5 0e		lda $0e					LDA		REGA

.1846	 4a		lsr					LSR

.1847	 4a		lsr					LSR

.1848	 4a		lsr					LSR

.1849	 4a		lsr					LSR

.184a	 a8		tay					TAY

.184b	 20 d3 17	jsr $17d3				JSR		HEXCHAR

.184e	 8a		txa					TXA

.184f	 18		clc					CLC

.1850	 69 08		adc #$08				ADC 	#8

.1852	 aa		tax					TAX

.1853	 a5 0e		lda $0e					LDA		REGA

.1855	 29 0f		and #$0f				AND		#15

.1857	 a8		tay					TAY

.1858	 20 d3 17	jsr $17d3				JSR		HEXCHAR

.185b	 60		rts					RTS

=0100					X_ROT_TAB_LO = $0100 ; UNKNOWN_POINT_TAB_6

=0140					X_ROT_TAB_HI = $0140

=0180					Y_ROT_TAB_LO = $0180

=02c0					Y_ROT_TAB_HI = $02C0

=0340					Z_ROT_TAB_LO = $0340 

=0380					Z_ROT_TAB_HI = $0380

=0600					H_PERS_FP_LO = $0600

=03c0					H_PERS_FP_HI = $03C0

=0700					V_PERS_FP_LO = $0700

=0640					V_PERS_FP_HI = $0640

=0680					PERS_HOR_TAB = $0680

=06c0					PERS_VER_TAB = $06C0

=0740					POINT_CLASSIFICATION = $0740 ; 00 = point is onscreen - 01 = point needs off left/right - 02 = point is off top/bottom - 03 = point is off left/right + top/bottom - 80 / minus = point is behind

=0780					OBJ_X_LSB = $0780

=07c0					OBJ_Y_LSB = $07C0

=0300					OBJ_Z_LSB = $0300


>185c	 80 a2 80 80 88 80 80 80 	HEX0	.BYTE %10000000,%10100010,%10000000,%10000000,%10001000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000010,%10000000,%10000000 

>1864	 80 80 80 80 80 82 80 80 
>186c	 88 82 a8 a8 88 8a 8a a8 	HEX1	.BYTE %10001000,%10000010,%10101000,%10101000,%10001000,%10001010,%10001010,%10101000,%10001000,%10001000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010 

>1874	 88 88 88 88 8a 88 8a 8a 
>187c	 88 a2 80 80 80 80 80 a8 	HEX2	.BYTE %10001000,%10100010,%10000000,%10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10000000,%10000010,%10001010,%10001000,%10000000,%10000000

>1884	 80 80 80 82 8a 88 80 80 
>188c	 88 a2 8a a8 a8 a8 88 a8 	HEX3	.BYTE %10001000,%10100010,%10001010,%10101000,%10101000,%10101000,%10001000,%10101000,%10001000,%10101000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010

>1894	 88 a8 88 88 8a 88 8a 8a 
>189c	 80 80 80 80 a8 80 80 a8 	HEX4	.BYTE %10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10101000,%10000000,%10000000,%10001000,%10000000,%10100000,%10000010,%10000000,%10001010

>18a4	 80 80 88 80 a0 82 80 8a 

.18ac					obj_x_msb

>18ac	 00 14 28 3c 50 64 78 8c 	.BYTE 00,20,40,60,80,100,120,140,160,180,200,220

>18b4	 a0 b4 c8 dc 

.18ec					obj_y_msb
.192c					obj_z_msb

>192c	 00 14 28 3c 50 64 78 8c 	.BYTE 00,20,40,60,80,100,120,140,160,180,200,220

>1934	 a0 b4 c8 dc 

.196c					obj_x_hsb
.19ac					obj_y_hsb
.19ec					obj_z_hsb
.1a2c					objects_to_draw

>1a2c	 00                       			.BYTE 00

>1a2d	 01                       			.BYTE 01 ; object being drawn

>1a2e	 02 03 04 05 06 07        			.BYTE 02,03,04,05,06,07

>1a34	 08 09 0a 0b 0c 0d 0e 0f  	        .BYTE 08,09,10,11,12,13,14,15

>1a3c	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a44	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a4c	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a54	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a5c	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a64	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a6c	 0f                       	OBJ_01	.BYTE $0F

>1a6d	 f8 00 10                 			.BYTE $F8,$00,$10

>1a70	 fa 0c 0c                 			.BYTE $FA,$0C,$0C

>1a73	 fa 0c 00                 			.BYTE $FA,$0C,$00

>1a76	 f9 06 fd                 			.BYTE $F9,$06,$FD

>1a79	 f9 04 f4                 			.BYTE $F9,$04,$F4

>1a7c	 fc 04 f0                 			.BYTE $FC,$04,$F0

>1a7f	 fc 00 f0                 			.BYTE $FC,$00,$F0

>1a82	 f9 00 f4                 	        .BYTE $F9,$00,$F4

>1a85	 08 00 10                 			.BYTE $08,$00,$10

>1a88	 06 0c 0c                 			.BYTE $06,$0C,$0C

>1a8b	 06 0c 00                 			.BYTE $06,$0C,$00

>1a8e	 07 06 fd                 			.BYTE $07,$06,$FD

>1a91	 07 04 f4                 			.BYTE $07,$04,$F4

>1a94	 04 04 f0                 			.BYTE $04,$04,$F0

>1a97	 04 00 f0                 			.BYTE $04,$00,$F0

>1a9a	 07 00 f4                 	        .BYTE $07,$00,$F4

>1a9d	 17                       			.BYTE $17

>1a9e	 01 12 23 34 45 56 67 70 			.BYTE $01,$12,$23,$34,$45,$56,$67,$70,$89,$9A,$AB,$BC,$CD,$DE,$EF,$F8,$47,$CF,$08,$19,$2A,$3B,$5D,$6E

>1aa6	 89 9a ab bc cd de ef f8 
>1aae	 47 cf 08 19 2a 3b 5d 6e 
>1ab6	 0f                       	OBJ_02	.BYTE $0F

>1ab7	 f8 04 18                 			.BYTE $F8,$04,$18

>1aba	 08 04 18                 	        .BYTE $08,$04,$18

>1abd	 00 04 e8                 			.BYTE $00,$04,$E8

>1ac0	 00 0c 18                 			.BYTE $00,$0C,$18

>1ac3	 e2 04 18                 			.BYTE $E2,$04,$18

>1ac6	 1e 04 18                 			.BYTE $1E,$04,$18

>1ac9	 fc 04 00                 			.BYTE $FC,$04,$00

>1acc	 04 04 00                 			.BYTE $04,$04,$00

>1acf	 00 14 18                 			.BYTE $00,$14,$18

>1ad2	 00 0a 0c                 	        .BYTE $00,$0A,$0C

>1ad5	 f2 04 10                 			.BYTE $F2,$04,$10

>1ad8	 f2 00 10                 			.BYTE $F2,$00,$10

>1adb	 0e 04 10                 			.BYTE $0E,$04,$10

>1ade	 0e 00 10                 			.BYTE $0E,$00,$10

>1ae1	 00 04 f0                 			.BYTE $00,$04,$F0

>1ae4	 00 00 f0                 			.BYTE $00,$00,$F0

>1ae7	 0c                       			.BYTE $0C

>1ae8	 20 23 21 13 03 45 46 57 			.BYTE $20,$23,$21,$13,$03,$45,$46,$57,$38,$89,$AB,$CD,$EF

>1af0	 38 89 ab cd ef 
>1af5	 07                       	OBJ_03	.BYTE $07

>1af6	 00 00 00                 			.BYTE $00,$00,$00

>1af9	 ec 07 00                 			.BYTE $EC,$07,$00

>1afc	 f6 07 11                 			.BYTE $F6,$07,$11

>1aff	 0a 07 11                 			.BYTE $0A,$07,$11

>1b02	 14 07 00                 	        .BYTE $14,$07,$00

>1b05	 0a 07 ef                 			.BYTE $0A,$07,$EF

>1b08	 f6 07 ef                 			.BYTE $F6,$07,$EF

>1b0b	 00 10 00                 			.BYTE $00,$10,$00

>1b0e	 11                       			.BYTE $11

>1b0f	 01 02 03 04 05 06 71 72 			.BYTE $01,$02,$03,$04,$05,$06,$71,$72,$73,$74,$75,$76,$12,$23,$34,$45,$56,$61

>1b17	 73 74 75 76 12 23 34 45 
>1b1f	 56 61 
>1b21	 05                       	OBJ_04	.BYTE $05

>1b22	 f4 00 10                 	        .BYTE $F4,$00,$10

>1b25	 00 00 f0                 			.BYTE $00,$00,$F0

>1b28	 0c 00 10                 			.BYTE $0C,$00,$10

>1b2b	 f4 0a 10                 			.BYTE $F4,$0A,$10

>1b2e	 00 0a f0                 			.BYTE $00,$0A,$F0

>1b31	 0c 0a 10                 			.BYTE $0C,$0A,$10

>1b34	 08                       			.BYTE $08

>1b35	 01 12 20 34 45 53 03 14 			.BYTE $01,$12,$20,$34,$45,$53,$03,$14,$25

>1b3d	 25 
>1b3e	 05                       	OBJ_05	.BYTE $05

>1b3f	 fb 00 ff                 			.BYTE $FB,$00,$FF

>1b42	 05 00 ff                 			.BYTE $05,$00,$FF

>1b45	 00 0c ff                 			.BYTE $00,$0C,$FF

>1b48	 fb 00 01                 			.BYTE $FB,$00,$01

>1b4b	 05 00 01                 			.BYTE $05,$00,$01

>1b4e	 00 0c 01                 			.BYTE $00,$0C,$01

>1b51	 08                       			.BYTE $08

>1b52	 01 12 20 34 45 53 03 14 			.BYTE $01,$12,$20,$34,$45,$53,$03,$14,$25

>1b5a	 25 
>1b5b	 0f                       	OBJ_06	.BYTE $0F

>1b5c	 f0 00 10                 			.BYTE $F0,$00,$10

>1b5f	 10 00 10                 	        .BYTE $10,$00,$10

>1b62	 00 00 ec                 			.BYTE $00,$00,$EC

>1b65	 fc 00 04                 			.BYTE $FC,$00,$04

>1b68	 04 00 04                 			.BYTE $04,$00,$04

>1b6b	 00 00 fc                 			.BYTE $00,$00,$FC

>1b6e	 fd 04 03                 			.BYTE $FD,$04,$03

>1b71	 03 04 03                 			.BYTE $03,$04,$03

>1b74	 00 04 fd                 			.BYTE $00,$04,$FD

>1b77	 fe 14 02                 	        .BYTE $FE,$14,$02

>1b7a	 02 14 02                 			.BYTE $02,$14,$02

>1b7d	 00 14 fe                 			.BYTE $00,$14,$FE

>1b80	 ff 04 01                 			.BYTE $FF,$04,$01

>1b83	 01 04 01                 			.BYTE $01,$04,$01

>1b86	 00 04 ff                 			.BYTE $00,$04,$FF

>1b89	 00 34 00                 			.BYTE $00,$34,$00

>1b8c	 14                       			.BYTE $14

>1b8d	 f6 f7 f8 90 a1 b2 06 17 			.BYTE $F6,$F7,$F8,$90,$A1,$B2,$06,$17,$28,$C3,$D4,$E5,$34,$45,$53,$67,$78,$86,$CD,$DE,$EC

>1b95	 28 c3 d4 e5 34 45 53 67 
>1b9d	 78 86 cd de ec 
>1ba2	 07                       	OBJ_07	.BYTE $07

>1ba3	 f8 f8 f8                 			.BYTE $F8,$F8,$F8

>1ba6	 08 f8 f8                 			.BYTE $08,$F8,$F8

>1ba9	 08 f8 08                 			.BYTE $08,$F8,$08

>1bac	 f8 f8 08                 			.BYTE $F8,$F8,$08

>1baf	 f8 08 f8                 			.BYTE $F8,$08,$F8

>1bb2	 08 08 f8                 			.BYTE $08,$08,$F8

>1bb5	 08 08 08                 			.BYTE $08,$08,$08

>1bb8	 f8 08 08                 			.BYTE $F8,$08,$08

>1bbb	 0b                       			.BYTE $0B

>1bbc	 01 12 23 30 04 15 26 37 			.BYTE $01,$12,$23,$30,$04,$15,$26,$37,$45,$56,$67,$74

>1bc4	 45 56 67 74 
>1bc8	 09                       	OBJ_08	.BYTE $09

>1bc9	 fc 07 04                 			.BYTE $FC,$07,$04

>1bcc	 04 07 04                 			.BYTE $04,$07,$04

>1bcf	 00 07 fc                 	        .BYTE $00,$07,$FC

>1bd2	 00 0e 00                 			.BYTE $00,$0E,$00

>1bd5	 ff 07 01                 			.BYTE $FF,$07,$01

>1bd8	 01 07 01                 			.BYTE $01,$07,$01

>1bdb	 00 07 ff                 			.BYTE $00,$07,$FF

>1bde	 fe 00 02                 			.BYTE $FE,$00,$02

>1be1	 02 00 02                 			.BYTE $02,$00,$02

>1be4	 00 00 fe                 			.BYTE $00,$00,$FE

>1be7	 0e                       	        .BYTE $0E

>1be8	 01 12 20 03 13 23 45 56 			.BYTE $01,$12,$20,$03,$13,$23,$45,$56,$64,$78,$89,$97,$47,$58,$69,$0F,$F9

>1bf0	 64 78 89 97 47 58 69 0f 
>1bf8	 f9 
>1bf9	 05                       	OBJ_09  .BYTE $05

>1bfa	 8b 00 8f                 	        .BYTE $8B,$00,$8F

>1bfd	 75 00 8f                 	        .BYTE $75,$00,$8F

>1c00	 00 0c 8f                 	        .BYTE $00,$0C,$8F

>1c03	 8b 00 71                 	        .BYTE $8B,$00,$71

>1c06	 75 00 71                 	        .BYTE $75,$00,$71

>1c09	 00 0c 71                 	        .BYTE $00,$0C,$71

>1c0c	 08                       	        .BYTE $08

>1c0d	 01 12 20 34 45 53 03 14 	        .BYTE $01,$12,$20, $34,$45,$53, $03,$14,$25

>1c15	 25 
>1c16	 05                       	OBJ_10  .BYTE $05

>1c17	 f0 00 20                 			.BYTE $F0,$00,$20

>1c1a	 10 00 20                 			.BYTE $10,$00,$20

>1c1d	 fd 02 20                 			.BYTE $FD,$02,$20

>1c20	 03 02 20                 			.BYTE $03,$02,$20

>1c23	 00 0c 20                 			.BYTE $00,$0C,$20

>1c26	 00 00 e1                 			.BYTE $00,$00,$E1

>1c29	 09                       			.BYTE $09

>1c2a	 01 13 34 42 20 05 15 25 			.BYTE $01,$13,$34,$42,$20,$05,$15,$25,$35,$45

>1c32	 35 45 
>1c34	 07                       	OBJ_11	.BYTE $07

>1c35	 f8 f8 f8                 			.BYTE $F8,$F8,$F8

>1c38	 08 f8 f8                 			.BYTE $08,$F8,$F8

>1c3b	 08 f8 08                 			.BYTE $08,$F8,$08

>1c3e	 f8 f8 08                 			.BYTE $F8,$F8,$08

>1c41	 f8 08 f8                 			.BYTE $F8,$08,$F8

>1c44	 08 08 f8                 			.BYTE $08,$08,$F8

>1c47	 08 08 08                 			.BYTE $08,$08,$08

>1c4a	 f8 08 08                 			.BYTE $F8,$08,$08

>1c4d	 0b                       			.BYTE $0B

>1c4e	 01 12 23 30 04 15 26 37 			.BYTE $01,$12,$23,$30,$04,$15,$26,$37,$45,$56,$67,$74,$09,$FC

>1c56	 45 56 67 74 09 fc 
>1c5c	 07                       	OBJ_12	.BYTE $07

>1c5d	 ff 00 fc                 			.BYTE $FF,$00,$FC

>1c60	 ff 00 04                 			.BYTE $FF,$00,$04

>1c63	 ff 0c 02                 			.BYTE $FF,$0C,$02

>1c66	 ff 0c fe                 			.BYTE $FF,$0C,$FE

>1c69	 01 00 fc                 			.BYTE $01,$00,$FC

>1c6c	 01 00 04                 			.BYTE $01,$00,$04

>1c6f	 01 0c 02                 			.BYTE $01,$0C,$02

>1c72	 01 0c fe                 			.BYTE $01,$0C,$FE

>1c75	 0b                       			.BYTE $0B

>1c76	 01 12 23 30 45 56 67 74 			.BYTE $01,$12,$23,$30,$45,$56,$67,$74,$04,$15,$26,$37

>1c7e	 04 15 26 37 
>1c82	 09                       	OBJ_13	.BYTE $09

>1c83	 04 00 ff                 			.BYTE $04,$00,$FF

>1c86	 fc 00 ff                 			.BYTE $FC,$00,$FF

>1c89	 fa 08 ff                 			.BYTE $FA,$08,$FF

>1c8c	 00 0c ff                 			.BYTE $00,$0C,$FF

>1c8f	 06 08 ff                 			.BYTE $06,$08,$FF

>1c92	 04 00 01                 			.BYTE $04,$00,$01

>1c95	 fc 00 01                 			.BYTE $FC,$00,$01

>1c98	 fa 08 01                 			.BYTE $FA,$08,$01

>1c9b	 00 0c 01                 			.BYTE $00,$0C,$01

>1c9e	 06 08 01                 			.BYTE $06,$08,$01

>1ca1	 0e                       			.BYTE $0E

>1ca2	 01 12 23 34 40 56 67 78 			.BYTE $01,$12,$23,$34,$40,$56,$67,$78,$89,$95,$05,$16,$27,$38,$49

>1caa	 89 95 05 16 27 38 49 

.1cb1					obj_14

>1cb1	 09                       			.BYTE $09

>1cb2	 fd 00 ff                 			.BYTE $FD,$00,$FF

>1cb5	 03 00 ff                 			.BYTE $03,$00,$FF

>1cb8	 03 0a ff                 			.BYTE $03,$0A,$FF

>1cbb	 00 0c ff                 			.BYTE $00,$0C,$FF

>1cbe	 fd 0a ff                 			.BYTE $FD,$0A,$FF

>1cc1	 fd 00 01                 			.BYTE $FD,$00,$01

>1cc4	 03 00 01                 			.BYTE $03,$00,$01

>1cc7	 03 0a 01                 			.BYTE $03,$0A,$01

>1cca	 00 0c 01                 			.BYTE $00,$0C,$01

>1ccd	 fd 0a 01                 			.BYTE $FD,$0A,$01

>1cd0	 0e                       			.BYTE $0E

>1cd1	 01 12 23 34 40 56 67 78 			.BYTE $01,$12,$23,$34,$40,$56,$67,$78,$89,$95,$05,$16,$27,$38,$49

>1cd9	 89 95 05 16 27 38 49 
>1ce0	 07                       	OBJ_15	.BYTE $07

>1ce1	 fe 00 ff                 			.BYTE $FE,$00,$FF

>1ce4	 02 00 ff                 			.BYTE $02,$00,$FF

>1ce7	 04 0c ff                 			.BYTE $04,$0C,$FF

>1cea	 fc 0c ff                 			.BYTE $FC,$0C,$FF

>1ced	 fe 00 01                 			.BYTE $FE,$00,$01

>1cf0	 02 00 01                 			.BYTE $02,$00,$01

>1cf3	 04 0c 01                 			.BYTE $04,$0C,$01

>1cf6	 fc 0c 01                 			.BYTE $FC,$0C,$01

>1cf9	 0b                       			.BYTE $0B

>1cfa	 01 12 23 30 45 56 67 74 			.BYTE $01,$12,$23,$30,$45,$56,$67,$74,$04,$15,$26,$37

>1d02	 04 15 26 37 
>1d06	 0b                       	OBJ_16	.BYTE $0B

>1d07	 02 00 ff                 			.BYTE $02,$00,$FF

>1d0a	 04 06 ff                 			.BYTE $04,$06,$FF

>1d0d	 02 0c ff                 			.BYTE $02,$0C,$FF

>1d10	 fe 0c ff                 			.BYTE $FE,$0C,$FF

>1d13	 fc 06 ff                 			.BYTE $FC,$06,$FF

>1d16	 fe 00 ff                 			.BYTE $FE,$00,$FF

>1d19	 02 00 01                 			.BYTE $02,$00,$01

>1d1c	 04 06 01                 			.BYTE $04,$06,$01

>1d1f	 02 0c 01                 			.BYTE $02,$0C,$01

>1d22	 fe 0c 01                 			.BYTE $FE,$0C,$01

>1d25	 fc 06 01                 			.BYTE $FC,$06,$01

>1d28	 fe 00 01                 			.BYTE $FE,$00,$01

>1d2b	 11                       			.BYTE $11

>1d2c	 01 12 23 34 45 50 67 78 			.BYTE $01,$12,$23,$34,$45,$50,$67,$78,$89,$9A,$AB,$B6,$06,$17,$28,$39,$4A,$5B

>1d34	 89 9a ab b6 06 17 28 39 
>1d3c	 4a 5b 
>1d3e	 0b                       	OBJ_17	.BYTE $0B

>1d3f	 03 00 ff                 			.BYTE $03,$00,$FF

>1d42	 03 08 ff                 			.BYTE $03,$08,$FF

>1d45	 01 0c ff                 			.BYTE $01,$0C,$FF

>1d48	 ff 0c ff                 			.BYTE $FF,$0C,$FF

>1d4b	 fd 08 ff                 			.BYTE $FD,$08,$FF

>1d4e	 fd 00 ff                 			.BYTE $FD,$00,$FF

>1d51	 03 00 01                 			.BYTE $03,$00,$01

>1d54	 03 08 01                 			.BYTE $03,$08,$01

>1d57	 01 0c 01                 			.BYTE $01,$0C,$01

>1d5a	 ff 0c 01                 			.BYTE $FF,$0C,$01

>1d5d	 fd 08 01                 			.BYTE $FD,$08,$01

>1d60	 fd 00 01                 			.BYTE $FD,$00,$01

>1d63	 11                       			.BYTE $11

>1d64	 01 12 23 34 45 50 67 78 			.BYTE $01,$12,$23,$34,$45,$50,$67,$78,$89,$9A,$AB,$B6,$06,$17,$28,$39,$4A,$5B

>1d6c	 89 9a ab b6 06 17 28 39 
>1d74	 4a 5b 
>1d76	 0b                       	OBJ_18	.BYTE $0B

>1d77	 f9 00 f3                 			.BYTE $F9,$00,$F3

>1d7a	 07 00 f3                 			.BYTE $07,$00,$F3

>1d7d	 07 00 0d                 			.BYTE $07,$00,$0D

>1d80	 f9 00 0d                 			.BYTE $F9,$00,$0D

>1d83	 f9 06 f3                 			.BYTE $F9,$06,$F3

>1d86	 07 06 f3                 			.BYTE $07,$06,$F3

>1d89	 07 06 0d                 			.BYTE $07,$06,$0D

>1d8c	 f9 06 0d                 			.BYTE $F9,$06,$0D

>1d8f	 f6 06 f0                 			.BYTE $F6,$06,$F0

>1d92	 0a 06 f0                 			.BYTE $0A,$06,$F0

>1d95	 0a 06 10                 			.BYTE $0A,$06,$10

>1d98	 f6 06 10                 			.BYTE $F6,$06,$10

>1d9b	 07                       			.BYTE $07

>1d9c	 04 15 26 37 89 9a ab b8  			.BYTE $04,$15,$26,$37,$89,$9A,$AB,$B8

>1da4	 0b                       	OBJ_19	.BYTE $0B

>1da5	 fe 00 fe                 			.BYTE $FE,$00,$FE

>1da8	 fe 00 02                 			.BYTE $FE,$00,$02

>1dab	 02 00 02                 			.BYTE $02,$00,$02

>1dae	 02 00 fe                 			.BYTE $02,$00,$FE

>1db1	 fe 04 fe                 			.BYTE $FE,$04,$FE

>1db4	 fe 04 02                 			.BYTE $FE,$04,$02

>1db7	 02 04 02                 			.BYTE $02,$04,$02

>1dba	 02 04 fe                 			.BYTE $02,$04,$FE

>1dbd	 02 06 02                 			.BYTE $02,$06,$02

>1dc0	 02 06 fe                 			.BYTE $02,$06,$FE

>1dc3	 02 07 02                 			.BYTE $02,$07,$02

>1dc6	 02 07 fe                 			.BYTE $02,$07,$FE

>1dc9	 09                       			.BYTE $09

>1dca	 04 15 2a 3b 45 56 67 74 			.BYTE $04,$15,$2A,$3B,$45,$56,$67,$74,$89,$AB

>1dd2	 89 ab 
>1dd4	 0d                       	OBJ_20	.BYTE $0D

>1dd5	 f6 00 fb                 			.BYTE $F6,$00,$FB

>1dd8	 f6 00 05                 			.BYTE $F6,$00,$05

>1ddb	 0a 00 05                 			.BYTE $0A,$00,$05

>1dde	 0a 00 fb                 			.BYTE $0A,$00,$FB

>1de1	 f6 02 fb                 			.BYTE $F6,$02,$FB

>1de4	 f6 02 05                 			.BYTE $F6,$02,$05

>1de7	 0a 02 05                 			.BYTE $0A,$02,$05

>1dea	 0a 02 fb                 			.BYTE $0A,$02,$FB

>1ded	 f6 04 fb                 			.BYTE $F6,$04,$FB

>1df0	 f6 04 05                 			.BYTE $F6,$04,$05

>1df3	 0a 04 05                 			.BYTE $0A,$04,$05

>1df6	 0a 04 fb                 			.BYTE $0A,$04,$FB

>1df9	 0a 08 05                 			.BYTE $0A,$08,$05

>1dfc	 0a 08 fb                 			.BYTE $0A,$08,$FB

>1dff	 0c                       			.BYTE $0C

>1e00	 08 19 2c 3d 45 56 67 74 			.BYTE $08,$19,$2C,$3D,$45,$56,$67,$74,$89,$9A,$AB,$B8,$CD

>1e08	 89 9a ab b8 cd 
>1e0d	 03                       	OBJ_21	.BYTE 4-1

>1e0e	 80 a5 00                 			.BYTE 255-127, 255-90, 0

>1e11	 7f a5 00                 			.BYTE 127, 255-90, 0

>1e14	 00 5a 80                 			.BYTE 0, 90, 255-127

>1e17	 00 5a 7f                 			.BYTE 0, 90, 127

>1e1a	 05                       			.BYTE 6-1

>1e1b	 01 02 03 12 13 23        			.BYTE $01,$02,$03,$12,$13,$23

>1e21	 07                       	OBJ_99	.BYTE $07

>1e22	 80 80 80                 			.BYTE 255-127,255-127,255-127

>1e25	 80 80 7f                 			.BYTE 255-127,255-127,127

>1e28	 80 7f 80                 			.BYTE 255-127,127,255-127

>1e2b	 80 7f 7f                 			.BYTE 255-127,127,127

>1e2e	 7f 80 80                 			.BYTE 127,255-127,255-127

>1e31	 7f 80 7f                 			.BYTE 127,255-127,127

>1e34	 7f 7f 80                 			.BYTE 127,127,255-127

>1e37	 7f 7f 7f                 			.BYTE 127,127,127

>1e3a	 0b                       	        .BYTE $0B

>1e3b	 01 13 32 20              	        .BYTE $01,$13,$32,$20

>1e3f	 45 57 76 64              	        .BYTE $45,$57,$76,$64

>1e43	 04 15 26 37              	        .BYTE $04,$15,$26,$37


.1e47					obj53

>1e47	 11 fd 08 00              		.byte $11,$FD,$08,$00

>1e4b	 03 04 00 fd 04 00 03 08  	  .BYTE $03,$04,$00,$FD,$04,$00,$03,$08

>1e53	 00 ff 07 00 01 07 00 02  	  .BYTE $00,$FF,$07,$00,$01,$07,$00,$02

>1e5b	 09 00 02 0a 00 01 0b 00  	  .BYTE $09,$00,$02,$0A,$00,$01,$0B,$00

>1e63	 ff 0b 00 fe 0a 00 fe 09  	  .BYTE $FF,$0B,$00,$FE,$0A,$00,$FE,$09

>1e6b	 00 ff 0a 00 ff 09 00 01  	  .BYTE $00,$FF,$0A,$00,$FF,$09,$00,$01

>1e73	 0a 00 01 09 00 ff 08 00  	  .BYTE $0A,$00,$01,$09,$00,$FF,$08,$00

>1e7b	 01 08 00 8c 00 01 02 03  	  .BYTE $01,$08,$00,$8C,$00,$01,$02,$03

>1e83	 04 05 05 06 06 07 07 08  	  .BYTE $04,$05,$05,$06,$06,$07,$07,$08

>1e8b	 08 09 09 0a 0a 0b 0b 04  	  .BYTE $08,$09,$09,$0A,$0A,$0B,$0B,$04

>1e93	 0c 0d 0e 0f 10 11        	  .BYTE $0C,$0D,$0E,$0F,$10,$11


.1e99					obj5

>1e99	 0c fe                    	  .byte $0C,$FE

>1e9b	 00 e0 02 00 e0 06 00 10  	  .BYTE $00,$E0,$02,$00,$E0,$06,$00,$10

>1ea3	 fa 00 10 fc 04 e8 04 04  	  .BYTE $FA,$00,$10,$FC,$04,$E8,$04,$04

>1eab	 e8 06 06 16 fa 06 16 00  	  .BYTE $E8,$06,$06,$16,$FA,$06,$16,$00

>1eb3	 04 e8 00 0a 1a 00 06 16  	  .BYTE $04,$E8,$00,$0A,$1A,$00,$06,$16

>1ebb	 10 00 20 f0 00 20 15 01  	  .BYTE $10,$00,$20,$F0,$00,$20,$15,$01

>1ec3	 12 23 30 45 56 67 74 15  	  .BYTE $12,$23,$30,$45,$56,$67,$74,$15

>1ecb	 04 26 37 89 9a a8 1b b2  	  .BYTE $04,$26,$37,$89,$9A,$A8,$1B,$B2

>1ed3	 0c c3 6b 7c bc 0b fa 00  	  .BYTE $0C,$C3,$6B,$7C,$BC,$0B,$FA,$00

>1edb	 ff fa 00 02 fd           	  .BYTE $FF,$FA,$00,$02,$FD


.1ee0					obj27

>1ee0	 00 03 06                 	  .byte $00,$03,$06

>1ee3	 00 02 06 00 ff fd 00 fe  	  .BYTE $00,$02,$06,$00,$FF,$FD,$00,$FE

>1eeb	 fa 03 ff fa 03 02 fd 03  	  .BYTE $FA,$03,$FF,$FA,$03,$02,$FD,$03

>1ef3	 03 06 03 02 06 03 ff fd  	  .BYTE $03,$06,$03,$02,$06,$03,$FF,$FD

>1efb	 03 fe 11 01 12 23 34 45  	  .BYTE $03,$FE,$11,$01,$12,$23,$34,$45

>1f03	 50 67 78 89 9a ab 06 17  	  .BYTE $50,$67,$78,$89,$9A,$AB,$06,$17

>1f0b	 28 39 4a 5b b6           	  .BYTE $28,$39,$4A,$5B,$B6


.1f10					obj32

>1f10	 0b 06 07                 		.byte $0B,$06,$07

>1f13	 00 06 0c 00 06 0f 00 fa  	  .BYTE $00,$06,$0C,$00,$06,$0F,$00,$FA

>1f1b	 0f 00 fa 07 00 04 0b 00  	  .BYTE $0F,$00,$FA,$07,$00,$04,$0B,$00

>1f23	 02 0d 00 00 09 00 fe 0b  	  .BYTE $02,$0D,$00,$00,$09,$00,$FE,$0B

>1f2b	 00 fc 0a 00 fb 07 00 fa  	  .BYTE $00,$FC,$0A,$00,$FB,$07,$00,$FA

>1f33	 04 00 0a 02 23 34 40 15  	  .BYTE $04,$00,$0A,$02,$23,$34,$40,$15

>1f3b	 56 67 78 89 9a ab        	  .BYTE $56,$67,$78,$89,$9A,$AB


.1f41					obj43

>1f41	 12 fa                    		.byte $12,$FA

>1f43	 10 00 fc 0e 00 fe 0c 00  	  .BYTE $10,$00,$FC,$0E,$00,$FE,$0C,$00

>1f4b	 01 09 00 05 10 00 04 0e  	  .BYTE $01,$09,$00,$05,$10,$00,$04,$0E

>1f53	 00 03 0c 00 08 09 00 07  	  .BYTE $00,$03,$0C,$00,$08,$09,$00,$07

>1f5b	 09 00 04 09 00 07 00 00  	  .BYTE $09,$00,$04,$09,$00,$07,$00,$00

>1f63	 05 03 00 03 06 00 fa 00  	  .BYTE $05,$03,$00,$03,$06,$00,$FA,$00

>1f6b	 00 fc 02 00 ff 06 00 f8  	  .BYTE $00,$FC,$02,$00,$FF,$06,$00,$F8

>1f73	 07 00 f9 07 00 fd 08 00  	  .BYTE $07,$00,$F9,$07,$00,$FD,$08,$00

>1f7b	 93 00 03 04 03 07 03 0a  	  .BYTE $93,$00,$03,$04,$03,$07,$03,$0A

>1f83	 03 0e 03 11 03 0d 0e 10  	  .BYTE $03,$0E,$03,$11,$03,$0D,$0E,$10

>1f8b	 11 01 05 05 08 08 0b 0b  	  .BYTE $11,$01,$05,$05,$08,$08,$0B,$0B

>1f93	 0e 0e 11 11 01 02 06 06  	  .BYTE $0E,$0E,$11,$11,$01,$02,$06,$06

>1f9b	 09 09 0c 0c 0f 0f 12 12  	  .BYTE $09,$09,$0C,$0C,$0F,$0F,$12,$12

>1fa3	 02                       	  .BYTE $02


.1fa4					obj28

>1fa4	 09 fe 00 fe 00 00 02     	  .byte $09,$FE,$00,$FE,$00,$00,$02

>1fab	 02 00 fe 00 01 00 00 03  	  .BYTE $02,$00,$FE,$00,$01,$00,$00,$03

>1fb3	 00 00 07 00 fe 06 ff fe  	  .BYTE $00,$00,$07,$00,$FE,$06,$FF,$FE

>1fbb	 08 01 02 08 01 02 06 ff  	  .BYTE $08,$01,$02,$08,$01,$02,$06,$FF

>1fc3	 09 04 14 24 35 67 78 89  	  .BYTE $09,$04,$14,$24,$35,$67,$78,$89

>1fcb	 96 68 79                 	  .BYTE $96,$68,$79


.1fce					obj42

>1fce	 16 f8 00 fd f8           		.byte $16,$F8,$00,$FD,$F8

>1fd3	 00 04 08 00 04 08 00 fd  	  .BYTE $00,$04,$08,$00,$04,$08,$00,$FD

>1fdb	 f8 07 fd f8 07 04 08 07  	  .BYTE $F8,$07,$FD,$F8,$07,$04,$08,$07

>1fe3	 04 08 07 fd f9 07 fe f9  	  .BYTE $04,$08,$07,$FD,$F9,$07,$FE,$F9

>1feb	 07 02 ff 07 02 ff 07 fe  	  .BYTE $07,$02,$FF,$07,$02,$FF,$07,$FE

>1ff3	 f9 04 fe f9 04 02 ff 04  	  .BYTE $F9,$04,$FE,$F9,$04,$02,$FF,$04

>1ffb	 02 ff 04 fe fc 07 03 fc  	  .BYTE $02,$FF,$04,$FE,$FC,$07,$03,$FC

>2003	 09 03 fb 09 03 fd 09 03  	  .BYTE $09,$03,$FB,$09,$03,$FD,$09,$03

>200b	 fc 08 03 fc 08 01 fc 06  	  .BYTE $FC,$08,$03,$FC,$08,$01,$FC,$06

>2013	 01 9b 00 01 01 02 02 03  	  .BYTE $01,$9B,$00,$01,$01,$02,$02,$03

>201b	 03 00 04 05 05 06 06 07  	  .BYTE $03,$00,$04,$05,$05,$06,$06,$07

>2023	 07 04 00 04 01 05 02 06  	  .BYTE $07,$04,$00,$04,$01,$05,$02,$06

>202b	 03 07 08 09 09 0a 0a 0b  	  .BYTE $03,$07,$08,$09,$09,$0A,$0A,$0B

>2033	 0b 08 0c 0d 0d 0e 0e 0f  	  .BYTE $0B,$08,$0C,$0D,$0D,$0E,$0E,$0F

>203b	 0f 0c 0c 08 0d 09 0e 0a  	  .BYTE $0F,$0C,$0C,$08,$0D,$09,$0E,$0A

>2043	 0f 0b 10 11 12 13 14 15  	  .BYTE $0F,$0B,$10,$11,$12,$13,$14,$15

>204b	 15 16                    	  .BYTE $15,$16


.204d					obj36

>204d	 13 fc 00 fc fc 00        		.byte $13,$FC,$00,$FC,$FC,$00

>2053	 04 04 00 04 04 00 fc fc  	  .BYTE $04,$04,$00,$04,$04,$00,$FC,$FC

>205b	 0a fc fc 0a 04 04 0a 04  	  .BYTE $0A,$FC,$FC,$0A,$04,$04,$0A,$04

>2063	 04 0a fc ff 02 fc ff 04  	  .BYTE $04,$0A,$FC,$FF,$02,$FC,$FF,$04

>206b	 fc fd 04 fc fd 06 fc ff  	  .BYTE $FC,$FD,$04,$FC,$FD,$06,$FC,$FF

>2073	 06 fc ff 08 fc 01 08 fc  	  .BYTE $06,$FC,$FF,$08,$FC,$01,$08,$FC

>207b	 01 06 fc 03 06 fc 03 04  	  .BYTE $01,$06,$FC,$03,$06,$FC,$03,$04

>2083	 fc 01 04 fc 01 02 fc 97  	  .BYTE $FC,$01,$04,$FC,$01,$02,$FC,$97

>208b	 00 01 01 02 02 03 03 00  	  .BYTE $00,$01,$01,$02,$02,$03,$03,$00

>2093	 04 05 05 06 06 07 07 04  	  .BYTE $04,$05,$05,$06,$06,$07,$07,$04

>209b	 00 04 01 05 02 06 03 07  	  .BYTE $00,$04,$01,$05,$02,$06,$03,$07

>20a3	 08 09 09 0a 0a 0b 0b 0c  	  .BYTE $08,$09,$09,$0A,$0A,$0B,$0B,$0C

>20ab	 0c 0d 0d 0e 0e 0f 0f 10  	  .BYTE $0C,$0D,$0D,$0E,$0E,$0F,$0F,$10

>20b3	 10 11 11 12 12 13 13 08  	  .BYTE $10,$11,$11,$12,$12,$13,$13,$08


.20bb					obj37

>20bb	 1f fb 00 03 fb 00 fd 05  	  .BYTE $1F,$FB,$00,$03,$FB,$00,$FD,$05

>20c3	 00 fd 05 00 03 fb 06 03  	  .BYTE $00,$FD,$05,$00,$03,$FB,$06,$03

>20cb	 fb 06 fd 05 06 fd 05 06  	  .BYTE $FB,$06,$FD,$05,$06,$FD,$05,$06

>20d3	 03 fc 02 fd fc 03 fd fc  	  .BYTE $03,$FC,$02,$FD,$FC,$03,$FD,$FC

>20db	 04 fd fd 04 fd fd 03 fd  	  .BYTE $04,$FD,$FD,$04,$FD,$FD,$03,$FD

>20e3	 fe 02 fd fe 03 fd fe 04  	  .BYTE $FE,$02,$FD,$FE,$03,$FD,$FE,$04

>20eb	 fd ff 04 fd ff 03 fd ff  	  .BYTE $FD,$FF,$04,$FD,$FF,$03,$FD,$FF

>20f3	 02 fd 00 02 fd 00 03 fd  	  .BYTE $02,$FD,$00,$02,$FD,$00,$03,$FD

>20fb	 00 04 fd 01 04 fd 01 03  	  .BYTE $00,$04,$FD,$01,$04,$FD,$01,$03

>2103	 fd 02 02 fd 02 03 fd 02  	  .BYTE $FD,$02,$02,$FD,$02,$03,$FD,$02

>210b	 04 fd 03 04 fd 03 03 fd  	  .BYTE $04,$FD,$03,$04,$FD,$03,$03,$FD

>2113	 03 02 fd 04 02 fd 04 04  	  .BYTE $03,$02,$FD,$04,$02,$FD,$04,$04

>211b	 fd 9d 00 01 01 02 02 03  	  .BYTE $FD,$9D,$00,$01,$01,$02,$02,$03

>2123	 03 00 04 05 05 06 06 07  	  .BYTE $03,$00,$04,$05,$05,$06,$06,$07

>212b	 07 04 00 04 01 05 02 06  	  .BYTE $07,$04,$00,$04,$01,$05,$02,$06

>2133	 03 07 08 0a 0a 0b 0b 0c  	  .BYTE $03,$07,$08,$0A,$0A,$0B,$0B,$0C

>213b	 0c 09 0d 0f 0f 10 0e 11  	  .BYTE $0C,$09,$0D,$0F,$0F,$10,$0E,$11

>2143	 0d 12 13 15 15 16 16 17  	  .BYTE $0D,$12,$13,$15,$15,$16,$16,$17

>214b	 17 14 18 1d 1d 1c 19 1c  	  .BYTE $17,$14,$18,$1D,$1D,$1C,$19,$1C

>2153	 19 1a 1a 1b 1e 1f        	  .BYTE $19,$1A,$1A,$1B,$1E,$1F


.2159					obj31

>2159	 0f fb                    		.byte $0F,$FB

>215b	 00 fe fb 00 02 00 00 02  	  .BYTE $00,$FE,$FB,$00,$02,$00,$00,$02

>2163	 00 00 fe fb 06 fe fb 06  	  .BYTE $00,$00,$FE,$FB,$06,$FE,$FB,$06

>216b	 02 00 06 02 00 06 fe fb  	  .BYTE $02,$00,$06,$02,$00,$06,$FE,$FB

>2173	 09 ff fb 09 02 00 09 02  	  .BYTE $09,$FF,$FB,$09,$02,$00,$09,$02

>217b	 00 09 ff fb 0b 00 fb 0b  	  .BYTE $00,$09,$FF,$FB,$0B,$00,$FB,$0B

>2183	 02 00 0b 02 00 0b 00 15  	  .BYTE $02,$00,$0B,$02,$00,$0B,$00,$15

>218b	 01 12 23 30 45 56 67 74  	  .BYTE $01,$12,$23,$30,$45,$56,$67,$74

>2193	 04 37 1d 2e 89 9a ab b8  	  .BYTE $04,$37,$1D,$2E,$89,$9A,$AB,$B8

>219b	 cd de ef fc 8c bf        	  .BYTE $CD,$DE,$EF,$FC,$8C,$BF


.21a1					obj30

>21a1	 07 f0                    		.byte $07,$F0

>21a3	 00 f0 10 00 f0 10 00 10  	  .BYTE $00,$F0,$10,$00,$F0,$10,$00,$10

>21ab	 f0 00 10 f0 10 f0 10 10  	  .BYTE $F0,$00,$10,$F0,$10,$F0,$10,$10

>21b3	 f0 10 10 10 f0 10 10 0b  	  .BYTE $F0,$10,$10,$10,$F0,$10,$10,$0B

>21bb	 01 12 23 30 45 56 67 74  	  .BYTE $01,$12,$23,$30,$45,$56,$67,$74

>21c3	 04 15 26 37              	  .BYTE $04,$15,$26,$37


.21c7					obj35

>21c7	 0d fc 00 00              		.byte $0D,$FC,$00,$00

>21cb	 fe 05 00 fc 07 00 fc 09  	  .BYTE $FE,$05,$00,$FC,$07,$00,$FC,$09

>21d3	 00 fe 0b 00 02 0b 00 04  	  .BYTE $00,$FE,$0B,$00,$02,$0B,$00,$04

>21db	 09 00 04 07 00 02 05 00  	  .BYTE $09,$00,$04,$07,$00,$02,$05,$00

>21e3	 04 00 00 fd 08 00 ff 08  	  .BYTE $04,$00,$00,$FD,$08,$00,$FF,$08

>21eb	 00 01 08 00 03 08 00 0b  	  .BYTE $00,$01,$08,$00,$03,$08,$00,$0B

>21f3	 01 12 23 34 45 56 67 78  	  .BYTE $01,$12,$23,$34,$45,$56,$67,$78

>21fb	 89 18 ab cd              	  .BYTE $89,$18,$AB,$CD


.21ff					obj41

>21ff	 0a 00 05 fe              		.byte $0A,$00,$05,$FE

>2203	 00 0c fe 00 0c 02 00 05  	  .BYTE $00,$0C,$FE,$00,$0C,$02,$00,$05

>220b	 02 00 06 ff 00 0b ff 00  	  .BYTE $02,$00,$06,$FF,$00,$0B,$FF,$00

>2213	 0b 01 00 09 01 00 09 ff  	  .BYTE $0B,$01,$00,$09,$01,$00,$09,$FF

>221b	 00 05 00 00 00 00 08 01  	  .BYTE $00,$05,$00,$00,$00,$00,$08,$01

>2223	 12 23 30 45 56 67 78 9a  	  .BYTE $12,$23,$30,$45,$56,$67,$78,$9A

>222b	 00                       	  .BYTE $00


.222c					obj39

>222c	 0f f6 00 fa f6 00 06     		.byte $0F,$F6,$00,$FA,$F6,$00,$06

>2233	 0a 00 06 0a 00 fa f8 0a  	  .BYTE $0A,$00,$06,$0A,$00,$FA,$F8,$0A

>223b	 fc f8 0a 04 08 0a 04 08  	  .BYTE $FC,$F8,$0A,$04,$08,$0A,$04,$08

>2243	 0a fc f6 00 fd f6 00 03  	  .BYTE $0A,$FC,$F6,$00,$FD,$F6,$00,$03

>224b	 fa 00 03 fa 00 fd fa 00  	  .BYTE $FA,$00,$03,$FA,$00,$FD,$FA,$00

>2253	 00 0a 00 00 04 00 ff 08  	  .BYTE $00,$0A,$00,$00,$04,$00,$FF,$08

>225b	 00 ff 10 01 12 23 30 45  	  .BYTE $00,$FF,$10,$01,$12,$23,$30,$45

>2263	 56 67 74 04 15 26 37 9a  	  .BYTE $56,$67,$74,$04,$15,$26,$37,$9A

>226b	 ab b8 cd ef              	  .BYTE $AB,$B8,$CD,$EF


.226f					obj40

>226f	 05 fa 00 fa              		.byte $05,$FA,$00,$FA

>2273	 06 00 fa 06 00 06 fa 00  	  .BYTE $06,$00,$FA,$06,$00,$06,$FA,$00

>227b	 06 fa 0c 00 06 0c 00 08  	  .BYTE $06,$FA,$0C,$00,$06,$0C,$00,$08

>2283	 01 12 23 30 04 43 15 52  	  .BYTE $01,$12,$23,$30,$04,$43,$15,$52

>228b	 45                       	  .BYTE $45


.228c					obj51

>228c	 04 aa 00 aa aa 00 56     		.byte $04,$AA,$00,$AA,$AA,$00,$56

>2293	 56 00 56 56 00 aa 00 7f  	  .BYTE $56,$00,$56,$56,$00,$AA,$00,$7F

>229b	 00 07 01 12 23 30 04 14  	  .BYTE $00,$07,$01,$12,$23,$30,$04,$14

>22a3	 24 34                    	  .BYTE $24,$34


.22a5					obj45

>22a5	 0e 00 00 00 fc 14        		.byte $0E,$00,$00,$00,$FC,$14

>22ab	 fc fc 14 04 04 14 04 04  	  .BYTE $FC,$FC,$14,$04,$04,$14,$04,$04

>22b3	 14 fc fc 5a fc fc 5a 04  	  .BYTE $14,$FC,$FC,$5A,$FC,$FC,$5A,$04

>22bb	 04 5a 04 04 5a fc 00 6e  	  .BYTE $04,$5A,$04,$04,$5A,$FC,$00,$6E

>22c3	 00 00 7f 00 d8 00 d8 d8  	  .BYTE $00,$00,$7F,$00,$D8,$00,$D8,$D8

>22cb	 00 28 28 00 28 28 00 d8  	  .BYTE $00,$28,$28,$00,$28,$28,$00,$D8

>22d3	 18 01 02 03 04 12 23 34  	  .BYTE $18,$01,$02,$03,$04,$12,$23,$34

>22db	 41 56 67 78 85 15 26 37  	  .BYTE $41,$56,$67,$78,$85,$15,$26,$37

>22e3	 48 59 69 79 89 b5 c6 d7  	  .BYTE $48,$59,$69,$79,$89,$B5,$C6,$D7

>22eb	 e8 0a                    	  .BYTE $E8,$0A


.22ed					obj21

>22ed	 07 fd 06 fe fd 06        		.byte $07,$FD,$06,$FE,$FD,$06

>22f3	 02 00 06 04 03 06 02 03  	  .BYTE $02,$00,$06,$04,$03,$06,$02,$03

>22fb	 06 fe 00 06 fc 00 06 00  	  .BYTE $06,$FE,$00,$06,$FC,$00,$06,$00

>2303	 00 00 00 09 01 12 23 34  	  .BYTE $00,$00,$00,$09,$01,$12,$23,$34

>230b	 45 50 03 14 25 67        	  .BYTE $45,$50,$03,$14,$25,$67

>2311	 15 fc                    	OBJ10 .BYTE $15,$FC

>2313	 00 fc fc 00 04 04 00 04  	  .BYTE $00,$FC,$FC,$00,$04,$04,$00,$04

>231b	 04 00 fc fe 09 fe fe 09  	  .BYTE $04,$00,$FC,$FE,$09,$FE,$FE,$09

>2323	 02 02 09 02 02 09 fe fe  	  .BYTE $02,$02,$09,$02,$02,$09,$FE,$FE

>232b	 0b fe fe 0b 02 02 0b 02  	  .BYTE $0B,$FE,$FE,$0B,$02,$02,$0B,$02

>2333	 02 0b fe ff 0b fe ff 09  	  .BYTE $02,$0B,$FE,$FF,$0B,$FE,$FF,$09

>233b	 fe 01 0b fe 01 09 fe 00  	  .BYTE $FE,$01,$0B,$FE,$01,$09,$FE,$00

>2343	 0b fa fb 0b 03 05 0b 03  	  .BYTE $0B,$FA,$FB,$0B,$03,$05,$0B,$03

>234b	 00 0e fe fe 0e 01 02 0e  	  .BYTE $00,$0E,$FE,$FE,$0E,$01,$02,$0E

>2353	 01 9e 00 01 01 02 02 03  	  .BYTE $01,$9E,$00,$01,$01,$02,$02,$03

>235b	 03 00 04 05 05 06 06 07  	  .BYTE $03,$00,$04,$05,$05,$06,$06,$07

>2363	 07 04 08 09 09 0a 0a 0b  	  .BYTE $07,$04,$08,$09,$09,$0A,$0A,$0B

>236b	 0b 08 0c 0d 0e 0f 10 11  	  .BYTE $0B,$08,$0C,$0D,$0E,$0F,$10,$11

>2373	 11 12 12 10 13 14 14 15  	  .BYTE $11,$12,$12,$10,$13,$14,$14,$15

>237b	 15 13 00 04 01 05 02 06  	  .BYTE $15,$13,$00,$04,$01,$05,$02,$06

>2383	 03 07 04 08 05 09 06 0a  	  .BYTE $03,$07,$04,$08,$05,$09,$06,$0A

>238b	 07 0b 10 13 11 14 12 15  	  .BYTE $07,$0B,$10,$13,$11,$14,$12,$15


.2393					obj22

>2393	 0b fe 00 00 01 00 02 01  	  .BYTE $0B,$FE,$00,$00,$01,$00,$02,$01

>239b	 00 fe 00 03 00 00 06 00  	  .BYTE $00,$FE,$00,$03,$00,$00,$06,$00

>23a3	 fe 09 00 01 09 02 01 09  	  .BYTE $FE,$09,$00,$01,$09,$02,$01,$09

>23ab	 fe 00 09 00 fa 12 00 03  	  .BYTE $FE,$00,$09,$00,$FA,$12,$00,$03

>23b3	 12 05 03 12 fb 11 01 12  	  .BYTE $12,$05,$03,$12,$FB,$11,$01,$12

>23bb	 20 03 13 23 45 46 47 56  	  .BYTE $20,$03,$13,$23,$45,$46,$47,$56

>23c3	 67 75 89 8a 8b 9a ab b9  	  .BYTE $67,$75,$89,$8A,$8B,$9A,$AB,$B9


.23cb					obj24

>23cb	 0f 00 04 fc fc 04 00 00  	  .BYTE $0F,$00,$04,$FC,$FC,$04,$00,$00

>23d3	 04 04 04 04 00 00 0c fc  	  .BYTE $04,$04,$04,$04,$00,$00,$0C,$FC

>23db	 fc 0c 00 00 0c 04 04 0c  	  .BYTE $FC,$0C,$00,$00,$0C,$04,$04,$0C

>23e3	 00 fe 06 fe fe 06 02 02  	  .BYTE $00,$FE,$06,$FE,$FE,$06,$02,$02

>23eb	 06 02 02 06 fe fe 0a fe  	  .BYTE $06,$02,$02,$06,$FE,$FE,$0A,$FE

>23f3	 fe 0a 02 02 0a 02 02 0a  	  .BYTE $FE,$0A,$02,$02,$0A,$02,$02,$0A

>23fb	 fe 07 17 35 06 24 8e ac  	  .BYTE $FE,$07,$17,$35,$06,$24,$8E,$AC

>2403	 9f bd                    	  .BYTE $9F,$BD


.2405					obj47

>2405	 23 fa 00 f6 02 00        		.byte $23,$FA,$00,$F6,$02,$00

>240b	 f0 02 00 10 fa 00 0a fa  	  .BYTE $F0,$02,$00,$10,$FA,$00,$0A,$FA

>2413	 0a f6 02 10 f0 02 10 10  	  .BYTE $0A,$F6,$02,$10,$F0,$02,$10,$10

>241b	 fa 0a 0a fa 04 f6 00 04  	  .BYTE $FA,$0A,$0A,$FA,$04,$F6,$00,$04

>2423	 fd 00 04 03 fa 04 0a 00  	  .BYTE $FD,$00,$04,$03,$FA,$04,$0A,$00

>242b	 0a fd 00 0a 03 fb 05 f7  	  .BYTE $0A,$FD,$00,$0A,$03,$FB,$05,$F7

>2433	 fb 09 f7 ff 09 fc ff 05  	  .BYTE $FB,$09,$F7,$FF,$09,$FC,$FF,$05

>243b	 fc ff 05 04 ff 09 04 fb  	  .BYTE $FC,$FF,$05,$04,$FF,$09,$04,$FB

>2443	 09 09 fb 05 09 00 05 fe  	  .BYTE $09,$09,$FB,$05,$09,$00,$05,$FE

>244b	 00 06 fe 00 06 ff 00 05  	  .BYTE $00,$06,$FE,$00,$06,$FF,$00,$05

>2453	 ff 00 05 01 00 06 01 00  	  .BYTE $FF,$00,$05,$01,$00,$06,$01,$00

>245b	 06 02 00 05 02 00 07 fe  	  .BYTE $06,$02,$00,$05,$02,$00,$07,$FE

>2463	 00 07 02 00 08 fe 00 08  	  .BYTE $00,$07,$02,$00,$08,$FE,$00,$08

>246b	 02 00 09 fe 00 09 02 a4  	  .BYTE $02,$00,$09,$FE,$00,$09,$02,$A4

>2473	 00 01 01 05 05 04 04 00  	  .BYTE $00,$01,$01,$05,$05,$04,$04,$00

>247b	 03 07 07 06 06 02 02 03  	  .BYTE $03,$07,$07,$06,$06,$02,$02,$03

>2483	 01 02 05 06 08 09 09 0a  	  .BYTE $01,$02,$05,$06,$08,$09,$09,$0A

>248b	 0a 0b 04 0c 0c 0d 0d 07  	  .BYTE $0A,$0B,$04,$0C,$0C,$0D,$0D,$07

>2493	 09 0c 0a 0d 0e 0f 0f 10  	  .BYTE $09,$0C,$0A,$0D,$0E,$0F,$0F,$10

>249b	 10 11 11 0e 12 13 13 14  	  .BYTE $10,$11,$11,$0E,$12,$13,$13,$14

>24a3	 14 15 15 12 16 17 17 18  	  .BYTE $14,$15,$15,$12,$16,$17,$17,$18

>24ab	 18 19 19 16 1a 1b 1b 1c  	  .BYTE $18,$19,$19,$16,$1A,$1B,$1B,$1C

>24b3	 1c 1d 1d 1a 1e 1f 20 21  	  .BYTE $1C,$1D,$1D,$1A,$1E,$1F,$20,$21

>24bb	 22 23                    	  .BYTE $22,$23


.24bd					obj38

>24bd	 0f fe 00 fe fe 00        		.byte $0F,$FE,$00,$FE,$FE,$00

>24c3	 02 02 00 02 02 00 fe fe  	  .BYTE $02,$02,$00,$02,$02,$00,$FE,$FE

>24cb	 06 fe fe 06 02 02 06 02  	  .BYTE $06,$FE,$FE,$06,$02,$02,$06,$02

>24d3	 02 06 fe ff 08 ff ff 08  	  .BYTE $02,$06,$FE,$FF,$08,$FF,$FF,$08

>24db	 01 01 08 01 01 08 ff ff  	  .BYTE $01,$01,$08,$01,$01,$08,$FF,$FF

>24e3	 09 ff ff 09 01 01 09 01  	  .BYTE $09,$FF,$FF,$09,$01,$01,$09,$01

>24eb	 01 09 ff 1b 01 12 23 30  	  .BYTE $01,$09,$FF,$1B,$01,$12,$23,$30

>24f3	 45 56 67 74 89 9a ab b8  	  .BYTE $45,$56,$67,$74,$89,$9A,$AB,$B8

>24fb	 cd de ef fc 04 15 26 37  	  .BYTE $CD,$DE,$EF,$FC,$04,$15,$26,$37

>2503	 48 59 6a 7b 8c 9d ae bf  	  .BYTE $48,$59,$6A,$7B,$8C,$9D,$AE,$BF


.250b					obj23

>250b	 0f 00 00 f7 fc 02 f7 fa  	  .BYTE $0F,$00,$00,$F7,$FC,$02,$F7,$FA

>2513	 06 f7 fc 0a f7 00 0c f7  	  .BYTE $06,$F7,$FC,$0A,$F7,$00,$0C,$F7

>251b	 04 0a f7 06 06 f7 04 02  	  .BYTE $04,$0A,$F7,$06,$06,$F7,$04,$02

>2523	 f7 00 00 09 fc 02 09 fa  	  .BYTE $F7,$00,$00,$09,$FC,$02,$09,$FA

>252b	 06 09 fc 0a 09 00 0c 09  	  .BYTE $06,$09,$FC,$0A,$09,$00,$0C,$09

>2533	 04 0a 09 06 06 09 04 02  	  .BYTE $04,$0A,$09,$06,$06,$09,$04,$02

>253b	 09 0f 08 19 2a 3b 4c 5d  	  .BYTE $09,$0F,$08,$19,$2A,$3B,$4C,$5D

>2543	 6e 7f 0c 48 1d 59 2e 6a  	  .BYTE $6E,$7F,$0C,$48,$1D,$59,$2E,$6A

>254b	 3f 7b                    	  .BYTE $3F,$7B


.254d					obj20

>254d	 0f 00 00 f7 fc 02        	  .byte $0F,$00,$00,$F7,$FC,$02

>2553	 f7 fa 06 f7 fc 0a f7 00  	  .BYTE $F7,$FA,$06,$F7,$FC,$0A,$F7,$00

>255b	 0c f7 04 0a f7 06 06 f7  	  .BYTE $0C,$F7,$04,$0A,$F7,$06,$06,$F7

>2563	 04 02 f7 00 00 09 fc 02  	  .BYTE $04,$02,$F7,$00,$00,$09,$FC,$02

>256b	 09 fa 06 09 fc 0a 09 00  	  .BYTE $09,$FA,$06,$09,$FC,$0A,$09,$00

>2573	 0c 09 04 0a 09 06 06 09  	  .BYTE $0C,$09,$04,$0A,$09,$06,$06,$09

>257b	 04 02 09 1b 08 19 2a 3b  	  .BYTE $04,$02,$09,$1B,$08,$19,$2A,$3B

>2583	 4c 5d 6e 7f 01 12 23 34  	  .BYTE $4C,$5D,$6E,$7F,$01,$12,$23,$34

>258b	 45 56 67 70 89 9a ab bc  	  .BYTE $45,$56,$67,$70,$89,$9A,$AB,$BC

>2593	 cd de ef f8 15 37 9d bf  	  .BYTE $CD,$DE,$EF,$F8,$15,$37,$9D,$BF


.259b					obj25

>259b	 0f 00 00 00 00 09 00 fe  	  .BYTE $0F,$00,$00,$00,$00,$09,$00,$FE

>25a3	 08 fe fe 08 02 fe 0a fe  	  .BYTE $08,$FE,$FE,$08,$02,$FE,$0A,$FE

>25ab	 fe 0a 02 fe 08 00 fe 0a  	  .BYTE $FE,$0A,$02,$FE,$08,$00,$FE,$0A

>25b3	 00 fe 09 00 08 09 00 01  	  .BYTE $00,$FE,$09,$00,$08,$09,$00,$01

>25bb	 09 fe 01 09 02 04 09 fe  	  .BYTE $09,$FE,$01,$09,$02,$04,$09,$FE

>25c3	 04 09 02 07 09 fe 07 09  	  .BYTE $04,$09,$02,$07,$09,$FE,$07,$09

>25cb	 02 07 01 89 23 45 67 ab  	  .BYTE $02,$07,$01,$89,$23,$45,$67,$AB

>25d3	 cd ef                    	  .BYTE $CD,$EF


.25d5					obj26

>25d5	 0c fd 00 fe fd 00        		.byte $0C,$FD,$00,$FE,$FD,$00

>25db	 02 00 00 04 03 00 02 03  	  .BYTE $02,$00,$00,$04,$03,$00,$02,$03

>25e3	 00 fe 00 00 fc fd 06 fe  	  .BYTE $00,$FE,$00,$00,$FC,$FD,$06,$FE

>25eb	 fd 06 02 00 06 04 03 06  	  .BYTE $FD,$06,$02,$00,$06,$04,$03,$06

>25f3	 02 03 06 fe 00 06 fc 00  	  .BYTE $02,$03,$06,$FE,$00,$06,$FC,$00

>25fb	 0c 00 17 01 12 23 34 45  	  .BYTE $0C,$00,$17,$01,$12,$23,$34,$45

>2603	 50 67 78 89 9a ab b6 06  	  .BYTE $50,$67,$78,$89,$9A,$AB,$B6,$06

>260b	 17 28 39 4a 5b 6c 7c 8c  	  .BYTE $17,$28,$39,$4A,$5B,$6C,$7C,$8C

>2613	 9c ac bc                 	  .BYTE $9C,$AC,$BC


.2616					obj44

>2616	 0d ff 00 ff ff           		.byte $0D,$FF,$00,$FF,$FF

>261b	 00 01 01 00 01 01 00 ff  	  .BYTE $00,$01,$01,$00,$01,$01,$00,$FF

>2623	 fe 09 fe fe 09 02 02 09  	  .BYTE $FE,$09,$FE,$FE,$09,$02,$02,$09

>262b	 02 02 09 fe ff 0c ff ff  	  .BYTE $02,$02,$09,$FE,$FF,$0C,$FF,$FF

>2633	 0c 01 01 0c 01 01 0c ff  	  .BYTE $0C,$01,$01,$0C,$01,$01,$0C,$FF

>263b	 00 00 00 00 09 00 10 01  	  .BYTE $00,$00,$00,$00,$09,$00,$10,$01

>2643	 12 23 30 45 56 67 74 89  	  .BYTE $12,$23,$30,$45,$56,$67,$74,$89

>264b	 9a ab b8 cd 48 59 6a 7b  	  .BYTE $9A,$AB,$B8,$CD,$48,$59,$6A,$7B


.2653					obj46

>2653	 11 fb 00 fe fb 00 00 fb  	  .BYTE $11,$FB,$00,$FE,$FB,$00,$00,$FB

>265b	 06 fe fb 06 00 05 00 fe  	  .BYTE $06,$FE,$FB,$06,$00,$05,$00,$FE

>2663	 05 00 00 05 06 fe 05 06  	  .BYTE $05,$00,$00,$05,$06,$FE,$05,$06

>266b	 00 fd 00 00 fd 04 00 03  	  .BYTE $00,$FD,$00,$00,$FD,$04,$00,$03

>2673	 04 00 03 00 00 fe 01 00  	  .BYTE $04,$00,$03,$00,$00,$FE,$01,$00

>267b	 fe 03 00 02 03 00 02 01  	  .BYTE $FE,$03,$00,$02,$03,$00,$02,$01

>2683	 00 fe 02 00 02 02 00 92  	  .BYTE $00,$FE,$02,$00,$02,$02,$00,$92

>268b	 00 01 00 02 02 03 03 01  	  .BYTE $00,$01,$00,$02,$02,$03,$03,$01

>2693	 04 05 04 06 06 07 07 05  	  .BYTE $04,$05,$04,$06,$06,$07,$07,$05

>269b	 01 05 02 06 03 07 08 09  	  .BYTE $01,$05,$02,$06,$03,$07,$08,$09

>26a3	 09 0a 0a 0b 0c 0d 0d 0e  	  .BYTE $09,$0A,$0A,$0B,$0C,$0D,$0D,$0E

>26ab	 0e 0f                    	  .BYTE $0E,$0F


.26ad					obj33

>26ad	 0f 0c 10 11 07 fe        		.byte $0F,$0C,$10,$11,$07,$FE

>26b3	 00 fa fe 00 06 02 00 06  	  .BYTE $00,$FA,$FE,$00,$06,$02,$00,$06

>26bb	 02 00 fa ff 03 fb ff 03  	  .BYTE $02,$00,$FA,$FF,$03,$FB,$FF,$03

>26c3	 05 01 03 05 01 03 fb 0b  	  .BYTE $05,$01,$03,$05,$01,$03,$FB,$0B

>26cb	 01 12 23 30 45 56 67 74  	  .BYTE $01,$12,$23,$30,$45,$56,$67,$74

>26d3	 04 15 26 37              	  .BYTE $04,$15,$26,$37

>26d7	 19 03 00 f6              	OBJ34 .byte $19,$03,$00,$F6

>26db	 fd 00 f6 fc 06 f6 fd 06  	  .BYTE $FD,$00,$F6,$FC,$06,$F6,$FD,$06

>26e3	 f6 fe 03 f6 02 03 f6 03  	  .BYTE $F6,$FE,$03,$F6,$02,$03,$F6,$03

>26eb	 00 f8 fe 00 f8 fe 03 f8  	  .BYTE $00,$F8,$FE,$00,$F8,$FE,$03,$F8

>26f3	 02 03 f8 03 00 0a fd 00  	  .BYTE $02,$03,$F8,$03,$00,$0A,$FD,$00

>26fb	 0a fc 06 0a fd 06 0a fe  	  .BYTE $0A,$FC,$06,$0A,$FD,$06,$0A,$FE

>2703	 03 0a 02 03 0a 03 00 08  	  .BYTE $03,$0A,$02,$03,$0A,$03,$00,$08

>270b	 fe 00 08 fe 03 08 02 03  	  .BYTE $FE,$00,$08,$FE,$03,$08,$02,$03

>2713	 08 fe 02 f8 02 02 f8 02  	  .BYTE $08,$FE,$02,$F8,$02,$02,$F8,$02

>271b	 00 f8 fe 02 08 02 02 08  	  .BYTE $00,$F8,$FE,$02,$08,$02,$02,$08

>2723	 02 00 08 a3 00 01 01 02  	  .BYTE $02,$00,$08,$A3,$00,$01,$01,$02

>272b	 02 03 03 04 04 05 05 00  	  .BYTE $02,$03,$03,$04,$04,$05,$05,$00

>2733	 06 07 07 08 08 09 09 06  	  .BYTE $06,$07,$07,$08,$08,$09,$09,$06

>273b	 0a 0b 0b 0c 0c 0d 0d 0e  	  .BYTE $0A,$0B,$0B,$0C,$0C,$0D,$0D,$0E

>2743	 0e                       	  .BYTE $0E

>2744	 0f 0f 0a                 	  .BYTE $0F,$0F,$0A ;SLO $0A0F

>2747	 10 11 11 12 12 13 13 10  	  .BYTE $10,$11,$11,$12,$12,$13,$13,$10

>274f	 14 15 15 16 17 18 18 19  	  .BYTE $14,$15,$15,$16,$17,$18,$18,$19

>2757	 01 0b 02 0c 03 0d 14 17  	  .BYTE $01,$0B,$02,$0C,$03,$0D,$14,$17

>275f	 15 18 16 19 04 08 05 09  	  .BYTE $15,$18,$16,$19,$04,$08,$05,$09

>2767	 00 06 0e 12 0f 13 0a 10  	  .BYTE $00,$06,$0E,$12,$0F,$13,$0A,$10


.276f					obj9

>276f	 12 fc 16 04 04 16 04 00  	  .BYTE $12,$FC,$16,$04,$04,$16,$04,$00

>2777	 16 fc ff 12 01 01 12 01  	  .BYTE $16,$FC,$FF,$12,$01,$01,$12,$01

>277f	 00 12 ff fd 12 03 03 12  	  .BYTE $00,$12,$FF,$FD,$12,$03,$03,$12

>2787	 03 00 12 fd f0 16 10 10  	  .BYTE $03,$00,$12,$FD,$F0,$16,$10,$10

>278f	 16 10 fe 02 02 02 02 02  	  .BYTE $16,$10,$FE,$02,$02,$02,$02,$02

>2797	 00 00 fe fe 00 02 02 00  	  .BYTE $00,$00,$FE,$FE,$00,$02,$02,$00

>279f	 02 00 02 fe 00 13 f9 00  	  .BYTE $02,$00,$02,$FE,$00,$13,$F9,$00

>27a7	 0c e6 9a 00 01 01 02 02  	  .BYTE $0C,$E6,$9A,$00,$01,$01,$02,$02

>27af	 00 03 04 04 05 05 03 00  	  .BYTE $00,$03,$04,$04,$05,$05,$03,$00

>27b7	 03 01 04 02 05 06 07 07  	  .BYTE $03,$01,$04,$02,$05,$06,$07,$07

>27bf	 08 08 06 09 06 09 0b 06  	  .BYTE $08,$08,$06,$09,$06,$09,$0B,$06

>27c7	 0b 0a 07 0a 0c 07 0c 0b  	  .BYTE $0B,$0A,$07,$0A,$0C,$07,$0C,$0B

>27cf	 0e 0c 0f 08 0d 0d 0e 0e  	  .BYTE $0E,$0C,$0F,$08,$0D,$0D,$0E,$0E

>27d7	 0f 0f 0d 10 11 11 12 12  	  .BYTE $0F,$0F,$0D,$10,$11,$11,$12,$12

>27df	 10 4c 00 00 4b 50 35 20  	  .BYTE $10,$4C,$00,$00,$4B,$50,$35,$20


.27e7					obj1

>27e7	 05                       	  .BYTE $05

>27e8	 f0 00 20 10 00 20 fd 02  	  .BYTE $F0,$00,$20,$10,$00,$20,$FD,$02

>27f0	 20 03 02 20 00 0c 20 00  	  .BYTE $20,$03,$02,$20,$00,$0C,$20,$00

>27f8	 00 e1 09 01              	  .BYTE $00,$E1,$09,$01								; f3B3A   

>27fc	 13 34 42 20 05 15 25 35  			.BYTE $13,$34,$42,$20,$05,$15,$25,$35

>2804	 45                       	  .BYTE $45


.2805					obj2

>2805	 01                       		.BYTE $01

>2806	 7f 7f 7f                 		.BYTE 127,127,127

>2809	 80 80 80                 		.BYTE 255-127,255-127,255-127

>280c	 00                       		.BYTE $00

>280d	 01                       		.BYTE $01


.280e					obj3

>280e	 0f f8 04 18 08           		.BYTE $0F,$F8,$04,$18,$08

>2813	 04 18 00 04 e8 00 0c 18  	  .BYTE $04,$18,$00,$04,$E8,$00,$0C,$18

>281b	 e2 04 18 1e 04 18 fc 04  	  .BYTE $E2,$04,$18,$1E,$04,$18,$FC,$04

>2823	 00 04 04 00 00 14 18 00  	  .BYTE $00,$04,$04,$00,$00,$14,$18,$00

>282b	 0a 0c f2 04 10 f2 00 10  	  .BYTE $0A,$0C,$F2,$04,$10,$F2,$00,$10

>2833	 0e 04 10 0e 00 10 00 04  	  .BYTE $0E,$04,$10,$0E,$00,$10,$00,$04

>283b	 f0 00 00 f0 0c 20 23 21  	  .BYTE $F0,$00,$00,$F0,$0C,$20,$23,$21

>2843	 13 03 45 46 57 38 89 ab  	  .BYTE $13,$03,$45,$46,$57,$38,$89,$AB

>284b	 cd ef                    	  .BYTE $CD,$EF


.284d					obj4

>284d	 07 00 00 00 ec 07        	  .byte $07,$00,$00,$00,$EC,$07

>2853	 00 f6 07 11 0a 07 11 14  	  .BYTE $00,$F6,$07,$11,$0A,$07,$11,$14

>285b	 07 00 0a 07 ef f6 07 ef  	  .BYTE $07,$00,$0A,$07,$EF,$F6,$07,$EF

>2863	 00 10 00 11 01 02 03 04  	  .BYTE $00,$10,$00,$11,$01,$02,$03,$04

>286b	 05 06 71 72 73 74 75 76  	  .BYTE $05,$06,$71,$72,$73,$74,$75,$76

>2873	 12 23 34 45 56 61        	  .BYTE $12,$23,$34,$45,$56,$61


.2879					obj6

>2879	 05 f4                    		.byte $05,$F4

>287b	 00 10 00 00 f0 0c 00 10  	  .BYTE $00,$10,$00,$00,$F0,$0C,$00,$10

>2883	 f4 0a 10 00 0a f0 0c 0a  	  .BYTE $F4,$0A,$10,$00,$0A,$F0,$0C,$0A

>288b	 10 08 01 12 20 34 45 53  	  .BYTE $10,$08,$01,$12,$20,$34,$45,$53

>2893	 03 14 25                 	  .BYTE $03,$14,$25


.2896					obj7

>2896	 0f f0 00 10 10           	  .byte $0F,$F0,$00,$10,$10

>289b	 00 10 00 00 ec fc 00 04  	  .BYTE $00,$10,$00,$00,$EC,$FC,$00,$04

>28a3	 04 00 04 00 00 fc fd 04  	  .BYTE $04,$00,$04,$00,$00,$FC,$FD,$04

>28ab	 03 03 04 03 00 04 fd fe  	  .BYTE $03,$03,$04,$03,$00,$04,$FD,$FE

>28b3	 14 02 02 14 02 00 14 fe  	  .BYTE $14,$02,$02,$14,$02,$00,$14,$FE

>28bb	 ff 04 01 01 04 01 00 04  	  .BYTE $FF,$04,$01,$01,$04,$01,$00,$04

>28c3	 ff 00 34 00 14 f6 f7 f8  	  .BYTE $FF,$00,$34,$00,$14,$F6,$F7,$F8

>28cb	 90 a1 b2 06 17 28 c3 d4  	  .BYTE $90,$A1,$B2,$06,$17,$28,$C3,$D4

>28d3	 e5 34 45 53 67 78 86 cd  	  .BYTE $E5,$34,$45,$53,$67,$78,$86,$CD

>28db	 de ec                    	  .BYTE $DE,$EC


.28dd					obj8

>28dd	 07 f8 f8 f8 08 f8        		.byte $07,$F8,$F8,$F8,$08,$F8

>28e3	 f8 08 f8 08 f8 f8 08 f8  	  .BYTE $F8,$08,$F8,$08,$F8,$F8,$08,$F8

>28eb	 08 f8 08 08 f8 08 08 08  	  .BYTE $08,$F8,$08,$08,$F8,$08,$08,$08

>28f3	 f8 08 08 0b 01 12 23 30  	  .BYTE $F8,$08,$08,$0B,$01,$12,$23,$30

>28fb	 04 15 26 37 45 56 67 74  	  .BYTE $04,$15,$26,$37,$45,$56,$67,$74

>2903	 09 fc 07 04 04 07 04 00  	  .BYTE $09,$FC,$07,$04,$04,$07,$04,$00


.290b					obj11

>290b	 07 fc 00 0e 00 ff 07 01  	  .BYTE $07,$FC,$00,$0E,$00,$FF,$07,$01

>2913	 01 07 01 00 07 ff fe 00  	  .BYTE $01,$07,$01,$00,$07,$FF,$FE,$00

>291b	 02 02 00 02 00 00 fe 0e  	  .BYTE $02,$02,$00,$02,$00,$00,$FE,$0E

>2923	 01 12 20 03 13 23 45 56  	  .BYTE $01,$12,$20,$03,$13,$23,$45,$56

>292b	 64 78 89 97 47 58 69     	  .BYTE $64,$78,$89,$97,$47,$58,$69


.2932					obj12

>2932	 05                       	  .BYTE $05

>2933	 fb 00 ff 05 00 ff 00 0c  	  .BYTE $FB,$00,$FF,$05,$00,$FF,$00,$0C

>293b	 ff fb 00 01 05 00 01 00  	  .BYTE $FF,$FB,$00,$01,$05,$00,$01,$00

>2943	 0c 01 08 01 12 20 34 45  	  .BYTE $0C,$01,$08,$01,$12,$20,$34,$45

>294b	 53 03 14 25              	  .BYTE $53,$03,$14,$25

>294f	 07 ff 00 fc              	OBJ13 .BYTE $07,$FF,$00,$FC

>2953	 ff 00 04 ff 0c 02 ff 0c  	  .BYTE $FF,$00,$04,$FF,$0C,$02,$FF,$0C

>295b	 fe 01 00 fc 01 00 04 01  	  .BYTE $FE,$01,$00,$FC,$01,$00,$04,$01

>2963	 0c 02 01 0c fe 0b 01 12  	  .BYTE $0C,$02,$01,$0C,$FE,$0B,$01,$12

>296b	 23 30 45 56 67 74 04 15  	  .BYTE $23,$30,$45,$56,$67,$74,$04,$15

>2973	 26 37                    	  .BYTE $26,$37


.2975					obj14

>2975	 09 04 00 ff fc 00        	  .byte $09,$04,$00,$FF,$FC,$00

>297b	 ff fa 08 ff 00 0c ff 06  	  .BYTE $FF,$FA,$08,$FF,$00,$0C,$FF,$06

>2983	 08 ff 04 00 01 fc 00 01  	  .BYTE $08,$FF,$04,$00,$01,$FC,$00,$01

>298b	 fa 08 01 00 0c 01 06 08  	  .BYTE $FA,$08,$01,$00,$0C,$01,$06,$08

>2993	 01 0e 01 12 23 34 40 56  	  .BYTE $01,$0E,$01,$12,$23,$34,$40,$56

>299b	 67 78 89 95 05 16 27 38  	  .BYTE $67,$78,$89,$95,$05,$16,$27,$38

>29a3	 49                       	  .BYTE $49


.29a4					obj15

>29a4	 09 fd 00 ff 03 00 ff     	  .byte $09,$FD,$00,$FF,$03,$00,$FF

>29ab	 03 0a ff 00 0c ff fd 0a  	  .BYTE $03,$0A,$FF,$00,$0C,$FF,$FD,$0A

>29b3	 ff fd 00 01 03 00 01 03  	  .BYTE $FF,$FD,$00,$01,$03,$00,$01,$03

>29bb	 0a 01 00 0c 01 fd 0a 01  	  .BYTE $0A,$01,$00,$0C,$01,$FD,$0A,$01

>29c3	 0e 01 12 23 34 40 56 67  	  .BYTE $0E,$01,$12,$23,$34,$40,$56,$67

>29cb	 78 89 95 05 16 27 38 49  	  .BYTE $78,$89,$95,$05,$16,$27,$38,$49


.29d3					obj16

>29d3	 07 fe 00 ff 02 00 ff 04  	  .BYTE $07,$FE,$00,$FF,$02,$00,$FF,$04

>29db	 0c ff fc 0c ff fe 00 01  	  .BYTE $0C,$FF,$FC,$0C,$FF,$FE,$00,$01

>29e3	 02 00 01 04 0c 01 fc 0c  	  .BYTE $02,$00,$01,$04,$0C,$01,$FC,$0C

>29eb	 01 0b 01 12 23 30 45 56  	  .BYTE $01,$0B,$01,$12,$23,$30,$45,$56

>29f3	 67 74 04 15 26 37        	  .BYTE $67,$74,$04,$15,$26,$37


.29f9					obj17

>29f9	 0b 02                    		.byte $0B,$02

>29fb	 00 ff 04 06 ff 02 0c ff  	  .BYTE $00,$FF,$04,$06,$FF,$02,$0C,$FF

>2a03	 fe 0c ff fc 06 ff fe 00  	  .BYTE $FE,$0C,$FF,$FC,$06,$FF,$FE,$00

>2a0b	 ff 02 00 01 04 06 01 02  	  .BYTE $FF,$02,$00,$01,$04,$06,$01,$02

>2a13	 0c 01 fe 0c 01 fc 06 01  	  .BYTE $0C,$01,$FE,$0C,$01,$FC,$06,$01

>2a1b	 fe 00 01 11 01 12 23 34  	  .BYTE $FE,$00,$01,$11,$01,$12,$23,$34

>2a23	 45 50 67 78 89 9a ab b6  	  .BYTE $45,$50,$67,$78,$89,$9A,$AB,$B6

>2a2b	 06 17 28 39 4a 5b        	  .BYTE $06,$17,$28,$39,$4A,$5B


.2a31					obj18

>2a31	 0b 03                    		.byte $0B,$03

>2a33	 00 ff 03 08 ff 01 0c ff  	  .BYTE $00,$FF,$03,$08,$FF,$01,$0C,$FF

>2a3b	 ff 0c ff fd 08 ff fd 00  	  .BYTE $FF,$0C,$FF,$FD,$08,$FF,$FD,$00

>2a43	 ff 03 00 01 03 08 01 01  	  .BYTE $FF,$03,$00,$01,$03,$08,$01,$01

>2a4b	 0c 01 ff 0c 01 fd 08 01  	  .BYTE $0C,$01,$FF,$0C,$01,$FD,$08,$01

>2a53	 fd 00 01 11 01 12 23 34  	  .BYTE $FD,$00,$01,$11,$01,$12,$23,$34

>2a5b	 45 50 67 78 89 9a ab b6  	  .BYTE $45,$50,$67,$78,$89,$9A,$AB,$B6

>2a63	 06 17 28 39 4a 5b        	  .BYTE $06,$17,$28,$39,$4A,$5B

>2a69	 09 fc                    	OBJ19 .byte $09,$FC

>2a6b	 07 04 04 07 04 00 07 fc  	  .BYTE $07,$04,$04,$07,$04,$00,$07,$FC

>2a73	 00 09 00 ff 07 01 01 07  	  .BYTE $00,$09,$00,$FF,$07,$01,$01,$07

>2a7b	 01 00 07 ff ff 00 01 01  	  .BYTE $01,$00,$07,$FF,$FF,$00,$01,$01

>2a83	 00 01 00 00 ff 0e 01 12  	  .BYTE $00,$01,$00,$00,$FF,$0E,$01,$12

>2a8b	 20 03 13 23 45 56 64 78  	  .BYTE $20,$03,$13,$23,$45,$56,$64,$78

>2a93	 89 97 47 58 69           	  .BYTE $89,$97,$47,$58,$69


.2a98					obj29

>2a98	 0f f9 07                 		.byte $0F,$F9,$07

>2a9b	 ff f9 09 ff 07 09 ff 07  	  .BYTE $FF,$F9,$09,$FF,$07,$09,$FF,$07

>2aa3	 00 ff 05 00 ff 04 04 ff  	  .BYTE $00,$FF,$05,$00,$FF,$04,$04,$FF

>2aab	 02 04 ff 02 07 ff f9 07  	  .BYTE $02,$04,$FF,$02,$07,$FF,$F9,$07

>2ab3	 01 f9 09 01 07 09 01 07  	  .BYTE $01,$F9,$09,$01,$07,$09,$01,$07

>2abb	 00 01 05 00 01 04 04 01  	  .BYTE $00,$01,$05,$00,$01,$04,$04,$01

>2ac3	 02 04 01 02 07 01 17 01  	  .BYTE $02,$04,$01,$02,$07,$01,$17,$01

>2acb	 12 23 34 45 56 67 70 89  	  .BYTE $12,$23,$34,$45,$56,$67,$70,$89

>2ad3	 9a ab bc cd de ef f8 08  	  .BYTE $9A,$AB,$BC,$CD,$DE,$EF,$F8,$08

>2adb	 19 2a 3b 4c 5d 6e 7f     	  .BYTE $19,$2A,$3B,$4C,$5D,$6E,$7F


.2ae2					obj48

>2ae2	 0b                       		.byte $0B

>2ae3	 f9 00 f3 07 00 f3 07 00  	  .BYTE $F9,$00,$F3,$07,$00,$F3,$07,$00

>2aeb	 0d f9 00 0d f9 06 f3 07  	  .BYTE $0D,$F9,$00,$0D,$F9,$06,$F3,$07

>2af3	 06 f3 07 06 0d f9 06 0d  	  .BYTE $06,$F3,$07,$06,$0D,$F9,$06,$0D

>2afb	 f6 06 f0 0a 06 f0 0a 06  	  .BYTE $F6,$06,$F0,$0A,$06,$F0,$0A,$06

>2b03	 10 f6 06 10 07 04 15 26  	  .BYTE $10,$F6,$06,$10,$07,$04,$15,$26

>2b0b	 37 89 9a ab b8           	  .BYTE $37,$89,$9A,$AB,$B8


.2b10					obj49

>2b10	 0b fe 00                 		.byte $0B,$FE,$00

>2b13	 fe fe 00 02 02 00 02 02  	  .BYTE $FE,$FE,$00,$02,$02,$00,$02,$02

>2b1b	 00 fe fe 04 fe fe 04 02  	  .BYTE $00,$FE,$FE,$04,$FE,$FE,$04,$02

>2b23	 02 04 02 02 04 fe 02 06  	  .BYTE $02,$04,$02,$02,$04,$FE,$02,$06

>2b2b	 02 02 06 fe 02 07 02 02  	  .BYTE $02,$02,$06,$FE,$02,$07,$02,$02

>2b33	 07 fe 09 04 15 2a 3b 45  	  .BYTE $07,$FE,$09,$04,$15,$2A,$3B,$45

>2b3b	 56 67 74 89 ab           	  .BYTE $56,$67,$74,$89,$AB


.2b40					obj50

>2b40	 0d f6 00                 		.byte $0D,$F6,$00

>2b43	 fb f6 00 05 0a 00 05 0a  	  .BYTE $FB,$F6,$00,$05,$0A,$00,$05,$0A

>2b4b	 00 fb f6 02 fb f6 02 05  	  .BYTE $00,$FB,$F6,$02,$FB,$F6,$02,$05

>2b53	 0a 02 05 0a 02 fb f6 04  	  .BYTE $0A,$02,$05,$0A,$02,$FB,$F6,$04

>2b5b	 fb f6 04 05 0a 04 05 0a  	  .BYTE $FB,$F6,$04,$05,$0A,$04,$05,$0A

>2b63	 04 fb 0a 08 05 0a 08 fb  	  .BYTE $04,$FB,$0A,$08,$05,$0A,$08,$FB

>2b6b	 0c 08 19 2c 3d 45 56 67  	  .BYTE $0C,$08,$19,$2C,$3D,$45,$56,$67

>2b73	 74 89 9a ab b8 cd        	  .BYTE $74,$89,$9A,$AB,$B8,$CD


.2b79					obj52

>2b79	 11 00                    		.byte $11,$00

>2b7b	 08 fd 00 04 03 00 04 fd  	  .BYTE $08,$FD,$00,$04,$03,$00,$04,$FD

>2b83	 00 08 03 00 07 ff 00 07  	  .BYTE $00,$08,$03,$00,$07,$FF,$00,$07

>2b8b	 01 00 09 02 00 0a 02 00  	  .BYTE $01,$00,$09,$02,$00,$0A,$02,$00

>2b93	 0b 01 00 0b ff 00 0a fe  	  .BYTE $0B,$01,$00,$0B,$FF,$00,$0A,$FE

>2b9b	 00 09 fe 00 0a ff 00 09  	  .BYTE $00,$09,$FE,$00,$0A,$FF,$00,$09

>2ba3	 ff 00 0a 01 00 09 01 00  	  .BYTE $FF,$00,$0A,$01,$00,$09,$01,$00

>2bab	 08 ff 00 08 01 8c 00 01  	  .BYTE $08,$FF,$00,$08,$01,$8C,$00,$01

>2bb3	 02 03 04 05 05 06 06 07  	  .BYTE $02,$03,$04,$05,$05,$06,$06,$07

>2bbb	 07 08 08 09 09 0a 0a 0b  	  .BYTE $07,$08,$08,$09,$09,$0A,$0A,$0B

>2bc3	 0b 04 0c 0d 0e 0f 10 11  	  .BYTE $0B,$04,$0C,$0D,$0E,$0F,$10,$11


.2bcb					obj54

>2bcb	 0f e0 00 e0 e0 00 20 20  	  .BYTE $0F,$E0,$00,$E0,$E0,$00,$20,$20

>2bd3	 00 20 20 00 e0 e0 06 e0  	  .BYTE $00,$20,$20,$00,$E0,$E0,$06,$E0

>2bdb	 e0 06 20 20 06 20 20 06  	  .BYTE $E0,$06,$20,$20,$06,$20,$20,$06

>2be3	 e0 e0 0c e0 e0 0c 20 20  	  .BYTE $E0,$E0,$0C,$E0,$E0,$0C,$20,$20

>2beb	 0c 20 20 0c e0 e0 12 e0  	  .BYTE $0C,$20,$20,$0C,$E0,$E0,$12,$E0

>2bf3	 e0 12 20 20 12 20 20 12  	  .BYTE $E0,$12,$20,$20,$12,$20,$20,$12

>2bfb	 e0 10 01 12 23 30 45 67  	  .BYTE $E0,$10,$01,$12,$23,$30,$45,$67

>2c03	 74 89 ab b8 cd ef fc 0c  	  .BYTE $74,$89,$AB,$B8,$CD,$EF,$FC,$0C

>2c0b	 1d 2e 3f                 	  .BYTE $1D,$2E,$3F


.2c0e					obj55

>2c0e	 15                       		.BYTE $15

>2c0f	 80 e0 80                 		.BYTE $80,$E0,$80

>2c12	 7f e0 80                 		.BYTE $7F,$E0,$80

>2c15	 7f e0 7f                 		.BYTE $7F,$E0,$7F

>2c18	 80 e0 7f                 		.BYTE $80,$E0,$7F

>2c1b	 80 20 80                 		.BYTE $80,$20,$80

>2c1e	 7f 20 80                 		.BYTE $7F,$20,$80

>2c21	 7f 20 7f                 		.BYTE $7F,$20,$7F

>2c24	 80 20 7f                 		.BYTE $80,$20,$7F

>2c27	 80 e0 fd                 		.BYTE $80,$E0,$FD

>2c2a	 80 e0 03                 		.BYTE $80,$E0,$03

>2c2d	 80 ec 03                 		.BYTE $80,$EC,$03

>2c30	 80 ec fd                 		.BYTE $80,$EC,$FD

>2c33	 b0 20 80                 		.BYTE $B0,$20,$80

>2c36	 b0 20 70                 		.BYTE $B0,$20,$70

>2c39	 40 20 70                 		.BYTE $40,$20,$70

>2c3c	 40 20 00                 		.BYTE $40,$20,$00

>2c3f	 00 20 00                 		.BYTE $00,$20,$00

>2c42	 00 20 50                 		.BYTE $00,$20,$50

>2c45	 d0 20 50                 		.BYTE $D0,$20,$50

>2c48	 d0 20 80                 		.BYTE $D0,$20,$80

>2c4b	 00 20 40                 		.BYTE $00,$20,$40

>2c4e	 40 20 40                 		.BYTE $40,$20,$40

>2c51	 96                       		.BYTE $96

>2c52	 00 01 01 02 02 03 03 00  		.BYTE $00,$01, $01,$02, $02,$03, $03,$00

>2c5a	 00 04 01 05 02 06 03 07  		.BYTE $00,$04, $01,$05, $02,$06, $03,$07

>2c62	 04 05 05 06 06 07 07 04  		.BYTE $04,$05, $05,$06, $06,$07, $07,$04

>2c6a	 09 0a 0a 0b 0b 08 0c 0d  		.BYTE $09,$0A, $0A,$0B, $0B,$08, $0C,$0D

>2c72	 0d 0e 0e 0f 0f 10 10 11  		.BYTE $0D,$0E, $0E,$0F, $0F,$10, $10,$11

>2c7a	 11 12 12 13 14 15 00     		.BYTE $11,$12, $12,$13, $14,$15, $00


.2c81					object_shape_ptr_lo

>2c81	 e7 e7 0e 0e 4d 99 79 96  	 .BYTE <OBJ1,<OBJ1,<OBJ3,<OBJ3,<OBJ4,<OBJ5,<OBJ6,<OBJ7

>2c89	 dd 05 6f e7 11 e7 dd 4d  	 .BYTE <OBJ8,<OBJ2,<OBJ9,<OBJ1,<OBJ10,<OBJ1,<OBJ8,<OBJ4

>2c91	 0b 32 4f 75 a4 d3 f9 31  	 .BYTE <OBJ11,<OBJ12,<OBJ13,<OBJ14,<OBJ15,<OBJ16,<OBJ17,<OBJ18

>2c99	 69 4d ed 93 0b cb 9b d5  	 .BYTE <OBJ19,<OBJ20,<OBJ21,<OBJ22,<OBJ23,<OBJ24,<OBJ25,<OBJ26

>2ca1	 e0 a4 98 a1 59 10 ad d7  	 .BYTE <OBJ27,<OBJ28,<OBJ29,<OBJ30,<OBJ31,<OBJ32,<OBJ33,<OBJ34

>2ca9	 c7 4d bb bd 2c 6f ff ce  	 .BYTE <OBJ35,<OBJ36,<OBJ37,<OBJ38,<OBJ39,<OBJ40,<OBJ41,<OBJ42

>2cb1	 41 16 a5 53 05 e2 10 40  	 .BYTE <OBJ43,<OBJ44,<OBJ45,<OBJ46,<OBJ47,<OBJ48,<OBJ49,<OBJ50

>2cb9	 8c 79 47 47 79 cb cb 0e  	 .BYTE <OBJ51,<OBJ52,<OBJ53,<OBJ53,<OBJ52,<OBJ54,<OBJ54,<OBJ55


.2cc1					object_shape_ptr_hi

>2cc1	 27 27 28 28 28 1e 28 28  	 .BYTE >OBJ1,>OBJ1,>OBJ3,>OBJ3,>OBJ4,>OBJ5,>OBJ6,>OBJ7

>2cc9	 28 28 27 27 23 27 28 28  	 .BYTE >OBJ8,>OBJ2,>OBJ9,>OBJ1,>OBJ10,>OBJ1,>OBJ8,>OBJ4

>2cd1	 29 29 29 29 29 29 29 2a  	 .BYTE >OBJ11,>OBJ12,>OBJ13,>OBJ14,>OBJ15,>OBJ16,>OBJ17,>OBJ18

>2cd9	 2a 25 22 23 25 23 25 25  	 .BYTE >OBJ19,>OBJ20,>OBJ21,>OBJ22,>OBJ23,>OBJ24,>OBJ25,>OBJ26

>2ce1	 1e 1f 2a 21 21 1f 26 26  	 .BYTE >OBJ27,>OBJ28,>OBJ29,>OBJ30,>OBJ31,>OBJ32,>OBJ33,>OBJ34

>2ce9	 21 20 20 24 22 22 21 1f  	 .BYTE >OBJ35,>OBJ36,>OBJ37,>OBJ38,>OBJ39,>OBJ40,>OBJ41,>OBJ42

>2cf1	 1f 26 22 26 24 2a 2b 2b  	 .BYTE >OBJ43,>OBJ44,>OBJ45,>OBJ46,>OBJ47,>OBJ48,>OBJ49,>OBJ50

>2cf9	 22 2b 1e 1e 2b 2b 2b 2c  	 .BYTE >OBJ51,>OBJ52,>OBJ53,>OBJ53,>OBJ52,>OBJ54,>OBJ54,>OBJ55


.2e00					sin_lsb

>2e00	 92 2e f7 60 c4 14 47 79  			.BYTE $92,$2E,$F7,$60,$C4,$14,$47,$79

>2e08	 ab dd 08 21 3a 53 6c 85  	        .BYTE $AB,$DD,$08,$21,$3A,$53,$6C,$85

>2e10	 9e b7 d0 e9 01 0d 1a 26  	        .BYTE $9E,$B7,$D0,$E9,$01,$0D,$1A,$26

>2e18	 33 3f 4c 58 64 71 7d 89  	        .BYTE $33,$3F,$4C,$58,$64,$71,$7D,$89

>2e20	 96 a2 ae bb c7 d3 df ec  	        .BYTE $96,$A2,$AE,$BB,$C7,$D3,$DF,$EC

>2e28	 f8 02 08 0e 14 1a 20 26  	        .BYTE $F8,$02,$08,$0E,$14,$1A,$20,$26

>2e30	 2c 32 38 3e 44 4a 50 56  	        .BYTE $2C,$32,$38,$3E,$44,$4A,$50,$56

>2e38	 5c 62 68 6e 73 79 7f 85  	        .BYTE $5C,$62,$68,$6E,$73,$79,$7F,$85

>2e40	 8b 91 96 9c a2 a8 ad b3  	        .BYTE $8B,$91,$96,$9C,$A2,$A8,$AD,$B3

>2e48	 b9 be c4 ca cf d5 da e0  	        .BYTE $B9,$BE,$C4,$CA,$CF,$D5,$DA,$E0

>2e50	 e5 eb f1 f6 fb 00 03 06  	        .BYTE $E5,$EB,$F1,$F6,$FB,$00,$03,$06

>2e58	 09 0b 0e 11 13 16 19 1b  	        .BYTE $09,$0B,$0E,$11,$13,$16,$19,$1B

>2e60	 1e 20 23 26 28 2b 2d 30  	        .BYTE $1E,$20,$23,$26,$28,$2B,$2D,$30

>2e68	 32 35 37 3a 3c 3f 41 44  	        .BYTE $32,$35,$37,$3A,$3C,$3F,$41,$44

>2e70	 46 48 4b 4d 50 52 54 57  	        .BYTE $46,$48,$4B,$4D,$50,$52,$54,$57

>2e78	 59 5b 5e 60 62 64 67 69  	        .BYTE $59,$5B,$5E,$60,$62,$64,$67,$69

>2e80	 6b 6d 70 72 74 76 78 7a  	        .BYTE $6B,$6D,$70,$72,$74,$76,$78,$7A

>2e88	 7c 7f 81 83 85 87 89 8b  	        .BYTE $7C,$7F,$81,$83,$85,$87,$89,$8B

>2e90	 8d 8f 91 93 95 97 98 9a  	        .BYTE $8D,$8F,$91,$93,$95,$97,$98,$9A

>2e98	 9c 9e a0 a2 a4 a5 a7 a9  	        .BYTE $9C,$9E,$A0,$A2,$A4,$A5,$A7,$A9

>2ea0	 ab ac ae b0 b1 b3 b5 b6  	        .BYTE $AB,$AC,$AE,$B0,$B1,$B3,$B5,$B6

>2ea8	 b8 ba bb bd be c0 c1 c3  	        .BYTE $B8,$BA,$BB,$BD,$BE,$C0,$C1,$C3

>2eb0	 c4 c6 c7 c9 ca cb cd ce  	        .BYTE $C4,$C6,$C7,$C9,$CA,$CB,$CD,$CE

>2eb8	 d0 d1 d2 d3 d5 d6 d7 d8  	        .BYTE $D0,$D1,$D2,$D3,$D5,$D6,$D7,$D8

>2ec0	 da db dc dd de df e0 e2  	        .BYTE $DA,$DB,$DC,$DD,$DE,$DF,$E0,$E2

>2ec8	 e3 e4 e5 e6 e7 e8 e9 e9  	        .BYTE $E3,$E4,$E5,$E6,$E7,$E8,$E9,$E9

>2ed0	 ea eb ec ed ee ef ef f0  	        .BYTE $EA,$EB,$EC,$ED,$EE,$EF,$EF,$F0

>2ed8	 f1 f2 f3 f3 f4 f5 f5 f6  	        .BYTE $F1,$F2,$F3,$F3,$F4,$F5,$F5,$F6

>2ee0	 f6 f7 f8 f8 f9 f9 fa fa  	        .BYTE $F6,$F7,$F8,$F8,$F9,$F9,$FA,$FA

>2ee8	 fb fb fc fc fc fd fd fd  	        .BYTE $FB,$FB,$FC,$FC,$FC,$FD,$FD,$FD

>2ef0	 fe fe fe fe ff ff ff ff  	        .BYTE $FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF

>2ef8	 ff 00 00 00 00 00 00 00  	        .BYTE $FF,$00,$00,$00,$00,$00,$00,$00


.2f00					sin_msb

>2f00	 dc e4 e4 e8 e8 ec ec ec  			.BYTE $DC,$E4,$E4,$E8,$E8,$EC,$EC,$EC

>2f08	 ec ec f0 f0 f0 f0 f0 f0  	        .BYTE $EC,$EC,$F0,$F0,$F0,$F0,$F0,$F0

>2f10	 f0 f0 f0 f0 f4 f4 f4 f4  	        .BYTE $F0,$F0,$F0,$F0,$F4,$F4,$F4,$F4

>2f18	 f4 f4 f4 f4 f4 f4 f4 f4  	        .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4

>2f20	 f4 f4 f4 f4 f4 f4 f4 f4  	        .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4

>2f28	 f4 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F4,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2f30	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2f38	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2f40	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2f48	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2f50	 f8 f8 f8 f8 f8 fc fc fc  	        .BYTE $F8,$F8,$F8,$F8,$F8,$FC,$FC,$FC

>2f58	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2f60	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2f68	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2f70	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2f78	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2f80	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2f88	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2f90	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2f98	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2fa0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2fa8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2fb0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2fb8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2fc0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2fc8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2fd0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2fd8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2fe0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2fe8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2ff0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2ff8	 fc 00 00 00 00 00 00 00  	        .BYTE $FC,$00,$00,$00,$00,$00,$00,$00


.3000					log_table

>3000	 00 01 03 04 06 07 09 0a  			.BYTE $00,$01,$03,$04,$06,$07,$09,$0A

>3008	 0b 0d 0e 10 11 12 14 15  	        .BYTE $0B,$0D,$0E,$10,$11,$12,$14,$15

>3010	 16 18 19 1a 1c 1d 1e 20  	        .BYTE $16,$18,$19,$1A,$1C,$1D,$1E,$20

>3018	 21 22 24 25 26 28 29 2a  	        .BYTE $21,$22,$24,$25,$26,$28,$29,$2A

>3020	 2c 2d 2e 2f 31 32 33 34  	        .BYTE $2C,$2D,$2E,$2F,$31,$32,$33,$34

>3028	 36 37 38 39 3b 3c 3d 3e  	        .BYTE $36,$37,$38,$39,$3B,$3C,$3D,$3E

>3030	 3f 41 42 43 44 45 47 48  	        .BYTE $3F,$41,$42,$43,$44,$45,$47,$48

>3038	 49 4a 4b 4d 4e 4f 50 51  	        .BYTE $49,$4A,$4B,$4D,$4E,$4F,$50,$51

>3040	 52 54 55 56 57 58 59 5a  	        .BYTE $52,$54,$55,$56,$57,$58,$59,$5A

>3048	 5c 5d 5e 5f 60 61 62 63  	        .BYTE $5C,$5D,$5E,$5F,$60,$61,$62,$63

>3050	 64 66 67 68 69 6a 6b 6c  	        .BYTE $64,$66,$67,$68,$69,$6A,$6B,$6C

>3058	 6d 6e 6f 70 71 72 74 75  	        .BYTE $6D,$6E,$6F,$70,$71,$72,$74,$75

>3060	 76 77 78 79 7a 7b 7c 7d  	        .BYTE $76,$77,$78,$79,$7A,$7B,$7C,$7D

>3068	 7e 7f 80 81 82 83 84 85  	        .BYTE $7E,$7F,$80,$81,$82,$83,$84,$85

>3070	 86 87 88 89 8a 8b 8c 8d  	        .BYTE $86,$87,$88,$89,$8A,$8B,$8C,$8D

>3078	 8e 8f 90 91 92 93 94 95  	        .BYTE $8E,$8F,$90,$91,$92,$93,$94,$95

>3080	 96 97 98 99 9a 9b 9b 9c  	        .BYTE $96,$97,$98,$99,$9A,$9B,$9B,$9C

>3088	 9d 9e 9f a0 a1 a2 a3 a4  	        .BYTE $9D,$9E,$9F,$A0,$A1,$A2,$A3,$A4

>3090	 a5 a6 a7 a8 a9 a9 aa ab  	        .BYTE $A5,$A6,$A7,$A8,$A9,$A9,$AA,$AB

>3098	 ac ad ae af b0 b1 b2 b2  	        .BYTE $AC,$AD,$AE,$AF,$B0,$B1,$B2,$B2

>30a0	 b3 b4 b5 b6 b7 b8 b9 b9  	        .BYTE $B3,$B4,$B5,$B6,$B7,$B8,$B9,$B9

>30a8	 ba bb bc bd be bf c0 c0  	        .BYTE $BA,$BB,$BC,$BD,$BE,$BF,$C0,$C0

>30b0	 c1 c2 c3 c4 c5 c6 c6 c7  	        .BYTE $C1,$C2,$C3,$C4,$C5,$C6,$C6,$C7

>30b8	 c8 c9 ca cb cb cc cd ce  	        .BYTE $C8,$C9,$CA,$CB,$CB,$CC,$CD,$CE

>30c0	 cf d0 d0 d1 d2 d3 d4 d4  	        .BYTE $CF,$D0,$D0,$D1,$D2,$D3,$D4,$D4

>30c8	 d5 d6 d7 d8 d8 d9 da db  	        .BYTE $D5,$D6,$D7,$D8,$D8,$D9,$DA,$DB

>30d0	 dc dc dd de df e0 e0 e1  	        .BYTE $DC,$DC,$DD,$DE,$DF,$E0,$E0,$E1

>30d8	 e2 e3 e4 e4 e5 e6 e7 e7  	        .BYTE $E2,$E3,$E4,$E4,$E5,$E6,$E7,$E7

>30e0	 e8 e9 ea ea eb ec ed ee  	        .BYTE $E8,$E9,$EA,$EA,$EB,$EC,$ED,$EE

>30e8	 ee ef f0 f1 f1 f2 f3 f4  	        .BYTE $EE,$EF,$F0,$F1,$F1,$F2,$F3,$F4

>30f0	 f4 f5 f6 f7 f7 f8 f9 f9  	        .BYTE $F4,$F5,$F6,$F7,$F7,$F8,$F9,$F9

>30f8	 fa fb fc fc fd fe ff ff  	        .BYTE $FA,$FB,$FC,$FC,$FD,$FE,$FF,$FF


.3100					exp_table

>3100	 00 01 01 02 03 03 04 05  			.BYTE $00,$01,$01,$02,$03,$03,$04,$05

>3108	 06 06 07 08 08 09 0a 0b  	        .BYTE $06,$06,$07,$08,$08,$09,$0A,$0B

>3110	 0b 0c 0d 0e 0e 0f 10 10  	        .BYTE $0B,$0C,$0D,$0E,$0E,$0F,$10,$10

>3118	 11 12 13 13 14 15 16 16  	        .BYTE $11,$12,$13,$13,$14,$15,$16,$16

>3120	 17 18 19 19 1a 1b 1c 1d  	        .BYTE $17,$18,$19,$19,$1A,$1B,$1C,$1D

>3128	 1d 1e 1f 20 20 21 22 23  	        .BYTE $1D,$1E,$1F,$20,$20,$21,$22,$23

>3130	 24 24 25 26 27 28 28 29  	        .BYTE $24,$24,$25,$26,$27,$28,$28,$29

>3138	 2a 2b 2c 2c 2d 2e 2f 30  	        .BYTE $2A,$2B,$2C,$2C,$2D,$2E,$2F,$30

>3140	 30 31 32 33 34 35 35 36  	        .BYTE $30,$31,$32,$33,$34,$35,$35,$36

>3148	 37 38 39 3a 3a 3b 3c 3d  	        .BYTE $37,$38,$39,$3A,$3A,$3B,$3C,$3D

>3150	 3e 3f 40 41 41 42 43 44  	        .BYTE $3E,$3F,$40,$41,$41,$42,$43,$44

>3158	 45 46 47 48 48 49 4a 4b  	        .BYTE $45,$46,$47,$48,$48,$49,$4A,$4B

>3160	 4c 4d 4e 4f 50 51 51 52  	        .BYTE $4C,$4D,$4E,$4F,$50,$51,$51,$52

>3168	 53 54 55 56 57 58 59 5a  	        .BYTE $53,$54,$55,$56,$57,$58,$59,$5A

>3170	 5b 5c 5d 5e 5e 5f 60 61  	        .BYTE $5B,$5C,$5D,$5E,$5E,$5F,$60,$61

>3178	 62 63 64 65 66 67 68 69  	        .BYTE $62,$63,$64,$65,$66,$67,$68,$69

>3180	 6a 6b 6c 6d 6e 6f 70 71  	        .BYTE $6A,$6B,$6C,$6D,$6E,$6F,$70,$71

>3188	 72 73 74 75 76 77 78 79  	        .BYTE $72,$73,$74,$75,$76,$77,$78,$79

>3190	 7a 7b 7c 7d 7e 7f 80 81  	        .BYTE $7A,$7B,$7C,$7D,$7E,$7F,$80,$81

>3198	 82 83 84 85 87 88 89 8a  	        .BYTE $82,$83,$84,$85,$87,$88,$89,$8A

>31a0	 8b 8c 8d 8e 8f 90 91 92  	        .BYTE $8B,$8C,$8D,$8E,$8F,$90,$91,$92

>31a8	 93 95 96 97 98 99 9a 9b  	        .BYTE $93,$95,$96,$97,$98,$99,$9A,$9B

>31b0	 9c 9d 9f a0 a1 a2 a3 a4  	        .BYTE $9C,$9D,$9F,$A0,$A1,$A2,$A3,$A4

>31b8	 a5 a6 a8 a9 aa ab ac ad  	        .BYTE $A5,$A6,$A8,$A9,$AA,$AB,$AC,$AD

>31c0	 af b0 b1 b2 b3 b4 b6 b7  	        .BYTE $AF,$B0,$B1,$B2,$B3,$B4,$B6,$B7

>31c8	 b8 b9 ba bc bd be bf c0  	        .BYTE $B8,$B9,$BA,$BC,$BD,$BE,$BF,$C0

>31d0	 c2 c3 c4 c5 c6 c8 c9 ca  	        .BYTE $C2,$C3,$C4,$C5,$C6,$C8,$C9,$CA

>31d8	 cb cd ce cf d0 d2 d3 d4  	        .BYTE $CB,$CD,$CE,$CF,$D0,$D2,$D3,$D4

>31e0	 d6 d7 d8 d9 db dc dd de  	        .BYTE $D6,$D7,$D8,$D9,$DB,$DC,$DD,$DE

>31e8	 e0 e1 e2 e4 e5 e6 e8 e9  	        .BYTE $E0,$E1,$E2,$E4,$E5,$E6,$E8,$E9

>31f0	 ea ec ed ee f0 f1 f2 f4  	        .BYTE $EA,$EC,$ED,$EE,$F0,$F1,$F2,$F4

>31f8	 f5 f6 f8 f9 fa fc fd ff  	        .BYTE $F5,$F6,$F8,$F9,$FA,$FC,$FD,$FF


.3200					ver_pos_scn0_hi

>3200	 40 40 40 40 40 40 40 40  			.BYTE (>SCREEN0)+$00,(>SCREEN0)+$00,(>SCREEN0)+$00,(>SCREEN0)+$00,(>SCREEN0)+$00,(>SCREEN0)+$00,(>SCREEN0)+$00,(>SCREEN0)+$00

>3208	 41 41 41 41 41 41 41 41  	        .BYTE (>SCREEN0)+$01,(>SCREEN0)+$01,(>SCREEN0)+$01,(>SCREEN0)+$01,(>SCREEN0)+$01,(>SCREEN0)+$01,(>SCREEN0)+$01,(>SCREEN0)+$01

>3210	 42 42 42 42 42 42 42 42  	        .BYTE (>SCREEN0)+$02,(>SCREEN0)+$02,(>SCREEN0)+$02,(>SCREEN0)+$02,(>SCREEN0)+$02,(>SCREEN0)+$02,(>SCREEN0)+$02,(>SCREEN0)+$02

>3218	 43 43 43 43 43 43 43 43  	        .BYTE (>SCREEN0)+$03,(>SCREEN0)+$03,(>SCREEN0)+$03,(>SCREEN0)+$03,(>SCREEN0)+$03,(>SCREEN0)+$03,(>SCREEN0)+$03,(>SCREEN0)+$03

>3220	 45 45 45 45 45 45 45 45  	        .BYTE (>SCREEN0)+$05,(>SCREEN0)+$05,(>SCREEN0)+$05,(>SCREEN0)+$05,(>SCREEN0)+$05,(>SCREEN0)+$05,(>SCREEN0)+$05,(>SCREEN0)+$05

>3228	 46 46 46 46 46 46 46 46  	        .BYTE (>SCREEN0)+$06,(>SCREEN0)+$06,(>SCREEN0)+$06,(>SCREEN0)+$06,(>SCREEN0)+$06,(>SCREEN0)+$06,(>SCREEN0)+$06,(>SCREEN0)+$06

>3230	 47 47 47 47 47 47 47 47  	        .BYTE (>SCREEN0)+$07,(>SCREEN0)+$07,(>SCREEN0)+$07,(>SCREEN0)+$07,(>SCREEN0)+$07,(>SCREEN0)+$07,(>SCREEN0)+$07,(>SCREEN0)+$07

>3238	 48 48 48 48 48 48 48 48  	        .BYTE (>SCREEN0)+$08,(>SCREEN0)+$08,(>SCREEN0)+$08,(>SCREEN0)+$08,(>SCREEN0)+$08,(>SCREEN0)+$08,(>SCREEN0)+$08,(>SCREEN0)+$08

>3240	 4a 4a 4a 4a 4a 4a 4a 4a  	        .BYTE (>SCREEN0)+$0A,(>SCREEN0)+$0A,(>SCREEN0)+$0A,(>SCREEN0)+$0A,(>SCREEN0)+$0A,(>SCREEN0)+$0A,(>SCREEN0)+$0A,(>SCREEN0)+$0A

>3248	 4b 4b 4b 4b 4b 4b 4b 4b  	        .BYTE (>SCREEN0)+$0B,(>SCREEN0)+$0B,(>SCREEN0)+$0B,(>SCREEN0)+$0B,(>SCREEN0)+$0B,(>SCREEN0)+$0B,(>SCREEN0)+$0B,(>SCREEN0)+$0B

>3250	 4c 4c 4c 4c 4c 4c 4c 4c  	        .BYTE (>SCREEN0)+$0C,(>SCREEN0)+$0C,(>SCREEN0)+$0C,(>SCREEN0)+$0C,(>SCREEN0)+$0C,(>SCREEN0)+$0C,(>SCREEN0)+$0C,(>SCREEN0)+$0C

>3258	 4d 4d 4d 4d 4d 4d 4d 4d  	        .BYTE (>SCREEN0)+$0D,(>SCREEN0)+$0D,(>SCREEN0)+$0D,(>SCREEN0)+$0D,(>SCREEN0)+$0D,(>SCREEN0)+$0D,(>SCREEN0)+$0D,(>SCREEN0)+$0D

>3260	 4f 4f 4f 4f 4f 4f 4f 4f  	        .BYTE (>SCREEN0)+$0F,(>SCREEN0)+$0F,(>SCREEN0)+$0F,(>SCREEN0)+$0F,(>SCREEN0)+$0F,(>SCREEN0)+$0F,(>SCREEN0)+$0F,(>SCREEN0)+$0F

>3268	 50 50 50 50 50 50 50 50  	        .BYTE (>SCREEN0)+$10,(>SCREEN0)+$10,(>SCREEN0)+$10,(>SCREEN0)+$10,(>SCREEN0)+$10,(>SCREEN0)+$10,(>SCREEN0)+$10,(>SCREEN0)+$10

>3270	 51 51 51 51 51 51 51 51  	        .BYTE (>SCREEN0)+$11,(>SCREEN0)+$11,(>SCREEN0)+$11,(>SCREEN0)+$11,(>SCREEN0)+$11,(>SCREEN0)+$11,(>SCREEN0)+$11,(>SCREEN0)+$11

>3278	 52 52 52 52 52 52 52 52  	        .BYTE (>SCREEN0)+$12,(>SCREEN0)+$12,(>SCREEN0)+$12,(>SCREEN0)+$12,(>SCREEN0)+$12,(>SCREEN0)+$12,(>SCREEN0)+$12,(>SCREEN0)+$12


.3280					and_pixel_pos

>3280	 3f cf f3 fc 3f cf f3 fc  			.BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>3288	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>3290	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>3298	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>32a0	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>32a8	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>32b0	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>32b8	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>32c0	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>32c8	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>32d0	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>32d8	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>32e0	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>32e8	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>32f0	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>32f8	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC


.3300					ver_pos_scn1_hi

>3300	 60 60 60 60 60 60 60 60  			.BYTE (>SCREEN1)+$00,(>SCREEN1)+$00,(>SCREEN1)+$00,(>SCREEN1)+$00,(>SCREEN1)+$00,(>SCREEN1)+$00,(>SCREEN1)+$00,(>SCREEN1)+$00

>3308	 61 61 61 61 61 61 61 61  	        .BYTE (>SCREEN1)+$01,(>SCREEN1)+$01,(>SCREEN1)+$01,(>SCREEN1)+$01,(>SCREEN1)+$01,(>SCREEN1)+$01,(>SCREEN1)+$01,(>SCREEN1)+$01

>3310	 62 62 62 62 62 62 62 62  	        .BYTE (>SCREEN1)+$02,(>SCREEN1)+$02,(>SCREEN1)+$02,(>SCREEN1)+$02,(>SCREEN1)+$02,(>SCREEN1)+$02,(>SCREEN1)+$02,(>SCREEN1)+$02

>3318	 63 63 63 63 63 63 63 63  	        .BYTE (>SCREEN1)+$03,(>SCREEN1)+$03,(>SCREEN1)+$03,(>SCREEN1)+$03,(>SCREEN1)+$03,(>SCREEN1)+$03,(>SCREEN1)+$03,(>SCREEN1)+$03

>3320	 65 65 65 65 65 65 65 65  	        .BYTE (>SCREEN1)+$05,(>SCREEN1)+$05,(>SCREEN1)+$05,(>SCREEN1)+$05,(>SCREEN1)+$05,(>SCREEN1)+$05,(>SCREEN1)+$05,(>SCREEN1)+$05

>3328	 66 66 66 66 66 66 66 66  	        .BYTE (>SCREEN1)+$06,(>SCREEN1)+$06,(>SCREEN1)+$06,(>SCREEN1)+$06,(>SCREEN1)+$06,(>SCREEN1)+$06,(>SCREEN1)+$06,(>SCREEN1)+$06

>3330	 67 67 67 67 67 67 67 67  	        .BYTE (>SCREEN1)+$07,(>SCREEN1)+$07,(>SCREEN1)+$07,(>SCREEN1)+$07,(>SCREEN1)+$07,(>SCREEN1)+$07,(>SCREEN1)+$07,(>SCREEN1)+$07

>3338	 68 68 68 68 68 68 68 68  	        .BYTE (>SCREEN1)+$08,(>SCREEN1)+$08,(>SCREEN1)+$08,(>SCREEN1)+$08,(>SCREEN1)+$08,(>SCREEN1)+$08,(>SCREEN1)+$08,(>SCREEN1)+$08

>3340	 6a 6a 6a 6a 6a 6a 6a 6a  	        .BYTE (>SCREEN1)+$0A,(>SCREEN1)+$0A,(>SCREEN1)+$0A,(>SCREEN1)+$0A,(>SCREEN1)+$0A,(>SCREEN1)+$0A,(>SCREEN1)+$0A,(>SCREEN1)+$0A

>3348	 6b 6b 6b 6b 6b 6b 6b 6b  	        .BYTE (>SCREEN1)+$0B,(>SCREEN1)+$0B,(>SCREEN1)+$0B,(>SCREEN1)+$0B,(>SCREEN1)+$0B,(>SCREEN1)+$0B,(>SCREEN1)+$0B,(>SCREEN1)+$0B

>3350	 6c 6c 6c 6c 6c 6c 6c 6c  	        .BYTE (>SCREEN1)+$0C,(>SCREEN1)+$0C,(>SCREEN1)+$0C,(>SCREEN1)+$0C,(>SCREEN1)+$0C,(>SCREEN1)+$0C,(>SCREEN1)+$0C,(>SCREEN1)+$0C

>3358	 6d 6d 6d 6d 6d 6d 6d 6d  	        .BYTE (>SCREEN1)+$0D,(>SCREEN1)+$0D,(>SCREEN1)+$0D,(>SCREEN1)+$0D,(>SCREEN1)+$0D,(>SCREEN1)+$0D,(>SCREEN1)+$0D,(>SCREEN1)+$0D

>3360	 6f 6f 6f 6f 6f 6f 6f 6f  	        .BYTE (>SCREEN1)+$0F,(>SCREEN1)+$0F,(>SCREEN1)+$0F,(>SCREEN1)+$0F,(>SCREEN1)+$0F,(>SCREEN1)+$0F,(>SCREEN1)+$0F,(>SCREEN1)+$0F

>3368	 70 70 70 70 70 70 70 70  	        .BYTE (>SCREEN1)+$10,(>SCREEN1)+$10,(>SCREEN1)+$10,(>SCREEN1)+$10,(>SCREEN1)+$10,(>SCREEN1)+$10,(>SCREEN1)+$10,(>SCREEN1)+$10

>3370	 71 71 71 71 71 71 71 71  	        .BYTE (>SCREEN1)+$11,(>SCREEN1)+$11,(>SCREEN1)+$11,(>SCREEN1)+$11,(>SCREEN1)+$11,(>SCREEN1)+$11,(>SCREEN1)+$11,(>SCREEN1)+$11

>3378	 72 72 72 72 72 72 72 72  	        .BYTE (>SCREEN1)+$12,(>SCREEN1)+$12,(>SCREEN1)+$12,(>SCREEN1)+$12,(>SCREEN1)+$12,(>SCREEN1)+$12,(>SCREEN1)+$12,(>SCREEN1)+$12


.3380					ora_pixel_pos

>3380	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>3388	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>3390	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>3398	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>33a0	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>33a8	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>33b0	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>33b8	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>33c0	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>33c8	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>33d0	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>33d8	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>33e0	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>33e8	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>33f0	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>33f8	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03


.3400					ver_pos_lo

>3400	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>3408	 40 41 42 43 44 45 46 47  	        .BYTE $40,$41,$42,$43,$44,$45,$46,$47

>3410	 80 81 82 83 84 85 86 87  	        .BYTE $80,$81,$82,$83,$84,$85,$86,$87

>3418	 c0 c1 c2 c3 c4 c5 c6 c7  	        .BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>3420	 00 01 02 03 04 05 06 07  	        .BYTE $00,$01,$02,$03,$04,$05,$06,$07

>3428	 40 41 42 43 44 45 46 47  	        .BYTE $40,$41,$42,$43,$44,$45,$46,$47

>3430	 80 81 82 83 84 85 86 87  	        .BYTE $80,$81,$82,$83,$84,$85,$86,$87

>3438	 c0 c1 c2 c3 c4 c5 c6 c7  			.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>3440	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>3448	 40 41 42 43 44 45 46 47  			.BYTE $40,$41,$42,$43,$44,$45,$46,$47

>3450	 80 81 82 83 84 85 86 87  			.BYTE $80,$81,$82,$83,$84,$85,$86,$87

>3458	 c0 c1 c2 c3 c4 c5 c6 c7  			.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>3460	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>3468	 40 41 42 43 44 45 46 47  			.BYTE $40,$41,$42,$43,$44,$45,$46,$47

>3470	 80 81 82 83 84 85 86 87  			.BYTE $80,$81,$82,$83,$84,$85,$86,$87

>3478	 c0 c1 c2 c3 c4 c5 c6 c7  			.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>3480	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07


.3488					hor_scr_pos

>3488	 00 00 00 00 08 08 08 08  			.BYTE $00,$00,$00,$00,$08,$08,$08,$08

>3490	 10 10 10 10 18 18 18 18  	        .BYTE $10,$10,$10,$10,$18,$18,$18,$18

>3498	 20 20 20 20 28 28 28 28  	        .BYTE $20,$20,$20,$20,$28,$28,$28,$28

>34a0	 30 30 30 30 38 38 38 38  	        .BYTE $30,$30,$30,$30,$38,$38,$38,$38

>34a8	 40 40 40 40 48 48 48 48  	        .BYTE $40,$40,$40,$40,$48,$48,$48,$48

>34b0	 50 50 50 50 58 58 58 58  	        .BYTE $50,$50,$50,$50,$58,$58,$58,$58

>34b8	 60 60 60 60 68 68 68 68  	        .BYTE $60,$60,$60,$60,$68,$68,$68,$68

>34c0	 70 70 70 70 78 78 78 78  	        .BYTE $70,$70,$70,$70,$78,$78,$78,$78

>34c8	 80 80 80 80 88 88 88 88  	        .BYTE $80,$80,$80,$80,$88,$88,$88,$88

>34d0	 90 90 90 90 98 98 98 98  	        .BYTE $90,$90,$90,$90,$98,$98,$98,$98

>34d8	 a0 a0 a0 a0 a8 a8 a8 a8  	        .BYTE $A0,$A0,$A0,$A0,$A8,$A8,$A8,$A8

>34e0	 b0 b0 b0 b0 b8 b8 b8 b8  	        .BYTE $B0,$B0,$B0,$B0,$B8,$B8,$B8,$B8

>34e8	 c0 c0 c0 c0 c8 c8 c8 c8  	        .BYTE $C0,$C0,$C0,$C0,$C8,$C8,$C8,$C8

>34f0	 d0 d0 d0 d0 d8 d8 d8 d8  	        .BYTE $D0,$D0,$D0,$D0,$D8,$D8,$D8,$D8

>34f8	 e0 e0 e0 e0 e8 e8 e8 e8  	        .BYTE $E0,$E0,$E0,$E0,$E8,$E8,$E8,$E8

>3500	 f0 f0 f0 f0 f8 f8 f8 f8  	        .BYTE $F0,$F0,$F0,$F0,$F8,$F8,$F8,$F8

>3508	 a9 d2 fb 24 4d 76 9f c8  	LINE_DRAW_PTR_LO   .BYTE <LINE_DRAW_0,<LINE_DRAW_1,<LINE_DRAW_2,<LINE_DRAW_3,<LINE_DRAW_4,<LINE_DRAW_5,<LINE_DRAW_6,<LINE_DRAW_7 

>3510	 12 12 12 13 13 13 13 13  	LINE_DRAW_PTR_HI   .BYTE >LINE_DRAW_0,>LINE_DRAW_1,>LINE_DRAW_2,>LINE_DRAW_3,>LINE_DRAW_4,>LINE_DRAW_5,>LINE_DRAW_6,>LINE_DRAW_7 

>3518	 00 07 03 04 01 06 02 05  	LINE_DRAW_CONV_PTR .BYTE $00,$07,$03,$04,$01,$06,$02,$05

>3520	 7f 7f 00 00 00 00 7f 7f  	PERS_HOR_EDGE   .BYTE CLIP_RIGHT,CLIP_RIGHT,$00,$00,$00,$00,CLIP_RIGHT,CLIP_RIGHT	; right or left edge of screen todo?

>3528	 7f 7f 7f 7f 00 00 00 00  	PERS_VER_EDGE   .BYTE CLIP_BOTTOM,CLIP_BOTTOM,CLIP_BOTTOM,CLIP_BOTTOM,$00,$00,$00,$00	; bottom or top of screen todo?

>3530	 40 38 08 00 40 38 28 30  	fBBE8   .BYTE $40,$38,$08,$00,$40,$38,$28,$30

>3538	 40 18 08 10 40 18 28 20  			.BYTE $40,$18,$08,$10,$40,$18,$28,$20

>3540	 00 00 03 00 00 00 02 02  	fBBF8   .BYTE $00,$00,$03,$00,$00,$00,$02,$02

>3548	 00 00 00 06 04 00 00 04  			.BYTE $00,$00,$00,$06,$04,$00,$00,$04

>3550	 0c 00 00 00 08 08 00 00  			.BYTE $0C,$00,$00,$00,$08,$08,$00,$00

>3558	 00 09 00 00 00 01 01 00  			.BYTE $00,$09,$00,$00,$00,$01,$01,$00	

>3560	 01 00 00 00 01 01 00 00  	fBC18   .BYTE $01,$00,$00,$00,$01,$01,$00,$00

>3568	 00 01 00 00 00 01 01 00  			.BYTE $00,$01,$00,$00,$00,$01,$01,$00

>3570	 00 00 01 00 00 00 01 01  			.BYTE $00,$00,$01,$00,$00,$00,$01,$01

>3578	 00 00 00 01 01 00 00 01  			.BYTE $00,$00,$00,$01,$01,$00,$00,$01

=4000					SCREEN0 = $4000

=5c00					SCREEN_COLOUR =  $5C00

=6000					SCREEN1 = $6000


;******  end of code
