
*= 2049
!byte $0c,$08,$0a,$00,$9e   ; Line 10 SYS
!tx "2070"            ; Address for sys start in text

SPRITES =2
REGA = 3
REGX = 4
REGY = 5
SPRITES_LEFT =7
SPRITE_NEXT_POS = 8
TEMPY = 9 ;7?

SORTED =31 ;63 to 94
SPRITE_YPOS =63 ;31 to 62
SPRITE_RASTER = 95 ;95 to 127
SPRITE_XPOS =127 ;127 to 158
SPRITE_COL =159 ;159 to 190
SPRITE_PTR =191 ;191 to 222
SPRITE_XMSB =223 ;223 to 254

BDR = $D020
SCR0 = $D021
SCR1 = $D022
SCR2 = $D023
SCR3 = $D024
SPC1 = $D025
SPC2 = $D026

SPRENBL = 53248+21
SPRXPX = 53248+29 
SPRXPY = 53248+23

S0X = 53248+0
S0Y = 53248+1
S0C = $D027
S0P = 2040

S1X = 53248+2
S1Y = 53248+3
S1C = $D028
S1P = 2041

S2X = 53248+4
S2Y = 53248+5
S2C = $D029
S2P = 2042

S3X = 53248+6
S3Y = 53248+7
S3C = $D02A
S3P = 2043

S4X = 53248+8
S4Y = 53248+9
S4C = $D02B
S4P = 2044

S5X = 53248+10
S5Y = 53248+11
S5C = $D02C
S5P = 2045

S6X = 53248+12
S6Y = 53248+13
S6C = $D02D
S6P = 2046

S7X = 53248+14
S7Y = 53248+15
S7C = $D02E
S7P = 2047

SPRXMSB = 53248+16

*= 2070

SEI        ; disable maskable IRQs
 LDA #$7F
 STA $DC0D  ; disable timer interrupts which can be generated by the two CIA chips
 STA $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

 LDA $DC0D  ; by reading this two registers we negate any pending CIA irqs.
 LDA $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

 LDA #$01   ; this is how to tell the VICII to generate a raster interrupt
 STA $D01A

 LDA #$1B   ; as there are more than 256 rasterlines, the topmost bit of $d011 serves as
 STA $D011  ; the 9th bit for the rasterline we want our irq to be triggered. here we simply set up a character screen, leaving the topmost bit 0.

 LDA #$35   ; we turn off the BASIC and KERNAL rom here
 STA $01    ; the cpu now sees RAM everywhere except at $d000-$e000, where still the registers of SID/VICII/etc are visible

 ldA #<MP_IRQ  ; this is how we set up
 STA $FFFE     ; the address of our interrupt code
 LDA #>MP_IRQ
 STA $FFFF
 LDA #242   ; this is how to tell at which rasterline we want the irq to be triggered
 STA $D012
  
 LDA #<NMI_NOP ; lsb
 STA $FFFA ; Create a nop, irq handler for NMI that gets called whenever RESTORE is pressed or similar.
 LDA #>NMI_NOP ; msb
 STA $FFFB ; We're putting our irq handler directly in the vector that usually points to the kernal's NMI handler since we have kernal banked out.

 LDA #$00  ; Force an NMI by setting up a timer. This will cause an NMI, that won't be acked. Any subsequent NMI's from RESTORE will be essentially disabled.
 STA $DD0E       ; Stop timer A
 STA $DD04       ; Set timer A to 0, NMI will occure immediately after start
 STA $DD0E

 LDA #$81
 STA $DD0D       ; Set timer A as source for NMI

 LDA #$01
 STA $DD0E       ; Start timer A -> NMI

 LDA #$02
 STA $DD00 ; bank
  
  JSR SETUP_DATA
  JSR SETUP_SCN
 
  LDA #$00
  STA $D021
 
CLI ; enable maskable interrupts again

MLOOP:
  JMP MLOOP ; we better don't RTS, the ROMS are now switched off, there's no way back to the system

!MACRO SORT_USED_SPRITES_2 V1_2,V2_2 {
  LDA SPRITE_YUSED+V1_2   ; IS SPRITE AT THIS POSITION USED
  BMI V2_2                  ; TOP BIT SET SO NO
    STA SORTED,Y            ; YES - STORE IN SORTED LIST
    STX SPRITE_YUSED+V1_2  ; CLEAR USED
    INY                     ; INC SORTED COUNT
V2_2:
}

!MACRO RASTERSET R1 {
  LDY SORTED+R1     ; get sprite
  LDA SPRITE_YPOS,Y
  ADC #22 ; +1 as SEC is set
  STA SPRITE_RASTER+R1 ; store at sprite raster pos
}
 
!MACRO RASTERCHECK R1,R2 {
  SBC SPRITE_RASTER+R1+1 ; sub prev 
  CMP #3
  BCS R2
   SEC ; set it
   LDA SPRITE_RASTER+R1+1
   STA SPRITE_RASTER+R1
R2:  
}

!ALIGN 255,0
  
SP01:
  LDA SPRITE_XPOS,X
  STA S0X
  LDA SPRITE_YPOS,X
  STA S0Y
  LDA SPRITE_COL,X
  STA S0C
  LDA SPRITE_PTR,X
  STA S0P
  LDA SPRITE_XMSB,X
  BEQ SP01MSB
   LDA #$01
   JMP SRR_JMP_MSB
SP01MSB
   LDA #$FF-$01
   JMP SRR_JMP_LSB

SP11:
  LDA SPRITE_XPOS,X
  STA S1X
  LDA SPRITE_YPOS,X
  STA S1Y
  LDA SPRITE_COL,X
  STA S1C
  LDA SPRITE_PTR,X
  STA S1P
  LDA SPRITE_XMSB,X
  BEQ SP11MSB
   LDA #$02
   JMP SRR_JMP_MSB
SP11MSB
   LDA #$FF-$02
   JMP SRR_JMP_LSB

SP21:
  LDA SPRITE_XPOS,X
  STA S2X
  LDA SPRITE_YPOS,X
  STA S2Y
  LDA SPRITE_COL,X
  STA S2C
  LDA SPRITE_PTR,X
  STA S2P
  LDA SPRITE_XMSB,X
  BEQ SP21MSB
   LDA #$04
   JMP SRR_JMP_MSB
SP21MSB
   LDA #$FF-$04
   JMP SRR_JMP_LSB

SP31:
  LDA SPRITE_XPOS,X
  STA S3X
  LDA SPRITE_YPOS,X
  STA S3Y
  LDA SPRITE_COL,X
  STA S3C
  LDA SPRITE_PTR,X
  STA S3P
  LDA SPRITE_XMSB,X
  BEQ SP31MSB
   LDA #$08
   JMP SRR_JMP_MSB
SP31MSB
   LDA #$FF-$08
   JMP SRR_JMP_LSB

 SP41:
  LDA SPRITE_XPOS,X
  STA S4X
  LDA SPRITE_YPOS,X
  STA S4Y
  LDA SPRITE_COL,X
  STA S4C
  LDA SPRITE_PTR,X
  STA S4P
  LDA SPRITE_XMSB,X
  BEQ SPR41MSB
   LDA #$10
   JMP SRR_JMP_MSB
SPR41MSB
   LDA #$FF-$10
   JMP SRR_JMP_LSB

SP51:
  LDA SPRITE_XPOS,X
  STA S5X
  LDA SPRITE_YPOS,X
  STA S5Y
  LDA SPRITE_COL,X
  STA S5C
  LDA SPRITE_PTR,X
  STA S5P
  LDA SPRITE_XMSB,X
  BEQ SPR51MSB
   LDA #$20
   JMP SRR_JMP_MSB
SPR51MSB
   LDA #$FF-$20
   JMP SRR_JMP_LSB

SP61:
  LDA SPRITE_XPOS,X
  STA S6X
  LDA SPRITE_YPOS,X
  STA S6Y
  LDA SPRITE_COL,X
  STA S6C
  LDA SPRITE_PTR,X
  STA S6P
  LDA SPR_XMSB,X
  BEQ SPR61MSB
   LDA #$40
   JMP SRR_JMP_MSB
SPR61MSB
   LDA #$FF-$40
   JMP SRR_JMP_LSB
   
SP71:
  LDA SPRITE_XPOS,X
  STA S7X
  LDA SPRITE_YPOS,X
  STA S7Y
  LDA SPRITE_COL,X
  STA S7C
  LDA SPRITE_PTR,X
  STA S7P
  LDA SPRITE_XMSB,X
  BEQ SPR71MSB
   LDA #$80
   JMP SRR_JMP_MSB
SPR71MSB:
   LDA #$FF-$80
   JMP SRR_JMP_LSB   

SETUP_SPR_EXIT_5
  RTS
   

SETUP_SPR:
  LDA #0 ; left as none
  STA S0Y
  STA S1Y
  STA S2Y
  STA S3Y
  STA S4Y
  STA S5Y
  STA S6Y
  STA S7Y
  
  LDY SPRITES
  BMI SETUP_SPR_EXIT_5 ; none to draw
  LDX SPRITES
  CPY #8             ; more than 8
  BCC SETUP_SPR_LESS ; LESS
   LDX #7 ; draw 8

SETUP_SPR_LESS:
 LDA SPRTABLO1,X
 STA SPR_JMP_2+1
 LDA #0 ; clear msb
SPR_JMP_2:
  JMP SP74 ; draw first sprites
  
!ALIGN 255,0
  
SP04:
 STY TEMPY
 LDX SORTED,Y
 LDY SPRITE_XPOS,X
 STY S0X
 LDY SPRITE_YPOS,X
 STY S0Y
 LDY SPRITE_COL,X
 STY S0C
 LDY SPRITE_PTR,X
 STY S0P
 LDY SPRITE_XMSB,X
 BEQ SP04MSB
  ORA #$01
SP04MSB
 LDY TEMPY
 DEY
SP14:
 STY TEMPY
 LDX SORTED,Y
 LDY SPRITE_XPOS,X
 STY S1X
 LDY SPRITE_YPOS,X
 STY S1Y
 LDY SPRITE_COL,X
 STY S1C
 LDY SPRITE_PTR,X
 STY S1P
 LDY SPRITE_XMSB,X
 BEQ SP14MSB
  ORA #$02
SP14MSB
 LDY TEMPY
 DEY
SP24:
 STY TEMPY
 LDX SORTED,Y
 LDY SPRITE_XPOS,X
 STY S2X
 LDY SPRITE_YPOS,X
 STY S2Y
 LDY SPRITE_COL,X
 STY S2C
 LDY SPRITE_PTR,X
 STY S2P
 LDY SPRITE_XMSB,X
 BEQ SP24MSB
  ORA #$04
SP24MSB
 LDY TEMPY
 DEY
SP34:
 STY TEMPY
 LDX SORTED,Y
 LDY SPRITE_XPOS,X
 STY S3X
 LDY SPRITE_YPOS,X
 STY S3Y
 LDY SPRITE_COL,X
 STY S3C
 LDY SPRITE_PTR,X
 STY S3P
 LDY SPRITE_XMSB,X
 BEQ SP34MSB
  ORA #$08
SP34MSB
 LDY TEMPY
 DEY
SP44:
 STY TEMPY
 LDX SORTED,Y
 LDY SPRITE_XPOS,X
 STY S4X
 LDY SPRITE_YPOS,X
 STY S4Y
 LDY SPRITE_COL,X
 STY S4C
 LDY SPRITE_PTR,X
 STY S4P
 LDY SPRITE_XMSB,X
 BEQ SPR44MSB
  ORA #$10
SPR44MSB
 LDY TEMPY
 DEY
SP54:
 STY TEMPY
 LDX SORTED,Y
 LDY SPRITE_XPOS,X
 STY S5X
 LDY SPRITE_YPOS,X
 STY S5Y
 LDY SPRITE_COL,X
 STY S5C
 LDY SPRITE_PTR,X
 STY S5P
 LDY SPRITE_XMSB,X
 BEQ SPR54MSB
  ORA #$20
SPR54MSB
 LDY TEMPY
 DEY
SP64:
 STY TEMPY
 LDX SORTED,Y
 LDY SPRITE_XPOS,X
 STY S6X
 LDY SPRITE_YPOS,X
 STY S6Y
 LDY SPRITE_COL,X
 STY S6C
 LDY SPRITE_PTR,X
 STY S6P
 LDY SPRITE_XMSB,X
 BEQ SPR64MSB
  ORA #$40
SPR64MSB
 LDY TEMPY
 DEY
SP74:
 STY TEMPY
 LDX SORTED,Y
 LDY SPRITE_XPOS,X
 STY S7X
 LDY SPRITE_YPOS,X
 STY S7Y
 LDY SPRITE_COL,X
 STY S7C
 LDY SPRITE_PTR,X
 STY S7P
 LDY SPRITE_XMSB,X
 BEQ SPR74MSB
  ORA #$80
SPR74MSB:
 LDY TEMPY
 DEY
 
  STA SPRXMSB ; set msb
  TYA ; set flags to check any left to draw?
  BPL SETUP_SPR_CONT ; yes
   RTS  ; no
SETUP_SPR_CONT:
  STY SPRITES_LEFT ; STORE SPRITES LEFT

  LDA #0
  STA SPRITE_NEXT_POS ; set next as 0
  
  LDA #<SP_IRQ ; raster interrupt setup
  STA $FFFE
  LDA #>SP_IRQ
  STA $FFFF
  
  SEC
  +RASTERSET 31

  +RASTERSET 30
  +RASTERCHECK 30, RC30
  +RASTERSET 29
  +RASTERCHECK 29, RC29
  +RASTERSET 28
  +RASTERCHECK 28, RC28
  +RASTERSET 27
  +RASTERCHECK 27, RC27
  +RASTERSET 26
  +RASTERCHECK 26, RC26
  +RASTERSET 25
  +RASTERCHECK 25, RC25
  +RASTERSET 24
  +RASTERCHECK 24, RC24
  +RASTERSET 23
  +RASTERCHECK 23, RC23
  +RASTERSET 22
  +RASTERCHECK 22, RC22
  +RASTERSET 21
  +RASTERCHECK 21, RC21

  +RASTERSET 20
  +RASTERCHECK 20, RC20
  +RASTERSET 19
  +RASTERCHECK 19, RC19
  +RASTERSET 18
  +RASTERCHECK 18, RC18
  +RASTERSET 17
  +RASTERCHECK 17, RC17
  +RASTERSET 16
  +RASTERCHECK 16, RC16
  +RASTERSET 15
  +RASTERCHECK 15, RC15
  +RASTERSET 14
  +RASTERCHECK 14, RC14
  +RASTERSET 13
  +RASTERCHECK 13, RC13
  +RASTERSET 12
  +RASTERCHECK 12, RC12
  +RASTERSET 11
  +RASTERCHECK 11, RC11
  
  +RASTERSET 10
  +RASTERCHECK 10, RC10
  +RASTERSET 09
  +RASTERCHECK 09, RC09
  +RASTERSET 08
  +RASTERCHECK 08, RC08
  +RASTERSET 07
  +RASTERCHECK 07, RC07
  +RASTERSET 06
  +RASTERCHECK 06, RC06
;  +RASTERSET 05
;  +RASTERCHECK 05, RC05
;  +RASTERSET 04
;  +RASTERCHECK 04, RC04
;  +RASTERSET 03
;  +RASTERCHECK 03, RC03
;  +RASTERSET 02
;  +RASTERCHECK 02, RC02
;  +RASTERSET 01
;  +RASTERCHECK 01, RC01
  
  LDX SPRITES         ; get first sprite
  LDA SPRITE_RASTER,X ; get first sprite
  STA $D012           ; next raster
RTS

SP_IRQ:     ; sprite irq
 INC $D019  ; VIC Interrupt Request Register (IRR)
 STA REGA
 STX REGX
 STY REGY

SPRITES_LEFT_LOOP:
 INC $D020  ; border

 LDY SPRITE_NEXT_POS ; get next sprite
 LDA SPRTABLO,Y
 STA SPR_JMP+1
 INY
 STY SPRITE_NEXT_POS ; inc next sprite

 LDY SPRITES_LEFT
 LDX SORTED,Y ; get next sprite to draw
SPR_JMP:
 JMP SP01 ; draw sprite
SRR_JMP_MSB:
 ORA SPRXMSB
 STA SPRXMSB
 DEY
 BPL SETUP_SPR_NEXT ; setup next sprite to draw

  DEC $D020 ; border

  LDA #<MP_IRQ ; mp irq address
  STA $FFFE
  LDA #>MP_IRQ
  STA $FFFF
  LDA #242  ; irq line
  STA $D012

  LDA REGA
  LDX REGX 
  LDY REGY
  RTI

SRR_JMP_LSB:
 AND SPRXMSB
 STA SPRXMSB
 DEY
 BPL SETUP_SPR_NEXT ; setup next sprite to draw

  DEC $D020  ; border

  LDA #<MP_IRQ  ; mp irq address
  STA $FFFE
  LDA #>MP_IRQ
  STA $FFFF
  LDA #242   ;  irq line
  STA $D012

  LDA REGA
  LDX REGX 
  LDY REGY
  RTI

SETUP_SPR_NEXT:
 DEC $D020  ; border

 STY SPRITES_LEFT
 LDA SPRITE_RASTER+8,Y ; get sprite 8 behind current
 CMP SPRITE_RASTER+9,Y ; get previously set raster position
 BEQ SPRITES_LEFT_LOOP ; same so get next sprite

  LDA SPRITE_RASTER+8,Y ; get first sprite
  STA $D012 ; next raster
 
  LDA REGA
  LDX REGX 
  LDY REGY
RTI

MULTIPLEXOR:

 INC $D020    ; border

IDENTIFY_USED:
 LDX SPRITES ; NUMBERS OF SPRITES-1

IDENTIFY_LOOP_1:
  LDY SPRITE_YPOS,X   ; Y= SPRITE YPOS

IDENTIFY_LOOP_2:
  LDA SPRITE_YUSED,Y ; USED POS
  BMI Y_UNUSED      ; TOP BIT SET SO UNUSED
   INY
   BNE IDENTIFY_LOOP_2: ; next position - replaces JMP IDENTIFY_LOOP_2

Y_UNUSED:
    TXA                 ; NO - MOVE SPRITE VALUE TO A
    STA SPRITE_YUSED,Y  ; STORE SPRITE VALUE IN YUSED

  DEX               ; DECREMENT SPRITE 
  BPL IDENTIFY_LOOP_1   ; EXIT  

 INC $D020    ; border

SORT_USED:
  LDY #0    ; RESET USED COUNT
  LDX #255 ; SLOTS TO CHECK 244 to 28

  +SORT_USED_SPRITES_2 243,V3_243
  +SORT_USED_SPRITES_2 244,V3_244
  +SORT_USED_SPRITES_2 242,V2_242
  +SORT_USED_SPRITES_2 241,V1_241
  +SORT_USED_SPRITES_2 240,V0_240
  
  +SORT_USED_SPRITES_2 239,V9_239
  +SORT_USED_SPRITES_2 238,V8_238
  +SORT_USED_SPRITES_2 237,V7_237
  +SORT_USED_SPRITES_2 236,V6_236
  +SORT_USED_SPRITES_2 235,V5_235
  +SORT_USED_SPRITES_2 234,V4_234
  +SORT_USED_SPRITES_2 233,V3_233
  +SORT_USED_SPRITES_2 232,V2_232
  +SORT_USED_SPRITES_2 231,V1_231
  +SORT_USED_SPRITES_2 230,V0_230

  +SORT_USED_SPRITES_2 229,V9_229
  +SORT_USED_SPRITES_2 228,V8_228
  +SORT_USED_SPRITES_2 227,V7_227
  +SORT_USED_SPRITES_2 226,V6_226
  +SORT_USED_SPRITES_2 225,V5_225
  +SORT_USED_SPRITES_2 224,V4_224
  +SORT_USED_SPRITES_2 223,V3_223
  +SORT_USED_SPRITES_2 222,V2_222
  +SORT_USED_SPRITES_2 221,V1_221
  +SORT_USED_SPRITES_2 220,V0_220

  +SORT_USED_SPRITES_2 219,V9_219
  +SORT_USED_SPRITES_2 218,V8_218
  +SORT_USED_SPRITES_2 217,V7_217
  +SORT_USED_SPRITES_2 216,V6_216
  +SORT_USED_SPRITES_2 215,V5_215
  +SORT_USED_SPRITES_2 214,V4_214
  +SORT_USED_SPRITES_2 213,V3_213
  +SORT_USED_SPRITES_2 212,V2_212
  +SORT_USED_SPRITES_2 211,V1_211
  +SORT_USED_SPRITES_2 210,V0_210

  +SORT_USED_SPRITES_2 209,V9_209
  +SORT_USED_SPRITES_2 208,V8_208
  +SORT_USED_SPRITES_2 207,V7_207
  +SORT_USED_SPRITES_2 206,V6_206
  +SORT_USED_SPRITES_2 205,V5_205
  +SORT_USED_SPRITES_2 204,V4_204
  +SORT_USED_SPRITES_2 203,V3_203
  +SORT_USED_SPRITES_2 202,V2_202
  +SORT_USED_SPRITES_2 201,V1_201
  +SORT_USED_SPRITES_2 200,V0_200

  +SORT_USED_SPRITES_2 199,V9_199
  +SORT_USED_SPRITES_2 198,V8_198
  +SORT_USED_SPRITES_2 197,V7_197
  +SORT_USED_SPRITES_2 196,V6_196
  +SORT_USED_SPRITES_2 195,V5_195
  +SORT_USED_SPRITES_2 194,V4_194
  +SORT_USED_SPRITES_2 193,V3_193
  +SORT_USED_SPRITES_2 192,V2_192
  +SORT_USED_SPRITES_2 191,V1_191
  +SORT_USED_SPRITES_2 190,V0_190

  +SORT_USED_SPRITES_2 189,V9_189
  +SORT_USED_SPRITES_2 188,V8_188
  +SORT_USED_SPRITES_2 187,V7_187
  +SORT_USED_SPRITES_2 186,V6_186
  +SORT_USED_SPRITES_2 185,V5_185
  +SORT_USED_SPRITES_2 184,V4_184
  +SORT_USED_SPRITES_2 183,V3_183
  +SORT_USED_SPRITES_2 182,V2_182
  +SORT_USED_SPRITES_2 181,V1_181
  +SORT_USED_SPRITES_2 180,V0_180
  
  +SORT_USED_SPRITES_2 179,V9_179
  +SORT_USED_SPRITES_2 178,V8_178
  +SORT_USED_SPRITES_2 177,V7_177
  +SORT_USED_SPRITES_2 176,V6_176
  +SORT_USED_SPRITES_2 175,V5_175
  +SORT_USED_SPRITES_2 174,V4_174
  +SORT_USED_SPRITES_2 173,V3_173
  +SORT_USED_SPRITES_2 172,V2_172
  +SORT_USED_SPRITES_2 171,V1_171
  +SORT_USED_SPRITES_2 170,V0_170

  +SORT_USED_SPRITES_2 169,V9_169
  +SORT_USED_SPRITES_2 168,V8_168
  +SORT_USED_SPRITES_2 167,V7_167
  +SORT_USED_SPRITES_2 166,V6_166
  +SORT_USED_SPRITES_2 165,V5_165
  +SORT_USED_SPRITES_2 164,V4_164
  +SORT_USED_SPRITES_2 163,V3_163
  +SORT_USED_SPRITES_2 162,V2_162
  +SORT_USED_SPRITES_2 161,V1_161
  +SORT_USED_SPRITES_2 160,V0_160

  +SORT_USED_SPRITES_2 159,V9_159
  +SORT_USED_SPRITES_2 158,V8_158
  +SORT_USED_SPRITES_2 157,V7_157
  +SORT_USED_SPRITES_2 156,V6_156
  +SORT_USED_SPRITES_2 155,V5_155
  +SORT_USED_SPRITES_2 154,V4_154
  +SORT_USED_SPRITES_2 153,V3_153
  +SORT_USED_SPRITES_2 152,V2_152
  +SORT_USED_SPRITES_2 151,V1_151
  +SORT_USED_SPRITES_2 150,V0_150

  +SORT_USED_SPRITES_2 149,V9_149
  +SORT_USED_SPRITES_2 148,V8_148
  +SORT_USED_SPRITES_2 147,V7_147
  +SORT_USED_SPRITES_2 146,V6_146
  +SORT_USED_SPRITES_2 145,V5_145
  +SORT_USED_SPRITES_2 144,V4_144
  +SORT_USED_SPRITES_2 143,V3_143
  +SORT_USED_SPRITES_2 142,V2_142
  +SORT_USED_SPRITES_2 141,V1_141
  +SORT_USED_SPRITES_2 140,V0_140

  +SORT_USED_SPRITES_2 139,V9_139
  +SORT_USED_SPRITES_2 138,V8_138
  +SORT_USED_SPRITES_2 137,V7_137
  +SORT_USED_SPRITES_2 136,V6_136
  +SORT_USED_SPRITES_2 135,V5_135
  +SORT_USED_SPRITES_2 134,V4_134
  +SORT_USED_SPRITES_2 133,V3_133
  +SORT_USED_SPRITES_2 132,V2_132
  +SORT_USED_SPRITES_2 131,V1_131
  +SORT_USED_SPRITES_2 130,V0_130

  +SORT_USED_SPRITES_2 129,V9_129
  +SORT_USED_SPRITES_2 128,V8_128
  +SORT_USED_SPRITES_2 127,V7_127
  +SORT_USED_SPRITES_2 126,V6_126
  +SORT_USED_SPRITES_2 125,V5_125
  +SORT_USED_SPRITES_2 124,V4_124
  +SORT_USED_SPRITES_2 123,V3_123
  +SORT_USED_SPRITES_2 122,V2_122
  +SORT_USED_SPRITES_2 121,V1_121
  +SORT_USED_SPRITES_2 120,V0_120

  +SORT_USED_SPRITES_2 119,V9_119
  +SORT_USED_SPRITES_2 118,V8_118
  +SORT_USED_SPRITES_2 117,V7_117
  +SORT_USED_SPRITES_2 116,V6_116
  +SORT_USED_SPRITES_2 115,V5_115
  +SORT_USED_SPRITES_2 114,V4_114
  +SORT_USED_SPRITES_2 113,V3_113
  +SORT_USED_SPRITES_2 112,V2_112
  +SORT_USED_SPRITES_2 111,V1_111
  +SORT_USED_SPRITES_2 110,V0_110

  +SORT_USED_SPRITES_2 109,V9_109
  +SORT_USED_SPRITES_2 108,V8_108
  +SORT_USED_SPRITES_2 107,V7_107
  +SORT_USED_SPRITES_2 106,V6_106
  +SORT_USED_SPRITES_2 105,V5_105
  +SORT_USED_SPRITES_2 104,V4_104
  +SORT_USED_SPRITES_2 103,V3_103
  +SORT_USED_SPRITES_2 102,V2_102
  +SORT_USED_SPRITES_2 101,V1_101
  +SORT_USED_SPRITES_2 100,V0_100

  +SORT_USED_SPRITES_2 99,V9_99
  +SORT_USED_SPRITES_2 98,V8_98
  +SORT_USED_SPRITES_2 97,V7_97
  +SORT_USED_SPRITES_2 96,V6_96
  +SORT_USED_SPRITES_2 95,V5_95
  +SORT_USED_SPRITES_2 94,V4_94
  +SORT_USED_SPRITES_2 93,V3_93
  +SORT_USED_SPRITES_2 92,V2_92
  +SORT_USED_SPRITES_2 91,V1_91
  +SORT_USED_SPRITES_2 90,V0_90

  +SORT_USED_SPRITES_2 89,V9_89
  +SORT_USED_SPRITES_2 88,V8_88
  +SORT_USED_SPRITES_2 87,V7_87
  +SORT_USED_SPRITES_2 86,V6_86
  +SORT_USED_SPRITES_2 85,V5_85
  +SORT_USED_SPRITES_2 84,V4_84
  +SORT_USED_SPRITES_2 83,V3_83
  +SORT_USED_SPRITES_2 82,V2_82
  +SORT_USED_SPRITES_2 81,V1_81
  +SORT_USED_SPRITES_2 80,V0_80

  +SORT_USED_SPRITES_2 79,V9_79
  +SORT_USED_SPRITES_2 78,V8_78
  +SORT_USED_SPRITES_2 77,V7_77
  +SORT_USED_SPRITES_2 76,V6_76
  +SORT_USED_SPRITES_2 75,V5_75
  +SORT_USED_SPRITES_2 74,V4_74
  +SORT_USED_SPRITES_2 73,V3_73
  +SORT_USED_SPRITES_2 72,V2_72
  +SORT_USED_SPRITES_2 71,V1_71
  +SORT_USED_SPRITES_2 70,V0_70

  +SORT_USED_SPRITES_2 69,V9_69
  +SORT_USED_SPRITES_2 68,V8_68
  +SORT_USED_SPRITES_2 67,V7_67
  +SORT_USED_SPRITES_2 66,V6_66
  +SORT_USED_SPRITES_2 65,V5_65
  +SORT_USED_SPRITES_2 64,V4_64
  +SORT_USED_SPRITES_2 63,V3_63
  +SORT_USED_SPRITES_2 62,V2_62
  +SORT_USED_SPRITES_2 61,V1_61
  +SORT_USED_SPRITES_2 60,V0_60

  +SORT_USED_SPRITES_2 59,V9_59
  +SORT_USED_SPRITES_2 58,V8_58
  +SORT_USED_SPRITES_2 57,V7_57
  +SORT_USED_SPRITES_2 56,V6_56
  +SORT_USED_SPRITES_2 55,V5_55
  +SORT_USED_SPRITES_2 54,V4_54
  +SORT_USED_SPRITES_2 53,V3_53
  +SORT_USED_SPRITES_2 52,V2_52
  +SORT_USED_SPRITES_2 51,V1_51
  +SORT_USED_SPRITES_2 50,V0_50

  +SORT_USED_SPRITES_2 49,V9_49
  +SORT_USED_SPRITES_2 48,V8_48
  +SORT_USED_SPRITES_2 47,V7_47
  +SORT_USED_SPRITES_2 46,V6_46
  +SORT_USED_SPRITES_2 45,V5_45
  +SORT_USED_SPRITES_2 44,V4_44
  +SORT_USED_SPRITES_2 43,V3_43
  +SORT_USED_SPRITES_2 42,V2_42
  +SORT_USED_SPRITES_2 41,V1_41
  +SORT_USED_SPRITES_2 40,V0_40

  +SORT_USED_SPRITES_2 39,V9_39
  +SORT_USED_SPRITES_2 38,V8_38
  +SORT_USED_SPRITES_2 37,V7_37
  +SORT_USED_SPRITES_2 36,V6_36
  +SORT_USED_SPRITES_2 35,V5_35
  +SORT_USED_SPRITES_2 34,V4_34
  +SORT_USED_SPRITES_2 33,V3_33
  +SORT_USED_SPRITES_2 32,V2_32
  +SORT_USED_SPRITES_2 31,V1_31
  +SORT_USED_SPRITES_2 30,V0_30

  +SORT_USED_SPRITES_2 29,V9_29
  +SORT_USED_SPRITES_2 28,V8_28
;  +SORT_USED_SPRITES_2 27,V8_27  
  
 DEC $D020    ; border

  JSR SETUP_SPR
 DEC $D020    ; border
 
RTS
  
MP_IRQ: ; multiplexor irq
 INC $D019    ;VIC Interrupt Request Register (IRR)
 STA REGA
 STX REGX 
 STY REGY

 JSR MULTIPLEXOR
 
 JSR SPR_TEMP_MOVE

 LDA REGA
 LDX REGX 
 LDY REGY
NMI_NOP:
RTI ; This is the irq handler for the NMI. Just returns without acknowledge. This prevents subsequent NMI's from interfering.


SETUP_DATA:
 LDA #31; //31 ; sprite-1
 STA SPRITES
 
 LDX SPRITES
SETUP_DATA_LOOP:
  LDA SPR_YPOS,X
  STA SPRITE_YPOS,X
  LDA SPR_XPOS,X
  STA SPRITE_XPOS,X
  LDA SPR_COL,X
  STA SPRITE_COL,X
  LDA SPR_XMSB,X
  STA SPRITE_XMSB,X
  LDA SPR_PTR,X
  STA SPRITE_PTR,X
 DEX 
 BPL SETUP_DATA_LOOP:
 
RTS

SETUP_SCN:
  LDA #0
  STA BDR

  LDA #1
  STA SCR0
  LDA #2
  STA SCR1
  LDA #3
  STA SCR2

  LDA #4
  STA SPC1
  LDA #5
  STA SPC2

  LDA #255
  STA SPRENBL
  LDA #0
  STA SPRXPX
  STA SPRXPY
  LDA #255
  STA SPRENBL

 LDA #$7E
 STA $D018    ;VIC Memory Control Register

 LDA #$1B     ; text mode
 STA $D011    ;VIC Control Register 1

 LDA #$08
 STA $D016    ;VIC Control Register 2
 
RTS 


SPR_TEMP_MOVE:
 RTS
 LDX #1;SPRITES
SPR_TEMP_MOVE_LOOP:

  LDA SPRITE_YPOS,X
  CLC
  ADC TMP_DIR_Y,X
  STA SPRITE_YPOS,X
  CMP #242
  BNE SPR_TEMP_MOVE_TOP
   LDA TMP_DIR_Y,X
   CLC
   EOR #$FF
   ADC #1
   STA TMP_DIR_Y,X
   JMP SPR_TEMP_MOVE_BOTTOM
SPR_TEMP_MOVE_TOP:
  CMP #30
  BNE SPR_TEMP_MOVE_BOTTOM
   LDA TMP_DIR_Y,X
   CLC
   EOR #$FF
   ADC #1
   STA TMP_DIR_Y,X

SPR_TEMP_MOVE_BOTTOM:

; jmp SPR_TEMP_MOVE_EXIT:

  LDA SPRITE_XPOS,X
  LDY TMP_DIR_X,X
  CPY #1
  BNE X_MINUS
   clc
   ADC #1
   STA SPRITE_XPOS,X
   BCC XMSB_SAME
    LDA SPRITE_XMSB,X
    CLC
    EOR #$1
    STA SPRITE_XMSB,X
   JMP XMSB_SAME
X_MINUS:
   SEC
   SBC #1
   STA SPRITE_XPOS,X
X_PLUS:
  BCS XMSB_SAME
   LDA SPRITE_XMSB,X
   CLC
   EOR #$1
   STA SPRITE_XMSB,X

XMSB_SAME:
  LDA SPRITE_XMSB,X
  BEQ XMSB_L
XMSB_H:
  LDA SPRITE_XPOS,X
  CMP #87
  BNE SPR_TEMP_MOVE_EXIT
   LDA TMP_DIR_X,X
   CLC
   EOR #$FF
   ADC #1
   STA TMP_DIR_X,X
   JMP SPR_TEMP_MOVE_EXIT
XMSB_L:
  LDA SPRITE_XPOS,X
  CMP #1
  BNE SPR_TEMP_MOVE_EXIT
   LDA TMP_DIR_X,X
   CLC
   EOR #$FF
   ADC #1
   STA TMP_DIR_X,X
SPR_TEMP_MOVE_EXIT:

 DEX 
 BPL SPR_TEMP_MOVE_LOOP
RTS

TMP_DIR_Y: !BYTE 1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1
TMP_DIR_X: !BYTE 1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1

SPRTABLO: !BYTE <SP01,<SP11,<SP21,<SP31,<SP41,<SP51,<SP61,<SP71,<SP01,<SP11,<SP21,<SP31,<SP41,<SP51,<SP61,<SP71,<SP01,<SP11,<SP21,<SP31,<SP41,<SP51,<SP61,<SP71,<SP01,<SP11,<SP21,<SP31,<SP41,<SP51,<SP61,<SP71
SPR_XPOS: !BYTE 11,55,99,143,187,231,275-255,319-255,22,66,110,154,198,242,286-255,330-255,33,77,121,165,209,253,297-255,341-255,44,88,132,176,220,264-255,308-255,352-255
SPR_XMSB: !BYTE 0, 0, 0, 0,  0,  0,  1,      1,      0, 0, 0,  0,  0,  0,  1,      1,      0, 0, 0,  0,  0,  0,  1,      1,      0, 0, 0,  0,  0,  1,      1,       1

SPR_YPOS: !BYTE 32,50,55,60,65,70,75,80,90,95,100,105,110,115,120,130,135,140,145,150,155,160,170,175,180,185,190,195,200,205,215,225
;SPR_XPOS: !BYTE 40,70,100,130,160,190,220,250,75,105,135,165,195,225,255,70,100,130,160,190,220,250,70,100,130,160,190,220,250,70,100,40
SPR_COL: !BYTE 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,1,2
SPR_PTR: !BYTE 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32

SPRTABLO1: !BYTE <SP74,<SP64,<SP54,<SP44,<SP34,<SP24,<SP14,<SP04

SPRITE_YUSED: !FILL 255,255
