
;6502/65C02/65816/CPU64/DTV Turbo Assembler V1.47 listing file of "mu83.tas"
;done on Fri Dec 02 18:09:56 2022

=0002					SCREEN_POS_LO = $02

=0003					SCREEN_POS_HI = $03

=0024					SCREEN_FLIP = $24

=0025					SCREEN_BANK = $25

=0066					LINE_INC = $66

=0002					SCREEN_POS_PTR = $02

=0040					SCREEN_0 = $40

=0060					SCREEN_1 = $60

=0052					X_POS_HI = $52

=0053					X_POS_LO = $53

=0054					Y_POS_HI = $54

=0055					Y_POS_LO = $55

=0056					Z_POS_HI = $56

=0057					Z_POS_LO = $57

=00b8					OBJECT_TO_DRAW = $B8

=0004					LINE_JUMP_PTR_LO = $04

=0005					LINE_JUMP_PTR_HI = $05

=0006					ab06 = $06 ; math temp?

=0007					ab07 = $07 ; math temp?

=0008					LINE_FRACTION_ab08 = $08

=0008					ab08 = $08 ; math temp? line draw fraction?

=0009					ab09 = $09 ; math temp?

=0008					Z_ROT_LO = $08 ; math temp?

=0009					Z_ROT_HI = $09 

=000a					ab0A = $0A ; math temp?

=000a					X_ROT_LO = $0A ; math temp?

=000b					ab0B = $0B ; math temp?

=000b					X_ROT_HI = $0B ; math temp?

=000c					ab0C = $0C ; math temp?

=000d					ab0D = $0D ; math temp?

=0018					ab18 = $18 ; math temp?

=0019					POINT_LINE_COUNT = $19

=000e					REGA = $0E

=000f					REGX = $0F

=0020					REGY = $20

=0018					FOCUS = $18

=0022					FP_MULTIPLY_LO = $22

=0023					FP_MULTIPLY_HI = $23

=0022					FP_DIVIDE_LO = FP_MULTIPLY_LO

=0023					FP_DIVIDE_HI = FP_MULTIPLY_HI

=002c					ROT_LO = $2C

=002d					ROT_HI = $2D

=003c					SIN_LO = $3C

=003d					SIN_HI = $3D

=003e					COS_LO = $3E

=003f					COS_HI = $3F

=0058					X_ROTATION_LO = $58

=0059					X_ROTATION_HI = $59

=005a					Y_ROTATION_LO = $5A

=005b					Y_ROTATION_HI = $5B

=005c					Z_ROTATION_LO = $5C

=005d					Z_ROTATION_HI = $5D

=005e					ab5E = $5E	; pers?

=005f					ab5F = $5F	; pers?

=0060					ab60 = $60	; pers?

=0061					ab61 = $61	; pers?

=0062					ab62 = $62	; pers?

=0063					ab63 = $63	; pers?

=0064					ab64 = $64	; pers?

=0065					ab65 = $65	; pers?

=0067					LINE_TYPE_POINTER = $67 ; line type?

=0068					ab68 = $68

=0069					ab69 = $69

=006a					LINE_START_HOR = $6A ; line start x?

=006b					LINE_START_VER = $6B ; line start y?

=006c					ab6C = $6C	; pers?

=006d					ab6D = $6D  ; pers?

=006e					POINT_CLASSIFY_1 = $6E	; start point classification of this point?

=006f					POINT_CLASSIFY_2 = $6F  ; end point classification

=0072					CURR_X_LSB = $72

=0073					CURR_X_MSB = $73

=0074					CURR_X_HSB = $74

=0075					CURR_Y_LSB = $75

=0076					CURR_Y_MSB = $76

=0077					CURR_Y_HSB = $77

=0078					CURR_Z_LSB = $78

=0079					CURR_Z_MSB = $79

=007a					CURR_Z_HSB = $7A

=0050					SCR_HOR_MID = 160/2

=0044					SCR_VER_MID = 136/2

=0040					ab90_VAL = $40

=0019					ab91_VAL = $19

=003c					ab92_VAL = $3C

=0018					ab93_VAL = $18

=0010					ab94_VAL = $10

=0019					ab95_VAL = $19

=000c					ab96_VAL = $0c

=0018					ab97_VAL = $18

=00aa					SPEED_LO = $AA

=00ab					SPEED_HI = $AB

=00ac					ROT_SPD = $AC

=00ad					OBJECT_POINTER_POS = $AD

=00af					CURRENT_OBJECT = $AF

=00b0					NUMBER_OF_POINTS = $B0

=00b2					DRAW_OBJECT_COUNT = $B2

=00b3					DRAW_OBJECT_COUNTER = $B3

=00c7					VIC_SCREEN_BANK = $C7

=00cf					OBJ_PNT_X 		= $CF

=00d0					OBJ_PNT_X_MSB 	= $D0

=00d1					OBJ_PNT_Y 		= $D1

=00d2					OBJ_PNT_Y_MSB 	= $D2

=00d3					OBJ_PNT_Z 		= $D3

=00d4					OBJ_PNT_Z_MSB 	= $D4

=00d5					DIFF_X_LSB = $D5

=00d6					DIFF_X_MSB = $D6

=00d7					DIFF_X_HSB = $D7

=00d8					DIFF_Y_LSB = $D8

=00d9					DIFF_Y_MSB = $D9

=00da					DIFF_Y_HSB = $DA

=00db					DIFF_Z_LSB = $DB

=00dc					DIFF_Z_MSB = $DC

=00dd					DIFF_Z_HSB = $DD

=001d					OBJECT_POINTER = $1D

=fffe					IRQ = $FFFE

=0004					LINE_JUMP_PTR = LINE_JUMP_PTR_LO

=0088					CLIP_TEST_BOTTOM = $88

=0087					CLIP_BOTTOM = $87

=00a0					CLIP_TEST_RIGHT = $A0 ; $80

=009f					CLIP_RIGHT = $9F ; $7F

=0000					CLIP_TEST_TOP = $00

=0000					CLIP_TEST_LEFT = $00

=0001					PNT_OFF_RIGHT = $01

=0000					PNT_OFF_LEFT = 0

=0000					PNT_BEHIND = 0

=0000					PNT_ONSCREEN = 0

=0002					PNT_OFF_BOTTOM = $02

=0000					PNT_OFF_TOP = 0

=e000					OVERFLOW = $E000 ; overflow?

.0801					startup

.0801	 78		sei			SEI

.0802	 a9 00		lda #$00	 LDA #$00

.0804	 8d 20 d0	sta $d020	 STA $D020

.0807	 a9 01		lda #$01	 LDA #$01 ; $00

.0809	 8d 21 d0	sta $d021	 STA $D021

.080c	 a9 0b		lda #$0b	 LDA #$0B ; $00

.080e	 8d 22 d0	sta $d022	 STA $D022

.0811	 a9 0c		lda #$0c	 LDA #$0C ; $00

.0813	 8d 23 d0	sta $d023	 STA $D023

.0816	 a9 00		lda #$00	 LDA #$00 ; $01 ; colour 11 

.0818	 a2 00		ldx #$00	 LDX #<$D800

.081a	 a0 d8		ldy #$d8	 LDY #>$D800

.081c	 86 02		stx $02		 STX SCREEN_POS_LO+0

.081e	 84 03		sty $03		 STY SCREEN_POS_LO+1

.0820	 a2 03		ldx #$03	 LDX #>1000 

.0822	 a0 e8		ldy #$e8	 LDY #<1000

.0824	 20 cc 09	jsr $09cc	 JSR MEMSET

.0827	 a9 bc		lda #$bc	 LDA #$BC ;$65 ; colour 01 (0000????) and colour 10 (????0000) - bank 1

.0829	 a2 00		ldx #$00	 LDX #<(SCREEN_COLOUR)

.082b	 a0 5c		ldy #$5c	 LDY #>(SCREEN_COLOUR)

.082d	 86 02		stx $02		 STX SCREEN_POS_LO+0

.082f	 84 03		sty $03		 STY SCREEN_POS_LO+1

.0831	 a2 03		ldx #$03	 LDX #>1000 

.0833	 a0 e8		ldy #$e8	 LDY #<1000

.0835	 20 cc 09	jsr $09cc	 JSR MEMSET

.0838	 a9 35		lda #$35		LDA #$35

.083a	 85 01		sta $01			STA $1

.083c	 a9 70		lda #$70		LDA #$70

.083e	 8d 18 d0	sta $d018		STA $D018

.0841	 a9 3b		lda #$3b		LDA #$3B

.0843	 8d 11 d0	sta $d011		STA $D011

.0846	 a9 00		lda #$00		LDA #$00 

.0848	 8d 21 d0	sta $d021		STA $D021

.084b	 a9 18		lda #$18		LDA #$18

.084d	 8d 16 d0	sta $d016		STA $D016

.0850	 a9 7b		lda #$7b		LDA #<IRQ_1

.0852	 8d fe ff	sta $fffe		STA $FFFE

.0855	 a9 09		lda #$09		LDA #>IRQ_1

.0857	 8d ff ff	sta $ffff		STA $FFFF

.085a	 a9 7f		lda #$7f	 LDA #$7F

.085c	 8d 0d dc	sta $dc0d	 STA $DC0D  ; disable timer interrupts which can be generated by the two CIA chips

.085f	 8d 0d dd	sta $dd0d	 STA $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

.0862	 ad 0d dc	lda $dc0d	 LDA $DC0D  ; by reading this two registers we negate any pending CIA irqs.

.0865	 ad 0d dd	lda $dd0d	 LDA $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

.0868	 a9 01		lda #$01	  LDA #$01   ; this is how to tell the VICII to generate a raster interrupt

.086a	 8d 1a d0	sta $d01a	 STA $D01A

.086d	 a9 02		lda #$02	 LDA #2 ; SCRNBANK

.086f	 8d 00 dd	sta $dd00	 STA $DD00 ; bank

.0872	 a9 ba		lda #$ba		LDA #$BA

.0874	 8d 12 d0	sta $d012		STA $D012

.0877	 a9 01		lda #$01		LDA #$01

.0879	 8d 19 d0	sta $d019		STA $D019

.087c	 a9 07		lda #$07		LDA		#7

.087e	 85 ac		sta $ac			STA		ROT_SPD

.0880	 a9 40		lda #$40		LDA		#$40

.0882	 85 aa		sta $aa			STA		SPEED_LO

.0884	 a9 18		lda #$18		LDA		#$18

.0886	 85 ab		sta $ab			STA		SPEED_HI

.0888	 a9 01		lda #$01		LDA		#1 ;7

.088a	 85 b2		sta $b2			STA		DRAW_OBJECT_COUNT

.088c	 a9 00		lda #$00		LDA		#0

.088e	 85 2c		sta $2c			STA		ROT_LO

.0890	 85 2d		sta $2d			STA		ROT_HI

.0892	 85 73		sta $73			STA		CURR_X_MSB

.0894	 85 74		sta $74			STA		CURR_X_HSB

.0896	 85 76		sta $76			STA		CURR_Y_MSB

.0898	 85 77		sta $77			STA		CURR_Y_HSB

.089a	 85 79		sta $79			STA		CURR_Z_MSB

.089c	 85 7a		sta $7a			STA		CURR_Z_HSB

.089e	 a9 80		lda #$80		LDA		#$80

.08a0	 85 75		sta $75			STA		CURR_Y_LSB

.08a2	 58		cli			CLI

.08a3					main_loop
.08a3	 20 13 16	jsr $1613				JSR 	READ_JOYSTICK_KEYBOARD

.08a6	 20 67 11	jsr $1167				JSR		SIN_COS

.08a9	 20 f1 14	jsr $14f1				JSR 	DRAW_SCREEN

.08ac	 20 b0 14	jsr $14b0				JSR 	COLOUR_SETUP_WHITE ; BLACK

.08af	 20 3f 0c	jsr $0c3f				JSR 	DRAW_OBJECTS

.08b2	 a6 73		ldx $73					LDX CURR_X_MSB

.08b4	 a5 74		lda $74					LDA CURR_X_HSB

.08b6	 a0 00		ldy #$00				LDY	#0

.08b8	 20 85 16	jsr $1685				JSR	HEX16

.08bb	 a5 72		lda $72					LDA CURR_X_LSB

.08bd	 a2 20		ldx #$20				LDX #32

.08bf	 a0 00		ldy #$00				LDY	#0

.08c1	 20 98 16	jsr $1698				JSR	HEX8

.08c4	 a6 76		ldx $76					LDX CURR_Y_MSB

.08c6	 a5 77		lda $77					LDA CURR_Y_HSB

.08c8	 a0 06		ldy #$06				LDY	#6

.08ca	 20 85 16	jsr $1685				JSR	HEX16

.08cd	 a5 75		lda $75					LDA CURR_Y_LSB

.08cf	 a2 20		ldx #$20				LDX #32

.08d1	 a0 06		ldy #$06				LDY	#6

.08d3	 20 98 16	jsr $1698				JSR	HEX8

.08d6	 a6 79		ldx $79					LDX CURR_Z_MSB

.08d8	 a5 7a		lda $7a					LDA CURR_Z_HSB

.08da	 a0 0c		ldy #$0c				LDY	#12

.08dc	 20 85 16	jsr $1685				JSR	HEX16

.08df	 a5 78		lda $78					LDA CURR_Z_LSB

.08e1	 a2 20		ldx #$20				LDX #32

.08e3	 a0 0c		ldy #$0c				LDY	#12

.08e5	 20 98 16	jsr $1698				JSR	HEX8

.08e8	 a9 40		lda #$40				LDA #ab90_VAL

.08ea	 a2 00		ldx #$00				LDX #0

.08ec	 a0 24		ldy #$24				LDY	#36

.08ee	 20 98 16	jsr $1698				JSR	HEX8

.08f1	 a5 19		lda $19					LDA ab91_VAL

.08f3	 a2 18		ldx #$18				LDX #24

.08f5	 a0 24		ldy #$24				LDY	#36

.08f7	 20 98 16	jsr $1698				JSR	HEX8

.08fa	 a5 3c		lda $3c					LDA ab92_VAL

.08fc	 a2 30		ldx #$30				LDX #48

.08fe	 a0 24		ldy #$24				LDY	#36

.0900	 20 98 16	jsr $1698				JSR	HEX8

.0903	 a5 18		lda $18					LDA ab93_VAL

.0905	 a2 48		ldx #$48				LDX #72

.0907	 a0 24		ldy #$24				LDY	#36

.0909	 20 98 16	jsr $1698				JSR	HEX8

.090c	 a5 10		lda $10					LDA ab94_VAL

.090e	 a2 60		ldx #$60				LDX #96

.0910	 a0 24		ldy #$24				LDY	#36

.0912	 20 98 16	jsr $1698				JSR	HEX8

.0915	 a5 19		lda $19					LDA ab95_VAL

.0917	 a2 78		ldx #$78				LDX #120

.0919	 a0 24		ldy #$24				LDY	#36

.091b	 20 98 16	jsr $1698				JSR	HEX8

.091e	 a5 0c		lda $0c					LDA ab96_VAL

.0920	 a2 90		ldx #$90				LDX #144

.0922	 a0 24		ldy #$24				LDY	#36

.0924	 20 98 16	jsr $1698				JSR	HEX8

.0927	 a5 18		lda $18					LDA ab97_VAL

.0929	 a2 a8		ldx #$a8				LDX #168

.092b	 a0 24		ldy #$24				LDY	#36

.092d	 20 98 16	jsr $1698				JSR	HEX8

.0930	 a5 5e		lda $5e					LDA ab5E

.0932	 a2 00		ldx #$00				LDX #0

.0934	 a0 2a		ldy #$2a				LDY	#42

.0936	 20 98 16	jsr $1698				JSR	HEX8

.0939	 a5 5f		lda $5f					LDA ab5F

.093b	 a2 18		ldx #$18				LDX #24

.093d	 a0 2a		ldy #$2a				LDY	#42

.093f	 20 98 16	jsr $1698				JSR	HEX8

.0942	 a5 60		lda $60					LDA ab60

.0944	 a2 30		ldx #$30				LDX #48

.0946	 a0 2a		ldy #$2a				LDY	#42

.0948	 20 98 16	jsr $1698				JSR	HEX8

.094b	 a5 61		lda $61					LDA ab61

.094d	 a2 48		ldx #$48				LDX #72

.094f	 a0 2a		ldy #$2a				LDY	#42

.0951	 20 98 16	jsr $1698				JSR	HEX8

.0954	 a5 62		lda $62					LDA ab62

.0956	 a2 60		ldx #$60				LDX #96

.0958	 a0 2a		ldy #$2a				LDY	#42

.095a	 20 98 16	jsr $1698				JSR	HEX8

.095d	 a5 63		lda $63					LDA ab63

.095f	 a2 78		ldx #$78				LDX #120

.0961	 a0 2a		ldy #$2a				LDY	#42

.0963	 20 98 16	jsr $1698				JSR	HEX8

.0966	 a5 64		lda $64					LDA ab64

.0968	 a2 90		ldx #$90				LDX #144

.096a	 a0 2a		ldy #$2a				LDY	#42

.096c	 20 98 16	jsr $1698				JSR	HEX8

.096f	 a5 65		lda $65					LDA ab65

.0971	 a2 a8		ldx #$a8				LDX #168

.0973	 a0 2a		ldy #$2a				LDY	#42

.0975	 20 98 16	jsr $1698				JSR	HEX8

.0978	 4c a3 08	jmp $08a3				JMP MAIN_LOOP

.097b	 48		pha		IRQ_1   PHA

.097c	 a9 a6		lda #$a6	        LDA 	#<IRQ_2

.097e	 8d fe ff	sta $fffe	        STA 	IRQ   	;IRQ

.0981	 a9 09		lda #$09	        LDA 	#>IRQ_2

.0983	 8d ff ff	sta $ffff	        STA 	IRQ+1   ;IRQ

.0986	 a9 00		lda #$00	        LDA 	#$00

.0988	 8d 12 d0	sta $d012	        STA 	$D012	;Raster Position

.098b	 a9 01		lda #$01	        LDA 	#$01

.098d	 8d 19 d0	sta $d019	        STA 	$D019   ;VIC Interrupt Request Register (IRR)

.0990	 a9 7e		lda #$7e	        LDA 	#$7E

.0992	 8d 18 d0	sta $d018	        STA 	$D018   ;VIC Memory Control Register

.0995	 a9 1b		lda #$1b	        LDA 	#$1B

.0997	 8d 11 d0	sta $d011	        STA 	$D011   ;VIC Control Register 1

.099a	 a9 01		lda #$01	        LDA 	#$01

.099c	 8d 21 d0	sta $d021	        STA 	$D021   ;Background Color 0

.099f	 a9 08		lda #$08	        LDA 	#$08

.09a1	 8d 16 d0	sta $d016	        STA 	$D016   ;VIC Control Register 2

.09a4	 68		pla		        PLA 

.09a5	 40		rti		NMI_NOP	RTI ; This is the irq handler for the NMI. Just returns without acknowledge. This prevents subsequent NMI's from interfering.

.09a6	 48		pha		IRQ_2  	PHA

.09a7	 a5 c7		lda $c7		        LDA 	VIC_SCREEN_BANK

.09a9	 8d 18 d0	sta $d018	        STA 	$D018    ;VIC Memory Control Register

.09ac	 a9 3b		lda #$3b			LDA 	#$3B

.09ae	 8d 11 d0	sta $d011	        STA 	$D011    ;VIC Control Register 1

.09b1	 a9 18		lda #$18	        LDA 	#$18

.09b3	 8d 16 d0	sta $d016			STA 	$D016    ;VIC Control Register 2

.09b6	 a9 7b		lda #$7b	        LDA 	#<IRQ_1

.09b8	 8d fe ff	sta $fffe	        STA 	IRQ   ;IRQ

.09bb	 a9 09		lda #$09	        LDA 	#>IRQ_1

.09bd	 8d ff ff	sta $ffff	        STA 	IRQ+1   ;IRQ

.09c0	 a9 ba		lda #$ba	        LDA 	#$BA

.09c2	 8d 12 d0	sta $d012	        STA 	$D012    ;Raster Position

.09c5	 a9 01		lda #$01	        LDA 	#$01

.09c7	 8d 19 d0	sta $d019	        STA 	$D019    ;VIC Interrupt Request Register (IRR)

.09ca	 68		pla		        PLA 

.09cb	 40		rti		        RTI

.09cc	 8c e0 09	sty $09e0	MEMSET       STY    LSB_ONLY+1 ; store LSB count

.09cf	 e0 00		cpx #$00	             CPX    #0          ; MSB?     

.09d1	 f0 0c		beq $09df	             BEQ    LSB_ONLY   ; no

.09d3	 a0 00		ldy #$00	             LDY    #0          ; yes so reset LSB

.09d5					msb_loop
.09d5	 91 02		sta ($02),y	LSB_LOOP      STA    (SCREEN_POS_LO),Y   ; clear whole MSB

.09d7	 88		dey		               DEY 

.09d8	 d0 fb		bne $09d5	               BNE    LSB_LOOP

.09da	 e6 03		inc $03		              INC    SCREEN_POS_LO+1      ; inc MSB

.09dc	 ca		dex		              DEX               ; dec MSB count

.09dd	 d0 f6		bne $09d5	              BNE    MSB_LOOP

.09df	 a0 00		ldy #$00	LSB_ONLY    LDY    #0          ; LSB count 

.09e1	 f0 07		beq $09ea	             BEQ    MS_END

.09e3	 91 02		sta ($02),y	LAST_LSB_LOOP STA   (SCREEN_POS_LO),Y

.09e5	 88		dey		               DEY 

.09e6	 d0 fb		bne $09e3	               BNE   LAST_LSB_LOOP               

.09e8	 91 02		sta ($02),y	              STA   (SCREEN_POS_LO),Y     ; clear last Y (0)

.09ea	 60		rts		MS_END      RTS

.09eb	 85 23		sta $23		FP_DIVIDE	STA		FP_DIVIDE_HI	; inputs = X-(LO) + Y-(HI) + A (HI) + FP_MULTILPLY_LO - outputs = AY

.09ed	 b9 00 21	lda $2100,y				LDA 	LOG_TABLE,Y

.09f0	 a4 22		ldy $22					LDY 	FP_DIVIDE_LO

.09f2	 38		sec					SEC 

.09f3	 f9 00 21	sbc $2100,y				SBC 	LOG_TABLE,Y

.09f6	 a8		tay					TAY

.09f7	 8a		txa					TXA

.09f8	 09 02		ora #$02				ORA 	#$02

.09fa	 b0 03		bcs $09ff				BCS 	_FP_DIV_CNT

.09fc	 e9 03		sbc #$03						SBC 	#$03

.09fe	 38		sec							SEC 

.09ff	 e5 23		sbc $23		_FP_DIV_CNT SBC 	FP_DIVIDE_HI

.0a01	 29 fd		and #$fd				AND 	#$FD

.0a03	 be 00 22	ldx $2200,y				LDX 	EXP_TABLE,Y

.0a06	 60		rts					RTS

.0a07	 85 23		sta $23		FP_MULTIPLY	STA		FP_MULTIPLY_HI	; inputs = X-(LO) + Y-(HI) + A (HI) + FP_MULTILPLY_LO - outputs = AY

.0a09	 bd 00 21	lda $2100,x				LDA 	LOG_TABLE,X		

.0a0c	 a6 22		ldx $22					LDX 	FP_MULTIPLY_LO

.0a0e	 18		clc					CLC 

.0a0f	 7d 00 21	adc $2100,x				ADC 	LOG_TABLE,X

.0a12	 aa		tax					TAX 

.0a13	 98		tya					TYA 

.0a14	 90 03		bcc $0a19				BCC 	_FP_MUL_CNT

.0a16	 69 03		adc #$03						ADC 	#$03

.0a18	 18		clc							CLC 

.0a19	 65 23		adc $23		_FP_MUL_CNT	ADC 	FP_MULTIPLY_HI

.0a1b	 29 fd		and #$fd				AND 	#$FD

.0a1d	 bc 00 22	ldy $2200,x				LDY 	EXP_TABLE,X

.0a20	 60		rts					RTS 

.0a21	 bd 00 21	lda $2100,x	FPMUL		LDA LOG_TABLE,X		; fpMul - ; Input:  [08] = fp multiplier ;         XY   = fp multiplicand ; Output: [08] and XY = result

.0a24	 a6 08		ldx $08					LDX ab08

.0a26	 18		clc					CLC 

.0a27	 7d 00 21	adc $2100,x				ADC LOG_TABLE,X

.0a2a	 aa		tax					TAX 

.0a2b	 98		tya					TYA 

.0a2c	 90 03		bcc $0a31				BCC _PF_MUL_CNT

.0a2e	 69 03		adc #$03					ADC #$03

.0a30	 18		clc						CLC 

.0a31	 65 09		adc $09		_PF_MUL_CNT   	ADC ab09

.0a33	 70 0c		bvs $0a41				BVS MATH_LIMIT 

.0a35	 29 fd		and #$fd				AND #$FD

.0a37	 85 09		sta $09					STA ab09

.0a39	 a8		tay					TAY 

.0a3a	 bd 00 22	lda $2200,x				LDA EXP_TABLE,X

.0a3d	 aa		tax					TAX 

.0a3e	 85 08		sta $08					STA ab08

.0a40	 60		rts					RTS 

.0a41	 10 0c		bpl $0a4f	MATH_LIMIT	BPL _MATH_LIMIT_POS

.0a43	 29 01		and #$01				AND #$01

.0a45	 09 78		ora #$78				ORA #$78

.0a47	 a8		tay					TAY 

.0a48	 a2 00		ldx #$00				LDX #$00

.0a4a	 86 08		stx $08					STX ab08

.0a4c	 84 09		sty $09					STY ab09

.0a4e	 60		rts					RTS 

.0a4f	 29 01		and #$01	_MATH_LIMIT_POS	AND #$01

.0a51	 09 84		ora #$84					ORA #$84

.0a53	 a8		tay		MATH_LIMIT_EXIT	TAY 

.0a54	 a2 00		ldx #$00					LDX #$00

.0a56	 86 08		stx $08						STX ab08

.0a58	 84 09		sty $09						STY ab09

.0a5a	 60		rts						RTS 

.0a5b	 84 06		sty $06		FPDIV	STY 	ab06	 ; fpDiv - Input:  [08] = fp divisor - XY   = fp dividend - Output: [08] and XY = result

.0a5d	 a4 08		ldy $08		        LDY 	ab08

.0a5f	 b9 00 21	lda $2100,y	        LDA 	LOG_TABLE,Y

.0a62	 38		sec		        SEC 

.0a63	 fd 00 21	sbc $2100,x	        SBC 	LOG_TABLE,X

.0a66	 aa		tax		        TAX 

.0a67	 a5 09		lda $09		        LDA 	ab09

.0a69	 09 02		ora #$02	        ORA 	#$02

.0a6b	 b0 03		bcs $0a70	        BCS 	b8349

.0a6d	 e9 03		sbc #$03				SBC 	#$03

.0a6f	 38		sec					SEC 

.0a70	 e5 06		sbc $06		b8349   SBC 	ab06

.0a72	 70 cd		bvs $0a41	        BVS 	MATH_LIMIT 

.0a74	 29 fd		and #$fd	        AND 	#$FD

.0a76	 85 09		sta $09		        STA 	ab09

.0a78	 a8		tay		        TAY 

.0a79	 bd 00 22	lda $2200,x	        LDA 	EXP_TABLE,X

.0a7c	 aa		tax		        TAX 

.0a7d	 85 08		sta $08		        STA 	ab08

.0a7f	 60		rts		        RTS 

.0a80	 a5 18		lda $18		FPADD_CONT	LDA		ab18	; ($838B entry point)  

.0a82	 4a		lsr					LSR 

.0a83	 b0 15		bcs $0a9a				BCS 	b8373

.0a85	 8a		txa		        TXA 

.0a86	 65 08		adc $08		        ADC 	ab08

.0a88	 6a		ror		        ROR 

.0a89	 c8		iny		        INY 

.0a8a	 c8		iny		        INY 

.0a8b	 c8		iny		        INY 

.0a8c	 c8		iny		        INY 

.0a8d	 aa		tax		        TAX 

.0a8e	 85 08		sta $08		        STA 	ab08

.0a90	 84 09		sty $09		        STY 	ab09

.0a92	 60		rts		        RTS 

.0a93	 98		tya		b836C   TYA 

.0a94	 0a		asl		        ASL 

.0a95	 90 5c		bcc $0af3	        BCC 	b83CC

.0a97	 4c 40 0b	jmp $0b40	        JMP 	j8419

.0a9a	 8a		txa		b8373   TXA 

.0a9b	 e5 08		sbc $08		        SBC 	ab08

.0a9d	 f0 0b		beq $0aaa	        BEQ 	b8383

.0a9f	 b0 5b		bcs $0afc				BCS 	b83D5

.0aa1	 a4 09		ldy $09					LDY 	ab09

.0aa3	 49 ff		eor #$ff				EOR 	#$FF

.0aa5	 69 01		adc #$01				ADC 	#$01

.0aa7	 4c fc 0a	jmp $0afc				JMP 	b83D5

.0aaa	 98		tya		b8383   TYA 

.0aab	 38		sec		        SEC 

.0aac	 e9 24		sbc #$24	        SBC 	#$24

.0aae	 70 9f		bvs $0a4f			BVS 	_MATH_LIMIT_POS

.0ab0	 50 a1		bvc $0a53				BVC 	MATH_LIMIT_EXIT

.0ab2	 98		tya		FP_ADD  TYA			; XY + 89

.0ab3	 38		sec		        SEC 

.0ab4	 e5 09		sbc $09		        SBC 	ab09

.0ab6	 70 db		bvs $0a93	        BVS 	b836C

.0ab8	 85 18		sta $18		        STA 	ab18

.0aba	 69 01		adc #$01	        ADC 	#$01

.0abc	 70 d5		bvs $0a93	        BVS 	b836C

.0abe	 30 5c		bmi $0b1c	        BMI 	b83F5

.0ac0	 4a		lsr		        LSR 

.0ac1	 4a		lsr		        LSR 

.0ac2	 f0 bc		beq $0a80	        BEQ 	FPADD_CONT

.0ac4	 c9 09		cmp #$09	        CMP 	#$09

.0ac6	 b0 2b		bcs $0af3	        BCS 	b83CC

.0ac8	 49 0f		eor #$0f	        EOR 	#$0F

.0aca	 8d d2 0a	sta $0ad2	        STA 	ab83AB +1

.0acd	 a5 08		lda $08		        LDA		ab08

.0acf	 38		sec		        SEC 

.0ad0	 6a		ror		        ROR 

.0ad1	 d0 07		bne $0ada	ab83AB 	BNE		b83B3 	; self modifiction code shift

.0ad3	 ea		nop		        NOP 

.0ad4	 ea		nop		        NOP 

.0ad5	 ea		nop		        NOP 

.0ad6	 ea		nop		        NOP 

.0ad7	 ea		nop		        NOP 

.0ad8	 ea		nop		        NOP 

.0ad9	 ea		nop		        NOP 

.0ada	 4a		lsr		b83B3   LSR 

.0adb	 4a		lsr		        LSR 

.0adc	 4a		lsr		        LSR 

.0add	 4a		lsr		        LSR 

.0ade	 4a		lsr		        LSR 

.0adf	 4a		lsr		        LSR 

.0ae0	 4a		lsr		        LSR 

.0ae1	 85 06		sta $06		        STA 	ab06

.0ae3	 a5 18		lda $18		        LDA 	ab18

.0ae5	 4a		lsr		        LSR 

.0ae6	 8a		txa		        TXA 

.0ae7	 b0 0f		bcs $0af8	        BCS 	b83D1

.0ae9	 65 06		adc $06		b83C2   ADC 	ab06

.0aeb	 90 05		bcc $0af2	        BCC 	b83CB

.0aed	 4a		lsr		        LSR 

.0aee	 c8		iny		        INY 

.0aef	 c8		iny		        INY 

.0af0	 c8		iny		        INY 

.0af1	 c8		iny		        INY 

.0af2	 aa		tax		b83CB   TAX 

.0af3	 86 08		stx $08		b83CC   STX 	ab08

.0af5	 84 09		sty $09		        STY 	ab09

.0af7	 60		rts		        RTS 

.0af8	 e5 06		sbc $06		b83D1   SBC ab06

.0afa	 b0 f6		bcs $0af2	        BCS b83CB

.0afc	 84 06		sty $06		b83D5   STY ab06

.0afe	 a0 00		ldy #$00	        LDY #$00

.0b00	 0a		asl		b83D9   ASL 

.0b01	 88		dey		        DEY 

.0b02	 90 fc		bcc $0b00	        BCC b83D9

.0b04	 aa		tax		        TAX 

.0b05	 98		tya		        TYA 

.0b06	 0a		asl		        ASL 

.0b07	 0a		asl		        ASL 

.0b08	 18		clc		        CLC 

.0b09	 65 06		adc $06		        ADC ab06

.0b0b	 70 06		bvs $0b13	        BVS b83EC

.0b0d	 a8		tay		        TAY 

.0b0e	 86 08		stx $08		        STX ab08

.0b10	 84 09		sty $09		        STY ab09

.0b12	 60		rts		        RTS 

.0b13	 a2 27		ldx #$27	b83EC   LDX #<p8400

.0b15	 a0 0b		ldy #$0b	        LDY #>p8400

.0b17	 86 08		stx $08		        STX ab08

.0b19	 84 09		sty $09		        STY ab09

.0b1b	 60		rts		        RTS 

.0b1c	 c9 e0		cmp #$e0	b83F5   CMP #$E0

.0b1e	 90 20		bcc $0b40	        BCC j8419

.0b20	 4a		lsr		        LSR 

.0b21	 4a		lsr		        LSR 

.0b22	 29 07		and #$07	        AND #$07

.0b24	 8d 2b 0b	sta $0b2b	        STA ab8404 +1

.0b27	 8a		txa		p8400   TXA 

.0b28	 38		sec		        SEC 

.0b29	 6a		ror		        ROR 

.0b2a	 d0 03		bne $0b2f	ab8404  BNE b8408

.0b2c	 4a		lsr		        LSR 

.0b2d	 4a		lsr		        LSR 

.0b2e	 4a		lsr		        LSR 

.0b2f	 4a		lsr		b8408   LSR 

.0b30	 4a		lsr		        LSR 

.0b31	 4a		lsr		        LSR 

.0b32	 4a		lsr		        LSR 

.0b33	 85 06		sta $06		        STA ab06

.0b35	 a4 09		ldy $09		        LDY ab09

.0b37	 a5 18		lda $18		        LDA ab18

.0b39	 4a		lsr		        LSR 

.0b3a	 a5 08		lda $08		        LDA ab08

.0b3c	 90 ab		bcc $0ae9	        BCC b83C2

.0b3e	 b0 b8		bcs $0af8	        BCS b83D1

.0b40	 a6 08		ldx $08		j8419   LDX ab08

.0b42	 a4 09		ldy $09		        LDY ab09

.0b44	 60		rts		        RTS 

.0b45	 c8		iny		COS_FP	INY 

.0b46	 98		tya		SIN_FP	TYA 

.0b47	 4a		lsr				LSR 

.0b48	 90 06		bcc $0b50			BCC 	SIN_CNT

.0b4a	 8a		txa						TXA 

.0b4b	 49 ff		eor #$ff					EOR #$FF

.0b4d	 aa		tax						TAX 

.0b4e	 98		tya						TYA 

.0b4f	 4a		lsr						LSR 

.0b50	 29 01		and #$01	SIN_CNT AND 	#$01

.0b52	 1d 00 20	ora $2000,x			ORA 	SIN_MSB,X

.0b55	 a8		tay				TAY 

.0b56	 bd 00 1f	lda $1f00,x			LDA 	SIN_LSB,X

.0b59	 aa		tax				TAX 

.0b5a	 60		rts				RTS 

.0b5b	 98		tya		FPTO8BIT	TYA 				; transfer y (floating point position) to a

.0b5c	 30 25		bmi $0b83				BMI		b849F		; if negative

.0b5e	 4a		lsr					LSR 				; divide and remove first bit

.0b5f	 4a		lsr					LSR 				; divide and remove second bit

.0b60	 c9 07		cmp #$07				CMP 	#$07		; is it greater than 7

.0b62	 b0 26		bcs $0b8a				BCS 	b84A6		; yes so error so exit with carry set

.0b64	 8d 6b 0b	sta $0b6b				STA 	ab8487+1	; no so self modifying code to jump forward a number of divides

.0b67	 8a		txa					TXA 				; transfer x (actual number) to a

.0b68	 38		sec					SEC 				; set carry

.0b69	 6a		ror					ROR 				; /2 - putting 1 in top bit (and putting 0 in carry?) 

.0b6a	 d0 04		bne $0b70	ab8487  	BNE 	b848C		; jump forward self modifying code - always done as carry is set so ROR result is never 0

.0b6c	 4a		lsr					LSR 				; /2

.0b6d	 4a		lsr					LSR 				; /4

.0b6e	 4a		lsr					LSR 				; /8

.0b6f	 4a		lsr					LSR 				; /16

.0b70	 4a		lsr		b848C   	LSR 				; /32

.0b71	 4a		lsr					LSR 				; /64

.0b72	 4a		lsr					LSR 				; /128

.0b73	 69 00		adc #$00	b848F   	ADC 	#$00		; add carry?

.0b75	 30 12		bmi $0b89				BMI 	b84A5		; if minus then error?

.0b77	 aa		tax					TAX 				; backup result

.0b78	 98		tya					TYA 				; transfer y to a

.0b79	 4a		lsr					LSR					; / 2

.0b7a	 8a		txa					TXA 				; restore result

.0b7b	 90 05		bcc $0b82				BCC 	b849E		; clear carry so ok?

.0b7d	 49 ff		eor #$ff					EOR 	#$FF	; negate?

.0b7f	 69 00		adc #$00					ADC 	#$00	; negete by adding carry that is already set?

.0b81	 18		clc						CLC 			; clear carry for ok?

.0b82	 60		rts		b849E   	RTS 				; exit

.0b83	 c9 fc		cmp #$fc	b849F   	CMP 	#$FC		; sets the carry flag if greater than (11111100 binary)

.0b85	 a9 00		lda #$00				LDA 	#$00		; resets the output x value? 

.0b87	 f0 ea		beq $0b73				BEQ 	b848F		; jump back into code

.0b89	 38		sec		b84A5   	SEC 				; set carry for error?

.0b8a	 60		rts		b84A6   	RTS 				; exit

.0b8b	 98		tya		FPTO16BIT	TYA					; input X/Y - output X=HI/Y=LO	; get input (exponent?)

.0b8c	 30 57		bmi $0be5				BMI 	b8501 		; if negative

.0b8e	 4a		lsr					LSR 				; ignore bit 1

.0b8f	 4a		lsr					LSR 				; ignore bit 2

.0b90	 c9 0f		cmp #$0f				CMP 	#$0F		; compare with 15

.0b92	 b0 f6		bcs $0b8a				BCS 	b84A6		; greater so exit with carry set

.0b94	 85 06		sta $06					STA 	ab06		; store intermediate in temp var

.0b96	 0a		asl					ASL 				; *2

.0b97	 65 06		adc $06					ADC 	ab06		; *3 

.0b99	 8d a6 0b	sta $0ba6				STA 	ab84C2 +1	; number of bytes to jump

.0b9c	 a9 00		lda #$00				LDA 	#$00

.0b9e	 85 06		sta $06					STA 	ab06		; clear result

.0ba0	 8a		txa					TXA 				; get input (mantisa?)

.0ba1	 38		sec					SEC 				; set carry to move 1 into result

.0ba2	 6a		ror					ROR 				; rotate carry into high bit and low bit into carry

.0ba3	 66 06		ror $06					ROR 	ab06		; rotate carry into result

.0ba5	 90 0f		bcc $0bb6	ab84C2  	BCC 	b84D2		; jump forward

.0ba7	 4a		lsr					LSR 				; half and shift lowest bit into carry  

.0ba8	 66 06		ror $06					ROR 	ab06		; half and rotate carry bit into result

.0baa	 4a		lsr					LSR 

.0bab	 66 06		ror $06					ROR 	ab06

.0bad	 4a		lsr					LSR 

.0bae	 66 06		ror $06					ROR 	ab06

.0bb0	 4a		lsr					LSR 

.0bb1	 66 06		ror $06					ROR 	ab06

.0bb3	 4a		lsr					LSR 

.0bb4	 66 06		ror $06					ROR 	ab06

.0bb6	 4a		lsr		b84D2   	LSR 

.0bb7	 66 06		ror $06					ROR 	ab06

.0bb9	 4a		lsr					LSR 

.0bba	 66 06		ror $06					ROR 	ab06

.0bbc	 4a		lsr					LSR 

.0bbd	 66 06		ror $06					ROR 	ab06

.0bbf	 4a		lsr					LSR 

.0bc0	 66 06		ror $06					ROR		ab06

.0bc2	 4a		lsr					LSR 

.0bc3	 66 06		ror $06					ROR 	ab06

.0bc5	 4a		lsr					LSR 

.0bc6	 66 06		ror $06					ROR 	ab06

.0bc8	 4a		lsr					LSR 

.0bc9	 66 06		ror $06					ROR 	ab06

.0bcb	 4a		lsr					LSR 

.0bcc	 66 06		ror $06					ROR 	ab06

.0bce	 4a		lsr					LSR 

.0bcf	 66 06		ror $06					ROR 	ab06

.0bd1	 4a		lsr					LSR 

.0bd2	 66 06		ror $06					ROR 	ab06

.0bd4	 aa		tax					TAX 				; store low byte of result?

.0bd5	 98		tya					TYA 				; get input (exponent?)

.0bd6	 a4 06		ldy $06					LDY 	ab06		; store high byte of result?

.0bd8	 4a		lsr					LSR 				; move 1st bit of input into carry

.0bd9	 90 09		bcc $0be4				BCC 	b8500		; set y/n

.0bdb	 8a		txa						TXA 			; yes

.0bdc	 49 ff		eor #$ff					EOR 	#$FF	; negate x

.0bde	 aa		tax						TAX 

.0bdf	 98		tya						TYA 

.0be0	 49 ff		eor #$ff					EOR 	#$FF	; negate y

.0be2	 a8		tay						TAY 

.0be3	 18		clc						CLC 

.0be4	 60		rts		b8500   RTS 					; no

.0be5	 4a		lsr		b8501 		LSR 				; move 1st bit to carry

.0be6	 90 06		bcc $0bee				BCC 	b850B		; set y/n

.0be8	 a2 ff		ldx #$ff					LDX 	#$FF	; yes

.0bea	 a0 ff		ldy #$ff					LDY 	#$FF

.0bec	 18		clc						CLC 

.0bed	 60		rts					RTS 

.0bee	 a2 00		ldx #$00	b850B   	LDX 	#$00		; no

.0bf0	 a0 00		ldy #$00				LDY 	#$00

.0bf2	 60		rts					RTS 

.0bf3	 84 07		sty $07		BIT24TOFP 	STY		ab07 ; store lsb	; MATH_24BitToFP (FP.SetToObjectSpaceCoordinate24) ; Enter: A = Coordinate.MSB X = Coordinate.PSB Y = Coordinate.LSB ; Usese: [06].b  Temporary store for coordinate MSB ; Exit:  [08].fp Result, also stored in X:A (exp:man)

.0bf5	 85 06		sta $06					STA 	ab06 ; store msb

.0bf7	 10 11		bpl $0c0a				BPL 	b8527 ; positive ?

.0bf9	 a9 00		lda #$00					LDA 	#$00 ; negative so 

.0bfb	 38		sec						SEC 

.0bfc	 e5 07		sbc $07						SBC 	ab07 ; negate lsb

.0bfe	 85 07		sta $07						STA 	ab07

.0c00	 8a		txa						TXA 		; negate psb

.0c01	 49 ff		eor #$ff					EOR 	#$FF

.0c03	 69 00		adc #$00					ADC 	#$00

.0c05	 aa		tax						TAX 

.0c06	 a9 00		lda #$00					LDA 	#$00

.0c08	 e5 06		sbc $06						SBC 	ab06	; negate msb

.0c0a	 d0 0f		bne $0c1b	b8527   	BNE 	b8538	; if msb not 0

.0c0c	 8a		txa						TXA 		; move psb to a

.0c0d	 d0 23		bne $0c32					BNE 	b854F	; if psb not 0

.0c0f	 a5 07		lda $07							LDA 	ab07	; get lsb

.0c11	 f0 23		beq $0c36						BEQ 	b8553	; if lsb not 0

.0c13	 a2 00		ldx #$00							LDX 	#$00

.0c15	 86 07		stx $07								STX 	ab07

.0c17	 a2 08		ldx #$08							LDX 	#$08

.0c19	 d0 04		bne $0c1f							BNE 	b853C ; jump?

.0c1b	 86 07		stx $07		b8538   	STX 	ab07

.0c1d	 a2 18		ldx #$18				LDX 	#$18

.0c1f	 ca		dex		b853C   		DEX 

.0c20	 06 07		asl $07						ASL 	ab07 ; *2

.0c22	 2a		rol						ROL 	 ; *2

.0c23	 90 fa		bcc $0c1f					BCC 	b853C

.0c25	 85 08		sta $08					STA 	ab08

.0c27	 8a		txa					TXA 

.0c28	 0a		asl					ASL 

.0c29	 06 06		asl $06					ASL 	ab06

.0c2b	 2a		rol					ROL 

.0c2c	 aa		tax					TAX 

.0c2d	 86 09		stx $09					STX 	ab09

.0c2f	 a5 08		lda $08					LDA 	ab08

.0c31	 60		rts					RTS 

.0c32	 a2 10		ldx #$10	b854F   	LDX 	#$10

.0c34	 d0 e9		bne $0c1f				BNE 	b853C ; jump?

.0c36	 a9 00		lda #$00	b8553   	LDA 	#<OVERFLOW ; overflow?

.0c38	 a2 e0		ldx #$e0				LDX 	#>OVERFLOW

.0c3a	 85 08		sta $08					STA 	ab08

.0c3c	 86 09		stx $09					STX 	ab09

.0c3e	 60		rts					RTS 

.0c3f	 a4 b2		ldy $b2		DRAW_OBJECTS	LDY 	DRAW_OBJECT_COUNT 			; number of objects to draw

.0c41	 f0 0e		beq $0c51					BEQ 	DRAW_OBJECTS_EXIT 			; exit if none

.0c43	 84 b3		sty $b3						STY 	DRAW_OBJECT_COUNTER 		; store temp object count

.0c45	 be 0e 1a	ldx $1a0e,y	DRAW_OBJECTS_LOOP   LDX 	OBJECTS_TO_DRAW,Y 		; object number

.0c48	 20 52 0c	jsr $0c52						JSR 	DRAW_OBJECT

.0c4b	 c6 b3		dec $b3							DEC 	DRAW_OBJECT_COUNTER 	; dec temp object count

.0c4d	 a4 b3		ldy $b3							LDY 	DRAW_OBJECT_COUNTER 	; get temp object count

.0c4f	 d0 f4		bne $0c45						BNE 	DRAW_OBJECTS_LOOP 		; exit y/n

.0c51	 60		rts		DRAW_OBJECTS_EXIT 	RTS 							; exit

.0c52	 86 af		stx $af		DRAW_OBJECT			STX		CURRENT_OBJECT					; store object number 

.0c54	 bd ce 18	lda $18ce,x						LDA		OBJECT_SHAPE_PTR_LO,X	; get object pos hi

.0c57	 85 1d		sta $1d							STA		OBJECT_POINTER			; store in pointer

.0c59	 bd 0e 19	lda $190e,x						LDA		OBJECT_SHAPE_PTR_HI,X	; get object pos lo

.0c5c	 85 1e		sta $1e							STA		OBJECT_POINTER+1		; store in pointer

.0c5e	 20 37 0d	jsr $0d37						JSR		CAMERA_OBJECT_DIFF

.0c61	 a2 00		ldx #$00	DRAW_OBJECT_CONT   	LDX		#$00

.0c63	 86 19		stx $19							STX		POINT_LINE_COUNT

.0c65	 a0 01		ldy #$01						LDY		#$01

.0c67	 20 7a 0d	jsr $0d7a						JSR		s999A

.0c6a	 90 5d		bcc $0cc9						BCC		DRAW_OBJECT_LINES

.0c6c	 a5 da		lda $da							LDA		DIFF_Y_HSB

.0c6e	 10 09		bpl $0c79						BPL		DRAW_OBJECT_POINT

.0c70	 a0 00		ldy #$00						LDY		#$00

.0c72	 a2 00		ldx #$00						LDX		#$00

.0c74	 20 7a 0d	jsr $0d7a						JSR		s999A

.0c77	 b0 d8		bcs $0c51						BCS		DRAW_OBJECTS_EXIT

.0c79	 a4 d5		ldy $d5		DRAW_OBJECT_POINT	LDY		DIFF_X_LSB	; object is a point

.0c7b	 a6 d6		ldx $d6							LDX		DIFF_X_MSB

.0c7d	 a5 d7		lda $d7							LDA		DIFF_X_HSB

.0c7f	 20 f3 0b	jsr $0bf3						JSR		BIT24TOFP

.0c82	 85 52		sta $52							STA		X_POS_HI

.0c84	 86 53		stx $53							STX		X_POS_LO

.0c86	 a4 d8		ldy $d8							LDY		DIFF_Y_LSB

.0c88	 a6 d9		ldx $d9							LDX		DIFF_Y_MSB

.0c8a	 a5 da		lda $da							LDA		DIFF_Y_HSB

.0c8c	 20 f3 0b	jsr $0bf3						JSR		BIT24TOFP	; ????

.0c8f	 85 54		sta $54							STA		Y_POS_HI

.0c91	 86 55		stx $55							STX		Y_POS_LO

.0c93	 a4 db		ldy $db							LDY		DIFF_Z_LSB

.0c95	 a6 dc		ldx $dc							LDX		DIFF_Z_MSB

.0c97	 a5 dd		lda $dd							LDA		DIFF_Z_HSB

.0c99	 20 f3 0b	jsr $0bf3						JSR		BIT24TOFP

.0c9c	 85 56		sta $56							STA		Z_POS_HI

.0c9e	 86 57		stx $57							STX		Z_POS_LO

.0ca0	 20 18 12	jsr $1218						JSR		ROTATE_PERS

.0ca3	 a2 00		ldx #$00						LDX		#$00

.0ca5	 bd 40 07	lda $0740,x	PLOT_POINT_CHK		LDA		POINT_CLASSIFICATION,X	; GET POINT FROM PLOT POINT TABLE ?

.0ca8	 d0 1e		bne $0cc8						BNE		PLOT_POINT_EXIT			; EXIT IF ITS not ZERO - this being set to not zero plots a point - what sets it to 0?

.0caa	 bc c0 06	ldy $06c0,x	PLOT_POINT				LDY		PERS_VER,X			; GET VER POS

.0cad	 b9 30 25	lda $2530,y							LDA		VER_POS_LO,Y 

.0cb0	 85 02		sta $02								STA		SCREEN_POS_LO

.0cb2	 bd 80 06	lda $0680,x							LDA		PERS_HOR,X			; GET HOR POS into A and X

.0cb5	 aa		tax								TAX 	

.0cb6	 0a		asl								ASL 

.0cb7	 b9 a0 24	lda $24a0,y							LDA		VER_POS_HI,Y

.0cba	 65 25		adc $25								ADC		SCREEN_BANK

.0cbc	 85 03		sta $03								STA		SCREEN_POS_HI

.0cbe	 bc c0 25	ldy $25c0,x							LDY		HOR_SCR_POS,X

.0cc1	 b1 02		lda ($02),y							LDA		(SCREEN_POS_PTR),Y	; GET SCREEN BYTE

.0cc3	 1d 00 24	ora $2400,x	LINE_DRAW_8_TYPE		ORA		ORA_PIXEL_POS,X		; AND PIXEL

.0cc6	 91 02		sta ($02),y							STA		(SCREEN_POS_PTR),Y	; PUT SCREEN BYTE

.0cc8	 60		rts		PLOT_POINT_EXIT 	RTS 

.0cc9	 a5 d6		lda $d6		DRAW_OBJECT_LINES	LDA 	DIFF_X_MSB

.0ccb	 38		sec							SEC 

.0ccc	 e9 08		sbc #$08						SBC 	#$08

.0cce	 85 d6		sta $d6							STA 	DIFF_X_MSB

.0cd0	 b0 02		bcs $0cd4						BCS 	b9795

.0cd2	 c6 d7		dec $d7								DEC 	DIFF_X_HSB		

.0cd4	 a5 d9		lda $d9		b9795   			LDA 	DIFF_Y_MSB

.0cd6	 38		sec							SEC 

.0cd7	 e9 08		sbc #$08						SBC 	#$08

.0cd9	 85 d9		sta $d9							STA 	DIFF_Y_MSB

.0cdb	 b0 02		bcs $0cdf						BCS 	b97A0

.0cdd	 c6 da		dec $da								DEC 	DIFF_Y_HSB

.0cdf	 a5 dc		lda $dc		b97A0   			LDA 	DIFF_Z_MSB

.0ce1	 38		sec							SEC 

.0ce2	 e9 08		sbc #$08						SBC 	#$08

.0ce4	 85 dc		sta $dc							STA 	DIFF_Z_MSB

.0ce6	 b0 02		bcs $0cea						BCS 	b97AB

.0ce8	 c6 dd		dec $dd								DEC 	DIFF_Z_HSB

.0cea	 a0 00		ldy #$00	b97AB   			LDY 	#0

.0cec	 84 19		sty $19							STY 	POINT_LINE_COUNT 	; start point count

.0cee	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y 	; object point count

.0cf0	 85 b0		sta $b0							STA 	NUMBER_OF_POINTS 	; number of points?

.0cf2	 84 ad		sty $ad							STY 	OBJECT_POINTER_POS 	; store mem pos

.0cf4	 20 7e 11	jsr $117e	PROCESS_POINT_LOOP		JSR 	PROCESS_POINT_TO_FP		; get point then *16 then convert to 24bit fp

.0cf7	 20 18 12	jsr $1218							JSR 	ROTATE_PERS

.0cfa	 a5 19		lda $19								LDA 	POINT_LINE_COUNT		; get point count

.0cfc	 e6 19		inc $19								INC 	POINT_LINE_COUNT		; inc point count

.0cfe	 c5 b0		cmp $b0								CMP 	NUMBER_OF_POINTS	 	; last point yn

.0d00	 d0 f2		bne $0cf4							BNE 	PROCESS_POINT_LOOP  	; no so do next

.0d02	 e6 ad		inc $ad							INC 	OBJECT_POINTER_POS 			; inc mem pos

.0d04	 a4 ad		ldy $ad							LDY 	OBJECT_POINTER_POS 			; get mem pos

.0d06	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y  		; object line count

.0d08	 85 19		sta $19							STA 	POINT_LINE_COUNT  			; number of lines?

.0d0a	 10 13		bpl $0d1f						BPL 	NEXT_COMPRESSED_LINE

.0d0c	 a4 ad		ldy $ad		NEXT_LINE				LDY 	OBJECT_POINTER_POS 	; get mem pos

.0d0e	 c8		iny								INY  						; inc mem pos

.0d0f	 b3 1d		lax ($1d),y							LAX 	(OBJECT_POINTER),Y 	; get 1st point into a and x

.0d11	 c8		iny								INY 						; inc mem pos

.0d12	 b1 1d		lda ($1d),y							LDA 	(OBJECT_POINTER),Y 	; get 2nd point

.0d14	 84 ad		sty $ad								STY 	OBJECT_POINTER_POS 	; store 2nd point?

.0d16	 a8		tay								TAY 						; 2nd point

.0d17	 20 bd 0d	jsr $0dbd							JSR 	LINE_DRAW 			; draw line

.0d1a	 c6 19		dec $19								DEC 	POINT_LINE_COUNT 	; dec line count

.0d1c	 30 ee		bmi $0d0c							BMI 	NEXT_LINE 			; last line y/n

.0d1e	 60		rts							RTS 						; yes

.0d1f	 a4 ad		ldy $ad		NEXT_COMPRESSED_LINE 	LDY 	OBJECT_POINTER_POS 	; get mem pos ; first and second point are stored in 1 byte as 2 nibbles

.0d21	 c8		iny								INY  						; inc mem pos

.0d22	 84 ad		sty $ad								STY 	OBJECT_POINTER_POS 	; store mem pos

.0d24	 b3 1d		lax ($1d),y							LAX 	(OBJECT_POINTER),Y 	; get point count into a and x

.0d26	 29 0f		and #$0f							AND 	#$0F 				; and with 15 = 1st point

.0d28	 a8		tay								TAY 						; y = first point

.0d29	 8a		txa								TXA  						; get backup

.0d2a	 4a		lsr								LSR  						; /2

.0d2b	 4a		lsr								LSR  						; /2

.0d2c	 4a		lsr								LSR  						; /2

.0d2d	 4a		lsr								LSR  						; /2

.0d2e	 aa		tax								TAX  						; divide by 16 = 2nd point

.0d2f	 20 bd 0d	jsr $0dbd							JSR 	LINE_DRAW       	; DRAW LINE

.0d32	 c6 19		dec $19								DEC 	POINT_LINE_COUNT 	; dec line count

.0d34	 10 e9		bpl $0d1f							BPL 	NEXT_COMPRESSED_LINE ; last line yn

.0d36	 60		rts							RTS  						; yes

.0d37	 38		sec		CAMERA_OBJECT_DIFF	SEC 						; calc diff between object pos and current pos

.0d38	 bd 4e 19	lda $194e,x						LDA 	OBJ_X_LSB,X		;

.0d3b	 e5 72		sbc $72							SBC 	CURR_X_LSB		;

.0d3d	 85 d5		sta $d5							STA 	DIFF_X_LSB		;

.0d3f	 bd 4e 17	lda $174e,x						LDA 	OBJ_X_MSB,X		;

.0d42	 e5 73		sbc $73							SBC 	CURR_X_MSB		;

.0d44	 85 d6		sta $d6							STA 	DIFF_X_MSB		;

.0d46	 bd 0e 18	lda $180e,x						LDA 	OBJ_X_HSB,X		;

.0d49	 e5 74		sbc $74							SBC 	CURR_X_HSB		;

.0d4b	 85 d7		sta $d7							STA 	DIFF_X_HSB		;

.0d4d	 38		sec							SEC 

.0d4e	 bd 8e 19	lda $198e,x						LDA 	OBJ_Y_LSB,X		;

.0d51	 e5 75		sbc $75							SBC 	CURR_Y_LSB		;

.0d53	 85 d8		sta $d8							STA 	DIFF_Y_LSB		;

.0d55	 bd 8e 17	lda $178e,x						LDA 	OBJ_Y_MSB,X		;

.0d58	 e5 76		sbc $76							SBC 	CURR_Y_MSB		;

.0d5a	 85 d9		sta $d9							STA 	DIFF_Y_MSB		;

.0d5c	 bd 4e 18	lda $184e,x						LDA 	OBJ_Y_HSB,X		;

.0d5f	 e5 77		sbc $77							SBC 	CURR_Y_HSB		;

.0d61	 85 da		sta $da							STA 	DIFF_Y_HSB		;

.0d63	 38		sec							SEC 

.0d64	 bd ce 19	lda $19ce,x						LDA 	OBJ_Z_LSB,X		;

.0d67	 e5 78		sbc $78							SBC 	CURR_Z_LSB		;

.0d69	 85 db		sta $db							STA 	DIFF_Z_LSB		;

.0d6b	 bd ce 17	lda $17ce,x						LDA 	OBJ_Z_MSB,X		;

.0d6e	 e5 79		sbc $79							SBC 	CURR_Z_MSB		;

.0d70	 85 dc		sta $dc							STA 	DIFF_Z_MSB		;

.0d72	 bd 8e 18	lda $188e,x						LDA 	OBJ_Z_HSB,X		;

.0d75	 e5 7a		sbc $7a							SBC 	CURR_Z_HSB		;

.0d77	 85 dd		sta $dd							STA 	DIFF_Z_HSB		;

.0d79	 60		rts							RTS 

.0d7a	 86 08		stx $08		s999A   STX ab08

.0d7c	 84 09		sty $09		        STY ab09

.0d7e	 a5 d5		lda $d5		        LDA DIFF_X_LSB

.0d80	 a6 d6		ldx $d6		        LDX DIFF_X_MSB

.0d82	 a4 d7		ldy $d7		        LDY DIFF_X_HSB

.0d84	 20 9e 0d	jsr $0d9e	        JSR s99BE

.0d87	 b0 14		bcs $0d9d	        BCS b99BD ; error so exit

.0d89	 a5 d8		lda $d8		        LDA DIFF_Y_LSB

.0d8b	 a6 d9		ldx $d9		        LDX DIFF_Y_MSB

.0d8d	 a4 da		ldy $da		        LDY DIFF_Y_HSB

.0d8f	 20 9e 0d	jsr $0d9e	        JSR s99BE

.0d92	 b0 09		bcs $0d9d	        BCS b99BD ; error so exit

.0d94	 a5 db		lda $db		        LDA DIFF_Z_LSB

.0d96	 a6 dc		ldx $dc		        LDX DIFF_Z_MSB

.0d98	 a4 dd		ldy $dd		        LDY DIFF_Z_HSB

.0d9a	 20 9e 0d	jsr $0d9e	        JSR s99BE

.0d9d	 60		rts		b99BD   RTS 

.0d9e	 10 15		bpl $0db5	s99BE   	BPL 	CONTINUE1 	; if number is positive continue ; negate a/x/y which hold lsb/msb/hsb if needed and subtract 08 and 09 from msb/hsb 

.0da0	 49 ff		eor #$ff					EOR 	#$FF  	; negative so negate LSB

.0da2	 48		pha						PHA 			; backup LSB

.0da3	 8a		txa						TXA       		; negate MSB

.0da4	 49 ff		eor #$ff					EOR 	#$FF	;

.0da6	 aa		tax						TAX 			;

.0da7	 98		tya						TYA 			; negate HSB

.0da8	 49 ff		eor #$ff					EOR 	#$FF	;

.0daa	 a8		tay						TAY 			;

.0dab	 68		pla						PLA 			; restore LSB

.0dac	 18		clc						CLC 

.0dad	 69 01		adc #$01					ADC 	#$01		; inc LSB

.0daf	 90 04		bcc $0db5					BCC 	CONTINUE1	; no overlow so continue

.0db1	 e8		inx							INX 			; inc MSB

.0db2	 d0 01		bne $0db5						BNE 	CONTINUE1	; no overlow so continue

.0db4	 c8		iny								INY 			; inc HSB

.0db5	 38		sec		CONTINUE1   SEC 

.0db6	 8a		txa					TXA 

.0db7	 e5 08		sbc $08					SBC 	ab08		; subtract from MSB

.0db9	 98		tya					TYA 

.0dba	 e5 09		sbc $09					SBC 	ab09		; subtract from HSB

.0dbc	 60		rts					RTS 

.0dbd	 bd 40 07	lda $0740,x	LINE_DRAW		LDA		POINT_CLASSIFICATION,X 		; start point X classification ; LINE_DRAW_04 - DRAW LINE - x is start index - y is end index

.0dc0	 f0 25		beq $0de7					BEQ 	POINT_X_INFRONT 			; start point X onscreen

.0dc2	 30 17		bmi $0ddb					BMI 	POINT_X_BEHIND 				; start point X behind

.0dc4	 b9 40 07	lda $0740,y					LDA 	POINT_CLASSIFICATION,Y 		; end point Y classification 

.0dc7	 f0 12		beq $0ddb					BEQ 	POINT_X_BEHIND 				; end point Y onscreen

.0dc9	 30 1c		bmi $0de7					BMI 	POINT_X_INFRONT 			; end point Y behind	

.0dcb	 b9 80 03	lda $0380,y					LDA 	Z_ROT_TAB_HI,Y 

.0dce	 49 80		eor #$80					EOR 	#$80

.0dd0	 85 06		sta $06						STA 	ab06

.0dd2	 bd 80 03	lda $0380,x					LDA 	Z_ROT_TAB_HI,X

.0dd5	 49 80		eor #$80					EOR 	#$80

.0dd7	 c5 06		cmp $06						CMP 	ab06

.0dd9	 b0 0c		bcs $0de7					BCS	 	POINT_X_INFRONT

.0ddb	 98		tya		POINT_X_BEHIND 	TYA 			; start X is behind so swap start X and end Y pointer so that Y is behind and X start might be behind? so swap start and end - so Y is behind?

.0ddc	 86 06		stx $06						STX 	ab06	; swap start / end

.0dde	 aa		tax						TAX 			; swap start / end

.0ddf	 a4 06		ldy $06						LDY 	ab06	; swap start / end

.0de1	 bd 40 07	lda $0740,x					LDA 	POINT_CLASSIFICATION,X 	; start point X which was end point Y classification

.0de4	 10 01		bpl $0de7					BPL 	POINT_X_INFRONT 		; end point X point infront

.0de6	 60		rts								RTS 					; both points behind

.0de7	 bd 40 07	lda $0740,x	POINT_X_INFRONT	LDA 	POINT_CLASSIFICATION,X 	; at least 1 point is in front ; point 1 classification

.0dea	 85 6e		sta $6e						STA 	POINT_CLASSIFY_1

.0dec	 30 1e		bmi $0e0c					BMI 	X_ROT_COPY 				; point X is behind so x rotation points need to be copied and pers doesnt

.0dee	 bd 80 06	lda $0680,x						LDA 	PERS_HOR,X

.0df1	 85 6a		sta $6a							STA 	LINE_START_HOR

.0df3	 bd c0 06	lda $06c0,x						LDA 	PERS_VER,X

.0df6	 85 6b		sta $6b							STA 	LINE_START_VER

.0df8	 bd 00 06	lda $0600,x						LDA 	PERS_POINT_TAB_2,X

.0dfb	 85 5e		sta $5e							STA 	ab5E

.0dfd	 bd c0 03	lda $03c0,x						LDA 	PERS_POINT_TAB_3,X

.0e00	 85 5f		sta $5f							STA 	ab5F

.0e02	 bd 00 07	lda $0700,x						LDA 	PERS_POINT_TAB_4,X

.0e05	 85 60		sta $60							STA 	ab60

.0e07	 bd 40 06	lda $0640,x						LDA 	PERS_POINT_TAB_5,X

.0e0a	 85 61		sta $61							STA 	ab61

.0e0c	 bd 00 01	lda $0100,x	X_ROT_COPY		LDA 	X_ROT_TAB_LO,X ; a point is behind? so x and y rotation needs to be copied to be used in z clip

.0e0f	 85 52		sta $52						STA 	X_POS_HI

.0e11	 bd 40 01	lda $0140,x					LDA 	X_ROT_TAB_HI,X

.0e14	 85 53		sta $53						STA 	X_POS_LO

.0e16	 bd 80 01	lda $0180,x					LDA 	Y_ROT_TAB_LO,X

.0e19	 85 54		sta $54						STA 	Y_POS_HI

.0e1b	 bd c0 02	lda $02c0,x					LDA 	Y_ROT_TAB_HI,X

.0e1e	 85 55		sta $55						STA 	Y_POS_LO

.0e20	 bd 40 03	lda $0340,x					LDA 	Z_ROT_TAB_LO,X

.0e23	 85 56		sta $56						STA 	Z_POS_HI

.0e25	 bd 80 03	lda $0380,x					LDA 	Z_ROT_TAB_HI,X

.0e28	 85 57		sta $57						STA 	Z_POS_LO

.0e2a	 b9 40 07	lda $0740,y					LDA 	POINT_CLASSIFICATION,Y

.0e2d	 85 6f		sta $6f						STA 	POINT_CLASSIFY_2

.0e2f	 30 1e		bmi $0e4f					BMI 	Y_ROT_COPY				; Y is behind so y rotation points need to be copied and pers doesnt

.0e31	 b9 80 06	lda $0680,y						LDA 	PERS_HOR,Y

.0e34	 85 6c		sta $6c							STA 	ab6C

.0e36	 b9 c0 06	lda $06c0,y						LDA 	PERS_VER,Y

.0e39	 85 6d		sta $6d							STA 	ab6D

.0e3b	 b9 00 06	lda $0600,y						LDA 	PERS_POINT_TAB_2,Y

.0e3e	 85 62		sta $62							STA 	ab62

.0e40	 b9 c0 03	lda $03c0,y						LDA 	PERS_POINT_TAB_3,Y

.0e43	 85 63		sta $63							STA 	ab63

.0e45	 b9 00 07	lda $0700,y						LDA 	PERS_POINT_TAB_4,Y

.0e48	 85 64		sta $64							STA 	ab64

.0e4a	 b9 40 06	lda $0640,y						LDA 	PERS_POINT_TAB_5,Y

.0e4d	 85 65		sta $65							STA 	ab65

.0e4f	 b9 00 01	lda $0100,y	Y_ROT_COPY		LDA 	X_ROT_TAB_LO,Y

.0e52	 85 58		sta $58						STA 	X_ROTATION_LO

.0e54	 b9 40 01	lda $0140,y					LDA 	X_ROT_TAB_HI,Y

.0e57	 85 59		sta $59						STA 	X_ROTATION_HI

.0e59	 b9 80 01	lda $0180,y					LDA 	Y_ROT_TAB_LO,Y

.0e5c	 85 5a		sta $5a						STA 	Y_ROTATION_LO

.0e5e	 b9 c0 02	lda $02c0,y					LDA 	Y_ROT_TAB_HI,Y

.0e61	 85 5b		sta $5b						STA 	Y_ROTATION_HI

.0e63	 b9 40 03	lda $0340,y					LDA 	Z_ROT_TAB_LO,Y

.0e66	 85 5c		sta $5c						STA 	Z_ROTATION_LO

.0e68	 b9 80 03	lda $0380,y					LDA 	Z_ROT_TAB_HI,Y

.0e6b	 85 5d		sta $5d						STA 	Z_ROTATION_HI

.0e6d	 a5 6f		lda $6f						LDA 	POINT_CLASSIFY_2

.0e6f	 10 03		bpl $0e74					BPL 	b9A94

.0e71	 4c ee 0e	jmp $0eee						JMP 	j9B2C ; LINE DRAW

.0e74	 a6 5e		ldx $5e		b9A94   LDX ab5E

.0e76	 a5 5f		lda $5f		        LDA ab5F

.0e78	 49 01		eor #$01	        EOR #$01

.0e7a	 86 08		stx $08		        STX ab08

.0e7c	 85 09		sta $09		        STA ab09

.0e7e	 a6 62		ldx $62		        LDX ab62

.0e80	 a4 63		ldy $63		        LDY ab63

.0e82	 20 b2 0a	jsr $0ab2	        JSR FP_ADD ; 62-63 + 08-09 ?

.0e85	 86 0a		stx $0a		        STX ab0A

.0e87	 84 0b		sty $0b		        STY ab0B

.0e89	 98		tya		        TYA 

.0e8a	 0a		asl		        ASL 

.0e8b	 29 02		and #$02	        AND #$02

.0e8d	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0e8f	 a6 60		ldx $60		        LDX ab60

.0e91	 a5 61		lda $61		        LDA ab61

.0e93	 49 01		eor #$01	        EOR #$01

.0e95	 86 08		stx $08		        STX ab08

.0e97	 85 09		sta $09		        STA ab09

.0e99	 a6 64		ldx $64		        LDX ab64

.0e9b	 a4 65		ldy $65		        LDY ab65

.0e9d	 20 b2 0a	jsr $0ab2	        JSR FP_ADD	; 64-65 + 08-09	

.0ea0	 86 0c		stx $0c		        STX ab0C

.0ea2	 84 0d		sty $0d		        STY ab0D

.0ea4	 98		tya		        TYA 

.0ea5	 29 01		and #$01	        AND #$01				; sign? ; does the sign show the line direction?

.0ea7	 05 67		ora $67		        ORA LINE_TYPE_POINTER

.0ea9	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0eab	 a5 0a		lda $0a				LDA		ab0A

.0ead	 85 22		sta $22				STA		FP_DIVIDE_LO

.0eaf	 a6 09		ldx $09				LDX		ab09

.0eb1	 a4 08		ldy $08				LDY		ab08

.0eb3	 a5 0b		lda $0b				LDA		ab0B

.0eb5	 20 eb 09	jsr $09eb			JSR		FP_DIVIDE		; 0A-0B / 08-09 -> 68-69

.0eb8	 86 68		stx $68				STx		ab68

.0eba	 85 69		sta $69				STA		ab69

.0ebc	 a8		tay		        TAY 

.0ebd	 30 17		bmi $0ed6	        BMI b9B14

.0ebf	 a5 67		lda $67		        LDA LINE_TYPE_POINTER

.0ec1	 09 04		ora #$04	        ORA #$04

.0ec3	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0ec5	 a5 0c		lda $0c				LDA		ab0C

.0ec7	 85 22		sta $22				STA		FP_DIVIDE_LO

.0ec9	 a6 0b		ldx $0b				LDX		ab0B

.0ecb	 a4 0a		ldy $0a				LDY		ab0A

.0ecd	 a5 0d		lda $0d				LDA		ab0D

.0ecf	 20 eb 09	jsr $09eb			JSR		FP_DIVIDE		; 0A-0B / 0C-0D -> 08-09

.0ed2	 86 08		stx $08				STX		ab08

.0ed4	 85 09		sta $09				STA		ab09

.0ed6	 a8		tay		b9B14   TAY 

.0ed7	 30 07		bmi $0ee0	        BMI b9B1E

.0ed9	 a9 ff		lda #$ff	        LDA #$FF		; straight line?

.0edb	 85 66		sta $66		        STA LINE_INC

.0edd	 4c 89 0f	jmp $0f89	        JMP GET_LINE_TYPE

.0ee0	 18		clc		b9B1E   CLC 

.0ee1	 69 20		adc #$20	        ADC #$20		; possible *128 ?

.0ee3	 29 fc		and #$fc	        AND #$FC

.0ee5	 a8		tay		        TAY 

.0ee6	 20 8b 0b	jsr $0b8b	        JSR FPTO16BIT

.0ee9	 84 66		sty $66		        STY LINE_INC

.0eeb	 4c 89 0f	jmp $0f89	        JMP GET_LINE_TYPE

.0eee	 a5 56		lda $56		j9B2C	LDA		Z_POS_HI			 

.0ef0	 85 22		sta $22				STA		FP_DIVIDE_LO

.0ef2	 a6 5d		ldx $5d				LDX		Z_ROTATION_HI

.0ef4	 a4 5c		ldy $5c				LDY		Z_ROTATION_LO

.0ef6	 a5 57		lda $57				LDA		Z_POS_LO

.0ef8	 20 eb 09	jsr $09eb			JSR		FP_DIVIDE		; XPOS HI-LO / Z_ROTATION HI-LO -> 0A-0B

.0efb	 86 0a		stx $0a				STX		ab0A

.0efd	 85 0b		sta $0b				STA		ab0B

.0eff	 49 01		eor #$01			EOR #$01				; swap sign?

.0f01	 85 0b		sta $0b		        STA ab0B

.0f03	 a5 52		lda $52				LDA 	X_POS_HI

.0f05	 85 22		sta $22				STA		FP_MULTIPLY_LO

.0f07	 a5 53		lda $53				LDA 	X_POS_LO

.0f09	 a4 0b		ldy $0b				LDY 	ab0B

.0f0b	 a6 0a		ldx $0a		        LDX 	ab0A

.0f0d	 20 07 0a	jsr $0a07			JSR		FP_MULTIPLY		; XPOS HI-LO * 0A-0B -> 08-09

.0f10	 84 08		sty $08		        STy 	ab08

.0f12	 85 09		sta $09		        STA 	ab09

.0f14	 a6 58		ldx $58		        LDX X_ROTATION_LO

.0f16	 a4 59		ldy $59		        LDY X_ROTATION_HI

.0f18	 20 b2 0a	jsr $0ab2	        JSR FP_ADD				; XROT HI-LO + 08-09 -> 0c-0D

.0f1b	 86 0c		stx $0c		        STX ab0C

.0f1d	 84 0d		sty $0d		        STY ab0D

.0f1f	 98		tya		        TYA 

.0f20	 45 57		eor $57		        EOR Z_POS_LO

.0f22	 0a		asl		        ASL 

.0f23	 29 02		and #$02	        AND #$02

.0f25	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0f27	 a5 54		lda $54				LDA 	Y_POS_HI

.0f29	 85 22		sta $22				STA		FP_MULTIPLY_LO

.0f2b	 a5 55		lda $55				LDA 	Y_POS_LO

.0f2d	 a4 0b		ldy $0b				LDY 	ab0B

.0f2f	 a6 0a		ldx $0a		        LDX 	ab0A

.0f31	 20 07 0a	jsr $0a07			JSR		FP_MULTIPLY		; Y_POS HI-LO * 0A-0B -> 08-09

.0f34	 84 08		sty $08		        STy 	ab08

.0f36	 85 09		sta $09		        STA 	ab09

.0f38	 a6 5a		ldx $5a		        LDX Y_ROTATION_LO

.0f3a	 a4 5b		ldy $5b		        LDY Y_ROTATION_HI

.0f3c	 20 b2 0a	jsr $0ab2	        JSR FP_ADD				; YROT HI-LO + 08-09 -> 0A-0B

.0f3f	 86 0a		stx $0a		        STX ab0A

.0f41	 84 0b		sty $0b		        STY ab0B

.0f43	 98		tya		        TYA 

.0f44	 45 57		eor $57		        EOR Z_POS_LO

.0f46	 29 01		and #$01	        AND #$01

.0f48	 05 67		ora $67		        ORA LINE_TYPE_POINTER

.0f4a	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0f4c	 a5 0c		lda $0c				LDA		ab0C

.0f4e	 85 22		sta $22				STA		FP_DIVIDE_LO

.0f50	 a6 09		ldx $09				LDX		ab09

.0f52	 a4 08		ldy $08				LDY		ab08

.0f54	 a5 0d		lda $0d				LDA		ab0D

.0f56	 20 eb 09	jsr $09eb			JSR		FP_DIVIDE		; 0C-0D / 08-09 -> 68-69

.0f59	 86 68		stx $68				STX		ab68

.0f5b	 85 69		sta $69				STA		ab69

.0f5d	 a8		tay		        TAY 

.0f5e	 30 17		bmi $0f77	        BMI b9BFC

.0f60	 a5 67		lda $67		        LDA LINE_TYPE_POINTER

.0f62	 09 04		ora #$04	        ORA #$04

.0f64	 85 67		sta $67		        STA LINE_TYPE_POINTER

.0f66	 a5 0a		lda $0a				LDA		ab0A

.0f68	 85 22		sta $22				STA		FP_DIVIDE_LO

.0f6a	 a6 0d		ldx $0d				LDX		ab0D

.0f6c	 a4 0c		ldy $0c				LDY		ab0C

.0f6e	 a5 0b		lda $0b				LDA		ab0B

.0f70	 20 eb 09	jsr $09eb			JSR		FP_DIVIDE		; 0A-0B / 0C-0D -> 08-09

.0f73	 86 08		stx $08				STX		ab08

.0f75	 85 09		sta $09				STA		ab09

.0f77	 a8		tay		b9BFC   TAY 

.0f78	 30 04		bmi $0f7e	        BMI b9C05

.0f7a	 a0 ff		ldy #$ff				LDY #$FF			; straight line?

.0f7c	 d0 09		bne $0f87				BNE LINE_CONT_99 ; jump

.0f7e	 18		clc		b9C05   CLC 

.0f7f	 69 20		adc #$20	        ADC #$20	; *128 ?

.0f81	 29 fc		and #$fc	        AND #$FC

.0f83	 a8		tay		        TAY 

.0f84	 20 8b 0b	jsr $0b8b	        JSR FPTO16BIT

.0f87	 84 66		sty $66		LINE_CONT_99	STY LINE_INC

.0f89	 a6 67		ldx $67		GET_LINE_TYPE	LDX 	LINE_TYPE_POINTER    ; GET LINE TYPE 0-7

.0f8b	 bc d0 26	ldy $26d0,x					LDY 	LINE_DRAW_CONV_PTR,X ; CONVERT LINE TYPE TO POINTER TYPE

.0f8e	 b9 c0 26	lda $26c0,y					LDA 	LINE_DRAW_PTR_LO,Y ; GET POINTER TO CORRECT LINE

.0f91	 85 04		sta $04						STA 	LINE_JUMP_PTR_LO    ; STORE AT JUMP TABLE ADDRESS

.0f93	 b9 c8 26	lda $26c8,y					LDA 	LINE_DRAW_PTR_HI,Y ; GET POINTER TO CORRECT LINE

.0f96	 85 05		sta $05						STA 	LINE_JUMP_PTR_HI    ; STORE AT JUMP TABLE ADDRESS

.0f98	 a5 6f		lda $6f						LDA 	POINT_CLASSIFY_2

.0f9a	 f0 0a		beq $0fa6					BEQ 	b9C2F

.0f9c	 b9 d8 26	lda $26d8,y					LDA 	fBBD8,Y

.0f9f	 85 6c		sta $6c						STA 	ab6C

.0fa1	 b9 e0 26	lda $26e0,y					LDA 	fBBE0,Y

.0fa4	 85 6d		sta $6d						STA 	ab6D

.0fa6	 a5 6e		lda $6e		b9C2F   		LDA 	POINT_CLASSIFY_1

.0fa8	 d0 03		bne $0fad					BNE 	b9C36				; point off screen

.0faa	 4c 04 11	jmp $1104					JMP		LINE_DRAW_JMP

.0fad	 a5 61		lda $61		b9C36   LDA ab61

.0faf	 0a		asl		        ASL 

.0fb0	 0a		asl		        ASL 

.0fb1	 29 04		and #$04	        AND #$04

.0fb3	 05 6e		ora $6e		        ORA POINT_CLASSIFY_1

.0fb5	 85 06		sta $06		        STA ab06

.0fb7	 a5 5f		lda $5f		        LDA ab5F

.0fb9	 0a		asl		        ASL 

.0fba	 0a		asl		        ASL 

.0fbb	 0a		asl		        ASL 

.0fbc	 29 08		and #$08	        AND #$08

.0fbe	 05 06		ora $06		        ORA ab06

.0fc0	 aa		tax		        TAX 

.0fc1	 98		tya		        TYA 

.0fc2	 1d e8 26	ora $26e8,x	        ORA fBBE8,X

.0fc5	 4a		lsr		        LSR 

.0fc6	 aa		tax		        TAX 

.0fc7	 bd f8 26	lda $26f8,x	        LDA fBBF8,X

.0fca	 d0 01		bne $0fcd	        BNE b9C56

.0fcc	 60		rts		        RTS 

.0fcd	 85 6e		sta $6e		b9C56   STA POINT_CLASSIFY_1

.0fcf	 a5 6f		lda $6f		        LDA POINT_CLASSIFY_2

.0fd1	 30 20		bmi $0ff3	        BMI b9C7C

.0fd3	 a5 65		lda $65		        LDA ab65

.0fd5	 0a		asl		        ASL 

.0fd6	 0a		asl		        ASL 

.0fd7	 29 04		and #$04	        AND #$04

.0fd9	 05 6f		ora $6f		        ORA POINT_CLASSIFY_2

.0fdb	 85 06		sta $06		        STA ab06

.0fdd	 a5 63		lda $63		        LDA ab63

.0fdf	 0a		asl		        ASL 

.0fe0	 0a		asl		        ASL 

.0fe1	 0a		asl		        ASL 

.0fe2	 29 08		and #$08	        AND #$08

.0fe4	 05 06		ora $06		        ORA ab06

.0fe6	 aa		tax		        TAX 

.0fe7	 98		tya		        TYA 

.0fe8	 1d e8 26	ora $26e8,x	        ORA fBBE8,X

.0feb	 4a		lsr		        LSR 

.0fec	 aa		tax		        TAX 

.0fed	 bd 18 27	lda $2718,x	        LDA fBC18,X

.0ff0	 d0 01		bne $0ff3	        BNE b9C7C

.0ff2	 60		rts		        RTS 

.0ff3	 a5 6e		lda $6e		b9C7C   LDA 	POINT_CLASSIFY_1

.0ff5	 29 01		and #$01	        AND 	#$01 ; off this edge

.0ff7	 f0 3f		beq $1038	        BEQ 	b9CC1 ; no

.0ff9	 a2 3c		ldx #$3c				LDX 	#ab92_VAL ; ab92 ; yes

.0ffb	 a9 18		lda #$18				LDA 	#ab93_VAL ; ab93

.0ffd	 38		sec					SEC 

.0ffe	 e9 18		sbc #$18				SBC 	#FOCUS ; ab21

.1000	 86 08		stx $08					STX 	ab08

.1002	 85 09		sta $09					STA 	ab09

.1004	 a6 5e		ldx $5e					LDX 	ab5E

.1006	 a5 5f		lda $5f					LDA 	ab5F

.1008	 49 01		eor #$01				EOR 	#$01

.100a	 a8		tay					TAY 

.100b	 20 b2 0a	jsr $0ab2				JSR 	FP_ADD			; 5E-5F + 92-93 -> 68-69

.100e	 a6 68		ldx $68					LDX 	ab68

.1010	 a4 69		ldy $69					LDY 	ab69

.1012	 20 21 0a	jsr $0a21				JSR 	FPMUL			; 92-93 * 68-69 -> 60-61

.1015	 a6 60		ldx $60					LDX 	ab60

.1017	 a4 61		ldy $61					LDY 	ab61

.1019	 20 b2 0a	jsr $0ab2				JSR 	FP_ADD			; 68-69 + 60-61 -> 

.101c	 98		tya					TYA 

.101d	 18		clc					CLC 

.101e	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.1020	 70 16		bvs $1038				BVS 	b9CC1

.1022	 a8		tay					TAY 

.1023	 20 5b 0b	jsr $0b5b				JSR 	FPTO8BIT

.1026	 b0 10		bcs $1038				BCS 	b9CC1

.1028	 18		clc					CLC 

.1029	 69 44		adc #$44				ADC 	#SCR_VER_MID

.102b	 c9 88		cmp #$88				CMP 	#CLIP_TEST_BOTTOM 	; clip test?

.102d	 b0 09		bcs $1038				BCS 	b9CC1

.102f	 85 6b		sta $6b						STA 	LINE_START_VER

.1031	 a9 9f		lda #$9f					LDA 	#CLIP_RIGHT 		; clip right ?

.1033	 85 6a		sta $6a						STA 	LINE_START_HOR 		; clip right ?

.1035	 4c 04 11	jmp $1104					JMP 	LINE_DRAW_JMP

.1038	 a5 6e		lda $6e		b9CC1   LDA 	POINT_CLASSIFY_1

.103a	 29 02		and #$02	        AND 	#$02 ; off this edge

.103c	 f0 3f		beq $107d	        BEQ 	b9D06 ; no

.103e	 a2 0c		ldx #$0c				LDX 	#ab96_VAL ; ab96 ; yes

.1040	 a9 18		lda #$18				LDA 	#ab97_VAL ; ab97

.1042	 38		sec					SEC 

.1043	 e9 18		sbc #$18				SBC 	#FOCUS ; ab21

.1045	 86 08		stx $08					STX 	ab08

.1047	 85 09		sta $09					STA 	ab09

.1049	 a6 60		ldx $60					LDX 	ab60

.104b	 a5 61		lda $61					LDA 	ab61

.104d	 49 01		eor #$01				EOR 	#$01

.104f	 a8		tay					TAY 

.1050	 20 b2 0a	jsr $0ab2				JSR 	FP_ADD				; 60-61 + 96-97 -> 68-69

.1053	 a6 68		ldx $68					LDX 	ab68

.1055	 a4 69		ldy $69					LDY 	ab69

.1057	 20 5b 0a	jsr $0a5b				JSR 	FPDIV				; 96-97 / 68-69 -> 5E-5F

.105a	 a6 5e		ldx $5e					LDX 	ab5E

.105c	 a4 5f		ldy $5f					LDY 	ab5F

.105e	 20 b2 0a	jsr $0ab2				JSR 	FP_ADD				; 5E-5F + 96-97 ->

.1061	 98		tya					TYA 

.1062	 18		clc					CLC 

.1063	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.1065	 70 16		bvs $107d				BVS 	b9D06

.1067	 a8		tay					TAY 

.1068	 20 5b 0b	jsr $0b5b				JSR 	FPTO8BIT

.106b	 b0 10		bcs $107d				BCS 	b9D06

.106d	 18		clc					CLC 

.106e	 69 50		adc #$50				ADC 	#SCR_HOR_MID

.1070	 c9 a0		cmp #$a0				CMP 	#CLIP_TEST_RIGHT 		; clip test

.1072	 b0 09		bcs $107d				BCS 	b9D06

.1074	 85 6a		sta $6a						STA 	LINE_START_HOR

.1076	 a9 87		lda #$87					LDA 	#CLIP_BOTTOM 			; clip bottom

.1078	 85 6b		sta $6b						STA 	LINE_START_VER 			; clip bottom

.107a	 4c 04 11	jmp $1104					JMP 	LINE_DRAW_JMP

.107d	 a5 6e		lda $6e		b9D06   LDA 	POINT_CLASSIFY_1 ; LINE DRAW

.107f	 29 04		and #$04	        AND 	#$04 ; off this edge

.1081	 f0 3f		beq $10c2	        BEQ 	b9D4B ; no

.1083	 a2 40		ldx #$40				LDX 	#ab90_VAL ; ab90 ; yes

.1085	 a9 19		lda #$19				LDA 	#ab91_VAL ; ab91

.1087	 38		sec					SEC 

.1088	 e9 18		sbc #$18				SBC 	#FOCUS ; ab21

.108a	 86 08		stx $08					STX 	ab08

.108c	 85 09		sta $09					STA 	ab09

.108e	 a6 5e		ldx $5e					LDX 	ab5E

.1090	 a5 5f		lda $5f					LDA 	ab5F

.1092	 49 01		eor #$01				EOR 	#$01

.1094	 a8		tay					TAY 

.1095	 20 b2 0a	jsr $0ab2				JSR 	FP_ADD				; 90-91 + 5E+5F -> 68-69

.1098	 a6 68		ldx $68					LDX 	ab68

.109a	 a4 69		ldy $69					LDY 	ab69

.109c	 20 21 0a	jsr $0a21				JSR 	FPMUL				; 68-69 * 90-91 -> 60-61

.109f	 a6 60		ldx $60					LDX 	ab60

.10a1	 a4 61		ldy $61					LDY 	ab61

.10a3	 20 b2 0a	jsr $0ab2				JSR 	FP_ADD				; 60-61 + 90-91 ->

.10a6	 98		tya					TYA 

.10a7	 18		clc					CLC 

.10a8	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.10aa	 70 16		bvs $10c2				BVS 	b9D4B

.10ac	 a8		tay					TAY 

.10ad	 20 5b 0b	jsr $0b5b				JSR 	FPTO8BIT

.10b0	 b0 10		bcs $10c2				BCS 	b9D4B

.10b2	 18		clc					CLC 

.10b3	 69 44		adc #$44				ADC 	#SCR_VER_MID

.10b5	 c9 88		cmp #$88				CMP 	#CLIP_TEST_BOTTOM ; clip test

.10b7	 b0 09		bcs $10c2				BCS 	b9D4B

.10b9	 85 6b		sta $6b						STA 	LINE_START_VER

.10bb	 a9 00		lda #$00					LDA 	#CLIP_TEST_TOP 	; clip off top

.10bd	 85 6a		sta $6a						STA 	LINE_START_HOR 	; clip off top 

.10bf	 4c 04 11	jmp $1104					JMP 	LINE_DRAW_JMP

.10c2	 a5 6e		lda $6e		b9D4B   LDA 	POINT_CLASSIFY_1 ; LINE DRAW

.10c4	 29 08		and #$08	        AND 	#$08 ; off this edge

.10c6	 f0 47		beq $110f			BEQ 	b9D98 ; no

.10c8	 a2 10		ldx #$10				LDX 	#ab94_VAL ; ab94 ; yes

.10ca	 a9 19		lda #$19				LDA 	#ab95_VAL ; ab95

.10cc	 38		sec					SEC 

.10cd	 e9 18		sbc #$18				SBC 	#FOCUS ; ab21

.10cf	 86 08		stx $08					STX 	ab08

.10d1	 85 09		sta $09					STA 	ab09

.10d3	 a6 60		ldx $60					LDX 	ab60

.10d5	 a5 61		lda $61					LDA 	ab61

.10d7	 49 01		eor #$01				EOR 	#$01

.10d9	 a8		tay					TAY 

.10da	 20 b2 0a	jsr $0ab2				JSR 	FP_ADD				; 94-95 + 60-61 -> 68-69

.10dd	 a6 68		ldx $68					LDX 	ab68

.10df	 a4 69		ldy $69					LDY 	ab69

.10e1	 20 5b 0a	jsr $0a5b				JSR 	FPDIV				; 94-95 / 68-69 -> 5E-5F

.10e4	 a6 5e		ldx $5e					LDX 	ab5E

.10e6	 a4 5f		ldy $5f					LDY 	ab5F

.10e8	 20 b2 0a	jsr $0ab2				JSR 	FP_ADD				; 94-95 + 5E-5F ->

.10eb	 98		tya					TYA 

.10ec	 18		clc					CLC 

.10ed	 69 18		adc #$18				ADC 	#FOCUS ; ab21

.10ef	 70 1e		bvs $110f				BVS 	b9D98

.10f1	 a8		tay					TAY 

.10f2	 20 5b 0b	jsr $0b5b				JSR 	FPTO8BIT

.10f5	 b0 18		bcs $110f				BCS 	b9D98

.10f7	 18		clc					CLC 

.10f8	 69 50		adc #$50				ADC 	#SCR_HOR_MID

.10fa	 c9 a0		cmp #$a0				CMP 	#CLIP_TEST_RIGHT 	; clip test

.10fc	 b0 11		bcs $110f				BCS 	b9D98

.10fe	 85 6a		sta $6a						STA 	LINE_START_HOR

.1100	 a9 00		lda #$00					LDA 	#CLIP_TEST_LEFT 	; clip off left

.1102	 85 6b		sta $6b						STA 	LINE_START_VER 		; clip off left

.1104	 a6 6a		ldx $6a		LINE_DRAW_JMP	LDX 	LINE_START_HOR

.1106	 a4 6b		ldy $6b					LDY 	LINE_START_VER

.1108	 a9 80		lda #$80				LDA 	#$80 					; set fraction to half 

.110a	 85 08		sta $08					STA 	LINE_FRACTION_ab08 		; set line fraction

.110c	 6c 04 00	jmp ($0004)				JMP 	(LINE_JUMP_PTR) 		; LINE_DRAW_01

.110f	 60		rts		b9D98   	RTS 

.1110	 48		pha		FORWARD_BACK	PHA 			; push sign/direction

.1111	 a6 aa		ldx $aa						LDX 	SPEED_LO

.1113	 45 ab		eor $ab						EOR 	SPEED_HI 	; set direction

.1115	 86 08		stx $08						STX 	ab08

.1117	 85 09		sta $09						STA 	ab09

.1119	 a6 3e		ldx $3e						LDX 	COS_LO

.111b	 a4 3f		ldy $3f						LDY 	COS_HI

.111d	 20 21 0a	jsr $0a21					JSR 	FPMUL

.1120	 20 8b 0b	jsr $0b8b					JSR 	FPTO16BIT

.1123	 98		tya						TYA 

.1124	 18		clc						CLC 

.1125	 65 78		adc $78						ADC 	CURR_Z_LSB

.1127	 85 78		sta $78						STA 	CURR_Z_LSB

.1129	 8a		txa						TXA 

.112a	 65 79		adc $79						ADC 	CURR_Z_MSB

.112c	 85 79		sta $79						STA 	CURR_Z_MSB

.112e	 8a		txa						TXA 

.112f	 10 04		bpl $1135					BPL 	_Z_PLUS 		; if +

.1131	 a9 ff		lda #$ff						LDA 	#$FF		; set to 255 for -

.1133	 30 02		bmi $1137						BMI 	_Z_NEG_CONT	; jmp

.1135	 a9 00		lda #$00	_Z_PLUS   		LDA 	#$00			; set to 0 for +

.1137	 65 7a		adc $7a		_Z_NEG_CONT 	ADC 	CURR_Z_HSB		; either add or sub depending on + or -

.1139	 85 7a		sta $7a						STA 	CURR_Z_HSB

.113b	 68		pla						PLA 			; pop sign

.113c	 a6 aa		ldx $aa						LDX 	SPEED_LO

.113e	 45 ab		eor $ab						EOR 	SPEED_HI	; set direction

.1140	 86 08		stx $08						STX 	ab08

.1142	 85 09		sta $09						STA 	ab09

.1144	 a6 3c		ldx $3c						LDX 	SIN_LO

.1146	 a4 3d		ldy $3d						LDY 	SIN_HI

.1148	 20 21 0a	jsr $0a21					JSR 	FPMUL

.114b	 20 8b 0b	jsr $0b8b					JSR 	FPTO16BIT

.114e	 98		tya						TYA 

.114f	 18		clc						CLC 

.1150	 65 72		adc $72						ADC 	CURR_X_LSB

.1152	 85 72		sta $72						STA 	CURR_X_LSB

.1154	 8a		txa						TXA 

.1155	 65 73		adc $73						ADC 	CURR_X_MSB

.1157	 85 73		sta $73						STA 	CURR_X_MSB

.1159	 8a		txa						TXA 

.115a	 10 04		bpl $1160					BPL 	_X_PLUS			; positive

.115c	 a9 ff		lda #$ff						LDA 	#$FF		; negative so set to 255

.115e	 30 02		bmi $1162						BMI 	_X_NEG_CONT ; jump to calc

.1160	 a9 00		lda #$00	_X_PLUS	   		LDA 	#$00			; positive so set to 0

.1162	 65 74		adc $74		_X_NEG_CONT    	ADC 	CURR_X_HSB		; calc

.1164	 85 74		sta $74						STA 	CURR_X_HSB

.1166	 60		rts						RTS 

.1167	 a6 2c		ldx $2c		SIN_COS	LDX 	ROT_LO

.1169	 a4 2d		ldy $2d		        LDY 	ROT_HI

.116b	 20 46 0b	jsr $0b46	        JSR 	SIN_FP

.116e	 86 3c		stx $3c		        STX 	SIN_LO ; sin_lo

.1170	 84 3d		sty $3d		        STY 	SIN_HI ; sin_hi

.1172	 a6 2c		ldx $2c		        LDX 	ROT_LO

.1174	 a4 2d		ldy $2d		        LDY 	ROT_HI

.1176	 20 45 0b	jsr $0b45	        JSR 	COS_FP

.1179	 86 3e		stx $3e		        STX 	COS_LO ; cos_lo

.117b	 84 3f		sty $3f		        STY 	COS_HI ; cos_hi

.117d	 60		rts		        RTS 

.117e	 a4 ad		ldy $ad		PROCESS_POINT_TO_FP	LDY 	OBJECT_POINTER_POS 	; get point then *16 then conveert to 24bit fp

.1180	 c8		iny							INY 

.1181	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y ; get x

.1183	 85 cf		sta $cf							STA 	OBJ_PNT_X

.1185	 c8		iny							INY 

.1186	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y ; get y

.1188	 85 d1		sta $d1							STA 	OBJ_PNT_Y

.118a	 c8		iny							INY 

.118b	 b1 1d		lda ($1d),y						LDA 	(OBJECT_POINTER),Y ; get z

.118d	 85 d3		sta $d3							STA 	OBJ_PNT_Z

.118f	 84 ad		sty $ad							STY 	OBJECT_POINTER_POS

.1191	 20 d7 11	jsr $11d7						JSR 	POINT_X16

.1194	 a5 d5		lda $d5							LDA 	DIFF_X_LSB

.1196	 18		clc							CLC 	 			; clear

.1197	 65 cf		adc $cf							ADC 	OBJ_PNT_X 	; x lsb

.1199	 a8		tay							TAY

.119a	 a5 d6		lda $d6							LDA 	DIFF_X_MSB

.119c	 65 d0		adc $d0							ADC 	OBJ_PNT_X_MSB

.119e	 aa		tax							TAX 

.119f	 a5 d7		lda $d7							LDA 	DIFF_X_HSB

.11a1	 69 00		adc #$00						ADC 	#$00

.11a3	 20 f3 0b	jsr $0bf3						JSR 	BIT24TOFP

.11a6	 85 52		sta $52							STA 	X_POS_HI

.11a8	 86 53		stx $53							STX 	X_POS_LO

.11aa	 a5 d8		lda $d8							LDA 	DIFF_Y_LSB

.11ac	 18		clc							CLC 

.11ad	 65 d1		adc $d1							ADC 	OBJ_PNT_Y ; y lsb

.11af	 a8		tay							TAY

.11b0	 a5 d9		lda $d9							LDA 	DIFF_Y_MSB

.11b2	 65 d2		adc $d2							ADC 	OBJ_PNT_Y_MSB

.11b4	 aa		tax							TAX 

.11b5	 a5 da		lda $da							LDA 	DIFF_Y_HSB

.11b7	 69 00		adc #$00						ADC 	#$00

.11b9	 20 f3 0b	jsr $0bf3						JSR 	BIT24TOFP

.11bc	 85 54		sta $54							STA 	Y_POS_HI

.11be	 86 55		stx $55							STX 	Y_POS_LO

.11c0	 a5 db		lda $db							LDA 	DIFF_Z_LSB

.11c2	 18		clc							CLC 

.11c3	 65 d3		adc $d3							ADC 	OBJ_PNT_Z ; z lsb

.11c5	 a8		tay							TAY

.11c6	 a5 dc		lda $dc							LDA 	DIFF_Z_MSB

.11c8	 65 d4		adc $d4							ADC 	OBJ_PNT_Z_MSB

.11ca	 aa		tax							TAX 

.11cb	 a5 dd		lda $dd							LDA 	DIFF_Z_HSB

.11cd	 69 00		adc #$00						ADC 	#$00

.11cf	 20 f3 0b	jsr $0bf3						JSR 	BIT24TOFP

.11d2	 85 56		sta $56							STA 	Z_POS_HI

.11d4	 86 57		stx $57							STX 	Z_POS_LO

.11d6	 60		rts							RTS 

.11d7	 a9 00		lda #$00	POINT_X16	LDA 	#$00			; MULTIPLY POINT *16 ?

.11d9	 85 d0		sta $d0					STA 	OBJ_PNT_X_MSB

.11db	 85 d2		sta $d2					STA 	OBJ_PNT_Y_MSB

.11dd	 85 d4		sta $d4					STA 	OBJ_PNT_Z_MSB

.11df	 a6 af		ldx $af					LDX 	CURRENT_OBJECT

.11e1	 a5 cf		lda $cf					LDA 	OBJ_PNT_X

.11e3	 49 80		eor #$80				EOR 	#$80 ; change the sign?

.11e5	 0a		asl					ASL 

.11e6	 26 d0		rol $d0					ROL 	OBJ_PNT_X_MSB ; *2

.11e8	 0a		asl					ASL 

.11e9	 26 d0		rol $d0					ROL 	OBJ_PNT_X_MSB ; *4

.11eb	 0a		asl					ASL 

.11ec	 26 d0		rol $d0					ROL 	OBJ_PNT_X_MSB ; *8

.11ee	 0a		asl					ASL 

.11ef	 26 d0		rol $d0					ROL 	OBJ_PNT_X_MSB ; *16

.11f1	 85 cf		sta $cf					STA 	OBJ_PNT_X

.11f3	 a5 d1		lda $d1					LDA 	OBJ_PNT_Y

.11f5	 49 80		eor #$80				EOR 	#$80

.11f7	 0a		asl					ASL 

.11f8	 26 d2		rol $d2					ROL 	OBJ_PNT_Y_MSB

.11fa	 0a		asl					ASL 

.11fb	 26 d2		rol $d2					ROL 	OBJ_PNT_Y_MSB

.11fd	 0a		asl					ASL 

.11fe	 26 d2		rol $d2					ROL 	OBJ_PNT_Y_MSB

.1200	 0a		asl					ASL 

.1201	 26 d2		rol $d2					ROL 	OBJ_PNT_Y_MSB

.1203	 85 d1		sta $d1					STA 	OBJ_PNT_Y

.1205	 a5 d3		lda $d3					LDA 	OBJ_PNT_Z

.1207	 49 80		eor #$80				EOR 	#$80

.1209	 0a		asl					ASL 

.120a	 26 d4		rol $d4					ROL 	OBJ_PNT_Z_MSB

.120c	 0a		asl					ASL 

.120d	 26 d4		rol $d4					ROL 	OBJ_PNT_Z_MSB

.120f	 0a		asl					ASL 

.1210	 26 d4		rol $d4					ROL 	OBJ_PNT_Z_MSB

.1212	 0a		asl					ASL 

.1213	 26 d4		rol $d4					ROL 	OBJ_PNT_Z_MSB

.1215	 85 d3		sta $d3					STA 	OBJ_PNT_Z

.1217	 60		rts					RTS 

.1218	 a5 3c		lda $3c		ROTATE_PERS LDA 	SIN_LO

.121a	 85 22		sta $22					STA		FP_MULTIPLY_LO

.121c	 a5 3d		lda $3d					LDA 	SIN_HI

.121e	 a6 52		ldx $52					LDX		X_POS_HI

.1220	 a4 53		ldy $53					LDY		X_POS_LO

.1222	 20 07 0a	jsr $0a07				JSR		FP_MULTIPLY			; X * SIN

.1225	 84 0a		sty $0a					STy 	X_ROT_LO

.1227	 85 0b		sta $0b					STA		X_ROT_HI

.1229	 a5 3e		lda $3e					LDA 	COS_LO

.122b	 85 22		sta $22					STA		FP_MULTIPLY_LO

.122d	 a5 3f		lda $3f					LDA 	COS_HI

.122f	 a6 56		ldx $56					LDX		Z_POS_HI

.1231	 a4 57		ldy $57					LDY		Z_POS_LO

.1233	 20 07 0a	jsr $0a07				JSR		FP_MULTIPLY			; Z * COS

.1236	 84 08		sty $08					STy 	Z_ROT_LO

.1238	 85 09		sta $09					STA		Z_ROT_HI

.123a	 a6 0a		ldx $0a					LDX 	X_ROT_LO

.123c	 a4 0b		ldy $0b					LDY 	X_ROT_HI

.123e	 20 b2 0a	jsr $0ab2				JSR 	FP_ADD				; Z = (X * SIN) + (Z * COS)

.1241	 86 5c		stx $5c					STX 	Z_ROTATION_LO		; Z rotation result?

.1243	 98		tya					TYA 

.1244	 49 01		eor #$01				EOR 	#$01

.1246	 85 5d		sta $5d					STA 	Z_ROTATION_HI		; Z rotation result?

.1248	 29 01		and #$01				AND 	#$01				; keep fp sign

.124a	 4a		lsr					LSR 						; shift sign

.124b	 6a		ror					ROR 						; rotate sign into top bit

.124c	 85 6e		sta $6e					STA 	POINT_CLASSIFY_1	; so -ve = $80 / +ve = $00 ? = behind point classification?

.124e	 a5 3e		lda $3e					LDA 	COS_LO

.1250	 85 22		sta $22					STA		FP_MULTIPLY_LO

.1252	 a5 3f		lda $3f					LDA 	COS_HI

.1254	 a6 52		ldx $52					LDX		X_POS_HI

.1256	 a4 53		ldy $53					LDY		X_POS_LO

.1258	 20 07 0a	jsr $0a07				JSR		FP_MULTIPLY			; X * COS

.125b	 84 0a		sty $0a					STy 	X_ROT_LO

.125d	 85 0b		sta $0b					STA		X_ROT_HI

.125f	 a5 3c		lda $3c					LDA 	SIN_LO

.1261	 85 22		sta $22					STA		FP_MULTIPLY_LO

.1263	 a5 3d		lda $3d					LDA 	SIN_HI

.1265	 a6 56		ldx $56					LDX		Z_POS_HI

.1267	 a4 57		ldy $57					LDY		Z_POS_LO

.1269	 20 07 0a	jsr $0a07				JSR		FP_MULTIPLY			; Z * SIN

.126c	 84 08		sty $08					STy 	Z_ROT_LO

.126e	 49 01		eor #$01				EOR 	#$01 				; -Z * SIN

.1270	 85 09		sta $09					STA 	Z_ROT_HI

.1272	 a6 0a		ldx $0a					LDX 	X_ROT_LO

.1274	 a4 0b		ldy $0b					LDY 	X_ROT_HI

.1276	 20 b2 0a	jsr $0ab2				JSR 	FP_ADD 				; X = (X * COS) + (-Z * SIN)

.1279	 86 58		stx $58					STX 	X_ROTATION_LO		; X rotation result?

.127b	 98		tya					TYA 

.127c	 85 59		sta $59					STA 	X_ROTATION_HI		; X rotation result?

.127e	 a4 6e		ldy $6e		        LDY POINT_CLASSIFY_1	; z classification? (see #1 above) 0 is infront - !0 is behind

.1280	 d0 2a		bne $12ac	        BNE bAA54				; behind?

.1282	 85 09		sta $09		        STA ab09

.1284	 a5 5c		lda $5c				LDA		Z_ROTATION_LO

.1286	 85 22		sta $22				STA		FP_DIVIDE_LO

.1288	 a6 09		ldx $09				LDX		ab09

.128a	 a4 08		ldy $08				LDY		ab08

.128c	 a5 5d		lda $5d				LDA		Z_ROTATION_HI

.128e	 20 eb 09	jsr $09eb			JSR		FP_DIVIDE		; Z_ROTATION LO-HI / 08-09 -> 5E-5F

.1291	 86 5e		stx $5e				STX		ab5E

.1293	 85 5f		sta $5f				STA		ab5F

.1295	 18		clc		        CLC 

.1296	 69 18		adc #$18	        ADC #FOCUS ; ab21

.1298	 70 0e		bvs $12a8	        BVS bAA50

.129a	 a8		tay		        TAY 

.129b	 20 5b 0b	jsr $0b5b	        JSR FPTO8BIT

.129e	 b0 08		bcs $12a8	        BCS bAA50

.12a0	 69 50		adc #$50	        ADC #SCR_HOR_MID

.12a2	 85 6a		sta $6a		        STA LINE_START_HOR

.12a4	 c9 a0		cmp #$a0	        CMP #CLIP_TEST_RIGHT ; clip test

.12a6	 90 04		bcc $12ac	        BCC bAA54 ; off right

.12a8	 a9 01		lda #$01	bAA50   LDA #PNT_OFF_RIGHT ; right clip

.12aa	 85 6e		sta $6e		        STA POINT_CLASSIFY_1

.12ac	 a6 54		ldx $54		bAA54   LDX Y_POS_HI

.12ae	 a5 55		lda $55		        LDA Y_POS_LO

.12b0	 49 01		eor #$01	        EOR #$01

.12b2	 a8		tay		        TAY 

.12b3	 86 08		stx $08		        STX ab08

.12b5	 84 09		sty $09		        STY ab09

.12b7	 86 5a		stx $5a		jA8E9   STX 	Y_ROTATION_LO

.12b9	 98		tya		        TYA 

.12ba	 18		clc		        CLC 

.12bb	 69 04		adc #$04	        ADC #$04

.12bd	 70 01		bvs $12c0	        BVS bA8F2

.12bf	 a8		tay					TAY 

.12c0	 84 5b		sty $5b		bA8F2   STY 	Y_ROTATION_HI

.12c2	 84 09		sty $09		        STY ab09

.12c4	 a5 6e		lda $6e		        LDA 	POINT_CLASSIFY_1

.12c6	 30 2a		bmi $12f2	        BMI 	bA933

.12c8	 a5 5c		lda $5c				LDA		Z_ROTATION_LO

.12ca	 85 22		sta $22				STA		FP_DIVIDE_LO

.12cc	 a6 09		ldx $09				LDX		ab09

.12ce	 a4 08		ldy $08				LDY		ab08

.12d0	 a5 5d		lda $5d				LDA		Z_ROTATION_HI

.12d2	 20 eb 09	jsr $09eb			JSR		FP_DIVIDE		; Z_ROTATION LO-HI / 08-09 -> 60-61

.12d5	 86 60		stx $60				STX		ab60

.12d7	 85 61		sta $61				STA		ab61

.12d9	 18		clc		        CLC 

.12da	 69 18		adc #$18	        ADC 	#FOCUS ; ab21

.12dc	 70 0e		bvs $12ec	        BVS 	bA92D

.12de	 a8		tay					TAY 

.12df	 20 5b 0b	jsr $0b5b				JSR 	FPTO8BIT

.12e2	 b0 08		bcs $12ec	        BCS 	bA92D

.12e4	 69 44		adc #$44				ADC 	#SCR_VER_MID

.12e6	 85 6b		sta $6b					STA 	LINE_START_VER

.12e8	 c9 88		cmp #$88				CMP 	#CLIP_TEST_BOTTOM ; clip test

.12ea	 90 06		bcc $12f2				BCC 	bA933

.12ec	 a5 6e		lda $6e		bA92D   LDA 	POINT_CLASSIFY_1

.12ee	 09 02		ora #$02	        ORA 	#PNT_OFF_BOTTOM

.12f0	 85 6e		sta $6e		        STA 	POINT_CLASSIFY_1

.12f2	 a4 19		ldy $19		bA933   LDY 	POINT_LINE_COUNT						; point position?

.12f4	 a5 6e		lda $6e		        LDA 	POINT_CLASSIFY_1

.12f6	 99 40 07	sta $0740,y	        STA 	POINT_CLASSIFICATION,Y

.12f9	 30 1e		bmi $1319	        BMI 	bA95A					; behind

.12fb	 a5 5e		lda $5e					LDA 	ab5E

.12fd	 99 00 06	sta $0600,y				STA 	PERS_POINT_TAB_2,Y	; pers point?

.1300	 a5 5f		lda $5f					LDA 	ab5F

.1302	 99 c0 03	sta $03c0,y				STA 	PERS_POINT_TAB_3,Y	; pers point?

.1305	 a5 60		lda $60					LDA 	ab60

.1307	 99 00 07	sta $0700,y				STA 	PERS_POINT_TAB_4,Y	; pers point?

.130a	 a5 61		lda $61					LDA 	ab61

.130c	 99 40 06	sta $0640,y				STA 	PERS_POINT_TAB_5,Y	; pers point?

.130f	 a5 6a		lda $6a					LDA 	LINE_START_HOR 			; get perspective ver

.1311	 99 80 06	sta $0680,y				STA 	PERS_HOR,Y 				; put perspective ver

.1314	 a5 6b		lda $6b					LDA 	LINE_START_VER 			; get perspective hor

.1316	 99 c0 06	sta $06c0,y				STA 	PERS_VER,Y 				; put perspective hor

.1319	 a5 58		lda $58		bA95A   LDA 	X_ROTATION_LO

.131b	 99 00 01	sta $0100,y	        STA 	X_ROT_TAB_LO,Y 	; X rotation result x pos lo

.131e	 a5 59		lda $59		        LDA 	X_ROTATION_HI

.1320	 99 40 01	sta $0140,y	        STA 	X_ROT_TAB_HI,Y 	; X rotation result x pos hi

.1323	 a5 5a		lda $5a		        LDA 	Y_ROTATION_LO

.1325	 99 80 01	sta $0180,y	        STA 	Y_ROT_TAB_LO,Y	; rotation result y pos lo

.1328	 a5 5b		lda $5b		        LDA 	Y_ROTATION_HI

.132a	 99 c0 02	sta $02c0,y	        STA 	Y_ROT_TAB_HI,Y	; rotation result y pos hi

.132d	 a5 5c		lda $5c		        LDA 	Z_ROTATION_LO

.132f	 99 40 03	sta $0340,y	        STA 	Z_ROT_TAB_LO,Y	; rotation result z pos lo

.1332	 a5 5d		lda $5d		        LDA 	Z_ROTATION_HI

.1334	 99 80 03	sta $0380,y	        STA 	Z_ROT_TAB_HI,Y	; rotation result z pos hi

.1337	 60		rts		        RTS 

.1338	 e8		inx		LINE_DRAW_0_LOOP  	INX 

.1339	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.133b	 65 66		adc $66							ADC 	LINE_INC

.133d	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.133f	 90 05		bcc $1346						BCC 	LINE_DRAW_0

.1341	 c8		iny								INY 

.1342	 c0 88		cpy #$88							CPY 	#CLIP_TEST_BOTTOM

.1344	 f0 20		beq $1366							BEQ 	LINE_DRAW_0_EXIT

.1346	 b9 30 25	lda $2530,y	LINE_DRAW_0			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.1349	 85 02		sta $02							STA 	SCREEN_POS_LO

.134b	 8a		txa							TXA 

.134c	 0a		asl							ASL 

.134d	 b9 a0 24	lda $24a0,y						LDA 	VER_POS_HI,Y

.1350	 65 25		adc $25							ADC 	SCREEN_BANK

.1352	 85 03		sta $03							STA 	SCREEN_POS_HI

.1354	 84 06		sty $06							STY 	ab06

.1356	 bc c0 25	ldy $25c0,x						LDY 	HOR_SCR_POS,X

.1359	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.135b	 1d 00 24	ora $2400,x	LINE_DRAW_0_TYPE	ORA 	ORA_PIXEL_POS,X

.135e	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.1360	 a4 06		ldy $06							LDY 	ab06

.1362	 e4 6c		cpx $6c							CPX 	ab6C

.1364	 d0 d2		bne $1338						BNE 	LINE_DRAW_0_LOOP

.1366	 60		rts		LINE_DRAW_0_EXIT   RTS 

.1367	 c8		iny		LINE_DRAW_1_LOOP   INY  ; LINE-DRAW

.1368	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.136a	 65 66		adc $66							ADC 	LINE_INC

.136c	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.136e	 90 05		bcc $1375						BCC 	LINE_DRAW_1

.1370	 e8		inx								INX 

.1371	 e0 a0		cpx #$a0							CPX 	#CLIP_TEST_RIGHT ; clip test

.1373	 f0 20		beq $1395							BEQ 	LINE_DRAW_1_EXIT

.1375	 b9 30 25	lda $2530,y	LINE_DRAW_1			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.1378	 85 02		sta $02							STA 	SCREEN_POS_LO

.137a	 8a		txa							TXA 

.137b	 0a		asl							ASL 

.137c	 b9 a0 24	lda $24a0,y						LDA 	VER_POS_HI,Y

.137f	 65 25		adc $25							ADC 	SCREEN_BANK

.1381	 85 03		sta $03							STA 	SCREEN_POS_HI

.1383	 84 06		sty $06							STY 	ab06

.1385	 bc c0 25	ldy $25c0,x						LDY 	HOR_SCR_POS,X

.1388	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.138a	 1d 00 24	ora $2400,x	LINE_DRAW_1_TYPE	ORA 	ORA_PIXEL_POS,X

.138d	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.138f	 a4 06		ldy $06							LDY 	ab06

.1391	 c4 6d		cpy $6d							CPY 	ab6D

.1393	 d0 d2		bne $1367						BNE 	LINE_DRAW_1_LOOP ; GOTO LINE-DRAW

.1395	 60		rts		LINE_DRAW_1_EXIT   	RTS 

.1396	 c8		iny		LINE_DRAW_2_LOOP   	INY  ; LINE-DRAW

.1397	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.1399	 65 66		adc $66							ADC 	LINE_INC

.139b	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.139d	 90 05		bcc $13a4						BCC 	LINE_DRAW_2

.139f	 ca		dex								DEX 

.13a0	 e0 ff		cpx #$ff							CPX 	#$FF

.13a2	 f0 20		beq $13c4							BEQ 	LINE_DRAW_2_EXIT

.13a4	 b9 30 25	lda $2530,y	LINE_DRAW_2			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.13a7	 85 02		sta $02							STA 	SCREEN_POS_LO

.13a9	 8a		txa							TXA 

.13aa	 0a		asl							ASL 

.13ab	 b9 a0 24	lda $24a0,y						LDA 	VER_POS_HI,Y

.13ae	 65 25		adc $25							ADC 	SCREEN_BANK

.13b0	 85 03		sta $03							STA 	SCREEN_POS_HI

.13b2	 84 06		sty $06							STY 	ab06

.13b4	 bc c0 25	ldy $25c0,x						LDY 	HOR_SCR_POS,X

.13b7	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.13b9	 1d 00 24	ora $2400,x	LINE_DRAW_2_TYPE	ORA 	ORA_PIXEL_POS,X

.13bc	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.13be	 a4 06		ldy $06							LDY 	ab06

.13c0	 c4 6d		cpy $6d							CPY 	ab6D

.13c2	 d0 d2		bne $1396						BNE 	LINE_DRAW_2_LOOP ; GOTO LINE-DRAW

.13c4	 60		rts		LINE_DRAW_2_EXIT   	RTS 

.13c5	 ca		dex		LINE_DRAW_3_LOOP  	DEX ; LINE-DRAW

.13c6	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.13c8	 e5 66		sbc $66							SBC 	LINE_INC

.13ca	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.13cc	 b0 05		bcs $13d3						BCS 	LINE_DRAW_3

.13ce	 c8		iny								INY 

.13cf	 c0 88		cpy #$88							CPY 	#CLIP_TEST_BOTTOM

.13d1	 f0 20		beq $13f3							BEQ 	LINE_DRAW_3_EXIT

.13d3	 b9 30 25	lda $2530,y	LINE_DRAW_3			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.13d6	 85 02		sta $02							STA 	SCREEN_POS_LO

.13d8	 8a		txa							TXA 

.13d9	 0a		asl							ASL 

.13da	 b9 a0 24	lda $24a0,y						LDA 	VER_POS_HI,Y

.13dd	 65 25		adc $25							ADC 	SCREEN_BANK

.13df	 85 03		sta $03							STA 	SCREEN_POS_HI

.13e1	 84 06		sty $06							STY 	ab06

.13e3	 bc c0 25	ldy $25c0,x						LDY 	HOR_SCR_POS,X

.13e6	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.13e8	 1d 00 24	ora $2400,x	LINE_DRAW_3_TYPE	ORA 	ORA_PIXEL_POS,X

.13eb	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.13ed	 a4 06		ldy $06							LDY 	ab06

.13ef	 e4 6c		cpx $6c							CPX 	ab6C

.13f1	 d0 d2		bne $13c5						BNE 	LINE_DRAW_3_LOOP ; GOTO LINE-DRAW

.13f3	 60		rts		LINE_DRAW_3_EXIT   	RTS 

.13f4	 ca		dex		LINE_DRAW_4_LOOP   	DEX  ; LINE-DRAW

.13f5	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.13f7	 e5 66		sbc $66							SBC 	LINE_INC

.13f9	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.13fb	 b0 05		bcs $1402						BCS 	LINE_DRAW_4

.13fd	 88		dey								DEY 

.13fe	 c0 ff		cpy #$ff							CPY 	#$FF

.1400	 f0 20		beq $1422							BEQ 	LINE_DRAW_4_EXIT

.1402	 b9 30 25	lda $2530,y	LINE_DRAW_4			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.1405	 85 02		sta $02							STA 	SCREEN_POS_LO

.1407	 8a		txa							TXA 

.1408	 0a		asl							ASL 

.1409	 b9 a0 24	lda $24a0,y						LDA 	VER_POS_HI,Y

.140c	 65 25		adc $25							ADC 	SCREEN_BANK

.140e	 85 03		sta $03							STA 	SCREEN_POS_HI

.1410	 84 06		sty $06							STY 	ab06

.1412	 bc c0 25	ldy $25c0,x						LDY 	HOR_SCR_POS,X

.1415	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.1417	 1d 00 24	ora $2400,x	LINE_DRAW_4_TYPE  	ORA 	ORA_PIXEL_POS,X

.141a	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.141c	 a4 06		ldy $06							LDY 	ab06

.141e	 e4 6c		cpx $6c							CPX 	ab6C

.1420	 d0 d2		bne $13f4						BNE 	LINE_DRAW_4_LOOP ; GOTO LINE-DRAW

.1422	 60		rts		LINE_DRAW_4_EXIT   	RTS 

.1423	 88		dey		LINE_DRAW_5_LOOP   	DEY  ; LINE-DRAW

.1424	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.1426	 65 66		adc $66							ADC 	LINE_INC

.1428	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.142a	 90 05		bcc $1431						BCC 	LINE_DRAW_5

.142c	 ca		dex								DEX 

.142d	 e0 ff		cpx #$ff							CPX 	#$FF

.142f	 f0 20		beq $1451							BEQ 	LINE_DRAW_5_EXIT

.1431	 b9 30 25	lda $2530,y	LINE_DRAW_5			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.1434	 85 02		sta $02							STA 	SCREEN_POS_LO

.1436	 8a		txa							TXA 

.1437	 0a		asl							ASL 

.1438	 b9 a0 24	lda $24a0,y						LDA 	VER_POS_HI,Y

.143b	 65 25		adc $25							ADC 	SCREEN_BANK

.143d	 85 03		sta $03							STA 	SCREEN_POS_HI

.143f	 84 06		sty $06							STY 	ab06

.1441	 bc c0 25	ldy $25c0,x						LDY 	HOR_SCR_POS,X

.1444	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.1446	 1d 00 24	ora $2400,x	LINE_DRAW_5_TYPE  	ORA 	ORA_PIXEL_POS,X

.1449	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.144b	 a4 06		ldy $06							LDY 	ab06

.144d	 c4 6d		cpy $6d							CPY 	ab6D

.144f	 d0 d2		bne $1423						BNE 	LINE_DRAW_5_LOOP ; GOTO LINE-DRAW

.1451	 60		rts		LINE_DRAW_5_EXIT  	RTS

.1452	 88		dey		LINE_DRAW_6_LOOP   	DEY  ; LINE-DRAW

.1453	 a5 08		lda $08							LDA 	LINE_FRACTION_ab08

.1455	 e5 66		sbc $66							SBC 	LINE_INC

.1457	 85 08		sta $08							STA 	LINE_FRACTION_ab08

.1459	 b0 05		bcs $1460						BCS 	LINE_DRAW_6

.145b	 e8		inx								INX             ; NEXT VER

.145c	 e0 a0		cpx #$a0							CPX 	#$A0        ; OFF BOTTOM

.145e	 f0 20		beq $1480							BEQ 	LINE_DRAW_6_EXIT       ; EXIT

.1460	 b9 30 25	lda $2530,y	LINE_DRAW_6			LDA 	VER_POS_LO,Y ; LINE-DRAW-START

.1463	 85 02		sta $02							STA 	SCREEN_POS_LO

.1465	 8a		txa							TXA 

.1466	 0a		asl							ASL 

.1467	 b9 a0 24	lda $24a0,y						LDA 	VER_POS_HI,Y

.146a	 65 25		adc $25							ADC 	SCREEN_BANK

.146c	 85 03		sta $03							STA 	SCREEN_POS_HI

.146e	 84 06		sty $06							STY 	ab06

.1470	 bc c0 25	ldy $25c0,x						LDY 	HOR_SCR_POS,X

.1473	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.1475	 1d 00 24	ora $2400,x	LINE_DRAW_6_TYPE	ORA 	ORA_PIXEL_POS,X

.1478	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.147a	 a4 06		ldy $06							LDY 	ab06

.147c	 c4 6d		cpy $6d							CPY 	ab6D

.147e	 d0 d2		bne $1452						BNE 	LINE_DRAW_6_LOOP ; GOTO LINE-DRAW 

.1480	 60		rts		LINE_DRAW_6_EXIT	RTS 

.1481	 e8		inx		LINE_DRAW_7_LOOP   	INX	; LINE-DRAW

.1482	 a5 08		lda $08							LDA		LINE_FRACTION_ab08

.1484	 65 66		adc $66							ADC		LINE_INC

.1486	 85 08		sta $08							STA		LINE_FRACTION_ab08

.1488	 90 05		bcc $148f						BCC		LINE_DRAW_7

.148a	 88		dey								DEY 

.148b	 c0 ff		cpy #$ff							CPY		#$FF

.148d	 f0 20		beq $14af							BEQ		LINE_DRAW_7_EXIT

.148f	 b9 30 25	lda $2530,y	LINE_DRAW_7			LDA		VER_POS_LO,Y ; LINE-DRAW-START

.1492	 85 02		sta $02							STA		SCREEN_POS_LO

.1494	 8a		txa							TXA 

.1495	 0a		asl							ASL 

.1496	 b9 a0 24	lda $24a0,y						LDA 	VER_POS_HI,Y

.1499	 65 25		adc $25							ADC 	SCREEN_BANK

.149b	 85 03		sta $03							STA 	SCREEN_POS_HI

.149d	 84 06		sty $06							STY 	ab06

.149f	 bc c0 25	ldy $25c0,x						LDY 	HOR_SCR_POS,X

.14a2	 b1 02		lda ($02),y						LDA 	(SCREEN_POS_PTR),Y

.14a4	 1d 00 24	ora $2400,x	LINE_DRAW_7_TYPE	ORA 	ORA_PIXEL_POS,X

.14a7	 91 02		sta ($02),y						STA 	(SCREEN_POS_PTR),Y

.14a9	 a4 06		ldy $06							LDY 	ab06

.14ab	 e4 6c		cpx $6c							CPX 	ab6C

.14ad	 d0 d2		bne $1481						BNE 	LINE_DRAW_7_LOOP ; GOTO LINE DRAW

.14af	 60		rts		LINE_DRAW_7_EXIT   	RTS 

.14b0	 a9 23		lda #$23	COLOUR_SETUP_WHITE	LDA 	#>AND_PIXEL_POS

.14b2	 a2 3d		ldx #$3d						LDX 	#$3D				; AND

.14b4	 d0 04		bne $14ba						BNE 	COLOUR_SETUP 		; JUMP

.14b6	 a9 24		lda #$24	COLOUR_SETUP_BLACK	LDA 	#>ORA_PIXEL_POS

.14b8	 a2 1d		ldx #$1d						LDX 	#$1D				; ORA

.14ba	 8d 5d 13	sta $135d	COLOUR_SETUP		STA 	LINE_DRAW_0_TYPE +2

.14bd	 8d 8c 13	sta $138c						STA 	LINE_DRAW_1_TYPE +2

.14c0	 8d bb 13	sta $13bb						STA 	LINE_DRAW_2_TYPE +2

.14c3	 8d ea 13	sta $13ea						STA 	LINE_DRAW_3_TYPE +2

.14c6	 8d 19 14	sta $1419						STA 	LINE_DRAW_4_TYPE +2

.14c9	 8d 48 14	sta $1448						STA 	LINE_DRAW_5_TYPE +2

.14cc	 8d 77 14	sta $1477						STA 	LINE_DRAW_6_TYPE +2

.14cf	 8d a6 14	sta $14a6						STA 	LINE_DRAW_7_TYPE +2

.14d2	 8d c5 0c	sta $0cc5						STA 	LINE_DRAW_8_TYPE +2

.14d5	 8e 5b 13	stx $135b						STX 	LINE_DRAW_0_TYPE

.14d8	 8e 8a 13	stx $138a						STX 	LINE_DRAW_1_TYPE

.14db	 8e b9 13	stx $13b9						STX 	LINE_DRAW_2_TYPE

.14de	 8e e8 13	stx $13e8						STX 	LINE_DRAW_3_TYPE

.14e1	 8e 17 14	stx $1417						STX 	LINE_DRAW_4_TYPE

.14e4	 8e 46 14	stx $1446						STX 	LINE_DRAW_5_TYPE

.14e7	 8e 75 14	stx $1475						STX 	LINE_DRAW_6_TYPE

.14ea	 8e a4 14	stx $14a4						STX 	LINE_DRAW_7_TYPE

.14ed	 8e c3 0c	stx $0cc3						STX 	LINE_DRAW_8_TYPE

.14f0	 60		rts							RTS

.14f1	 a9 e0		lda #$e0	DRAW_SCREEN	LDA		#$E0

.14f3	 cd 12 d0	cmp $d012	WAIT_RASTER	CMP		$D012

.14f6	 d0 fb		bne $14f3				BNE 	WAIT_RASTER

.14f8	 e6 24		inc $24					INC		SCREEN_FLIP		; INCREMENT SCREEN FLIP

.14fa	 a5 24		lda $24					LDA		SCREEN_FLIP		; GET SCREEN FLIP

.14fc	 4a		lsr					LSR 					; SHIFT BIT0 INTO CARRY

.14fd	 b0 0a		bcs $1509				BCS		SCRN_2			; CARRY SET ?

.14ff	 a9 40		lda #$40				LDA		#SCREEN_0		; SCREEN 1 OFFSET

.1501	 85 25		sta $25					STA		SCREEN_BANK		; SCREEN 1 OFFSET

.1503	 a9 78		lda #$78				LDA		#$78

.1505	 85 c7		sta $c7					STA		VIC_SCREEN_BANK

.1507	 d0 08		bne $1511				BNE		SCNCLR			; JUMP

.1509	 a9 60		lda #$60	SCRN_2  	LDA		#SCREEN_1		; SCREEN 2 OFFSET

.150b	 85 25		sta $25					STA		SCREEN_BANK		; SCREEN 2 OFFSET

.150d	 a9 70		lda #$70				LDA		#$70

.150f	 85 c7		sta $c7					STA		VIC_SCREEN_BANK

.1511	 a9 a5		lda #$a5	SCNCLR  	LDA 	#$A5

.1513	 a2 88		ldx #$88				LDX 	#136

.1515	 a4 25		ldy $25					LDY 	SCREEN_BANK

.1517	 c0 60		cpy #$60				CPY 	#SCREEN_1

.1519	 f0 7c		beq $1597				BEQ 	CLSN1LP

.151b	 9d ff 3f	sta $3fff,x	CLSN0LP		STA 	SCREEN0-1+(136*00),X ; 1

.151e	 9d 87 40	sta $4087,x				STA 	SCREEN0-1+(136*01),X ;f40F7,X ; 2

.1521	 9d 0f 41	sta $410f,x				STA 	SCREEN0-1+(136*02),X ;f41EF,X ;3

.1524	 9d 97 41	sta $4197,x				STA 	SCREEN0-1+(136*03),X ;f42E7,X ;4

.1527	 9d 1f 42	sta $421f,x				STA 	SCREEN0-1+(136*04),X ;f43DF,X ;5

.152a	 9d a7 42	sta $42a7,x				STA 	SCREEN0-1+(136*05),X ;f44D7,X ;6

.152d	 9d 2f 43	sta $432f,x				STA 	SCREEN0-1+(136*06),X ;f45CF,X ;7

.1530	 9d b7 43	sta $43b7,x				STA 	SCREEN0-1+(136*07),X ;f46C7,X ;8

.1533	 9d 3f 44	sta $443f,x				STA 	SCREEN0-1+(136*08),X ;f47BF,X ;9

.1536	 9d c7 44	sta $44c7,x				STA 	SCREEN0-1+(136*09),X ;f48B7,X ;10

.1539	 9d 4f 45	sta $454f,x				STA 	SCREEN0-1+(136*10),X ;f49AF,X ;11

.153c	 9d d7 45	sta $45d7,x				STA 	SCREEN0-1+(136*11),X ;f4AA7,X ;12

.153f	 9d 5f 46	sta $465f,x				STA 	SCREEN0-1+(136*12),X ;f4B9F,X ;13

.1542	 9d e7 46	sta $46e7,x				STA 	SCREEN0-1+(136*13),X ;f4C97,X ;14

.1545	 9d 6f 47	sta $476f,x				STA 	SCREEN0-1+(136*14),X ;f4D8F,X ;15

.1548	 9d f7 47	sta $47f7,x				STA 	SCREEN0-1+(136*15),X ;f4E87,X ;16

.154b	 9d 7f 48	sta $487f,x				STA 	SCREEN0-1+(136*16),X ;f4F7F,X ;17

.154e	 9d 07 49	sta $4907,x				STA 	SCREEN0-1+(136*17),X ;f5077,X ;18

.1551	 9d 8f 49	sta $498f,x				STA 	SCREEN0-1+(136*18),X ;f516F,X ;19

.1554	 9d 17 4a	sta $4a17,x				STA 	SCREEN0-1+(136*19),X ;f5267,X ;20

.1557	 9d 9f 4a	sta $4a9f,x				STA 	SCREEN0-1+(136*20),X ;f535F,X ;21

.155a	 9d 27 4b	sta $4b27,x				STA 	SCREEN0-1+(136*21),X ;f5447,X ;22

.155d	 9d af 4b	sta $4baf,x				sta 	SCREEN0-1+(136*22),X ;f5447,x ;23

.1560	 9d 37 4c	sta $4c37,x				sta 	SCREEN0-1+(136*23),X ;f5447,x ;24

.1563	 9d bf 4c	sta $4cbf,x				sta 	SCREEN0-1+(136*24),X ;f5447,x ;25

.1566	 9d 47 4d	sta $4d47,x				sta 	SCREEN0-1+(136*25),X ;f5447,x ;26

.1569	 9d cf 4d	sta $4dcf,x				sta 	SCREEN0-1+(136*26),X ;f5447,x ;27

.156c	 9d 57 4e	sta $4e57,x				sta 	SCREEN0-1+(136*27),X ;f5447,x ;28

.156f	 9d df 4e	sta $4edf,x				sta 	SCREEN0-1+(136*28),X ;f5447,x ;29

.1572	 9d 67 4f	sta $4f67,x				sta 	SCREEN0-1+(136*29),X ;f5447,x ;30

.1575	 9d ef 4f	sta $4fef,x				sta 	SCREEN0-1+(136*30),X ;f5447,x ;31

.1578	 9d 77 50	sta $5077,x				sta 	SCREEN0-1+(136*31),X ;f5447,x ;32

.157b	 9d ff 50	sta $50ff,x				sta 	SCREEN0-1+(136*32),X ;f5447,x ;33

.157e	 9d 87 51	sta $5187,x				sta 	SCREEN0-1+(136*33),X ;f5447,x ;34

.1581	 9d 0f 52	sta $520f,x				sta 	SCREEN0-1+(136*34),X ;f5447,x ;35

.1584	 9d 97 52	sta $5297,x				sta 	SCREEN0-1+(136*35),X ;f5447,x ;36

.1587	 9d 1f 53	sta $531f,x				sta 	SCREEN0-1+(136*36),X ;f5447,x ;37

.158a	 9d a7 53	sta $53a7,x				sta 	SCREEN0-1+(136*37),X ;f5447,x ;38

.158d	 9d 2f 54	sta $542f,x				sta 	SCREEN0-1+(136*38),X ;f5447,x ;39

.1590	 9d b7 54	sta $54b7,x				sta 	SCREEN0-1+(136*39),X ;f5447,x ;40

.1593	 ca		dex					DEX 

.1594	 d0 85		bne $151b				BNE 	CLSN0LP

.1596	 60		rts					RTS 

.1597	 9d ff 5f	sta $5fff,x	CLSN1LP		STA 	SCREEN1-1+(136*00),X ; 1

.159a	 9d 87 60	sta $6087,x				STA 	SCREEN1-1+(136*01),X ;f40F7,X ; 2

.159d	 9d 0f 61	sta $610f,x				STA 	SCREEN1-1+(136*02),X ;f41EF,X ;3

.15a0	 9d 97 61	sta $6197,x				STA 	SCREEN1-1+(136*03),X ;f42E7,X ;4

.15a3	 9d 1f 62	sta $621f,x				STA 	SCREEN1-1+(136*04),X ;f43DF,X ;5

.15a6	 9d a7 62	sta $62a7,x				STA 	SCREEN1-1+(136*05),X ;f44D7,X ;6

.15a9	 9d 2f 63	sta $632f,x				STA 	SCREEN1-1+(136*06),X ;f45CF,X ;7

.15ac	 9d b7 63	sta $63b7,x				STA 	SCREEN1-1+(136*07),X ;f46C7,X ;8

.15af	 9d 3f 64	sta $643f,x				STA 	SCREEN1-1+(136*08),X ;f47BF,X ;9

.15b2	 9d c7 64	sta $64c7,x				STA 	SCREEN1-1+(136*09),X ;f48B7,X ;10

.15b5	 9d 4f 65	sta $654f,x				STA 	SCREEN1-1+(136*10),X ;f49AF,X ;11

.15b8	 9d d7 65	sta $65d7,x				STA 	SCREEN1-1+(136*11),X ;f4AA7,X ;12

.15bb	 9d 5f 66	sta $665f,x				STA 	SCREEN1-1+(136*12),X ;f4B9F,X ;13

.15be	 9d e7 66	sta $66e7,x				STA 	SCREEN1-1+(136*13),X ;f4C97,X ;14

.15c1	 9d 6f 67	sta $676f,x				STA 	SCREEN1-1+(136*14),X ;f4D8F,X ;15

.15c4	 9d f7 67	sta $67f7,x				STA 	SCREEN1-1+(136*15),X ;f4E87,X ;16

.15c7	 9d 7f 68	sta $687f,x				STA 	SCREEN1-1+(136*16),X ;f4F7F,X ;17

.15ca	 9d 07 69	sta $6907,x				STA 	SCREEN1-1+(136*17),X ;f5077,X ;18

.15cd	 9d 8f 69	sta $698f,x				STA 	SCREEN1-1+(136*18),X ;f516F,X ;19

.15d0	 9d 17 6a	sta $6a17,x				STA 	SCREEN1-1+(136*19),X ;f5267,X ;20

.15d3	 9d 9f 6a	sta $6a9f,x				STA 	SCREEN1-1+(136*20),X ;f535F,X ;21

.15d6	 9d 27 6b	sta $6b27,x				STA 	SCREEN1-1+(136*21),X ;f5447,X ;22

.15d9	 9d af 6b	sta $6baf,x				sta 	SCREEN1-1+(136*22),X ;f5447,x ;23

.15dc	 9d 37 6c	sta $6c37,x				sta 	SCREEN1-1+(136*23),X ;f5447,x ;24

.15df	 9d bf 6c	sta $6cbf,x				sta 	SCREEN1-1+(136*24),X ;f5447,x ;25

.15e2	 9d 47 6d	sta $6d47,x				sta 	SCREEN1-1+(136*25),X ;f5447,x ;26

.15e5	 9d cf 6d	sta $6dcf,x				sta 	SCREEN1-1+(136*26),X ;f5447,x ;27

.15e8	 9d 57 6e	sta $6e57,x				sta 	SCREEN1-1+(136*27),X ;f5447,x ;28

.15eb	 9d df 6e	sta $6edf,x				sta 	SCREEN1-1+(136*28),X ;f5447,x ;29

.15ee	 9d 67 6f	sta $6f67,x				sta 	SCREEN1-1+(136*29),X ;f5447,x ;30

.15f1	 9d ef 6f	sta $6fef,x				sta 	SCREEN1-1+(136*30),X ;f5447,x ;31

.15f4	 9d 77 70	sta $7077,x				sta 	SCREEN1-1+(136*31),X ;f5447,x ;32

.15f7	 9d ff 70	sta $70ff,x				sta 	SCREEN1-1+(136*32),X ;f5447,x ;33

.15fa	 9d 87 71	sta $7187,x				sta 	SCREEN1-1+(136*33),X ;f5447,x ;34

.15fd	 9d 0f 72	sta $720f,x				sta 	SCREEN1-1+(136*34),X ;f5447,x ;35

.1600	 9d 97 72	sta $7297,x				sta 	SCREEN1-1+(136*35),X ;f5447,x ;36

.1603	 9d 1f 73	sta $731f,x				sta 	SCREEN1-1+(136*36),X ;f5447,x ;37

.1606	 9d a7 73	sta $73a7,x				sta 	SCREEN1-1+(136*37),X ;f5447,x ;38

.1609	 9d 2f 74	sta $742f,x				sta 	SCREEN1-1+(136*38),X ;f5447,x ;39

.160c	 9d b7 74	sta $74b7,x				sta 	SCREEN1-1+(136*39),X ;f5447,x ;40

.160f	 ca		dex					DEX 

.1610	 d0 85		bne $1597				BNE 	CLSN1LP

.1612	 60		rts					RTS 

.1613					read_joystick_keyboard
.1613	 a9 00		lda #$00	        LDA 	#$00

.1615	 8d 02 dc	sta $dc02	        STA 	$DC02    ;CIA1: Data Direction Register A

.1618	 af 00 dc	lax $dc00	        LAX 	$DC00    ;CIA1: Data Port Register A into A and X

.161b	 4a		lsr		MVMENT	LSR

.161c	 b0 07		bcs $1625			BCS 	MVE_DWN

.161e	 48		pha					PHA

.161f	 a9 01		lda #$01				LDA 	#$01 ; FORWARD

.1621	 20 10 11	jsr $1110				JSR 	FORWARD_BACK

.1624	 68		pla					PLA

.1625	 4a		lsr		MVE_DWN LSR

.1626	 b0 07		bcs $162f			BCS 	MVE_LFT

.1628	 48		pha					PHA

.1629	 a9 00		lda #$00				LDA 	#$00	; BACKWARD

.162b	 20 10 11	jsr $1110				JSR 	FORWARD_BACK

.162e	 68		pla					PLA

.162f	 4a		lsr		MVE_LFT LSR

.1630	 b0 11		bcs $1643			BCS 	MVE_RGT

.1632	 48		pha					PHA

.1633	 a5 2c		lda $2c					LDA 	ROT_LO	; LEFT

.1635	 18		clc					CLC 

.1636	 65 ac		adc $ac					ADC 	ROT_SPD

.1638	 85 2c		sta $2c					STA 	ROT_LO

.163a	 a5 2d		lda $2d					LDA 	ROT_HI

.163c	 69 00		adc #$00				ADC 	#$00

.163e	 29 03		and #$03				AND 	#$03

.1640	 85 2d		sta $2d					STA 	ROT_HI

.1642	 68		pla					PLA

.1643	 4a		lsr		MVE_RGT LSR

.1644	 b0 11		bcs $1657			BCS 	MVE_FRE

.1646	 48		pha					PHA

.1647	 a5 2c		lda $2c					LDA 	ROT_LO	; RIGHT

.1649	 38		sec					SEC 

.164a	 e5 ac		sbc $ac					SBC 	ROT_SPD

.164c	 85 2c		sta $2c					STA 	ROT_LO

.164e	 a5 2d		lda $2d					LDA 	ROT_HI

.1650	 e9 00		sbc #$00				SBC 	#$00

.1652	 29 03		and #$03				AND 	#$03

.1654	 85 2d		sta $2d					STA 	ROT_HI

.1656	 68		pla					PLA

.1657	 4a		lsr		MVE_FRE LSR

.1658	 b0 0b		bcs $1665			BCS 	MVE_EXT

.165a	 ad 0f 1a	lda $1a0f				lda 	OBJECTS_TO_DRAW+1

.165d	 18		clc					clc

.165e	 69 01		adc #$01				adc 	#1

.1660	 29 1f		and #$1f				and 	#31

.1662	 8d 0f 1a	sta $1a0f				sta 	OBJECTS_TO_DRAW+1

.1665	 60		rts		MVE_EXT	RTS

.1666	 b9 fe 16	lda $16fe,y	HEXCHAR		LDA		HEX0,Y

.1669	 9d cd ab	sta $abcd,x	HEX_NUMBER0	STA		$ABCD,X

.166c	 b9 0e 17	lda $170e,y				LDA		HEX1,Y

.166f	 9d cd ab	sta $abcd,x	HEX_NUMBER1	STA		$ABCD,X

.1672	 b9 1e 17	lda $171e,y				LDA		HEX2,Y

.1675	 9d cd ab	sta $abcd,x	HEX_NUMBER2	STA		$ABCD,X

.1678	 b9 2e 17	lda $172e,y				LDA		HEX3,Y

.167b	 9d cd ab	sta $abcd,x	HEX_NUMBER3	STA		$ABCD,X

.167e	 b9 3e 17	lda $173e,y				LDA		HEX4,Y

.1681	 9d cd ab	sta $abcd,x	HEX_NUMBER4	STA		$ABCD,X

.1684	 60		rts					RTS

.1685	 84 20		sty $20		HEX16		STY		REGY	; Y = YPOS / A = HI / X = LO

.1687	 86 0f		stx $0f					STX		REGX		

.1689	 a2 00		ldx #$00				LDX		#0

.168b	 20 98 16	jsr $1698				JSR		HEX8

.168e	 a5 0f		lda $0f					LDA		REGX

.1690	 a4 20		ldy $20					LDY		REGY

.1692	 a2 10		ldx #$10				LDX		#16

.1694	 20 98 16	jsr $1698				JSR		HEX8

.1697	 60		rts					RTS

.1698	 18		clc		HEX8		CLC		; A = NUM / Y = YPOS / X = XPOS

.1699	 85 0e		sta $0e					STA		REGA

.169b	 b9 30 25	lda $2530,y				LDA		VER_POS_LO+0,Y

.169e	 8d 6a 16	sta $166a				STA		HEX_NUMBER0+1

.16a1	 b9 a0 24	lda $24a0,y				LDA		VER_POS_HI+0,Y

.16a4	 18		clc					CLC

.16a5	 65 25		adc $25					ADC 	SCREEN_BANK

.16a7	 8d 6b 16	sta $166b				STA		HEX_NUMBER0+2

.16aa	 b9 31 25	lda $2531,y				LDA		VER_POS_LO+1,Y

.16ad	 8d 70 16	sta $1670				STA		HEX_NUMBER1+1

.16b0	 b9 a1 24	lda $24a1,y				LDA		VER_POS_HI+1,Y 

.16b3	 18		clc					CLC

.16b4	 65 25		adc $25					ADC 	SCREEN_BANK

.16b6	 8d 71 16	sta $1671				STA		HEX_NUMBER1+2

.16b9	 b9 32 25	lda $2532,y				LDA		VER_POS_LO+2,Y

.16bc	 8d 76 16	sta $1676				STA		HEX_NUMBER2+1

.16bf	 b9 a2 24	lda $24a2,y				LDA		VER_POS_HI+2,Y 

.16c2	 18		clc					CLC

.16c3	 65 25		adc $25					ADC 	SCREEN_BANK

.16c5	 8d 77 16	sta $1677				STA		HEX_NUMBER2+2

.16c8	 b9 33 25	lda $2533,y				LDA		VER_POS_LO+3,Y

.16cb	 8d 7c 16	sta $167c				STA		HEX_NUMBER3+1

.16ce	 b9 a3 24	lda $24a3,y				LDA		VER_POS_HI+3,Y 

.16d1	 18		clc					CLC

.16d2	 65 25		adc $25					ADC 	SCREEN_BANK

.16d4	 8d 7d 16	sta $167d				STA		HEX_NUMBER3+2

.16d7	 b9 34 25	lda $2534,y				LDA		VER_POS_LO+4,Y

.16da	 8d 82 16	sta $1682				STA		HEX_NUMBER4+1

.16dd	 b9 a4 24	lda $24a4,y				LDA		VER_POS_HI+4,Y 

.16e0	 18		clc					CLC

.16e1	 65 25		adc $25					ADC 	SCREEN_BANK

.16e3	 8d 83 16	sta $1683				STA		HEX_NUMBER4+2

.16e6	 a5 0e		lda $0e					LDA		REGA

.16e8	 4a		lsr					LSR

.16e9	 4a		lsr					LSR

.16ea	 4a		lsr					LSR

.16eb	 4a		lsr					LSR

.16ec	 a8		tay					TAY

.16ed	 20 66 16	jsr $1666				JSR		HEXCHAR

.16f0	 8a		txa					TXA

.16f1	 18		clc					CLC

.16f2	 69 08		adc #$08				ADC 	#8

.16f4	 aa		tax					TAX

.16f5	 a5 0e		lda $0e					LDA		REGA

.16f7	 29 0f		and #$0f				AND		#15

.16f9	 a8		tay					TAY

.16fa	 20 66 16	jsr $1666				JSR		HEXCHAR

.16fd	 60		rts					RTS

=0100					X_ROT_TAB_LO =$0100 ; UNKNOWN_POINT_TAB_6

=0140					X_ROT_TAB_HI = $0140

=0180					Y_ROT_TAB_LO = $0180

=02c0					Y_ROT_TAB_HI = $02C0

=0340					Z_ROT_TAB_LO = $0340 

=0380					Z_ROT_TAB_HI = $0380

=03c0					PERS_POINT_TAB_3 = $03C0

=0600					PERS_POINT_TAB_2 = $0600

=0640					PERS_POINT_TAB_5 = $0640

=0680					PERS_HOR = $0680

=06c0					PERS_VER = $06C0

=0700					PERS_POINT_TAB_4 = $0700 ; .FILL 64,0  ; 7600

=0740					POINT_CLASSIFICATION = $0740 ; 00 = point is onscreen - 01 = point needs off left/right - 02 = point is off top/bottom - 03 = point is off left/right + top/bottom - 80 / minus = point is behind


>16fe	 80 a2 80 80 88 80 80 80 	HEX0	.BYTE %10000000,%10100010,%10000000,%10000000,%10001000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000000,%10000010,%10000000,%10000000 

>1706	 80 80 80 80 80 82 80 80 
>170e	 88 82 a8 a8 88 8a 8a a8 	HEX1	.BYTE %10001000,%10000010,%10101000,%10101000,%10001000,%10001010,%10001010,%10101000,%10001000,%10001000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010 

>1716	 88 88 88 88 8a 88 8a 8a 
>171e	 88 a2 80 80 80 80 80 a8 	HEX2	.BYTE %10001000,%10100010,%10000000,%10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10000000,%10000010,%10001010,%10001000,%10000000,%10000000

>1726	 80 80 80 82 8a 88 80 80 
>172e	 88 a2 8a a8 a8 a8 88 a8 	HEX3	.BYTE %10001000,%10100010,%10001010,%10101000,%10101000,%10101000,%10001000,%10101000,%10001000,%10101000,%10001000,%10001000,%10001010,%10001000,%10001010,%10001010

>1736	 88 a8 88 88 8a 88 8a 8a 
>173e	 80 80 80 80 a8 80 80 a8 	HEX4	.BYTE %10000000,%10000000,%10000000,%10000000,%10101000,%10000000,%10000000,%10101000,%10000000,%10000000,%10001000,%10000000,%10100000,%10000010,%10000000,%10001010

>1746	 80 80 88 80 a0 82 80 8a 

.174e					obj_x_msb

>174e	 00 14 28 3c 50 64 78 8c 	.BYTE 00,20,40,60,80,100,120,140,160,180,200,220

>1756	 a0 b4 c8 dc 

.178e					obj_y_msb
.17ce					obj_z_msb

>17ce	 00 14 28 3c 50 64 78 8c 	.BYTE 00,20,40,60,80,100,120,140,160,180,200,220

>17d6	 a0 b4 c8 dc 

.180e					obj_x_hsb
.184e					obj_y_hsb
.188e					obj_z_hsb
.18ce					object_shape_ptr_lo

>18ce	 4e 98 d7 03 20 3d 84 aa  		.BYTE <OBJ_01,<OBJ_02,<OBJ_03,<OBJ_04,<OBJ_05,<OBJ_06,<OBJ_07,<OBJ_08

>18d6	 db f8 16 3e 64 93 c2 e8  	    .BYTE <OBJ_09,<OBJ_10,<OBJ_11,<OBJ_12,<OBJ_13,<OBJ_14,<OBJ_15,<OBJ_16

>18de	 20 58 86 b6 ef 98 d7 03  		.BYTE <OBJ_17,<OBJ_18,<OBJ_19,<OBJ_20,<OBJ_21,<OBJ_02,<OBJ_03,<OBJ_04

>18e6	 20 3d 84 aa db f8 16 3e  		.BYTE <OBJ_05,<OBJ_06,<OBJ_07,<OBJ_08,<OBJ_09,<OBJ_10,<OBJ_11,<OBJ_12

>18ee	 64 93 c2 e8 20 58 86 b6  		.BYTE <OBJ_13,<OBJ_14,<OBJ_15,<OBJ_16,<OBJ_17,<OBJ_18,<OBJ_19,<OBJ_20

>18f6	 80 06 74 76 e5 28 b8 87  	        .BYTE $80,$06,$74,$76,$E5,$28,$B8,$87

>18fe	 fa cf 5e 0c be 61 8f bf  	        .BYTE $FA,$CF,$5E,$0C,$BE,$61,$8F,$BF

>1906	 45 f8 00 00 f8 4a 4a 8d  	        .BYTE $45,$F8,$00,$00,$F8,$4A,$4A,$8D


.190e					object_shape_ptr_hi

>190e	 1a 1a 1a 1b 1b 1b 1b 1b  		.BYTE >OBJ_01,>OBJ_02,>OBJ_03,>OBJ_04,>OBJ_05,>OBJ_06,>OBJ_07,>OBJ_08

>1916	 1b 1b 1c 1c 1c 1c 1c 1c  	    .BYTE >OBJ_09,>OBJ_10,>OBJ_11,>OBJ_12,>OBJ_13,>OBJ_14,>OBJ_15,>OBJ_16

>191e	 1d 1d 1d 1d 1d 1a 1a 1b  		.BYTE >OBJ_17,>OBJ_18,>OBJ_19,>OBJ_20,>OBJ_21,>OBJ_02,>OBJ_03,>OBJ_04

>1926	 1b 1b 1b 1b 1b 1b 1c 1c  		.BYTE >OBJ_05,>OBJ_06,>OBJ_07,>OBJ_08,>OBJ_09,>OBJ_10,>OBJ_11,>OBJ_12

>192e	 1c 1c 1c 1c 1d 1d 1d 1d  		.BYTE >OBJ_13,>OBJ_14,>OBJ_15,>OBJ_16,>OBJ_17,>OBJ_18,>OBJ_19,>OBJ_20

>1936	 1a 19 19 1d 1a 1b 1a 18  	        .BYTE $1A,$19,$19,$1D,$1A,$1B,$1A,$18

>193e	 17 1e 1b 1f 1c 3e 3e 3e  	        .BYTE $17,$1E,$1B,$1F,$1C,$3E,$3E,$3E

>1946	 1b 3e 17 17 3e 3f 3f 3f  	        .BYTE $1B,$3E,$17,$17,$3E,$3F,$3F,$3F


.194e					obj_x_lsb
.198e					obj_y_lsb
.19ce					obj_z_lsb
.1a0e					objects_to_draw

>1a0e	 00                       			.BYTE 00

>1a0f	 01                       			.BYTE 01 ; object being drawn

>1a10	 02 03 04 05 06 07        			.BYTE 02,03,04,05,06,07

>1a16	 08 09 0a 0b 0c 0d 0e 0f  	        .BYTE 08,09,10,11,12,13,14,15

>1a1e	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a26	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a2e	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a36	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a3e	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a46	 00 00 00 00 00 00 00 00  	        .BYTE 00,00,00,00,00,00,00,00

>1a4e	 0f                       	OBJ_01	.BYTE $0F

>1a4f	 f8 00 10                 			.BYTE $F8,$00,$10

>1a52	 fa 0c 0c                 			.BYTE $FA,$0C,$0C

>1a55	 fa 0c 00                 			.BYTE $FA,$0C,$00

>1a58	 f9 06 fd                 			.BYTE $F9,$06,$FD

>1a5b	 f9 04 f4                 			.BYTE $F9,$04,$F4

>1a5e	 fc 04 f0                 			.BYTE $FC,$04,$F0

>1a61	 fc 00 f0                 			.BYTE $FC,$00,$F0

>1a64	 f9 00 f4                 	        .BYTE $F9,$00,$F4

>1a67	 08 00 10                 			.BYTE $08,$00,$10

>1a6a	 06 0c 0c                 			.BYTE $06,$0C,$0C

>1a6d	 06 0c 00                 			.BYTE $06,$0C,$00

>1a70	 07 06 fd                 			.BYTE $07,$06,$FD

>1a73	 07 04 f4                 			.BYTE $07,$04,$F4

>1a76	 04 04 f0                 			.BYTE $04,$04,$F0

>1a79	 04 00 f0                 			.BYTE $04,$00,$F0

>1a7c	 07 00 f4                 	        .BYTE $07,$00,$F4

>1a7f	 17                       			.BYTE $17

>1a80	 01 12 23 34 45 56 67 70 			.BYTE $01,$12,$23,$34,$45,$56,$67,$70,$89,$9A,$AB,$BC,$CD,$DE,$EF,$F8,$47,$CF,$08,$19,$2A,$3B,$5D,$6E

>1a88	 89 9a ab bc cd de ef f8 
>1a90	 47 cf 08 19 2a 3b 5d 6e 
>1a98	 0f                       	OBJ_02	.BYTE $0F

>1a99	 f8 04 18                 			.BYTE $F8,$04,$18

>1a9c	 08 04 18                 	        .BYTE $08,$04,$18

>1a9f	 00 04 e8                 			.BYTE $00,$04,$E8

>1aa2	 00 0c 18                 			.BYTE $00,$0C,$18

>1aa5	 e2 04 18                 			.BYTE $E2,$04,$18

>1aa8	 1e 04 18                 			.BYTE $1E,$04,$18

>1aab	 fc 04 00                 			.BYTE $FC,$04,$00

>1aae	 04 04 00                 			.BYTE $04,$04,$00

>1ab1	 00 14 18                 			.BYTE $00,$14,$18

>1ab4	 00 0a 0c                 	        .BYTE $00,$0A,$0C

>1ab7	 f2 04 10                 			.BYTE $F2,$04,$10

>1aba	 f2 00 10                 			.BYTE $F2,$00,$10

>1abd	 0e 04 10                 			.BYTE $0E,$04,$10

>1ac0	 0e 00 10                 			.BYTE $0E,$00,$10

>1ac3	 00 04 f0                 			.BYTE $00,$04,$F0

>1ac6	 00 00 f0                 			.BYTE $00,$00,$F0

>1ac9	 0c                       			.BYTE $0C

>1aca	 20 23 21 13 03 45 46 57 			.BYTE $20,$23,$21,$13,$03,$45,$46,$57,$38,$89,$AB,$CD,$EF

>1ad2	 38 89 ab cd ef 
>1ad7	 07                       	OBJ_03	.BYTE $07

>1ad8	 00 00 00                 			.BYTE $00,$00,$00

>1adb	 ec 07 00                 			.BYTE $EC,$07,$00

>1ade	 f6 07 11                 			.BYTE $F6,$07,$11

>1ae1	 0a 07 11                 			.BYTE $0A,$07,$11

>1ae4	 14 07 00                 	        .BYTE $14,$07,$00

>1ae7	 0a 07 ef                 			.BYTE $0A,$07,$EF

>1aea	 f6 07 ef                 			.BYTE $F6,$07,$EF

>1aed	 00 10 00                 			.BYTE $00,$10,$00

>1af0	 11                       			.BYTE $11

>1af1	 01 02 03 04 05 06 71 72 			.BYTE $01,$02,$03,$04,$05,$06,$71,$72,$73,$74,$75,$76,$12,$23,$34,$45,$56,$61

>1af9	 73 74 75 76 12 23 34 45 
>1b01	 56 61 
>1b03	 05                       	OBJ_04	.BYTE $05

>1b04	 f4 00 10                 	        .BYTE $F4,$00,$10

>1b07	 00 00 f0                 			.BYTE $00,$00,$F0

>1b0a	 0c 00 10                 			.BYTE $0C,$00,$10

>1b0d	 f4 0a 10                 			.BYTE $F4,$0A,$10

>1b10	 00 0a f0                 			.BYTE $00,$0A,$F0

>1b13	 0c 0a 10                 			.BYTE $0C,$0A,$10

>1b16	 08                       			.BYTE $08

>1b17	 01 12 20 34 45 53 03 14 			.BYTE $01,$12,$20,$34,$45,$53,$03,$14,$25

>1b1f	 25 
>1b20	 05                       	OBJ_05	.BYTE $05

>1b21	 fb 00 ff                 			.BYTE $FB,$00,$FF

>1b24	 05 00 ff                 			.BYTE $05,$00,$FF

>1b27	 00 0c ff                 			.BYTE $00,$0C,$FF

>1b2a	 fb 00 01                 			.BYTE $FB,$00,$01

>1b2d	 05 00 01                 			.BYTE $05,$00,$01

>1b30	 00 0c 01                 			.BYTE $00,$0C,$01

>1b33	 08                       			.BYTE $08

>1b34	 01 12 20 34 45 53 03 14 			.BYTE $01,$12,$20,$34,$45,$53,$03,$14,$25

>1b3c	 25 
>1b3d	 0f                       	OBJ_06	.BYTE $0F

>1b3e	 f0 00 10                 			.BYTE $F0,$00,$10

>1b41	 10 00 10                 	        .BYTE $10,$00,$10

>1b44	 00 00 ec                 			.BYTE $00,$00,$EC

>1b47	 fc 00 04                 			.BYTE $FC,$00,$04

>1b4a	 04 00 04                 			.BYTE $04,$00,$04

>1b4d	 00 00 fc                 			.BYTE $00,$00,$FC

>1b50	 fd 04 03                 			.BYTE $FD,$04,$03

>1b53	 03 04 03                 			.BYTE $03,$04,$03

>1b56	 00 04 fd                 			.BYTE $00,$04,$FD

>1b59	 fe 14 02                 	        .BYTE $FE,$14,$02

>1b5c	 02 14 02                 			.BYTE $02,$14,$02

>1b5f	 00 14 fe                 			.BYTE $00,$14,$FE

>1b62	 ff 04 01                 			.BYTE $FF,$04,$01

>1b65	 01 04 01                 			.BYTE $01,$04,$01

>1b68	 00 04 ff                 			.BYTE $00,$04,$FF

>1b6b	 00 34 00                 			.BYTE $00,$34,$00

>1b6e	 14                       			.BYTE $14

>1b6f	 f6 f7 f8 90 a1 b2 06 17 			.BYTE $F6,$F7,$F8,$90,$A1,$B2,$06,$17,$28,$C3,$D4,$E5,$34,$45,$53,$67,$78,$86,$CD,$DE,$EC

>1b77	 28 c3 d4 e5 34 45 53 67 
>1b7f	 78 86 cd de ec 
>1b84	 07                       	OBJ_07	.BYTE $07

>1b85	 f8 f8 f8                 			.BYTE $F8,$F8,$F8

>1b88	 08 f8 f8                 			.BYTE $08,$F8,$F8

>1b8b	 08 f8 08                 			.BYTE $08,$F8,$08

>1b8e	 f8 f8 08                 			.BYTE $F8,$F8,$08

>1b91	 f8 08 f8                 			.BYTE $F8,$08,$F8

>1b94	 08 08 f8                 			.BYTE $08,$08,$F8

>1b97	 08 08 08                 			.BYTE $08,$08,$08

>1b9a	 f8 08 08                 			.BYTE $F8,$08,$08

>1b9d	 0b                       			.BYTE $0B

>1b9e	 01 12 23 30 04 15 26 37 			.BYTE $01,$12,$23,$30,$04,$15,$26,$37,$45,$56,$67,$74

>1ba6	 45 56 67 74 
>1baa	 09                       	OBJ_08	.BYTE $09

>1bab	 fc 07 04                 			.BYTE $FC,$07,$04

>1bae	 04 07 04                 			.BYTE $04,$07,$04

>1bb1	 00 07 fc                 	        .BYTE $00,$07,$FC

>1bb4	 00 0e 00                 			.BYTE $00,$0E,$00

>1bb7	 ff 07 01                 			.BYTE $FF,$07,$01

>1bba	 01 07 01                 			.BYTE $01,$07,$01

>1bbd	 00 07 ff                 			.BYTE $00,$07,$FF

>1bc0	 fe 00 02                 			.BYTE $FE,$00,$02

>1bc3	 02 00 02                 			.BYTE $02,$00,$02

>1bc6	 00 00 fe                 			.BYTE $00,$00,$FE

>1bc9	 0e                       	        .BYTE $0E

>1bca	 01 12 20 03 13 23 45 56 			.BYTE $01,$12,$20,$03,$13,$23,$45,$56,$64,$78,$89,$97,$47,$58,$69,$0F,$F9

>1bd2	 64 78 89 97 47 58 69 0f 
>1bda	 f9 
>1bdb	 05                       	OBJ_09  .BYTE $05

>1bdc	 8b 00 8f                 	        .BYTE $8B,$00,$8F

>1bdf	 75 00 8f                 	        .BYTE $75,$00,$8F

>1be2	 00 0c 8f                 	        .BYTE $00,$0C,$8F

>1be5	 8b 00 71                 	        .BYTE $8B,$00,$71

>1be8	 75 00 71                 	        .BYTE $75,$00,$71

>1beb	 00 0c 71                 	        .BYTE $00,$0C,$71

>1bee	 08                       	        .BYTE $08

>1bef	 01 12 20 34 45 53 03 14 	        .BYTE $01,$12,$20, $34,$45,$53, $03,$14,$25

>1bf7	 25 
>1bf8	 05                       	OBJ_10  .BYTE $05

>1bf9	 f0 00 20                 			.BYTE $F0,$00,$20

>1bfc	 10 00 20                 			.BYTE $10,$00,$20

>1bff	 fd 02 20                 			.BYTE $FD,$02,$20

>1c02	 03 02 20                 			.BYTE $03,$02,$20

>1c05	 00 0c 20                 			.BYTE $00,$0C,$20

>1c08	 00 00 e1                 			.BYTE $00,$00,$E1

>1c0b	 09                       			.BYTE $09

>1c0c	 01 13 34 42 20 05 15 25 			.BYTE $01,$13,$34,$42,$20,$05,$15,$25,$35,$45

>1c14	 35 45 
>1c16	 07                       	OBJ_11	.BYTE $07

>1c17	 f8 f8 f8                 			.BYTE $F8,$F8,$F8

>1c1a	 08 f8 f8                 			.BYTE $08,$F8,$F8

>1c1d	 08 f8 08                 			.BYTE $08,$F8,$08

>1c20	 f8 f8 08                 			.BYTE $F8,$F8,$08

>1c23	 f8 08 f8                 			.BYTE $F8,$08,$F8

>1c26	 08 08 f8                 			.BYTE $08,$08,$F8

>1c29	 08 08 08                 			.BYTE $08,$08,$08

>1c2c	 f8 08 08                 			.BYTE $F8,$08,$08

>1c2f	 0b                       			.BYTE $0B

>1c30	 01 12 23 30 04 15 26 37 			.BYTE $01,$12,$23,$30,$04,$15,$26,$37,$45,$56,$67,$74,$09,$FC

>1c38	 45 56 67 74 09 fc 
>1c3e	 07                       	OBJ_12	.BYTE $07

>1c3f	 ff 00 fc                 			.BYTE $FF,$00,$FC

>1c42	 ff 00 04                 			.BYTE $FF,$00,$04

>1c45	 ff 0c 02                 			.BYTE $FF,$0C,$02

>1c48	 ff 0c fe                 			.BYTE $FF,$0C,$FE

>1c4b	 01 00 fc                 			.BYTE $01,$00,$FC

>1c4e	 01 00 04                 			.BYTE $01,$00,$04

>1c51	 01 0c 02                 			.BYTE $01,$0C,$02

>1c54	 01 0c fe                 			.BYTE $01,$0C,$FE

>1c57	 0b                       			.BYTE $0B

>1c58	 01 12 23 30 45 56 67 74 			.BYTE $01,$12,$23,$30,$45,$56,$67,$74,$04,$15,$26,$37

>1c60	 04 15 26 37 
>1c64	 09                       	OBJ_13	.BYTE $09

>1c65	 04 00 ff                 			.BYTE $04,$00,$FF

>1c68	 fc 00 ff                 			.BYTE $FC,$00,$FF

>1c6b	 fa 08 ff                 			.BYTE $FA,$08,$FF

>1c6e	 00 0c ff                 			.BYTE $00,$0C,$FF

>1c71	 06 08 ff                 			.BYTE $06,$08,$FF

>1c74	 04 00 01                 			.BYTE $04,$00,$01

>1c77	 fc 00 01                 			.BYTE $FC,$00,$01

>1c7a	 fa 08 01                 			.BYTE $FA,$08,$01

>1c7d	 00 0c 01                 			.BYTE $00,$0C,$01

>1c80	 06 08 01                 			.BYTE $06,$08,$01

>1c83	 0e                       			.BYTE $0E

>1c84	 01 12 23 34 40 56 67 78 			.BYTE $01,$12,$23,$34,$40,$56,$67,$78,$89,$95,$05,$16,$27,$38,$49

>1c8c	 89 95 05 16 27 38 49 

.1c93					obj_14

>1c93	 09                       			.BYTE $09

>1c94	 fd 00 ff                 			.BYTE $FD,$00,$FF

>1c97	 03 00 ff                 			.BYTE $03,$00,$FF

>1c9a	 03 0a ff                 			.BYTE $03,$0A,$FF

>1c9d	 00 0c ff                 			.BYTE $00,$0C,$FF

>1ca0	 fd 0a ff                 			.BYTE $FD,$0A,$FF

>1ca3	 fd 00 01                 			.BYTE $FD,$00,$01

>1ca6	 03 00 01                 			.BYTE $03,$00,$01

>1ca9	 03 0a 01                 			.BYTE $03,$0A,$01

>1cac	 00 0c 01                 			.BYTE $00,$0C,$01

>1caf	 fd 0a 01                 			.BYTE $FD,$0A,$01

>1cb2	 0e                       			.BYTE $0E

>1cb3	 01 12 23 34 40 56 67 78 			.BYTE $01,$12,$23,$34,$40,$56,$67,$78,$89,$95,$05,$16,$27,$38,$49

>1cbb	 89 95 05 16 27 38 49 
>1cc2	 07                       	OBJ_15	.BYTE $07

>1cc3	 fe 00 ff                 			.BYTE $FE,$00,$FF

>1cc6	 02 00 ff                 			.BYTE $02,$00,$FF

>1cc9	 04 0c ff                 			.BYTE $04,$0C,$FF

>1ccc	 fc 0c ff                 			.BYTE $FC,$0C,$FF

>1ccf	 fe 00 01                 			.BYTE $FE,$00,$01

>1cd2	 02 00 01                 			.BYTE $02,$00,$01

>1cd5	 04 0c 01                 			.BYTE $04,$0C,$01

>1cd8	 fc 0c 01                 			.BYTE $FC,$0C,$01

>1cdb	 0b                       			.BYTE $0B

>1cdc	 01 12 23 30 45 56 67 74 			.BYTE $01,$12,$23,$30,$45,$56,$67,$74,$04,$15,$26,$37

>1ce4	 04 15 26 37 
>1ce8	 0b                       	OBJ_16	.BYTE $0B

>1ce9	 02 00 ff                 			.BYTE $02,$00,$FF

>1cec	 04 06 ff                 			.BYTE $04,$06,$FF

>1cef	 02 0c ff                 			.BYTE $02,$0C,$FF

>1cf2	 fe 0c ff                 			.BYTE $FE,$0C,$FF

>1cf5	 fc 06 ff                 			.BYTE $FC,$06,$FF

>1cf8	 fe 00 ff                 			.BYTE $FE,$00,$FF

>1cfb	 02 00 01                 			.BYTE $02,$00,$01

>1cfe	 04 06 01                 			.BYTE $04,$06,$01

>1d01	 02 0c 01                 			.BYTE $02,$0C,$01

>1d04	 fe 0c 01                 			.BYTE $FE,$0C,$01

>1d07	 fc 06 01                 			.BYTE $FC,$06,$01

>1d0a	 fe 00 01                 			.BYTE $FE,$00,$01

>1d0d	 11                       			.BYTE $11

>1d0e	 01 12 23 34 45 50 67 78 			.BYTE $01,$12,$23,$34,$45,$50,$67,$78,$89,$9A,$AB,$B6,$06,$17,$28,$39,$4A,$5B

>1d16	 89 9a ab b6 06 17 28 39 
>1d1e	 4a 5b 
>1d20	 0b                       	OBJ_17	.BYTE $0B

>1d21	 03 00 ff                 			.BYTE $03,$00,$FF

>1d24	 03 08 ff                 			.BYTE $03,$08,$FF

>1d27	 01 0c ff                 			.BYTE $01,$0C,$FF

>1d2a	 ff 0c ff                 			.BYTE $FF,$0C,$FF

>1d2d	 fd 08 ff                 			.BYTE $FD,$08,$FF

>1d30	 fd 00 ff                 			.BYTE $FD,$00,$FF

>1d33	 03 00 01                 			.BYTE $03,$00,$01

>1d36	 03 08 01                 			.BYTE $03,$08,$01

>1d39	 01 0c 01                 			.BYTE $01,$0C,$01

>1d3c	 ff 0c 01                 			.BYTE $FF,$0C,$01

>1d3f	 fd 08 01                 			.BYTE $FD,$08,$01

>1d42	 fd 00 01                 			.BYTE $FD,$00,$01

>1d45	 11                       			.BYTE $11

>1d46	 01 12 23 34 45 50 67 78 			.BYTE $01,$12,$23,$34,$45,$50,$67,$78,$89,$9A,$AB,$B6,$06,$17,$28,$39,$4A,$5B

>1d4e	 89 9a ab b6 06 17 28 39 
>1d56	 4a 5b 
>1d58	 0b                       	OBJ_18	.BYTE $0B

>1d59	 f9 00 f3                 			.BYTE $F9,$00,$F3

>1d5c	 07 00 f3                 			.BYTE $07,$00,$F3

>1d5f	 07 00 0d                 			.BYTE $07,$00,$0D

>1d62	 f9 00 0d                 			.BYTE $F9,$00,$0D

>1d65	 f9 06 f3                 			.BYTE $F9,$06,$F3

>1d68	 07 06 f3                 			.BYTE $07,$06,$F3

>1d6b	 07 06 0d                 			.BYTE $07,$06,$0D

>1d6e	 f9 06 0d                 			.BYTE $F9,$06,$0D

>1d71	 f6 06 f0                 			.BYTE $F6,$06,$F0

>1d74	 0a 06 f0                 			.BYTE $0A,$06,$F0

>1d77	 0a 06 10                 			.BYTE $0A,$06,$10

>1d7a	 f6 06 10                 			.BYTE $F6,$06,$10

>1d7d	 07                       			.BYTE $07

>1d7e	 04 15 26 37 89 9a ab b8  			.BYTE $04,$15,$26,$37,$89,$9A,$AB,$B8

>1d86	 0b                       	OBJ_19	.BYTE $0B

>1d87	 fe 00 fe                 			.BYTE $FE,$00,$FE

>1d8a	 fe 00 02                 			.BYTE $FE,$00,$02

>1d8d	 02 00 02                 			.BYTE $02,$00,$02

>1d90	 02 00 fe                 			.BYTE $02,$00,$FE

>1d93	 fe 04 fe                 			.BYTE $FE,$04,$FE

>1d96	 fe 04 02                 			.BYTE $FE,$04,$02

>1d99	 02 04 02                 			.BYTE $02,$04,$02

>1d9c	 02 04 fe                 			.BYTE $02,$04,$FE

>1d9f	 02 06 02                 			.BYTE $02,$06,$02

>1da2	 02 06 fe                 			.BYTE $02,$06,$FE

>1da5	 02 07 02                 			.BYTE $02,$07,$02

>1da8	 02 07 fe                 			.BYTE $02,$07,$FE

>1dab	 09                       			.BYTE $09

>1dac	 04 15 2a 3b 45 56 67 74 			.BYTE $04,$15,$2A,$3B,$45,$56,$67,$74,$89,$AB

>1db4	 89 ab 
>1db6	 0d                       	OBJ_20	.BYTE $0D

>1db7	 f6 00 fb                 			.BYTE $F6,$00,$FB

>1dba	 f6 00 05                 			.BYTE $F6,$00,$05

>1dbd	 0a 00 05                 			.BYTE $0A,$00,$05

>1dc0	 0a 00 fb                 			.BYTE $0A,$00,$FB

>1dc3	 f6 02 fb                 			.BYTE $F6,$02,$FB

>1dc6	 f6 02 05                 			.BYTE $F6,$02,$05

>1dc9	 0a 02 05                 			.BYTE $0A,$02,$05

>1dcc	 0a 02 fb                 			.BYTE $0A,$02,$FB

>1dcf	 f6 04 fb                 			.BYTE $F6,$04,$FB

>1dd2	 f6 04 05                 			.BYTE $F6,$04,$05

>1dd5	 0a 04 05                 			.BYTE $0A,$04,$05

>1dd8	 0a 04 fb                 			.BYTE $0A,$04,$FB

>1ddb	 0a 08 05                 			.BYTE $0A,$08,$05

>1dde	 0a 08 fb                 			.BYTE $0A,$08,$FB

>1de1	 0c                       			.BYTE $0C

>1de2	 08 19 2c 3d 45 56 67 74 			.BYTE $08,$19,$2C,$3D,$45,$56,$67,$74,$89,$9A,$AB,$B8,$CD

>1dea	 89 9a ab b8 cd 
>1def	 03                       	OBJ_21	.BYTE 4-1

>1df0	 80 a5 00                 			.BYTE 255-127, 255-90, 0

>1df3	 7f a5 00                 			.BYTE 127, 255-90, 0

>1df6	 00 5a 80                 			.BYTE 0, 90, 255-127

>1df9	 00 5a 7f                 			.BYTE 0, 90, 127

>1dfc	 05                       			.BYTE 6-1

>1dfd	 01 02 03 12 13 23        			.BYTE $01,$02,$03,$12,$13,$23

>1e03	 07                       	OBJ_99	.BYTE $07

>1e04	 00 00 00                 			.BYTE 0,0,0

>1e07	 00 00 ff                 			.BYTE 0,0,255

>1e0a	 00 ff 00                 			.BYTE 0,255,0

>1e0d	 00 ff ff                 			.BYTE 0,255,255

>1e10	 ff 00 00                 			.BYTE 255,0,0

>1e13	 ff 00 ff                 			.BYTE 255,0,255

>1e16	 ff ff 00                 			.BYTE 255,255,0

>1e19	 ff ff ff                 			.BYTE 255,255,255

>1e1c	 0b                       	        .BYTE $0B

>1e1d	 01 13 32 20              	        .BYTE $01,$13,$32,$20

>1e21	 45 57 76 64              	        .BYTE $45,$57,$76,$64

>1e25	 04 15 26 37              	        .BYTE $04,$15,$26,$37


.1f00					sin_lsb

>1f00	 92 2e f7 60 c4 14 47 79  			.BYTE $92,$2E,$F7,$60,$C4,$14,$47,$79

>1f08	 ab dd 08 21 3a 53 6c 85  	        .BYTE $AB,$DD,$08,$21,$3A,$53,$6C,$85

>1f10	 9e b7 d0 e9 01 0d 1a 26  	        .BYTE $9E,$B7,$D0,$E9,$01,$0D,$1A,$26

>1f18	 33 3f 4c 58 64 71 7d 89  	        .BYTE $33,$3F,$4C,$58,$64,$71,$7D,$89

>1f20	 96 a2 ae bb c7 d3 df ec  	        .BYTE $96,$A2,$AE,$BB,$C7,$D3,$DF,$EC

>1f28	 f8 02 08 0e 14 1a 20 26  	        .BYTE $F8,$02,$08,$0E,$14,$1A,$20,$26

>1f30	 2c 32 38 3e 44 4a 50 56  	        .BYTE $2C,$32,$38,$3E,$44,$4A,$50,$56

>1f38	 5c 62 68 6e 73 79 7f 85  	        .BYTE $5C,$62,$68,$6E,$73,$79,$7F,$85

>1f40	 8b 91 96 9c a2 a8 ad b3  	        .BYTE $8B,$91,$96,$9C,$A2,$A8,$AD,$B3

>1f48	 b9 be c4 ca cf d5 da e0  	        .BYTE $B9,$BE,$C4,$CA,$CF,$D5,$DA,$E0

>1f50	 e5 eb f1 f6 fb 00 03 06  	        .BYTE $E5,$EB,$F1,$F6,$FB,$00,$03,$06

>1f58	 09 0b 0e 11 13 16 19 1b  	        .BYTE $09,$0B,$0E,$11,$13,$16,$19,$1B

>1f60	 1e 20 23 26 28 2b 2d 30  	        .BYTE $1E,$20,$23,$26,$28,$2B,$2D,$30

>1f68	 32 35 37 3a 3c 3f 41 44  	        .BYTE $32,$35,$37,$3A,$3C,$3F,$41,$44

>1f70	 46 48 4b 4d 50 52 54 57  	        .BYTE $46,$48,$4B,$4D,$50,$52,$54,$57

>1f78	 59 5b 5e 60 62 64 67 69  	        .BYTE $59,$5B,$5E,$60,$62,$64,$67,$69

>1f80	 6b 6d 70 72 74 76 78 7a  	        .BYTE $6B,$6D,$70,$72,$74,$76,$78,$7A

>1f88	 7c 7f 81 83 85 87 89 8b  	        .BYTE $7C,$7F,$81,$83,$85,$87,$89,$8B

>1f90	 8d 8f 91 93 95 97 98 9a  	        .BYTE $8D,$8F,$91,$93,$95,$97,$98,$9A

>1f98	 9c 9e a0 a2 a4 a5 a7 a9  	        .BYTE $9C,$9E,$A0,$A2,$A4,$A5,$A7,$A9

>1fa0	 ab ac ae b0 b1 b3 b5 b6  	        .BYTE $AB,$AC,$AE,$B0,$B1,$B3,$B5,$B6

>1fa8	 b8 ba bb bd be c0 c1 c3  	        .BYTE $B8,$BA,$BB,$BD,$BE,$C0,$C1,$C3

>1fb0	 c4 c6 c7 c9 ca cb cd ce  	        .BYTE $C4,$C6,$C7,$C9,$CA,$CB,$CD,$CE

>1fb8	 d0 d1 d2 d3 d5 d6 d7 d8  	        .BYTE $D0,$D1,$D2,$D3,$D5,$D6,$D7,$D8

>1fc0	 da db dc dd de df e0 e2  	        .BYTE $DA,$DB,$DC,$DD,$DE,$DF,$E0,$E2

>1fc8	 e3 e4 e5 e6 e7 e8 e9 e9  	        .BYTE $E3,$E4,$E5,$E6,$E7,$E8,$E9,$E9

>1fd0	 ea eb ec ed ee ef ef f0  	        .BYTE $EA,$EB,$EC,$ED,$EE,$EF,$EF,$F0

>1fd8	 f1 f2 f3 f3 f4 f5 f5 f6  	        .BYTE $F1,$F2,$F3,$F3,$F4,$F5,$F5,$F6

>1fe0	 f6 f7 f8 f8 f9 f9 fa fa  	        .BYTE $F6,$F7,$F8,$F8,$F9,$F9,$FA,$FA

>1fe8	 fb fb fc fc fc fd fd fd  	        .BYTE $FB,$FB,$FC,$FC,$FC,$FD,$FD,$FD

>1ff0	 fe fe fe fe ff ff ff ff  	        .BYTE $FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF

>1ff8	 ff 00 00 00 00 00 00 00  	        .BYTE $FF,$00,$00,$00,$00,$00,$00,$00


.2000					sin_msb

>2000	 dc e4 e4 e8 e8 ec ec ec  			.BYTE $DC,$E4,$E4,$E8,$E8,$EC,$EC,$EC

>2008	 ec ec f0 f0 f0 f0 f0 f0  	        .BYTE $EC,$EC,$F0,$F0,$F0,$F0,$F0,$F0

>2010	 f0 f0 f0 f0 f4 f4 f4 f4  	        .BYTE $F0,$F0,$F0,$F0,$F4,$F4,$F4,$F4

>2018	 f4 f4 f4 f4 f4 f4 f4 f4  	        .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4

>2020	 f4 f4 f4 f4 f4 f4 f4 f4  	        .BYTE $F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4

>2028	 f4 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F4,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2030	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2038	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2040	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2048	 f8 f8 f8 f8 f8 f8 f8 f8  	        .BYTE $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8

>2050	 f8 f8 f8 f8 f8 fc fc fc  	        .BYTE $F8,$F8,$F8,$F8,$F8,$FC,$FC,$FC

>2058	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2060	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2068	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2070	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2078	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2080	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2088	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2090	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>2098	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20a0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20a8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20b0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20b8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20c0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20c8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20d0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20d8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20e0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20e8	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20f0	 fc fc fc fc fc fc fc fc  	        .BYTE $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC

>20f8	 fc 00 00 00 00 00 00 00  	        .BYTE $FC,$00,$00,$00,$00,$00,$00,$00


.2100					log_table

>2100	 00 01 03 04 06 07 09 0a  			.BYTE $00,$01,$03,$04,$06,$07,$09,$0A

>2108	 0b 0d 0e 10 11 12 14 15  	        .BYTE $0B,$0D,$0E,$10,$11,$12,$14,$15

>2110	 16 18 19 1a 1c 1d 1e 20  	        .BYTE $16,$18,$19,$1A,$1C,$1D,$1E,$20

>2118	 21 22 24 25 26 28 29 2a  	        .BYTE $21,$22,$24,$25,$26,$28,$29,$2A

>2120	 2c 2d 2e 2f 31 32 33 34  	        .BYTE $2C,$2D,$2E,$2F,$31,$32,$33,$34

>2128	 36 37 38 39 3b 3c 3d 3e  	        .BYTE $36,$37,$38,$39,$3B,$3C,$3D,$3E

>2130	 3f 41 42 43 44 45 47 48  	        .BYTE $3F,$41,$42,$43,$44,$45,$47,$48

>2138	 49 4a 4b 4d 4e 4f 50 51  	        .BYTE $49,$4A,$4B,$4D,$4E,$4F,$50,$51

>2140	 52 54 55 56 57 58 59 5a  	        .BYTE $52,$54,$55,$56,$57,$58,$59,$5A

>2148	 5c 5d 5e 5f 60 61 62 63  	        .BYTE $5C,$5D,$5E,$5F,$60,$61,$62,$63

>2150	 64 66 67 68 69 6a 6b 6c  	        .BYTE $64,$66,$67,$68,$69,$6A,$6B,$6C

>2158	 6d 6e 6f 70 71 72 74 75  	        .BYTE $6D,$6E,$6F,$70,$71,$72,$74,$75

>2160	 76 77 78 79 7a 7b 7c 7d  	        .BYTE $76,$77,$78,$79,$7A,$7B,$7C,$7D

>2168	 7e 7f 80 81 82 83 84 85  	        .BYTE $7E,$7F,$80,$81,$82,$83,$84,$85

>2170	 86 87 88 89 8a 8b 8c 8d  	        .BYTE $86,$87,$88,$89,$8A,$8B,$8C,$8D

>2178	 8e 8f 90 91 92 93 94 95  	        .BYTE $8E,$8F,$90,$91,$92,$93,$94,$95

>2180	 96 97 98 99 9a 9b 9b 9c  	        .BYTE $96,$97,$98,$99,$9A,$9B,$9B,$9C

>2188	 9d 9e 9f a0 a1 a2 a3 a4  	        .BYTE $9D,$9E,$9F,$A0,$A1,$A2,$A3,$A4

>2190	 a5 a6 a7 a8 a9 a9 aa ab  	        .BYTE $A5,$A6,$A7,$A8,$A9,$A9,$AA,$AB

>2198	 ac ad ae af b0 b1 b2 b2  	        .BYTE $AC,$AD,$AE,$AF,$B0,$B1,$B2,$B2

>21a0	 b3 b4 b5 b6 b7 b8 b9 b9  	        .BYTE $B3,$B4,$B5,$B6,$B7,$B8,$B9,$B9

>21a8	 ba bb bc bd be bf c0 c0  	        .BYTE $BA,$BB,$BC,$BD,$BE,$BF,$C0,$C0

>21b0	 c1 c2 c3 c4 c5 c6 c6 c7  	        .BYTE $C1,$C2,$C3,$C4,$C5,$C6,$C6,$C7

>21b8	 c8 c9 ca cb cb cc cd ce  	        .BYTE $C8,$C9,$CA,$CB,$CB,$CC,$CD,$CE

>21c0	 cf d0 d0 d1 d2 d3 d4 d4  	        .BYTE $CF,$D0,$D0,$D1,$D2,$D3,$D4,$D4

>21c8	 d5 d6 d7 d8 d8 d9 da db  	        .BYTE $D5,$D6,$D7,$D8,$D8,$D9,$DA,$DB

>21d0	 dc dc dd de df e0 e0 e1  	        .BYTE $DC,$DC,$DD,$DE,$DF,$E0,$E0,$E1

>21d8	 e2 e3 e4 e4 e5 e6 e7 e7  	        .BYTE $E2,$E3,$E4,$E4,$E5,$E6,$E7,$E7

>21e0	 e8 e9 ea ea eb ec ed ee  	        .BYTE $E8,$E9,$EA,$EA,$EB,$EC,$ED,$EE

>21e8	 ee ef f0 f1 f1 f2 f3 f4  	        .BYTE $EE,$EF,$F0,$F1,$F1,$F2,$F3,$F4

>21f0	 f4 f5 f6 f7 f7 f8 f9 f9  	        .BYTE $F4,$F5,$F6,$F7,$F7,$F8,$F9,$F9

>21f8	 fa fb fc fc fd fe ff ff  	        .BYTE $FA,$FB,$FC,$FC,$FD,$FE,$FF,$FF


.2200					exp_table

>2200	 00 01 01 02 03 03 04 05  			.BYTE $00,$01,$01,$02,$03,$03,$04,$05

>2208	 06 06 07 08 08 09 0a 0b  	        .BYTE $06,$06,$07,$08,$08,$09,$0A,$0B

>2210	 0b 0c 0d 0e 0e 0f 10 10  	        .BYTE $0B,$0C,$0D,$0E,$0E,$0F,$10,$10

>2218	 11 12 13 13 14 15 16 16  	        .BYTE $11,$12,$13,$13,$14,$15,$16,$16

>2220	 17 18 19 19 1a 1b 1c 1d  	        .BYTE $17,$18,$19,$19,$1A,$1B,$1C,$1D

>2228	 1d 1e 1f 20 20 21 22 23  	        .BYTE $1D,$1E,$1F,$20,$20,$21,$22,$23

>2230	 24 24 25 26 27 28 28 29  	        .BYTE $24,$24,$25,$26,$27,$28,$28,$29

>2238	 2a 2b 2c 2c 2d 2e 2f 30  	        .BYTE $2A,$2B,$2C,$2C,$2D,$2E,$2F,$30

>2240	 30 31 32 33 34 35 35 36  	        .BYTE $30,$31,$32,$33,$34,$35,$35,$36

>2248	 37 38 39 3a 3a 3b 3c 3d  	        .BYTE $37,$38,$39,$3A,$3A,$3B,$3C,$3D

>2250	 3e 3f 40 41 41 42 43 44  	        .BYTE $3E,$3F,$40,$41,$41,$42,$43,$44

>2258	 45 46 47 48 48 49 4a 4b  	        .BYTE $45,$46,$47,$48,$48,$49,$4A,$4B

>2260	 4c 4d 4e 4f 50 51 51 52  	        .BYTE $4C,$4D,$4E,$4F,$50,$51,$51,$52

>2268	 53 54 55 56 57 58 59 5a  	        .BYTE $53,$54,$55,$56,$57,$58,$59,$5A

>2270	 5b 5c 5d 5e 5e 5f 60 61  	        .BYTE $5B,$5C,$5D,$5E,$5E,$5F,$60,$61

>2278	 62 63 64 65 66 67 68 69  	        .BYTE $62,$63,$64,$65,$66,$67,$68,$69

>2280	 6a 6b 6c 6d 6e 6f 70 71  	        .BYTE $6A,$6B,$6C,$6D,$6E,$6F,$70,$71

>2288	 72 73 74 75 76 77 78 79  	        .BYTE $72,$73,$74,$75,$76,$77,$78,$79

>2290	 7a 7b 7c 7d 7e 7f 80 81  	        .BYTE $7A,$7B,$7C,$7D,$7E,$7F,$80,$81

>2298	 82 83 84 85 87 88 89 8a  	        .BYTE $82,$83,$84,$85,$87,$88,$89,$8A

>22a0	 8b 8c 8d 8e 8f 90 91 92  	        .BYTE $8B,$8C,$8D,$8E,$8F,$90,$91,$92

>22a8	 93 95 96 97 98 99 9a 9b  	        .BYTE $93,$95,$96,$97,$98,$99,$9A,$9B

>22b0	 9c 9d 9f a0 a1 a2 a3 a4  	        .BYTE $9C,$9D,$9F,$A0,$A1,$A2,$A3,$A4

>22b8	 a5 a6 a8 a9 aa ab ac ad  	        .BYTE $A5,$A6,$A8,$A9,$AA,$AB,$AC,$AD

>22c0	 af b0 b1 b2 b3 b4 b6 b7  	        .BYTE $AF,$B0,$B1,$B2,$B3,$B4,$B6,$B7

>22c8	 b8 b9 ba bc bd be bf c0  	        .BYTE $B8,$B9,$BA,$BC,$BD,$BE,$BF,$C0

>22d0	 c2 c3 c4 c5 c6 c8 c9 ca  	        .BYTE $C2,$C3,$C4,$C5,$C6,$C8,$C9,$CA

>22d8	 cb cd ce cf d0 d2 d3 d4  	        .BYTE $CB,$CD,$CE,$CF,$D0,$D2,$D3,$D4

>22e0	 d6 d7 d8 d9 db dc dd de  	        .BYTE $D6,$D7,$D8,$D9,$DB,$DC,$DD,$DE

>22e8	 e0 e1 e2 e4 e5 e6 e8 e9  	        .BYTE $E0,$E1,$E2,$E4,$E5,$E6,$E8,$E9

>22f0	 ea ec ed ee f0 f1 f2 f4  	        .BYTE $EA,$EC,$ED,$EE,$F0,$F1,$F2,$F4

>22f8	 f5 f6 f8 f9 fa fc fd ff  	        .BYTE $F5,$F6,$F8,$F9,$FA,$FC,$FD,$FF


.2300					and_pixel_pos

>2300	 3f cf f3 fc 3f cf f3 fc  			.BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2308	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2310	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2318	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2320	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2328	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2330	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2338	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2340	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2348	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2350	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2358	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2360	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2368	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2370	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2378	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2380	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2388	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2390	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

>2398	 3f cf f3 fc 3f cf f3 fc  	        .BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC


.2400					ora_pixel_pos

>2400	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2408	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2410	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2418	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2420	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2428	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2430	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2438	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2440	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2448	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2450	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2458	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2460	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2468	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2470	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2478	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2480	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2488	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2490	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03

>2498	 c0 30 0c 03 c0 30 0c 03  			.BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03


.24a0					ver_pos_hi

>24a0	 00 00 00 00 00 00 00 00  			.BYTE $00,$00,$00,$00,$00,$00,$00,$00

>24a8	 01 01 01 01 01 01 01 01  	        .BYTE $01,$01,$01,$01,$01,$01,$01,$01

>24b0	 02 02 02 02 02 02 02 02  	        .BYTE $02,$02,$02,$02,$02,$02,$02,$02

>24b8	 03 03 03 03 03 03 03 03  	        .BYTE $03,$03,$03,$03,$03,$03,$03,$03

>24c0	 05 05 05 05 05 05 05 05  	        .BYTE $05,$05,$05,$05,$05,$05,$05,$05

>24c8	 06 06 06 06 06 06 06 06  	        .BYTE $06,$06,$06,$06,$06,$06,$06,$06

>24d0	 07 07 07 07 07 07 07 07  	        .BYTE $07,$07,$07,$07,$07,$07,$07,$07

>24d8	 08 08 08 08 08 08 08 08  	        .BYTE $08,$08,$08,$08,$08,$08,$08,$08

>24e0	 0a 0a 0a 0a 0a 0a 0a 0a  	        .BYTE $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A

>24e8	 0b 0b 0b 0b 0b 0b 0b 0b  	        .BYTE $0B,$0B,$0B,$0B,$0B,$0B,$0B,$0B

>24f0	 0c 0c 0c 0c 0c 0c 0c 0c  	        .BYTE $0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C

>24f8	 0d 0d 0d 0d 0d 0d 0d 0d  	        .BYTE $0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D

>2500	 0f 0f 0f 0f 0f 0f 0f 0f  	        .BYTE $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F

>2508	 10 10 10 10 10 10 10 10  	        .BYTE $10,$10,$10,$10,$10,$10,$10,$10

>2510	 11 11 11 11 11 11 11 11  	        .BYTE $11,$11,$11,$11,$11,$11,$11,$11

>2518	 12 12 12 12 12 12 12 12  	        .BYTE $12,$12,$12,$12,$12,$12,$12,$12

>2520	 14 14 14 14 14 14 14 14  	        .BYTE $14,$14,$14,$14,$14,$14,$14,$14

>2528	 aa aa aa aa aa aa aa aa  	        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA


.2530					ver_pos_lo

>2530	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>2538	 40 41 42 43 44 45 46 47  	        .BYTE $40,$41,$42,$43,$44,$45,$46,$47

>2540	 80 81 82 83 84 85 86 87  	        .BYTE $80,$81,$82,$83,$84,$85,$86,$87

>2548	 c0 c1 c2 c3 c4 c5 c6 c7  	        .BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>2550	 00 01 02 03 04 05 06 07  	        .BYTE $00,$01,$02,$03,$04,$05,$06,$07

>2558	 40 41 42 43 44 45 46 47  	        .BYTE $40,$41,$42,$43,$44,$45,$46,$47

>2560	 80 81 82 83 84 85 86 87  	        .BYTE $80,$81,$82,$83,$84,$85,$86,$87

>2568	 c0 c1 c2 c3 c4 c5 c6 c7  			.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>2570	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>2578	 40 41 42 43 44 45 46 47  			.BYTE $40,$41,$42,$43,$44,$45,$46,$47

>2580	 80 81 82 83 84 85 86 87  			.BYTE $80,$81,$82,$83,$84,$85,$86,$87

>2588	 c0 c1 c2 c3 c4 c5 c6 c7  			.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>2590	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>2598	 40 41 42 43 44 45 46 47  			.BYTE $40,$41,$42,$43,$44,$45,$46,$47

>25a0	 80 81 82 83 84 85 86 87  			.BYTE $80,$81,$82,$83,$84,$85,$86,$87

>25a8	 c0 c1 c2 c3 c4 c5 c6 c7  			.BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7

>25b0	 00 01 02 03 04 05 06 07  			.BYTE $00,$01,$02,$03,$04,$05,$06,$07

>25b8	 aa aa aa aa aa aa aa aa  			.BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA


.25c0					hor_scr_pos

>25c0	 00 00 00 00 08 08 08 08  			.BYTE $00,$00,$00,$00,$08,$08,$08,$08

>25c8	 10 10 10 10 18 18 18 18  	        .BYTE $10,$10,$10,$10,$18,$18,$18,$18

>25d0	 20 20 20 20 28 28 28 28  	        .BYTE $20,$20,$20,$20,$28,$28,$28,$28

>25d8	 30 30 30 30 38 38 38 38  	        .BYTE $30,$30,$30,$30,$38,$38,$38,$38

>25e0	 40 40 40 40 48 48 48 48  	        .BYTE $40,$40,$40,$40,$48,$48,$48,$48

>25e8	 50 50 50 50 58 58 58 58  	        .BYTE $50,$50,$50,$50,$58,$58,$58,$58

>25f0	 60 60 60 60 68 68 68 68  	        .BYTE $60,$60,$60,$60,$68,$68,$68,$68

>25f8	 70 70 70 70 78 78 78 78  	        .BYTE $70,$70,$70,$70,$78,$78,$78,$78

>2600	 80 80 80 80 88 88 88 88  	        .BYTE $80,$80,$80,$80,$88,$88,$88,$88

>2608	 90 90 90 90 98 98 98 98  	        .BYTE $90,$90,$90,$90,$98,$98,$98,$98

>2610	 a0 a0 a0 a0 a8 a8 a8 a8  	        .BYTE $A0,$A0,$A0,$A0,$A8,$A8,$A8,$A8

>2618	 b0 b0 b0 b0 b8 b8 b8 b8  	        .BYTE $B0,$B0,$B0,$B0,$B8,$B8,$B8,$B8

>2620	 c0 c0 c0 c0 c8 c8 c8 c8  	        .BYTE $C0,$C0,$C0,$C0,$C8,$C8,$C8,$C8

>2628	 d0 d0 d0 d0 d8 d8 d8 d8  	        .BYTE $D0,$D0,$D0,$D0,$D8,$D8,$D8,$D8

>2630	 e0 e0 e0 e0 e8 e8 e8 e8  	        .BYTE $E0,$E0,$E0,$E0,$E8,$E8,$E8,$E8

>2638	 f0 f0 f0 f0 f8 f8 f8 f8  	        .BYTE $F0,$F0,$F0,$F0,$F8,$F8,$F8,$F8

>2640	 00 00 00 00 08 08 08 08  	        .BYTE $00,$00,$00,$00,$08,$08,$08,$08

>2648	 10 10 10 10 18 18 18 18  	        .BYTE $10,$10,$10,$10,$18,$18,$18,$18

>2650	 20 20 20 20 28 28 28 28  			.BYTE $20,$20,$20,$20,$28,$28,$28,$28

>2658	 30 30 30 30 38 38 38 38  			.BYTE $30,$30,$30,$30,$38,$38,$38,$38

>2660	 c0 c0 c0 c0 c0 c0 aa aa  			.BYTE $C0,$C0,$C0,$C0,$C0,$C0,$AA,$AA

>2668	 aa aa aa aa aa aa aa aa  	        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

>2670	 25 25 28 29 24 24 aa aa  			.BYTE $25,$25,$28,$29,$24,$24,$AA,$AA

>2678	 aa aa aa aa aa aa aa aa  	        .BYTE $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

>2680	 80 80 00 00 80 80 14 15  			.BYTE $80,$80,$00,$00,$80,$80,$14,$15

>2688	 15 16 16 17 17 0c 00 0c  	        .BYTE $15,$16,$16,$17,$17,$0C,$00,$0C

>2690	 29 28 19 18 28 29 04 10  			.BYTE $29,$28,$19,$18,$28,$29,$04,$10

>2698	 05 11 06 12 07 13 08 14  	        .BYTE $05,$11,$06,$12,$07,$13,$08,$14

>26a0	 09 15 0a 16 0b 17 18 19  			.BYTE $09,$15,$0A,$16,$0B,$17,$18,$19

>26a8	 19 1a 1b 1c 1c 1d 01 3d  	        .BYTE $19,$1A,$1B,$1C,$1C,$1D,$01,$3D

>26b0	 1b 3d 1a 3c 1d 3c 22 e2  			.BYTE $1B,$3D,$1A,$3C,$1D,$3C,$22,$E2

>26b8	 22 60 1f 60 1f e2 1d 62  			.BYTE $22,$60,$1F,$60,$1F,$E2,$1D,$62

>26c0	 46 75 a4 d3 02 31 60 8f  	LINE_DRAW_PTR_LO   .BYTE <LINE_DRAW_0,<LINE_DRAW_1,<LINE_DRAW_2,<LINE_DRAW_3,<LINE_DRAW_4,<LINE_DRAW_5,<LINE_DRAW_6,<LINE_DRAW_7 

>26c8	 13 13 13 13 14 14 14 14  	LINE_DRAW_PTR_HI   .BYTE >LINE_DRAW_0,>LINE_DRAW_1,>LINE_DRAW_2,>LINE_DRAW_3,>LINE_DRAW_4,>LINE_DRAW_5,>LINE_DRAW_6,>LINE_DRAW_7 

>26d0	 00 07 03 04 01 06 02 05  	LINE_DRAW_CONV_PTR .BYTE $00,$07,$03,$04,$01,$06,$02,$05

>26d8	 9f 9f 00 00 00 00 9f 9f  	fBBD8   .BYTE $9F,$9F,$00,$00,$00,$00,$9F,$9F

>26e0	 87 87 87 87 00 00 00 00  	fBBE0   .BYTE $87,$87,$87,$87,$00,$00,$00,$00

>26e8	 40 38 08 00 40 38 28 30  	fBBE8   .BYTE $40,$38,$08,$00,$40,$38,$28,$30

>26f0	 40 18 08 10 40 18 28 20  			.BYTE $40,$18,$08,$10,$40,$18,$28,$20

>26f8	 00 00 03 00 00 00 02 02  	fBBF8   .BYTE $00,$00,$03,$00,$00,$00,$02,$02

>2700	 00 00 00 06 04 00 00 04  			.BYTE $00,$00,$00,$06,$04,$00,$00,$04

>2708	 0c 00 00 00 08 08 00 00  			.BYTE $0C,$00,$00,$00,$08,$08,$00,$00

>2710	 00 09 00 00 00 01 01 00  			.BYTE $00,$09,$00,$00,$00,$01,$01,$00	

>2718	 01 00 00 00 01 01 00 00  	fBC18   .BYTE $01,$00,$00,$00,$01,$01,$00,$00

>2720	 00 01 00 00 00 01 01 00  			.BYTE $00,$01,$00,$00,$00,$01,$01,$00

>2728	 00 00 01 00 00 00 01 01  			.BYTE $00,$00,$01,$00,$00,$00,$01,$01

>2730	 00 00 00 01 01 00 00 01  			.BYTE $00,$00,$00,$01,$01,$00,$00,$01

=4000					SCREEN0 = $4000

=5c00					SCREEN_COLOUR =  $5C00

=6000					SCREEN1 = $6000


;******  end of code
