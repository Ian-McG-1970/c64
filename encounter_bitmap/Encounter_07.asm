*= $1000 

BANK_HI_HI = 2
; = BANK_HI_HI +1
;BANK_LO_HI = BANK_LO_LO +1

SCR_LO = BANK_HI_HI +1 ;BANK_LO_HI +1
SCR_HI = SCR_LO+1
SCR = SCR_LO

BANK = SCR_HI+1

LINE_FRAC = BANK+1
LINE_INC = LINE_FRAC+1
LINE_VER = LINE_INC+1
LINE_END = LINE_VER+1
H_ST = LINE_END+1
H_EN = H_ST+1
V_ST = H_EN+1
V_EN = V_ST+1

INCP = LINE_INC
PNT = LINE_VER
LIMIT = LINE_END

X_PNT_LO = V_EN+1
X_PNT_HI = X_PNT_LO+1
Y_PNT_LO = X_PNT_HI+1
Y_PNT_HI = Y_PNT_LO+1
Z_PNT_LO = Y_PNT_HI+1
Z_PNT_HI = Z_PNT_LO+1
X_OFF_LO = Z_PNT_HI+1
X_OFF_HI = X_OFF_LO+1
Y_OFF_LO = X_OFF_HI+1
Y_OFF_HI = Y_OFF_LO+1
Z_OFF_LO = Y_OFF_HI+1
Z_OFF_HI = Z_OFF_LO+1
CC = Z_OFF_HI+1
PNT_CNT = CC+1

X_PNT = X_PNT_LO
Y_PNT = Y_PNT_LO
Z_PNT = Z_PNT_LO
X_OFF = X_OFF_LO
Y_OFF = Y_OFF_LO
Z_OFF = Z_OFF_LO
LINE_CNT = PNT_CNT +1

DIVIDEND = LINE_CNT +1 ; 3 BYTES
DIVISOR = DIVIDEND +3 ; 3 BYTES
RESULT = DIVISOR +3 ; 3 BYTES?
REMAINDER = RESULT +3 ; 3 BYTES?

CC_OR = REMAINDER +3
CC_AND = CC_OR +1
X_CLIP_STT = CC_AND +1
X_CLIP_END = X_CLIP_STT +2
Y_CLIP_STT = X_CLIP_END +2
Y_CLIP_END = Y_CLIP_STT +2
Z_CLIP_STT = Y_CLIP_END +2
Z_CLIP_END = Z_CLIP_STT +2
X_CLIP_MID = Y_CLIP_END +2
Y_CLIP_MID = X_CLIP_MID +2
Z_CLIP_MID = Y_CLIP_MID +2
CLIP_MID = Z_CLIP_MID +2

P_SQR_LO=CLIP_MID +2
P_SQR_HI=P_SQR_LO +2
P_INVSQR_LO=P_SQR_HI +2
P_INVSQR_HI=P_INVSQR_LO +2
X0=P_INVSQR_HI +2
X1=X0 +1
Y0=X1 +1
Y1=Y0 +1
Z0=Y1 +1
Z1=Z0 +1
Z2=Z1 +1
Z3=Z2 +1

X_CLIP_S_PNT_LO = Z3 +1
X_CLIP_S_PNT_HI = X_CLIP_S_PNT_LO +1
Y_CLIP_S_PNT_LO = X_CLIP_S_PNT_HI +1
Y_CLIP_S_PNT_HI = Y_CLIP_S_PNT_LO +1
Z_CLIP_S_PNT_LO = Y_CLIP_S_PNT_HI +1
Z_CLIP_S_PNT_HI = Z_CLIP_S_PNT_LO +1
X_CLIP_E_PNT_LO = Z_CLIP_S_PNT_HI +1
X_CLIP_E_PNT_HI = X_CLIP_E_PNT_LO +1
Y_CLIP_E_PNT_LO = X_CLIP_E_PNT_HI +1
Y_CLIP_E_PNT_HI = Y_CLIP_E_PNT_LO +1
Z_CLIP_E_PNT_LO = Y_CLIP_E_PNT_HI +1
Z_CLIP_E_PNT_HI = Z_CLIP_E_PNT_LO +1
X_CLIP_S_PER_LO = Z_CLIP_E_PNT_HI +1
X_CLIP_S_PER_HI = X_CLIP_S_PER_LO +1
Y_CLIP_S_PER_LO = X_CLIP_S_PER_HI +1
Y_CLIP_S_PER_HI = Y_CLIP_S_PER_LO +1

X_CLIP_E_PER_LO = Y_CLIP_S_PER_HI +1
X_CLIP_E_PER_HI = X_CLIP_E_PER_LO +1
Y_CLIP_E_PER_LO = X_CLIP_E_PER_HI +1
Y_CLIP_E_PER_HI = Y_CLIP_E_PER_LO +1

CC_S = Y_CLIP_E_PER_HI +1
CC_E = CC_S +1

X_ROT = CC_E +1
Y_ROT = X_ROT +2
Z_ROT = Y_ROT +2
YC_TEMP = Z_ROT +2
YS_TEMP = YC_TEMP +2
ZC_TEMP = YS_TEMP +2
ZS_TEMP = ZC_TEMP +2
XC_TEMP = ZS_TEMP +2
XS_TEMP = XC_TEMP +2
T2 = XS_TEMP +2
T8 = T2 +1
T6 = T8 +1
T1 = T6 +1
T4 = T1 +1
T9 = T4 +1
T3 = T9 +1
T5 = T3 +1
T7 = T5 +1
T10 = T7 +1
tmp1 = T10 +1
tmp2 = tmp1 +1
tmp3 = tmp2 +1
XSINTMP = tmp3 +1
XCOSTMP = XSINTMP +1
YSINTMP = XCOSTMP +1
YCOSTMP = YSINTMP +1
ZSINTMP = YCOSTMP +1
ZCOSTMP = ZSINTMP +1
OBJECT_PTR = ZCOSTMP +1
COLOUR = OBJECT_PTR +2
HOR_LINES = COLOUR +1
OBJECT_HPOS = HOR_LINES +1
HOR_START_LINE = OBJECT_HPOS +1
NEXT_PTR = HOR_START_LINE +1
VER_FULL_LINES = NEXT_PTR +1
VER_PARTIAL_LINES = VER_FULL_LINES +1
AND_VAL = VER_PARTIAL_LINES +1
ORA_VAL = AND_VAL +1
COLUMN = ORA_VAL +1
SAME_PATTERN_COUNT = COLUMN +1
YREG_BK = SAME_PATTERN_COUNT +1

CLIP_OFFSET = 16384
MAX_PNT = 64
       
RXL = 512
RXH = RXL+MAX_PNT
RYL = RXH+MAX_PNT
RYH = RYL+MAX_PNT
RZL = RYH+MAX_PNT
RZH = RZL+MAX_PNT
PXL = RZH+MAX_PNT
PXH = PXL+MAX_PNT
PYL = PXH+MAX_PNT
PYH = PYL+MAX_PNT
PCC = PYH+MAX_PNT

SCNX = 128/2
SCNY = 128/2

CC_TOP = 1
CC_BOTTOM = 2
CC_LEFT = 4
CC_RIGHT = 8
CC_BEHIND = 16
CC_ALL = 255

CLIP_TOP_POS = CLIP_OFFSET
CLIP_BOTTOM_POS = CLIP_TOP_POS +127
CLIP_LEFT_POS = CLIP_TOP_POS
CLIP_RIGHT_POS = CLIP_BOTTOM_POS

SCRN0 = $4000 ; $8000
SCRN1 = $6000 ; $A000
SCRNBANK = $02 ; $01

SEI        ; disable maskable IRQs

 LDA #$7F
 STA $DC0D  ; disable timer interrupts which can be generated by the two CIA chips
 STA $DD0D  ; the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

 LDA $DC0D  ; by reading this two registers we negate any pending CIA irqs.
 LDA $DD0D  ; if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

 LDA #$01   ; this is how to tell the VICII to generate a raster interrupt
 STA $D01A

 LDA #$F0   ; this is how to tell at which rasterline we want the irq to be triggered
 STA $D012

 LDA #$1B   ; as there are more than 256 rasterlines, the topmost bit of $d011 serves as
 STA $D011  ; the 9th bit for the rasterline we want our irq to be triggered. here we simply set up a character screen, leaving the topmost bit 0.

 LDA #$35   ; we turn off the BASIC and KERNAL rom here
 STA $01    ; the cpu now sees RAM everywhere except at $d000-$e000, where still the registers of SID/VICII/etc are visible

 ldA #<BM_IRQ  ; this is how we set up
 STA $FFFE     ; the address of our interrupt code
 LDA #>BM_IRQ
 STA $FFFF
  
 LDA #<NMI_NOP ; lsb
 STA $FFFA ; Create a nop, irq handler for NMI that gets called whenever RESTORE is pressed or similar.
 LDA #>NMI_NOP ; msb
 STA $FFFB ; We're putting our irq handler directly in the vector that usually points to the kernal's NMI handler since we have kernal banked out.

 LDA #$00  ; Force an NMI by setting up a timer. This will cause an NMI, that won't be acked. Any subsequent NMI's from RESTORE will be essentially disabled.
 STA $DD0E       ; Stop timer A
 STA $DD04       ; Set timer A to 0, NMI will occure immediately after start
 STA $DD0E

 LDA #$81
 STA $DD0D       ; Set timer A as source for NMI

 LDA #$01
 STA $DD0E       ; Start timer A -> NMI

 LDA #SCRNBANK
 STA $DD00 ; bank
    
 LDA #$00
 STA $D020
 LDA #$00 ; $00
 STA $D021
; LDA #$0B ; $00
; STA $D022
; LDA #$0C ; $00
; STA $D023

 LDA   #>sqrlo
 STA   P_SQR_LO+1
 LDA   #>sqrhi
 STA   P_SQR_HI+1
 LDA   #>negsqrlo
 STA   P_INVSQR_LO+1
 LDA   #>negsqrhi
 STA   P_INVSQR_HI+1
 
 LDA #$01 ; $01 ; colour 11 
 LDX #<$D800
 LDY #>$D800
 STX SCR+0
 STY SCR+1
 LDX #>1000 
 LDY #<1000
 JSR MEMSET

 LDA #$BC ;$65 ; colour 01 (0000????) and colour 10 (????0000) - bank 1
 LDX #<(SCRN0+$1c00)
 LDY #>(SCRN0+$1c00)
 STX SCR+0
 STY SCR+1
 LDX #>1000 
 LDY #<1000
 JSR MEMSET

 LDA #$BC ;%65 ; colour 01 (0000????) and colour 10 (????0000) - bank 2
 LDX #<(SCRN1+$1c00)
 LDY #>(SCRN1+$1c00)
 STX SCR+0
 STY SCR+1
 LDX #>1000 
 LDY #<1000
 JSR MEMSET
 
 LDA #0
 sta X_ROT
 sta Y_ROT
 sta Z_ROT
 sta X_ROT+1
 sta Y_ROT+1
 sta Z_ROT+1

 LDA  #<-10
 STA  Y_OFF_LO
 LDA  #>-10
 STA  Y_OFF_HI

 LDA #<-10
 STA  X_OFF_LO
 LDA #>-10
 STA  X_OFF_HI

 LDA  #<9900
 STA  Z_OFF_LO
 LDA  #>9900
 STA  Z_OFF_HI
   
CLI ; enable maskable interrupts again

MLOOP:
 JSR  SWAP_SCREEN
 
; LDA #%01111000
; STA COLOUR
; LDX #16
; STX COLUMN

; LDX #20
; JSR FILL_UP_COLUMN

; LDX COLUMN
; JSR COPY_DOWN_COLUMN

  LDA #%01010101
  STA COLOUR
  LDA #16
  STA OBJECT_HPOS
  LDA #<OBJECT_01
  STA OBJECT_PTR
  LDA #>OBJECT_01
  STA OBJECT_PTR +1
 JSR DRAW_OBJECT

  LDA #%10101010
  STA COLOUR
  LDA #18
  STA OBJECT_HPOS
  LDA #<OBJECT_02
  STA OBJECT_PTR
  LDA #>OBJECT_02
  STA OBJECT_PTR +1
  JSR DRAW_OBJECT
 
 JSR  KEYBOARD
 
 LDA X_ROT
 CLC
 ADC #1
 STA X_ROT
 LDA X_ROT+1
 ADC #0
 AND #3
 STA X_ROT+1

JMP MLOOP ; we better don't RTS, the ROMS are now switched off, there's no way back to the system

;+----+----------------------+-------------------------------------------------------------------------------------------------------+
;|    |                      |                                Peek from $dc01 (code in paranthesis):                                 |
;|row:| $dc00:               +------------+------------+------------+------------+------------+------------+------------+------------+
;|    |                      |   BIT 7    |   BIT 6    |   BIT 5    |   BIT 4    |   BIT 3    |   BIT 2    |   BIT 1    |   BIT 0    |
;+----+----------------------+------------+------------+------------+------------+------------+------------+------------+------------+
;|1.  | #%11111110 (254/$fe) | DOWN  ($  )|   F5  ($  )|   F3  ($  )|   F1  ($  )|   F7  ($  )| RIGHT ($  )| RETURN($  )|DELETE ($  )|
;|2.  | #%11111101 (253/$fd) |LEFT-SH($  )|   e   ($05)|   s   ($13)|   z   ($1a)|   4   ($34)|   a   ($01)|   w   ($17)|   3   ($33)|
;|3.  | #%11111011 (251/$fb) |   x   ($18)|   t   ($14)|   f   ($06)|   c   ($03)|   6   ($36)|   d   ($04)|   r   ($12)|   5   ($35)|
;|4.  | #%11110111 (247/$f7) |   v   ($16)|   u   ($15)|   h   ($08)|   b   ($02)|   8   ($38)|   g   ($07)|   y   ($19)|   7   ($37)|
;|5.  | #%11101111 (239/$ef) |   n   ($0e)|   o   ($0f)|   k   ($0b)|   m   ($0d)|   0   ($30)|   j   ($0a)|   i   ($09)|   9   ($39)|
;|6.  | #%11011111 (223/$df) |   ,   ($2c)|   @   ($00)|   :   ($3a)|   .   ($2e)|   -   ($2d)|   l   ($0c)|   p   ($10)|   +   ($2b)|
;|7.  | #%10111111 (191/$bf) |   /   ($2f)|   ^   ($1e)|   =   ($3d)|RGHT-SH($  )|  HOME ($  )|   ;   ($3b)|   *   ($2a)|   Â£   ($1c)|
;|8.  | #%01111111 (127/$7f) | STOP  ($  )|   q   ($11)|COMMODR($  )| SPACE ($20)|   2   ($32)|CONTROL($  )|  <-   ($1f)|   1   ($31)|
;+----+----------------------+------------+------------+------------+------------+------------+------------+------------+------------+

!ZONE KEYBOARD
.s  SEC
    LDA   Z_OFF_LO
    SBC   #51
    STA   Z_OFF_LO
    LDA   Z_OFF_HI
    SBC   #0
    STA   Z_OFF_HI
    rts
    
.w  CLC
    LDA   Z_OFF_LO
    ADC   #51
    STA   Z_OFF_LO
    LDA   Z_OFF_HI
    ADC   #0
    STA   Z_OFF_HI
    rts
    
.a  SEC
    LDA   X_OFF_LO
    SBC   #51
    STA   X_OFF_LO
    LDA   X_OFF_HI
    SBC   #0
    STA   X_OFF_HI
    rts
    
.d  LDA   X_OFF_LO
    ADC   #51
    STA   X_OFF_LO
    LDA   X_OFF_HI
    ADC   #0
    STA   X_OFF_HI
    rts
    
.q  SEC
    LDA   Y_OFF_LO
    SBC   #51
    STA   Y_OFF_LO
    LDA   Y_OFF_HI
    SBC   #0
    STA   Y_OFF_HI
    rts
    
.z  LDA   Y_OFF_LO
    ADC   #51
    STA   Y_OFF_LO
    LDA   Y_OFF_HI
    ADC   #0
    STA   Y_OFF_HI
    rts

KEYBOARD:
      lda #$ff         ; write on port A
      sta $dc02
      lda #$00         ; read on port B
      sta $dc03
  
      lda #%11111101   ; s is in row 2 (the diagram on the wiki is transposed.)
      sta $dc00         ; instruct keyboard
      lda $dc01         ; read value from keyboard
      and #%00100000   ; s is in column 5 (mask it out)
      beq .s
      lda $dc01
      and #%00000100  ; a is in row 2 and column 3
      beq .a
      lda $dc01
      and #%00000010  ; w is in row 2 and column 2
      beq .w
      lda $dc01
      and #%00010000  ; z is in row 2 column 4
      beq .z
      
      lda #%11111011  ; d is in row 3
      sta $dc00
      lda $dc01
      and #%00000100  ; d is in colum 3
      beq .d
      
      lda #%01111111   ; q is in row 8
      sta $dc00
      lda $dc01
      and #%01000000  ; q is in column 5
      beq .q

      lda #%11011111
      sta $dc00         ; instruct keyboard
      lda $dc01
      and #%00000010 ; p is in row 6 and column 2
      beq .p
      lda $dc01
      and #%00000100  ; l is in row 6 and column 2
      beq .l
      
      lda #%11101111
      sta $dc00         ; instruct keyboard
      lda $dc01
      and #%01000000 ; p is in row 6 and column 2
      beq .o
      lda $dc01
      and #%00100000  ; l is in row 6 and column 2
      beq .k
       
      lda $dc01
      and #%00000010 ; p is in row 6 and column 2
      beq .i
      lda $dc01
      and #%00000100  ; l is in row 6 and column 2
      beq .j
 ;     lda #%11111101   ; z is in row 2
 ;     sta $dc00
 ;     lda $dc01
 ;     and #%00010000  ; z is in column 4
 ;     beq .z

 rts      
.p  LDA X_ROT
 CLC
 ADC #1
 STA X_ROT
 LDA X_ROT+1
 ADC #0
 AND #3
 STA X_ROT+1
rts
.l  LDA X_ROT
 SEC
 SBC #1
 STA X_ROT
 LDA X_ROT+1
 SBC #0
 AND #3
 STA X_ROT+1
rts
.o  LDA Y_ROT
 CLC
 ADC #1
 STA Y_ROT
 LDA Y_ROT+1
 ADC #0
 AND #3
 STA Y_ROT+1
rts
.k  LDA Y_ROT
 SEC
 SBC #1
 STA Y_ROT
 LDA Y_ROT+1
 SBC #0
 AND #3
 STA Y_ROT+1
rts
.i  LDA Z_ROT
 CLC
 ADC #1
 STA Z_ROT
 LDA Z_ROT+1
 ADC #0
 AND #3
 STA Z_ROT+1
rts
.j  LDA Z_ROT
 SEC
 SBC #1
 STA Z_ROT
 LDA Z_ROT+1
 SBC #0
 AND #3
 STA Z_ROT+1
rts
                  
!ZONE NEG16
!MACRO NEG16  NUM {
  SEC       ;Ensure carry is set                      #2
  LDA #0    ;Load constant zero                       #2
  SBC NUM   ;... subtract the least significant byte  #3
  STA NUM   ;... and store the result                 #3
  LDA #0    ;Load constant zero again                 #2
  SBC NUM+1 ;... subtract the most significant byte   #3
  STA NUM+1 ;... and store the result                 #3
 }
       
!ZONE MEMSET        
MEMSET       STY    .LSB_ONLY+1 ; store LSB count
             CPX    #0          ; MSB?     
             BEQ    .LSB_ONLY   ; no

             LDY    #0          ; yes so reset LSB
.MSB_LOOP  
.LSB_LOOP      STA    (SCR),Y   ; clear whole MSB
               DEY 
               BNE    .LSB_LOOP

              INC    SCR+1      ; inc MSB
              DEX               ; dec MSB count
              BNE    .MSB_LOOP

.LSB_ONLY    LDY    #0          ; LSB count 
             BEQ    .MS_END     ; not needed

.LAST_LSB_LOOP STA   (SCR),Y
               DEY 
               BNE   .LAST_LSB_LOOP
                
              STA   (SCR),Y     ; clear last Y (0)
 
.MS_END      RTS

 !ZONE MID_16
!MACRO MID_16 NUM1, NUM2, RC {
  CLC           ; clear carry
  LDA NUM1
  ADC NUM2
  STA RC     ; store sum of LSBs
  LDA NUM1+1
  ADC NUM2+1   ; add the MSBs using carry from the previous calculation
  STA RC+1
  LSR RC+1     ; half MSB
  ROR RC     ; half LSB add carry
}

!ZONE CMP_16
!MACRO CMP_16 NUM1, NUM2 {
; Does exactly the same as CMP of two values (effectively its a A - M) and sets the flags as follows:
;  If A = M : Carry =  SET   Zero =  SET   Negative = CLEAR
;  If A > M : Carry =  SET   Zero = CLEAR  Negative = CLEAR
;  If A < M : Carry = CLEAR  Zero = CLEAR  Negative =  SET

  LDA NUM1+1
  CMP NUM2+1
  BNE .DIFF
    LDA NUM1
    CMP NUM2
.DIFF
; Status register sorted, from here you can branch as you like as you would after a CMP opc.
}

!ZONE DIV_MUL_U16U08
!MACRO DIV_MUL_U16U08 {
  sta   P_SQR_LO  ; DIV_MUL_U16U08 ; set multiplier as x0
  sta   P_SQR_HI
  eor   #$ff
  sta   P_INVSQR_LO
  sta   P_INVSQR_HI ;17

  sec
  lda   (P_SQR_LO),Y
  sbc   (P_INVSQR_LO),Y ; note these two lines taken as 11 total ;  sta   Z0              ; x0*y0l
  lda   (P_SQR_HI),Y
  sbc   (P_INVSQR_HI),Y
  sta   .c1a+1           ; x0*y0h;31 ;c1a means column 1, row a (partial product to be added later)

  ldy   Y1  ;sec not needed ;notice that the high byte of sub above is always +ve
  lda   (P_SQR_LO),y
  sbc   (P_INVSQR_LO),y

      clc               ; add the first two numbers of column 1
.c1a: adc   #0
}

!ZONE DIV_MUL_U16U16
!MACRO DIV_MUL_U16U16 {
  lda   X0              ; set multiplier as x0
  sta   P_SQR_LO
  sta   P_SQR_HI
  eor   #$ff
  sta   P_INVSQR_LO
  sta   P_INVSQR_HI ;17

  ldy   Y0
  sec
  lda   (P_SQR_HI),Y
  sbc   (P_INVSQR_HI),Y
  sta   .c1a+1           ; x0*y0h;31 ;c1a means column 1, row a (partial product to be added later)

  ldy   Y1  ;sec  ;notice that the high byte of sub above is always +ve
  lda   (P_SQR_LO),y
  sbc   (P_INVSQR_LO),y
  sta   .c1b+1           ; x0*y1l
  lda   (P_SQR_HI),y
  sbc   (P_INVSQR_HI),y
  sta   .c2a+1           ; x0*y1h;31

  lda   X1              ; set multiplier as x1
  sta   P_SQR_LO
  sta   P_SQR_HI
  eor   #$ff
  sta   P_INVSQR_LO
  sta   P_INVSQR_HI ;17

  ldy   Y0  ;sec
  lda   (P_SQR_LO),y
  sbc   (P_INVSQR_LO),y
  sta   .c1c+1           ; x1*y0l
  lda   (P_SQR_HI),y
  sbc   (P_INVSQR_HI),y
  sta   .c2b+1           ; x1*y1h;31

  ldy   Y1  ;sec
  lda   (P_SQR_LO),y
  sbc   (P_INVSQR_LO),y
  sta   .c2c+1           ; x1*y1l

      clc               ; add the first two numbers of column 1
.c1a: lda   #0
.c1b: adc   #0
.c1c: adc   #0          ; add last number of column 1
      sta   Z1  ;8

.c2a: lda   #0          ; continue to first two numbers of column 2
.c2b: adc   #0

      clc
.c2c: adc   #0          ; add last number of column 2
      sta   Z2          ; X=z2
}

!ZONE MUL_U16U16
!MACRO MUL_U16U16 {
  lda   X0              ; set multiplier as x0
  sta   P_SQR_LO
  sta   P_SQR_HI
  eor   #$ff
  sta   P_INVSQR_LO
  sta   P_INVSQR_HI ;17

  ldy   Y0
  sec
  lda   (P_SQR_LO),Y
  sbc   (P_INVSQR_LO),Y ; note these two lines taken as 11 total
  sta   Z0              ; x0*y0l
  lda   (P_SQR_HI),Y
  sbc   (P_INVSQR_HI),Y
  sta   .c1a+1           ; x0*y0h;31 ;c1a means column 1, row a (partial product to be added later)

  ldy   Y1
;sec  ;notice that the high byte of sub above is always +ve
  lda   (P_SQR_LO),y
  sbc   (P_INVSQR_LO),y
  sta   .c1b+1           ; x0*y1l
  lda   (P_SQR_HI),y
  sbc   (P_INVSQR_HI),y
  sta   .c2a+1           ; x0*y1h;31

  lda   X1              ; set multiplier as x1
  sta   P_SQR_LO
  sta   P_SQR_HI
  eor   #$ff
  sta   P_INVSQR_LO
  sta   P_INVSQR_HI ;17

  ldy   Y0
;sec
  lda   (P_SQR_LO),y
  sbc   (P_INVSQR_LO),y
  sta   .c1c+1           ; x1*y0l
  lda   (P_SQR_HI),y
  sbc   (P_INVSQR_HI),y
  sta   .c2b+1           ; x1*y1h;31

  ldy   Y1
;sec
  lda   (P_SQR_LO),y
  sbc   (P_INVSQR_LO),y
  sta   .c2c+1           ; x1*y1l
  lda   (P_SQR_HI),y
  sbc   (P_INVSQR_HI),y
  tay                   ; x1*y1h;Y=z3, 30 cycles
;17+33+31+17+31+30=159 cycles for main multiply part

;jmp do_adds; can put do_adds in zp for a slight speed increase
;do_adds:
      clc               ; add the first two numbers of column 1
.c1a: lda   #0
.c1b: adc   #0
      sta   Z1  ;9

.c2a: lda   #0          ; continue to first two numbers of column 2
.c2b: adc   #0
      tax               ; X=z2, 6 cycles
      bcc .c1c  ;3/6 avg 4.5
        iny             ; z3++
      clc

.c1c: lda   #0          ; add last number of column 1
      adc   Z1
      sta   Z1  ;8

      txa               ; A=z2
.c2c: adc   #0          ; add last number of column 2
      tax               ; X=z2, 6
      bcc .fin;3/4 avg 3.5
        iny             ; z3++
  
.fin: stx   Z2          ; X=z2
      sty   Z3          ; Y=z3
}

!ZONE MULU16U16
MULU16U16
 +MUL_U16U16
  RTS

; convert x to unsigned and set a flag shift x down until z is less than 256 multiply by recipricol
!ZONE DIV_SHIFT_16
!MACRO DIV_SHIFT_16 NUM1, NUM2, NUM3 {
  LSR ; 16 bit divide by 2
  ROR   NUM1 
  LSR   NUM2+1
  ROR   NUM2
  LSR   NUM3+1
  ROR   NUM3
}

!ZONE DIVMUL_1608_TEMP
DIVMUL_1608_TEMP
  STA   P_SQR_LO  ; DIV_MUL_U16U08 ; set multiplier as x0
  STA   P_SQR_HI
  EOR   #$ff
  STA   P_INVSQR_LO
  STA   P_INVSQR_HI ;17

  SEC
  LDY   REC16LO,X ; Y=divisor
  LDA   (P_INVSQR_HI),Y ; temp
  LDA   (P_SQR_HI),Y
  SBC   (P_INVSQR_HI),Y
  STA   .C1A+1           ; x0*y0h;31 ;c1a means column 1, row a (partial product to be added later)

  LDY   REC16HI,X
  LDA   (P_INVSQR_LO),y ; temp
  LDA   (P_SQR_LO),y
  SBC   (P_INVSQR_LO),y
  CLC
.C1A: ADC   #0
  RTS
 
!ZONE DIVMUL_1608
DIVMUL_1608
  STA   P_SQR_LO  ; DIV_MUL_U16U08 ; set multiplier as x0
  STA   P_SQR_HI
  EOR   #$ff
  STA   P_INVSQR_LO
  STA   P_INVSQR_HI ;17

  SEC
  LDY   REC16LO,X ; Y=divisor
  LDA   (P_SQR_HI),Y
  SBC   (P_INVSQR_HI),Y
  STA   .C1A+1           ; x0*y0h;31 ;c1a means column 1, row a (partial product to be added later)

  LDY   REC16HI,X
  LDA   (P_SQR_LO),y
  SBC   (P_INVSQR_LO),y
  CLC
.C1A: ADC   #0
  RTS

!MACRO CLR_SCN B0 ,L0 {
  STA B0+(L0*320)+0,Y
  STA B0+(L0*320)+1,Y
  STA B0+(L0*320)+2,Y
  STA B0+(L0*320)+3,Y
  STA B0+(L0*320)+4,Y
  STA B0+(L0*320)+5,Y
  STA B0+(L0*320)+6,Y
  STA B0+(L0*320)+7,Y
}

!ZONE SWAP_SCREEN
SWAP_SCREEN
        LDA   #248
.LOOP     CMP   $D012
          BNE   .LOOP
;        INC   $D020
;        DEC   $D020
;        RTS



  LDA #0
  ; $A5  ; fill
  LDX   #32   ; count
  LDY   BANK
  CPY   #$70
  BEQ   BANK_0
  LDY   #$70
  STY   BANK
  LDY   #>SCR_TAB_BANK_2_HI
  STY   BANK_HI_HI
  JMP   SCREEN_CLEAR_BANK_01 ; JSR + RTS
BANK_0: 
  LDY   #$78
  STY   BANK
  LDY   #>SCR_TAB_BANK_1_HI
  STY   BANK_HI_HI
;   JMP   SCREEN_CLEAR_BANK_00 ; JSR + RTS
 
!ZONE SCREEN_CLEAR_BANK_00:
SCREEN_CLEAR_BANK_00:
.LOOP:
  LDY CLEAR_TAB-1,X
 +CLR_SCN SCRN0, 0
 +CLR_SCN SCRN0, 1
 +CLR_SCN SCRN0, 2
 +CLR_SCN SCRN0, 3
 +CLR_SCN SCRN0, 4
 +CLR_SCN SCRN0, 5
 +CLR_SCN SCRN0, 6
 +CLR_SCN SCRN0, 7
 +CLR_SCN SCRN0, 8
 +CLR_SCN SCRN0, 9
 +CLR_SCN SCRN0, 10
 +CLR_SCN SCRN0, 11
 +CLR_SCN SCRN0, 12
 +CLR_SCN SCRN0, 13
 +CLR_SCN SCRN0, 14
 +CLR_SCN SCRN0, 15
  DEX
  BEQ .EXIT
  JMP .LOOP
.EXIT
 LDA #>SCN0_FILL_UP_063_000
 LDX #>SCN0_COPY_UP_DOWN
 LDY #>FILL_PARTIAL_TAB_BANK_0_HI
 JMP SCREEN_CLEAR_BANK_01.SETUP_SCREEN_POINTERS

!ZONE SCREEN_CLEAR_BANK_01:
SCREEN_CLEAR_BANK_01:
.LOOP:
  LDY CLEAR_TAB-1,X
 +CLR_SCN SCRN1, 0
 +CLR_SCN SCRN1, 1
 +CLR_SCN SCRN1, 2
 +CLR_SCN SCRN1, 3
 +CLR_SCN SCRN1, 4
 +CLR_SCN SCRN1, 5
 +CLR_SCN SCRN1, 6
 +CLR_SCN SCRN1, 7
 +CLR_SCN SCRN1, 8
 +CLR_SCN SCRN1, 9
 +CLR_SCN SCRN1, 10
 +CLR_SCN SCRN1, 11
 +CLR_SCN SCRN1, 12
 +CLR_SCN SCRN1, 13
 +CLR_SCN SCRN1, 14
 +CLR_SCN SCRN1, 15
  DEX
  BEQ .EXIT
  JMP .LOOP
.EXIT
 LDA #>SCN1_FILL_UP_063_000
 LDX #>SCN1_COPY_UP_DOWN
 LDY #>FILL_PARTIAL_TAB_BANK_1_HI
.SETUP_SCREEN_POINTERS      
 STA FUC_SMC_RTS +2
 STA FUC_SMC_JSR +2
 STA FUC_SMC_STA +2
 STX CDC_SMC_JSR +2 
 STY FPC_SMC_SCN_HI +2
 RTS

!ZONE ROT_U16U08
!MACRO ROT_U16U08 {
  lda   X0              ; set multiplier as x0
  sta   P_SQR_LO
  sta   P_SQR_HI
  eor   #$ff
  sta   P_INVSQR_LO
  sta   P_INVSQR_HI ;17

  sec
  lda   (P_SQR_LO),Y
  sbc   (P_INVSQR_LO),Y ; note these two lines taken as 11 total
  lda   (P_SQR_HI),Y
  sbc   (P_INVSQR_HI),Y
  sta   .c1a+1           ; x0*y0h;31 ;c1a means column 1, row a (partial product to be added later)

  lda   X1              ; set multiplier as x1
  sta   P_SQR_LO
  sta   P_SQR_HI
  eor   #$ff
  sta   P_INVSQR_LO
  sta   P_INVSQR_HI ;17

;sec
  lda   (P_SQR_LO),y
  sbc   (P_INVSQR_LO),y
  TAX
 
  lda   (P_SQR_HI),y
  sbc   (P_INVSQR_HI),y
  TAY

  TXA
  clc               ; add the first two numbers of column 1
.c1a  adc   #0
  TAX
     
  bcc .exit
   INY
.exit 
}

!ZONE ROTS16S08
ROTS16S08 ; return z1/z2 in x/y
  LDX   #0      ; reset sign count
  
  ASL
  BCC .cont1
    INX         ; inc count
    EOR #$ff  ; negate #2
    ADC #0    ; negate #2 ; carry is set
.cont1:
  TAY
  
  LDA   X0+1    ; get x hi
  BPL   .cont2
    INX         ; inc count
    +NEG16  X0  ; negate x
.cont2:

  STX   .count+1  ;  TYA           ; store count  PHA           ; push on stack
 +ROT_U16U08
.count:
  LDA   #0      ; PLA           ; get stack
  LSR           ; AND #1
  BCC   .cont3  ;  BEQ   .cont3
    LDA   NEGTAB,Y
    TAY
    LDA   NEGTAB,X
    TAX
.cont3:
  RTS
  
!MACRO ROTATE_X {
;rotate around x-axis:
; y'' = y'*cos(C) + z'*sin(C)
; z'' = y'*sin(C) - z'*cos(C)
  LDX   Y_PNT_LO
  LDY   Y_PNT_HI
  STX   X0
  STY   X1
  LDA XCOSTMP
  JSR   ROTS16S08
  STX   YC_TEMP 
  STY   YC_TEMP+1

  LDX   Y_PNT_LO
  LDY   Y_PNT_HI
  STX   X0
  STY   X1
  LDA XSINTMP
  JSR   ROTS16S08
  STX   YS_TEMP
  STY   YS_TEMP+1
  
  LDX   Z_PNT_LO
  LDY   Z_PNT_HI
  STX   X0
  STY   X1
  LDA XCOSTMP
  JSR   ROTS16S08
  STX   ZC_TEMP
  STY   ZC_TEMP+1

  LDX   Z_PNT_LO
  LDY   Z_PNT_HI
  STX   X0
  STY   X1
  LDA XSINTMP
  JSR   ROTS16S08
  STX   ZS_TEMP
  STY   ZS_TEMP+1
   
  CLC
  LDA   YC_TEMP
  ADC   ZS_TEMP
  STA   Y_PNT_LO
  LDA   YC_TEMP+1
  ADC   ZS_TEMP+1
  STA   Y_PNT_HI
    
  SEC
  LDA   YS_TEMP
  SBC   ZC_TEMP
  STA   Z_PNT_LO
  LDA   YS_TEMP+1
  SBC   ZC_TEMP+1
  STA   Z_PNT_HI
}

!ZONE ROTATE_POINT
ROTATE_POINT
 
  LAX   X_ROT+1
  LDY   X_ROT
  JSR   SIN_COS
  STY   XCOSTMP
  STX   XSINTMP
 +ROTATE_X  

RTS


SIN_COS
  STY SIN+1
  STY COS+1
;  TXA
  CLC
  ADC #>SINTAB
  STA SIN+2
SIN:  LDY $ABCD
  INX
  TXA
  AND #3
  ADC #>SINTAB
  STA COS+2
COS:  LDX $ABCD
 RTS
  

;This leads to the following algorithm for doing signed multiplications:

;  multiply x and y as normal with some routine
;  if x<0 then subtract y from the high bytes of the result
;  if y<0 then subtract x from the high bytes

;And that's all there is to it!  Note that x and y are "backwards",
;i.e. subtract y, and not x, when x<0.  Some examples:

;  x=-1, y=16  Computer: x=$FF y=$10  (N=8)
;        x*y = $0FF0
;        Result is less than 256, so ignore high byte
;          Answer = $F0 = -16
;        OR: subtract y from high byte, 
;      Answer = $FFF0 = -16

;  x=2112 y=-365 Computer: x=$0840 y=$FE93   (N=16)
;        x*y = $08343CC0
;        y<0 so subtract x from high bytes (x*2^16), 
;      Answer = $F43CC0 = -770880

;  x=-31 y=-41 Computer: x=$E1 y=$D7
;        x*y = $BCF7
;        x<0 so subtract $D700 -> $E5F7
;        y<0 so subtract $E100 -> $04F7 = 1271 = correct!
 
;So, in summary, signed multiplies can be done with the same fast 
;multiply routine along with some _very simple_ post-processing.
;And if we know something about the result ahead of time (like if
;it's less than 256 or whatever) then it takes _no_ additional 
;processing!

BM_IRQ:
  dec $d020
 PHA
 TXA 
 PHA
 TYA 
 PHA 
 INC $D019    ;VIC Interrupt Request Register (IRR)

 LDA BANK
 STA $D018    ;VIC Memory Control Register
 
 LDA #$3B ; bitmap mode? - finding
 STA $D011    ;VIC Control Register 1

; LDA #$18
 LDA #%00011000 ; 0-2=SCRL 3=40/38 4=MCM 5-7=UNUSED
 STA $D016    ;VIC Control Register 2

 LDA #<TM_IRQ  ; raster interrupt setup - finding
 STA $fffe    ;IRQ
 LDA #>TM_IRQ  ; raster interrupt setup - finding
 STA $ffff    ;IRQ
  
 LDA #$E0     ; change screen to text at pos ba - finding
 STA $D012    ;Raster Position
 PLA 
 TAY
 PLA 
 TAX
 PLA
  inc $d020
NMI_NOP:
RTI ; This is the irq handler for the NMI. Just returns without acknowledge. This prevents subsequent NMI's from interfering.

TM_IRQ: 
  inc $d020
 PHA
 TXA 
 PHA
 TYA 
 PHA 
 INC $D019    ;VIC Interrupt Request Register (IRR)

 LDA #$7E
 STA $D018    ;VIC Memory Control Register

 LDA #$1B ; text mode? - finding 
 STA $D011    ;VIC Control Register 1

 LDA #$08
 STA $D016    ;VIC Control Register 2

 LDA #<BM_IRQ  ; raster interrupt setup - finding
 STA $FFFE    ;IRQ
 LDA #>BM_IRQ  ; raster interrupt setup - finding
 STA $FFFF    ;IRQ

 LDA #$FF     ; change screen to bitmap at pos 00 - finding
 STA $D012    ;Raster Position
 PLA 
 TAY
 PLA 
 TAX
 PLA  
  dec $d020
RTI


; colour - 1 byte
; number of hor lines - 1 byte
; start hor line -ve to +ve - 1 byte
;  number of ver lines to fill - 1 byte
;  number of ver lines to partially fill - 1 byte
;   list of or values for partial lines to fill - 1 byte

OBJECT_01
  !BYTE 3   ; hor lines
  !BYTE -1  ; hor line start
  !BYTE 20,3  ; full lines to fill/partial lines to fill
    !BYTE %11111100,2 ; partial pattern / count
    !BYTE %11110000,3 ; partial pattern / count
    !BYTE %11000000,4 ; partial pattern / count
  !BYTE 60,1  ; full lines to fill/partial lines to fill
    !BYTE %11000011,2 ; 00111100
  !BYTE 10,3  ; full lines to fill/partial lines to fill
    !BYTE %00111111,4 ; partial pattern / count
    !BYTE %00001111,5 ; partial pattern / count
    !BYTE %00000011,6 ; partial pattern / count

OBJECT_02
  !BYTE 5   ; hor lines
  !BYTE -2  ; hor line start
  !BYTE 10,1  ; full lines to fill/partial lines to fill
   !BYTE %11000011,7 ; partial pattern / count
  !BYTE 20,0  ; full lines to fill/partial lines to fill
  !BYTE 30,0  ; full lines to fill/partial lines to fill
  !BYTE 20,0  ; full lines to fill/partial lines to fill
  !BYTE 10,0  ; full lines to fill/partial lines to fill

!ZONE DRAW_OBJECT
DRAW_OBJECT
  LDY #0    ; object start pointer
;  LDA (OBJECT_PTR),Y ; colour
;  INY
;  STA COLOUR
  LDA (OBJECT_PTR),Y ; number of hor lines
  INY
  STA HOR_LINES
  LDA (OBJECT_PTR),Y ; start hor line -ve to +ve
  INY
  CLC
  ADC OBJECT_HPOS       ; object hor char pos
  STA HOR_START_LINE
  STY NEXT_PTR
.HLOOP
    LDA (OBJECT_PTR),Y ; number of full ver lines to fill
    INY
    STA VER_FULL_LINES
    LDA (OBJECT_PTR),Y ; number of partial ver lines to fill
    INY
    STA VER_PARTIAL_LINES

    ASL
    ADC #2  ; 2 characters previously read
    ADC NEXT_PTR
    STA NEXT_PTR

    LDX HOR_START_LINE  ; get hor char
    BMI .OFF_LEFT        ; negative so off left so jump to next hor pos
    CPX #32
    BCS .OFF_RIGHT       ; off right so exit
                  
  LDA SCR_HOR_CHAR_TAB,X
  STA COLUMN

  LDA VER_PARTIAL_LINES
  BEQ .NO_PARTIAL_COLUMN



.FUPC_VLOOP ; FILL_UP_PARTIAL_COLUMN
    LDA (OBJECT_PTR),Y  ; pattern
    INY
    STA AND_VAL

    EOR #$FF
    AND COLOUR
    STA ORA_VAL

    LDA (OBJECT_PTR),Y  ; count
    INY
    STA SAME_PATTERN_COUNT

.FUPC_HLOOP
      DEC VER_FULL_LINES
      LDX VER_FULL_LINES

FPC_SMC_SCN_HI  LDA   FILL_PARTIAL_TAB_BANK_0_HI,X 
                STA   SCR_HI 
                LDA   FILL_PARTIAL_TAB_BANK_0_LO,X
                STA   SCR_LO 

      sty YREG_BK
      LDY COLUMN

      LDA (SCR),Y
      AND AND_VAL
      ORA ORA_VAL
      STA (SCR),Y

      ldy YREG_BK

      dec SAME_PATTERN_COUNT
      bne .FUPC_HLOOP

    DEC VER_PARTIAL_LINES
    BNE .FUPC_VLOOP




.NO_PARTIAL_COLUMN
  LDX VER_FULL_LINES



            LDY FILL_JMP_TAB,X ; FILL_UP_COLUMN ; fill top 0-63 lines of specific column - X=SCREEN_LINE_UP ; *3 - table for 64 from 0 to 63 = value*3
            LDA #R_T_S                  ; opcode for rts
FUC_SMC_RTS STA SCN1_FILL_UP_063_000,Y  ; store in middle of fill
            LDX COLUMN
            LDA COLOUR
FUC_SMC_JSR JSR SCN1_FILL_UP_063_000    ; jump to fill start end at rts
            LDA #S_T_A                  ; opcode for sta
FUC_SMC_STA STA SCN1_FILL_UP_063_000,Y  ; replace rts with sta



    LDY NEXT_PTR
.OFF_LEFT
    INC HOR_START_LINE
    DEC HOR_LINES
    BNE .HLOOP

.OFF_RIGHT
  RTS

!ALIGN 255,0
FILL_PARTIAL_TAB_BANK_0_HI
!BYTE >SCN0_LN_063,>SCN0_LN_062,>SCN0_LN_061,>SCN0_LN_060
!BYTE >SCN0_LN_059,>SCN0_LN_058,>SCN0_LN_057,>SCN0_LN_056,>SCN0_LN_055,>SCN0_LN_054,>SCN0_LN_053,>SCN0_LN_052,>SCN0_LN_051,>SCN0_LN_050
!BYTE >SCN0_LN_049,>SCN0_LN_048,>SCN0_LN_047,>SCN0_LN_046,>SCN0_LN_045,>SCN0_LN_044,>SCN0_LN_043,>SCN0_LN_042,>SCN0_LN_041,>SCN0_LN_040
!BYTE >SCN0_LN_039,>SCN0_LN_038,>SCN0_LN_037,>SCN0_LN_036,>SCN0_LN_035,>SCN0_LN_034,>SCN0_LN_033,>SCN0_LN_032,>SCN0_LN_031,>SCN0_LN_030
!BYTE >SCN0_LN_029,>SCN0_LN_028,>SCN0_LN_027,>SCN0_LN_026,>SCN0_LN_025,>SCN0_LN_024,>SCN0_LN_023,>SCN0_LN_022,>SCN0_LN_021,>SCN0_LN_020
!BYTE >SCN0_LN_019,>SCN0_LN_018,>SCN0_LN_017,>SCN0_LN_016,>SCN0_LN_015,>SCN0_LN_014,>SCN0_LN_013,>SCN0_LN_012,>SCN0_LN_011,>SCN0_LN_010
!BYTE >SCN0_LN_009,>SCN0_LN_008,>SCN0_LN_007,>SCN0_LN_006,>SCN0_LN_005,>SCN0_LN_004,>SCN0_LN_003,>SCN0_LN_002,>SCN0_LN_001,>SCN0_LN_000

FILL_PARTIAL_TAB_BANK_0_LO
!BYTE <SCN0_LN_063,<SCN0_LN_062,<SCN0_LN_061,<SCN0_LN_060
!BYTE <SCN0_LN_059,<SCN0_LN_058,<SCN0_LN_057,<SCN0_LN_056,<SCN0_LN_055,<SCN0_LN_054,<SCN0_LN_053,<SCN0_LN_052,<SCN0_LN_051,<SCN0_LN_050
!BYTE <SCN0_LN_049,<SCN0_LN_048,<SCN0_LN_047,<SCN0_LN_046,<SCN0_LN_045,<SCN0_LN_044,<SCN0_LN_043,<SCN0_LN_042,<SCN0_LN_041,<SCN0_LN_040
!BYTE <SCN0_LN_039,<SCN0_LN_038,<SCN0_LN_037,<SCN0_LN_036,<SCN0_LN_035,<SCN0_LN_034,<SCN0_LN_033,<SCN0_LN_032,<SCN0_LN_031,<SCN0_LN_030
!BYTE <SCN0_LN_029,<SCN0_LN_028,<SCN0_LN_027,<SCN0_LN_026,<SCN0_LN_025,<SCN0_LN_024,<SCN0_LN_023,<SCN0_LN_022,<SCN0_LN_021,<SCN0_LN_020
!BYTE <SCN0_LN_019,<SCN0_LN_018,<SCN0_LN_017,<SCN0_LN_016,<SCN0_LN_015,<SCN0_LN_014,<SCN0_LN_013,<SCN0_LN_012,<SCN0_LN_011,<SCN0_LN_010
!BYTE <SCN0_LN_009,<SCN0_LN_008,<SCN0_LN_007,<SCN0_LN_006,<SCN0_LN_005,<SCN0_LN_004,<SCN0_LN_003,<SCN0_LN_002,<SCN0_LN_001,<SCN0_LN_000

!ALIGN 255,0
FILL_PARTIAL_TAB_BANK_1_HI
!BYTE >SCN1_LN_063,>SCN1_LN_062,>SCN1_LN_061,>SCN1_LN_060
!BYTE >SCN1_LN_059,>SCN1_LN_058,>SCN1_LN_057,>SCN1_LN_056,>SCN1_LN_055,>SCN1_LN_054,>SCN1_LN_053,>SCN1_LN_052,>SCN1_LN_051,>SCN1_LN_050
!BYTE >SCN1_LN_049,>SCN1_LN_048,>SCN1_LN_047,>SCN1_LN_046,>SCN1_LN_045,>SCN1_LN_044,>SCN1_LN_043,>SCN1_LN_042,>SCN1_LN_041,>SCN1_LN_040
!BYTE >SCN1_LN_039,>SCN1_LN_038,>SCN1_LN_037,>SCN1_LN_036,>SCN1_LN_035,>SCN1_LN_034,>SCN1_LN_033,>SCN1_LN_032,>SCN1_LN_031,>SCN1_LN_030
!BYTE >SCN1_LN_029,>SCN1_LN_028,>SCN1_LN_027,>SCN1_LN_026,>SCN1_LN_025,>SCN1_LN_024,>SCN1_LN_023,>SCN1_LN_022,>SCN1_LN_021,>SCN1_LN_020
!BYTE >SCN1_LN_019,>SCN1_LN_018,>SCN1_LN_017,>SCN1_LN_016,>SCN1_LN_015,>SCN1_LN_014,>SCN1_LN_013,>SCN1_LN_012,>SCN1_LN_011,>SCN1_LN_010
!BYTE >SCN1_LN_009,>SCN1_LN_008,>SCN1_LN_007,>SCN1_LN_006,>SCN1_LN_005,>SCN1_LN_004,>SCN1_LN_003,>SCN1_LN_002,>SCN1_LN_001,>SCN1_LN_000


!ALIGN 255,0
SCN0_FILL_UP_063_000
  STA SCN0_LN_063,X
  STA SCN0_LN_062,X
  STA SCN0_LN_061,X
  STA SCN0_LN_060,X

  STA SCN0_LN_059,X
  STA SCN0_LN_058,X
  STA SCN0_LN_057,X
  STA SCN0_LN_056,X
  STA SCN0_LN_055,X
  STA SCN0_LN_054,X
  STA SCN0_LN_053,X
  STA SCN0_LN_052,X
  STA SCN0_LN_051,X
  STA SCN0_LN_050,X

  STA SCN0_LN_049,X
  STA SCN0_LN_048,X
  STA SCN0_LN_047,X
  STA SCN0_LN_046,X
  STA SCN0_LN_045,X
  STA SCN0_LN_044,X
  STA SCN0_LN_043,X
  STA SCN0_LN_042,X
  STA SCN0_LN_041,X
  STA SCN0_LN_040,X

  STA SCN0_LN_039,X
  STA SCN0_LN_038,X
  STA SCN0_LN_037,X
  STA SCN0_LN_036,X
  STA SCN0_LN_035,X
  STA SCN0_LN_034,X
  STA SCN0_LN_033,X
  STA SCN0_LN_032,X
  STA SCN0_LN_031,X
  STA SCN0_LN_030,X

  STA SCN0_LN_029,X
  STA SCN0_LN_028,X
  STA SCN0_LN_027,X
  STA SCN0_LN_026,X
  STA SCN0_LN_025,X
  STA SCN0_LN_024,X
  STA SCN0_LN_023,X
  STA SCN0_LN_022,X
  STA SCN0_LN_021,X
  STA SCN0_LN_020,X

  STA SCN0_LN_019,X
  STA SCN0_LN_018,X
  STA SCN0_LN_017,X
  STA SCN0_LN_016,X
  STA SCN0_LN_015,X
  STA SCN0_LN_014,X
  STA SCN0_LN_013,X
  STA SCN0_LN_012,X
  STA SCN0_LN_011,X
  STA SCN0_LN_010,X

  STA SCN0_LN_009,X
  STA SCN0_LN_008,X
  STA SCN0_LN_007,X
  STA SCN0_LN_006,X
  STA SCN0_LN_005,X
  STA SCN0_LN_004,X
  STA SCN0_LN_003,X
  STA SCN0_LN_002,X
  STA SCN0_LN_001,X
  STA SCN0_LN_000,X
  RTS

!ALIGN 255,0
SCN1_FILL_UP_063_000
  STA SCN1_LN_063,X
  STA SCN1_LN_062,X
  STA SCN1_LN_061,X
  STA SCN1_LN_060,X

  STA SCN1_LN_059,X
  STA SCN1_LN_058,X
  STA SCN1_LN_057,X
  STA SCN1_LN_056,X
  STA SCN1_LN_055,X
  STA SCN1_LN_054,X
  STA SCN1_LN_053,X
  STA SCN1_LN_052,X
  STA SCN1_LN_051,X
  STA SCN1_LN_050,X

  STA SCN1_LN_049,X
  STA SCN1_LN_048,X
  STA SCN1_LN_047,X
  STA SCN1_LN_046,X
  STA SCN1_LN_045,X
  STA SCN1_LN_044,X
  STA SCN1_LN_043,X
  STA SCN1_LN_042,X
  STA SCN1_LN_041,X
  STA SCN1_LN_040,X

  STA SCN1_LN_039,X
  STA SCN1_LN_038,X
  STA SCN1_LN_037,X
  STA SCN1_LN_036,X
  STA SCN1_LN_035,X
  STA SCN1_LN_034,X
  STA SCN1_LN_033,X
  STA SCN1_LN_032,X
  STA SCN1_LN_031,X
  STA SCN1_LN_030,X

  STA SCN1_LN_029,X
  STA SCN1_LN_028,X
  STA SCN1_LN_027,X
  STA SCN1_LN_026,X
  STA SCN1_LN_025,X
  STA SCN1_LN_024,X
  STA SCN1_LN_023,X
  STA SCN1_LN_022,X
  STA SCN1_LN_021,X
  STA SCN1_LN_020,X

  STA SCN1_LN_019,X
  STA SCN1_LN_018,X
  STA SCN1_LN_017,X
  STA SCN1_LN_016,X
  STA SCN1_LN_015,X
  STA SCN1_LN_014,X
  STA SCN1_LN_013,X
  STA SCN1_LN_012,X
  STA SCN1_LN_011,X
  STA SCN1_LN_010,X

  STA SCN1_LN_009,X
  STA SCN1_LN_008,X
  STA SCN1_LN_007,X
  STA SCN1_LN_006,X
  STA SCN1_LN_005,X
  STA SCN1_LN_004,X
  STA SCN1_LN_003,X
  STA SCN1_LN_002,X
  STA SCN1_LN_001,X
  STA SCN1_LN_000,X
  RTS

!ALIGN 255,0
SCN0_FILL_DN_064_127
  STA SCN0_LN_064,X
  STA SCN0_LN_065,X
  STA SCN0_LN_066,X
  STA SCN0_LN_067,X
  STA SCN0_LN_068,X
  STA SCN0_LN_069,X
  
  STA SCN0_LN_070,X
  STA SCN0_LN_071,X
  STA SCN0_LN_072,X
  STA SCN0_LN_073,X
  STA SCN0_LN_074,X
  STA SCN0_LN_075,X
  STA SCN0_LN_076,X
  STA SCN0_LN_077,X
  STA SCN0_LN_078,X
  STA SCN0_LN_079,X

  STA SCN0_LN_080,X
  STA SCN0_LN_081,X
  STA SCN0_LN_082,X
  STA SCN0_LN_083,X
  STA SCN0_LN_084,X
  STA SCN0_LN_085,X
  STA SCN0_LN_086,X
  STA SCN0_LN_087,X
  STA SCN0_LN_088,X
  STA SCN0_LN_089,X

  STA SCN0_LN_090,X
  STA SCN0_LN_091,X
  STA SCN0_LN_092,X
  STA SCN0_LN_093,X
  STA SCN0_LN_094,X
  STA SCN0_LN_095,X
  STA SCN0_LN_096,X
  STA SCN0_LN_097,X
  STA SCN0_LN_098,X
  STA SCN0_LN_099,X

  STA SCN0_LN_100,X
  STA SCN0_LN_101,X
  STA SCN0_LN_102,X
  STA SCN0_LN_103,X
  STA SCN0_LN_104,X
  STA SCN0_LN_105,X
  STA SCN0_LN_106,X
  STA SCN0_LN_107,X
  STA SCN0_LN_108,X
  STA SCN0_LN_109,X

  STA SCN0_LN_110,X
  STA SCN0_LN_111,X
  STA SCN0_LN_112,X
  STA SCN0_LN_113,X
  STA SCN0_LN_114,X
  STA SCN0_LN_115,X
  STA SCN0_LN_116,X
  STA SCN0_LN_117,X
  STA SCN0_LN_118,X
  STA SCN0_LN_119,X

  STA SCN0_LN_120,X
  STA SCN0_LN_121,X
  STA SCN0_LN_122,X
  STA SCN0_LN_123,X
  STA SCN0_LN_124,X
  STA SCN0_LN_125,X
  STA SCN0_LN_126,X
  STA SCN0_LN_127,X

  RTS

!ALIGN 255,0
SCN1_FILL_DN_064_127
  STA SCN1_LN_064,X
  STA SCN1_LN_065,X
  STA SCN1_LN_066,X
  STA SCN1_LN_067,X
  STA SCN1_LN_068,X
  STA SCN1_LN_069,X
  
  STA SCN1_LN_070,X
  STA SCN1_LN_071,X
  STA SCN1_LN_072,X
  STA SCN1_LN_073,X
  STA SCN1_LN_074,X
  STA SCN1_LN_075,X
  STA SCN1_LN_076,X
  STA SCN1_LN_077,X
  STA SCN1_LN_078,X
  STA SCN1_LN_079,X

  STA SCN1_LN_080,X
  STA SCN1_LN_081,X
  STA SCN1_LN_082,X
  STA SCN1_LN_083,X
  STA SCN1_LN_084,X
  STA SCN1_LN_085,X
  STA SCN1_LN_086,X
  STA SCN1_LN_087,X
  STA SCN1_LN_088,X
  STA SCN1_LN_089,X

  STA SCN1_LN_090,X
  STA SCN1_LN_091,X
  STA SCN1_LN_092,X
  STA SCN1_LN_093,X
  STA SCN1_LN_094,X
  STA SCN1_LN_095,X
  STA SCN1_LN_096,X
  STA SCN1_LN_097,X
  STA SCN1_LN_098,X
  STA SCN1_LN_099,X

  STA SCN1_LN_100,X
  STA SCN1_LN_101,X
  STA SCN1_LN_102,X
  STA SCN1_LN_103,X
  STA SCN1_LN_104,X
  STA SCN1_LN_105,X
  STA SCN1_LN_106,X
  STA SCN1_LN_107,X
  STA SCN1_LN_108,X
  STA SCN1_LN_109,X

  STA SCN1_LN_110,X
  STA SCN1_LN_111,X
  STA SCN1_LN_112,X
  STA SCN1_LN_113,X
  STA SCN1_LN_114,X
  STA SCN1_LN_115,X
  STA SCN1_LN_116,X
  STA SCN1_LN_117,X
  STA SCN1_LN_118,X
  STA SCN1_LN_119,X

  STA SCN1_LN_120,X
  STA SCN1_LN_121,X
  STA SCN1_LN_122,X
  STA SCN1_LN_123,X
  STA SCN1_LN_124,X
  STA SCN1_LN_125,X
  STA SCN1_LN_126,X
  STA SCN1_LN_127,X

  RTS

!ALIGN 255,0
SCN0_COPY_UP_DOWN
  LDA SCN0_LN_063,X
  STA SCN0_LN_064,X
  LDA SCN0_LN_062,X
  STA SCN0_LN_065,X
  LDA SCN0_LN_061,X
  STA SCN0_LN_066,X
  LDA SCN0_LN_060,X
  STA SCN0_LN_067,X

  LDA SCN0_LN_059,X
  STA SCN0_LN_068,X
  LDA SCN0_LN_058,X
  STA SCN0_LN_069,X
  LDA SCN0_LN_057,X
  STA SCN0_LN_070,X
  LDA SCN0_LN_056,X
  STA SCN0_LN_071,X
  LDA SCN0_LN_055,X
  STA SCN0_LN_072,X
  LDA SCN0_LN_054,X
  STA SCN0_LN_073,X
  LDA SCN0_LN_053,X
  STA SCN0_LN_074,X
  LDA SCN0_LN_052,X
  STA SCN0_LN_075,X
  LDA SCN0_LN_051,X
  STA SCN0_LN_076,X
  LDA SCN0_LN_050,X
  STA SCN0_LN_077,X

  LDA SCN0_LN_049,X
  STA SCN0_LN_078,X
  LDA SCN0_LN_048,X
  STA SCN0_LN_079,X
  LDA SCN0_LN_047,X
  STA SCN0_LN_080,X
  LDA SCN0_LN_046,X
  STA SCN0_LN_081,X
  LDA SCN0_LN_045,X
  STA SCN0_LN_082,X
  LDA SCN0_LN_044,X
  STA SCN0_LN_083,X
  LDA SCN0_LN_043,X
  STA SCN0_LN_084,X
  LDA SCN0_LN_042,X
  STA SCN0_LN_085,X
  LDA SCN0_LN_041,X
  STA SCN0_LN_086,X
  LDA SCN0_LN_040,X
  STA SCN0_LN_087,X

  LDA SCN0_LN_039,X
  STA SCN0_LN_088,X
  LDA SCN0_LN_038,X
  STA SCN0_LN_089,X
  LDA SCN0_LN_037,X
  STA SCN0_LN_090,X
  LDA SCN0_LN_036,X
  STA SCN0_LN_091,X
  LDA SCN0_LN_035,X
  STA SCN0_LN_092,X
  LDA SCN0_LN_034,X
  STA SCN0_LN_093,X
  LDA SCN0_LN_033,X
  STA SCN0_LN_094,X
  LDA SCN0_LN_032,X
  STA SCN0_LN_095,X
  LDA SCN0_LN_031,X
  STA SCN0_LN_096,X
  LDA SCN0_LN_030,X
  STA SCN0_LN_097,X

  LDA SCN0_LN_029,X
  STA SCN0_LN_098,X
  LDA SCN0_LN_028,X
  STA SCN0_LN_099,X
  LDA SCN0_LN_027,X
  STA SCN0_LN_100,X
  LDA SCN0_LN_026,X
  STA SCN0_LN_101,X
  LDA SCN0_LN_025,X
  STA SCN0_LN_102,X
  LDA SCN0_LN_024,X
  STA SCN0_LN_103,X
  LDA SCN0_LN_023,X
  STA SCN0_LN_104,X
  LDA SCN0_LN_022,X
  STA SCN0_LN_105,X
  LDA SCN0_LN_021,X
  STA SCN0_LN_106,X
  LDA SCN0_LN_020,X
  STA SCN0_LN_107,X

  LDA SCN0_LN_019,X
  STA SCN0_LN_108,X
  LDA SCN0_LN_018,X
  STA SCN0_LN_109,X
  LDA SCN0_LN_017,X
  STA SCN0_LN_110,X
  LDA SCN0_LN_016,X
  STA SCN0_LN_111,X
  LDA SCN0_LN_015,X
  STA SCN0_LN_112,X
  LDA SCN0_LN_014,X
  STA SCN0_LN_113,X
  LDA SCN0_LN_013,X
  STA SCN0_LN_114,X
  LDA SCN0_LN_012,X
  STA SCN0_LN_115,X
  LDA SCN0_LN_011,X
  STA SCN0_LN_116,X
  LDA SCN0_LN_010,X
  STA SCN0_LN_117,X

  LDA SCN0_LN_009,X
  STA SCN0_LN_118,X
  LDA SCN0_LN_008,X
  STA SCN0_LN_119,X
  LDA SCN0_LN_007,X
  STA SCN0_LN_120,X
  LDA SCN0_LN_006,X
  STA SCN0_LN_121,X
  LDA SCN0_LN_005,X
  STA SCN0_LN_122,X
  LDA SCN0_LN_004,X
  STA SCN0_LN_123,X
  LDA SCN0_LN_003,X
  STA SCN0_LN_124,X
  LDA SCN0_LN_002,X
  STA SCN0_LN_125,X
  LDA SCN0_LN_001,X
  STA SCN0_LN_126,X
  LDA SCN0_LN_000,X
  STA SCN0_LN_127,X
  RTS

!ALIGN 255,0
SCN1_COPY_UP_DOWN
  LDA SCN1_LN_063,X
  STA SCN1_LN_064,X
  LDA SCN1_LN_062,X
  STA SCN1_LN_065,X
  LDA SCN1_LN_061,X
  STA SCN1_LN_066,X
  LDA SCN1_LN_060,X
  STA SCN1_LN_067,X

  LDA SCN1_LN_059,X
  STA SCN1_LN_068,X
  LDA SCN1_LN_058,X
  STA SCN1_LN_069,X
  LDA SCN1_LN_057,X
  STA SCN1_LN_070,X
  LDA SCN1_LN_056,X
  STA SCN1_LN_071,X
  LDA SCN1_LN_055,X
  STA SCN1_LN_072,X
  LDA SCN1_LN_054,X
  STA SCN1_LN_073,X
  LDA SCN1_LN_053,X
  STA SCN1_LN_074,X
  LDA SCN1_LN_052,X
  STA SCN1_LN_075,X
  LDA SCN1_LN_051,X
  STA SCN1_LN_076,X
  LDA SCN1_LN_050,X
  STA SCN1_LN_077,X

  LDA SCN1_LN_049,X
  STA SCN1_LN_078,X
  LDA SCN1_LN_048,X
  STA SCN1_LN_079,X
  LDA SCN1_LN_047,X
  STA SCN1_LN_080,X
  LDA SCN1_LN_046,X
  STA SCN1_LN_081,X
  LDA SCN1_LN_045,X
  STA SCN1_LN_082,X
  LDA SCN1_LN_044,X
  STA SCN1_LN_083,X
  LDA SCN1_LN_043,X
  STA SCN1_LN_084,X
  LDA SCN1_LN_042,X
  STA SCN1_LN_085,X
  LDA SCN1_LN_041,X
  STA SCN1_LN_086,X
  LDA SCN1_LN_040,X
  STA SCN1_LN_087,X

  LDA SCN1_LN_039,X
  STA SCN1_LN_088,X
  LDA SCN1_LN_038,X
  STA SCN1_LN_089,X
  LDA SCN1_LN_037,X
  STA SCN1_LN_090,X
  LDA SCN1_LN_036,X
  STA SCN1_LN_091,X
  LDA SCN1_LN_035,X
  STA SCN1_LN_092,X
  LDA SCN1_LN_034,X
  STA SCN1_LN_093,X
  LDA SCN1_LN_033,X
  STA SCN1_LN_094,X
  LDA SCN1_LN_032,X
  STA SCN1_LN_095,X
  LDA SCN1_LN_031,X
  STA SCN1_LN_096,X
  LDA SCN1_LN_030,X
  STA SCN1_LN_097,X

  LDA SCN1_LN_029,X
  STA SCN1_LN_098,X
  LDA SCN1_LN_028,X
  STA SCN1_LN_099,X
  LDA SCN1_LN_027,X
  STA SCN1_LN_100,X
  LDA SCN1_LN_026,X
  STA SCN1_LN_101,X
  LDA SCN1_LN_025,X
  STA SCN1_LN_102,X
  LDA SCN1_LN_024,X
  STA SCN1_LN_103,X
  LDA SCN1_LN_023,X
  STA SCN1_LN_104,X
  LDA SCN1_LN_022,X
  STA SCN1_LN_105,X
  LDA SCN1_LN_021,X
  STA SCN1_LN_106,X
  LDA SCN1_LN_020,X
  STA SCN1_LN_107,X

  LDA SCN1_LN_019,X
  STA SCN1_LN_108,X
  LDA SCN1_LN_018,X
  STA SCN1_LN_109,X
  LDA SCN1_LN_017,X
  STA SCN1_LN_110,X
  LDA SCN1_LN_016,X
  STA SCN1_LN_111,X
  LDA SCN1_LN_015,X
  STA SCN1_LN_112,X
  LDA SCN1_LN_014,X
  STA SCN1_LN_113,X
  LDA SCN1_LN_013,X
  STA SCN1_LN_114,X
  LDA SCN1_LN_012,X
  STA SCN1_LN_115,X
  LDA SCN1_LN_011,X
  STA SCN1_LN_116,X
  LDA SCN1_LN_010,X
  STA SCN1_LN_117,X

  LDA SCN1_LN_009,X
  STA SCN1_LN_118,X
  LDA SCN1_LN_008,X
  STA SCN1_LN_119,X
  LDA SCN1_LN_007,X
  STA SCN1_LN_120,X
  LDA SCN1_LN_006,X
  STA SCN1_LN_121,X
  LDA SCN1_LN_005,X
  STA SCN1_LN_122,X
  LDA SCN1_LN_004,X
  STA SCN1_LN_123,X
  LDA SCN1_LN_003,X
  STA SCN1_LN_124,X
  LDA SCN1_LN_002,X
  STA SCN1_LN_125,X
  LDA SCN1_LN_001,X
  STA SCN1_LN_126,X
  LDA SCN1_LN_000,X
  STA SCN1_LN_127,X
  RTS

!ZONE COPY_DOWN_COLUMN
COPY_DOWN_COLUMN
CDC_SMC_JSR JSR SCN0_COPY_UP_DOWN         ; jump to fill start end at rts
        RTS

R_T_S = $60
S_T_A = $9D
    
; colour - 1 byte
; number of hor lines - 1 byte
; start hor line -ve to +ve - 1 byte
;  number of ver lines to fill - 1 byte
;  number of ver lines to partially fill - 1 byte
;   list of and/or partial lines to fill - 2 bytes

!ALIGN 255,0
NUMBERS !BYTE $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
        !BYTE $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1A,$1B,$1C,$1D,$1E,$1F
        !BYTE $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2A,$2B,$2C,$2D,$2E,$2F
        !BYTE $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3A,$3B,$3C,$3D,$3E,$3F
        !BYTE $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4A,$4B,$4C,$4D,$4E,$4F
        !BYTE $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5A,$5B,$5C,$5D,$5E,$5F
        !BYTE $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6A,$6B,$6C,$6D,$6E,$6F
        !BYTE $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7A,$7B,$7C,$7D,$7E,$7F
        !BYTE $80,$81,$82,$83,$84,$85,$86,$87,$88,$89,$8A,$8B,$8C,$8D,$8E,$8F
        !BYTE $90,$91,$92,$93,$94,$95,$96,$97,$98,$99,$9A,$9B,$9C,$9D,$9E,$9F
        !BYTE $A0,$A1,$A2,$A3,$A4,$A5,$A6,$A7,$A8,$A9,$AA,$AB,$AC,$AD,$AE,$AF
        !BYTE $B0,$B1,$B2,$B3,$B4,$B5,$B6,$B7,$B8,$B9,$BA,$BB,$BC,$BD,$BE,$BF
        !BYTE $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7,$C8,$C9,$CA,$CB,$CC,$CD,$CE,$CF
        !BYTE $D0,$D1,$D2,$D3,$D4,$D5,$D6,$D7,$D8,$D9,$DA,$DB,$DC,$DD,$DE,$DF
        !BYTE $E0,$E1,$E2,$E3,$E4,$E5,$E6,$E7,$E8,$E9,$EA,$EB,$EC,$ED,$EE,$EF
        !BYTE $F0,$F1,$F2,$F3,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF

FILL_JMP_TAB
        !BYTE 0*3,1*3,2*3,3*3,4*3,5*3,6*3,7*3,8*3,9*3
        !BYTE 10*3,11*3,12*3,13*3,14*3,15*3,16*3,17*3,18*3,19*3
        !BYTE 20*3,21*3,22*3,23*3,24*3,25*3,26*3,27*3,28*3,29*3
        !BYTE 30*3,31*3,32*3,33*3,34*3,35*3,36*3,37*3,38*3,39*3
        !BYTE 40*3,41*3,42*3,43*3,44*3,45*3,46*3,47*3,48*3,49*3
        !BYTE 50*3,51*3,52*3,53*3,54*3,55*3,56*3,57*3,58*3,59*3
        !BYTE 60*3,61*3,62*3,63*3,64*3

COPY_JMP_TAB
;        !BYTE 0*6,1*3,2*6,3*6,4*6,5*6,6*6,7*6,8*6,9*6
;        !BYTE 10*6,11*6,12*6,13*6,14*6,15*6,16*6,17*6,18*6,19*6
;        !BYTE 20*6,21*6,22*6,23*6,24*6,25*6,26*6,27*6,28*6,29*6
;        !BYTE 30*6,31*6,32*6,33*6,34*6,35*6,36*6,37*6,38*6,39*6
;        !BYTE 40*6,41*6,42*6,43*6,44*6,45*6,46*6,47*6,48*6,49*6
;        !BYTE 50*6,51*6,52*6,53*6,54*6,55*6,56*6,57*6,58*6,59*6
;        !BYTE 60*6,61*6,62*6,63*6,64*6

!ALIGN 255,0
NEGTAB: !BYTE 255-000,255-001,255-002,255-003,255-004,255-005,255-006,255-007,255-008,255-009,255-010,255-011,255-012,255-013,255-014,255-015
        !BYTE 255-016,255-017,255-018,255-019,255-020,255-021,255-022,255-023,255-024,255-025,255-026,255-027,255-028,255-029,255-030,255-031
        !BYTE 255-032,255-033,255-034,255-035,255-036,255-037,255-038,255-039,255-040,255-041,255-042,255-043,255-044,255-045,255-046,255-047
        !BYTE 255-048,255-049,255-050,255-051,255-052,255-053,255-054,255-055,255-056,255-057,255-058,255-059,255-060,255-061,255-062,255-063
        !BYTE 255-064,255-065,255-066,255-067,255-068,255-069,255-070,255-071,255-072,255-073,255-074,255-075,255-076,255-077,255-078,255-079
        !BYTE 255-080,255-081,255-082,255-083,255-084,255-085,255-086,255-087,255-088,255-089,255-090,255-091,255-092,255-093,255-094,255-095
        !BYTE 255-096,255-097,255-098,255-099,255-100,255-101,255-102,255-103,255-104,255-105,255-106,255-107,255-108,255-109,255-110,255-111
        !BYTE 255-112,255-113,255-114,255-115,255-116,255-117,255-118,255-119,255-120,255-121,255-122,255-123,255-124,255-125,255-126,255-127
        !BYTE 255-128,255-129,255-130,255-131,255-132,255-133,255-134,255-135,255-136,255-137,255-138,255-139,255-140,255-141,255-142,255-143
        !BYTE 255-144,255-145,255-146,255-147,255-148,255-149,255-150,255-151,255-152,255-153,255-154,255-155,255-156,255-157,255-158,255-159
        !BYTE 255-160,255-161,255-162,255-163,255-164,255-165,255-166,255-167,255-168,255-169,255-170,255-171,255-172,255-173,255-174,255-175
        !BYTE 255-176,255-177,255-178,255-179,255-180,255-181,255-182,255-183,255-184,255-185,255-186,255-187,255-188,255-189,255-190,255-191
        !BYTE 255-192,255-193,255-194,255-195,255-196,255-197,255-198,255-199,255-200,255-201,255-202,255-203,255-204,255-205,255-206,255-207
        !BYTE 255-208,255-209,255-210,255-211,255-212,255-213,255-214,255-215,255-216,255-217,255-218,255-219,255-220,255-221,255-222,255-223
        !BYTE 255-224,255-225,255-226,255-227,255-228,255-229,255-230,255-231,255-232,255-233,255-234,255-235,255-236,255-237,255-238,255-239
        !BYTE 255-240,255-241,255-242,255-243,255-244,255-245,255-246,255-247,255-248,255-249,255-250,255-251,255-252,255-253,255-254,255-255   


;!ALIGN 255,0
REC16LO                                                         
!BYTE 255,000,085,000,051,170,146,000,113,153,069,085,177,073,017,000
!BYTE 015,056,121,204,048,162,033,170,061,216,123,036,211,136,066,000
!BYTE 193,135,080,028,235,188,144,102,062,024,244,209,176,144,114,085
!BYTE 057,030,005,236,212,189,167,146,125,105,086,068,050,033,016,000
!BYTE 240,224,210,195,181,168,155,142,129,117,105,094,083,072,061,051
!BYTE 041,031,021,012,003,250,241,232,224,216,208,200,192,185,177,170
!BYTE 163,156,149,143,136,130,124,118,112,106,100,094,089,083,078,073
!BYTE 067,062,057,052,048,043,038,034,029,025,020,016,012,008,004,000
!BYTE 252,248,244,240,236,233,229,225,222,218,215,212,208,205,202,199
!BYTE 195,192,189,186,183,180,178,175,172,169,166,164,161,158,156,153
!BYTE 151,148,146,143,141,138,136,134,131,129,127,125,122,120,118,116
!BYTE 114,112,110,108,106,104,102,100,098,096,094,092,090,088,087,085
!BYTE 083,081,080,078,076,074,073,071,070,068,066,065,063,062,060,059
!BYTE 057,056,054,053,051,050,048,047,046,044,043,041,040,039,037,036
!BYTE 035,033,032,031,030,028,027,026,025,024,022,021,020,019,018,017
!BYTE 015,014,013,012,011,010,009,008,007,006,005,004,003,002,001,000

REC16HI                                                         
!BYTE 255,128,085,064,051,042,036,032,028,025,023,021,019,018,017,016
!BYTE 015,014,013,012,012,011,011,010,010,009,009,009,008,008,008,008
!BYTE 007,007,007,007,006,006,006,006,006,006,005,005,005,005,005,005
!BYTE 005,005,005,004,004,004,004,004,004,004,004,004,004,004,004,004
!BYTE 003,003,003,003,003,003,003,003,003,003,003,003,003,003,003,003
!BYTE 003,003,003,003,003,002,002,002,002,002,002,002,002,002,002,002
!BYTE 002,002,002,002,002,002,002,002,002,002,002,002,002,002,002,002
!BYTE 002,002,002,002,002,002,002,002,002,002,002,002,002,002,002,002
!BYTE 001,001,001,001,001,001,001,001,001,001,001,001,001,001,001,001
!BYTE 001,001,001,001,001,001,001,001,001,001,001,001,001,001,001,001
!BYTE 001,001,001,001,001,001,001,001,001,001,001,001,001,001,001,001
!BYTE 001,001,001,001,001,001,001,001,001,001,001,001,001,001,001,001
!BYTE 001,001,001,001,001,001,001,001,001,001,001,001,001,001,001,001
!BYTE 001,001,001,001,001,001,001,001,001,001,001,001,001,001,001,001
!BYTE 001,001,001,001,001,001,001,001,001,001,001,001,001,001,001,001
!BYTE 001,001,001,001,001,001,001,001,001,001,001,001,001,001,001,001

;!ALIGN 255,0
SCR_TAB_BANK_1_HI:
!BYTE >SCN0_LN_000,>SCN0_LN_001,>SCN0_LN_002,>SCN0_LN_003,>SCN0_LN_004,>SCN0_LN_005,>SCN0_LN_006,>SCN0_LN_007,>SCN0_LN_008,>SCN0_LN_009
!BYTE >SCN0_LN_010,>SCN0_LN_011,>SCN0_LN_012,>SCN0_LN_013,>SCN0_LN_014,>SCN0_LN_015,>SCN0_LN_016,>SCN0_LN_017,>SCN0_LN_018,>SCN0_LN_019
!BYTE >SCN0_LN_020,>SCN0_LN_021,>SCN0_LN_022,>SCN0_LN_023,>SCN0_LN_024,>SCN0_LN_025,>SCN0_LN_026,>SCN0_LN_027,>SCN0_LN_028,>SCN0_LN_029
!BYTE >SCN0_LN_030,>SCN0_LN_031,>SCN0_LN_032,>SCN0_LN_033,>SCN0_LN_034,>SCN0_LN_035,>SCN0_LN_036,>SCN0_LN_037,>SCN0_LN_038,>SCN0_LN_039
!BYTE >SCN0_LN_040,>SCN0_LN_041,>SCN0_LN_042,>SCN0_LN_043,>SCN0_LN_044,>SCN0_LN_045,>SCN0_LN_046,>SCN0_LN_047,>SCN0_LN_048,>SCN0_LN_049
!BYTE >SCN0_LN_050,>SCN0_LN_051,>SCN0_LN_052,>SCN0_LN_053,>SCN0_LN_054,>SCN0_LN_055,>SCN0_LN_056,>SCN0_LN_057,>SCN0_LN_058,>SCN0_LN_059
!BYTE >SCN0_LN_060,>SCN0_LN_061,>SCN0_LN_062,>SCN0_LN_063,>SCN0_LN_064,>SCN0_LN_065,>SCN0_LN_066,>SCN0_LN_067,>SCN0_LN_068,>SCN0_LN_069
!BYTE >SCN0_LN_070,>SCN0_LN_071,>SCN0_LN_072,>SCN0_LN_073,>SCN0_LN_074,>SCN0_LN_075,>SCN0_LN_076,>SCN0_LN_077,>SCN0_LN_078,>SCN0_LN_079
!BYTE >SCN0_LN_080,>SCN0_LN_081,>SCN0_LN_082,>SCN0_LN_083,>SCN0_LN_084,>SCN0_LN_085,>SCN0_LN_086,>SCN0_LN_087,>SCN0_LN_088,>SCN0_LN_089
!BYTE >SCN0_LN_090,>SCN0_LN_091,>SCN0_LN_092,>SCN0_LN_093,>SCN0_LN_094,>SCN0_LN_095,>SCN0_LN_096,>SCN0_LN_097,>SCN0_LN_098,>SCN0_LN_099
!BYTE >SCN0_LN_100,>SCN0_LN_101,>SCN0_LN_102,>SCN0_LN_103,>SCN0_LN_104,>SCN0_LN_105,>SCN0_LN_106,>SCN0_LN_107,>SCN0_LN_108,>SCN0_LN_109
!BYTE >SCN0_LN_110,>SCN0_LN_111,>SCN0_LN_112,>SCN0_LN_113,>SCN0_LN_114,>SCN0_LN_115,>SCN0_LN_116,>SCN0_LN_117,>SCN0_LN_118,>SCN0_LN_119
!BYTE >SCN0_LN_120,>SCN0_LN_121,>SCN0_LN_122,>SCN0_LN_123,>SCN0_LN_124,>SCN0_LN_125,>SCN0_LN_126,>SCN0_LN_127

SCR_TAB3:
!BYTE $00,$00,$00,$00,$08,$08,$08,$08
!BYTE $10,$10,$10,$10,$18,$18,$18,$18
!BYTE $20,$20,$20,$20,$28,$28,$28,$28
!BYTE $30,$30,$30,$30,$38,$38,$38,$38
!BYTE $40,$40,$40,$40,$48,$48,$48,$48
!BYTE $50,$50,$50,$50,$58,$58,$58,$58
!BYTE $60,$60,$60,$60,$68,$68,$68,$68
!BYTE $70,$70,$70,$70,$78,$78,$78,$78
!BYTE $80,$80,$80,$80,$88,$88,$88,$88
!BYTE $90,$90,$90,$90,$98,$98,$98,$98
!BYTE $A0,$A0,$A0,$A0,$A8,$A8,$A8,$A8
!BYTE $B0,$B0,$B0,$B0,$B8,$B8,$B8,$B8
!BYTE $C0,$C0,$C0,$C0,$C8,$C8,$C8,$C8
!BYTE $D0,$D0,$D0,$D0,$D8,$D8,$D8,$D8
!BYTE $E0,$E0,$E0,$E0,$E8,$E8,$E8,$E8
!BYTE $F0,$F0,$F0,$F0,$F8,$F8,$F8,$F8

SCR_HOR_CHAR_TAB:
!BYTE 8*0,8*1,8*2,8*3,8*4,8*5,8*6,8*7,8*8,8*9
!BYTE 8*10,8*11,8*12,8*13,8*14,8*15,8*16,8*17,8*18,8*19
!BYTE 8*20,8*21,8*22,8*23,8*24,8*25,8*26,8*27,8*28,8*29
!BYTE 8*30,8*31

;!ALIGN 255,0
SCR_TAB_BANK_1_LO:
!BYTE <SCN0_LN_000,<SCN0_LN_001,<SCN0_LN_002,<SCN0_LN_003,<SCN0_LN_004,<SCN0_LN_005,<SCN0_LN_006,<SCN0_LN_007,<SCN0_LN_008,<SCN0_LN_009
!BYTE <SCN0_LN_010,<SCN0_LN_011,<SCN0_LN_012,<SCN0_LN_013,<SCN0_LN_014,<SCN0_LN_015,<SCN0_LN_016,<SCN0_LN_017,<SCN0_LN_018,<SCN0_LN_019
!BYTE <SCN0_LN_020,<SCN0_LN_021,<SCN0_LN_022,<SCN0_LN_023,<SCN0_LN_024,<SCN0_LN_025,<SCN0_LN_026,<SCN0_LN_027,<SCN0_LN_028,<SCN0_LN_029
!BYTE <SCN0_LN_030,<SCN0_LN_031,<SCN0_LN_032,<SCN0_LN_033,<SCN0_LN_034,<SCN0_LN_035,<SCN0_LN_036,<SCN0_LN_037,<SCN0_LN_038,<SCN0_LN_039
!BYTE <SCN0_LN_040,<SCN0_LN_041,<SCN0_LN_042,<SCN0_LN_043,<SCN0_LN_044,<SCN0_LN_045,<SCN0_LN_046,<SCN0_LN_047,<SCN0_LN_048,<SCN0_LN_049
!BYTE <SCN0_LN_050,<SCN0_LN_051,<SCN0_LN_052,<SCN0_LN_053,<SCN0_LN_054,<SCN0_LN_055,<SCN0_LN_056,<SCN0_LN_057,<SCN0_LN_058,<SCN0_LN_059
!BYTE <SCN0_LN_060,<SCN0_LN_061,<SCN0_LN_062,<SCN0_LN_063,<SCN0_LN_064,<SCN0_LN_065,<SCN0_LN_066,<SCN0_LN_067,<SCN0_LN_068,<SCN0_LN_069
!BYTE <SCN0_LN_070,<SCN0_LN_071,<SCN0_LN_072,<SCN0_LN_073,<SCN0_LN_074,<SCN0_LN_075,<SCN0_LN_076,<SCN0_LN_077,<SCN0_LN_078,<SCN0_LN_079
!BYTE <SCN0_LN_080,<SCN0_LN_081,<SCN0_LN_082,<SCN0_LN_083,<SCN0_LN_084,<SCN0_LN_085,<SCN0_LN_086,<SCN0_LN_087,<SCN0_LN_088,<SCN0_LN_089
!BYTE <SCN0_LN_090,<SCN0_LN_091,<SCN0_LN_092,<SCN0_LN_093,<SCN0_LN_094,<SCN0_LN_095,<SCN0_LN_096,<SCN0_LN_097,<SCN0_LN_098,<SCN0_LN_099
!BYTE <SCN0_LN_100,<SCN0_LN_101,<SCN0_LN_102,<SCN0_LN_103,<SCN0_LN_104,<SCN0_LN_105,<SCN0_LN_106,<SCN0_LN_107,<SCN0_LN_108,<SCN0_LN_109
!BYTE <SCN0_LN_110,<SCN0_LN_111,<SCN0_LN_112,<SCN0_LN_113,<SCN0_LN_114,<SCN0_LN_115,<SCN0_LN_116,<SCN0_LN_117,<SCN0_LN_118,<SCN0_LN_119
!BYTE <SCN0_LN_120,<SCN0_LN_121,<SCN0_LN_122,<SCN0_LN_123,<SCN0_LN_124,<SCN0_LN_125,<SCN0_LN_126,<SCN0_LN_127


SCR_AND_TAB:
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC
!BYTE $3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC,$3F,$CF,$F3,$FC

;!ALIGN 255,0
SCR_TAB_BANK_2_HI:
!BYTE >SCN1_LN_000,>SCN1_LN_001,>SCN1_LN_002,>SCN1_LN_003,>SCN1_LN_004,>SCN1_LN_005,>SCN1_LN_006,>SCN1_LN_007,>SCN1_LN_008,>SCN1_LN_009
!BYTE >SCN1_LN_010,>SCN1_LN_011,>SCN1_LN_012,>SCN1_LN_013,>SCN1_LN_014,>SCN1_LN_015,>SCN1_LN_016,>SCN1_LN_017,>SCN1_LN_018,>SCN1_LN_019
!BYTE >SCN1_LN_020,>SCN1_LN_021,>SCN1_LN_022,>SCN1_LN_023,>SCN1_LN_024,>SCN1_LN_025,>SCN1_LN_026,>SCN1_LN_027,>SCN1_LN_028,>SCN1_LN_029
!BYTE >SCN1_LN_030,>SCN1_LN_031,>SCN1_LN_032,>SCN1_LN_033,>SCN1_LN_034,>SCN1_LN_035,>SCN1_LN_036,>SCN1_LN_037,>SCN1_LN_038,>SCN1_LN_039
!BYTE >SCN1_LN_040,>SCN1_LN_041,>SCN1_LN_042,>SCN1_LN_043,>SCN1_LN_044,>SCN1_LN_045,>SCN1_LN_046,>SCN1_LN_047,>SCN1_LN_048,>SCN1_LN_049
!BYTE >SCN1_LN_050,>SCN1_LN_051,>SCN1_LN_052,>SCN1_LN_053,>SCN1_LN_054,>SCN1_LN_055,>SCN1_LN_056,>SCN1_LN_057,>SCN1_LN_058,>SCN1_LN_059
!BYTE >SCN1_LN_060,>SCN1_LN_061,>SCN1_LN_062,>SCN1_LN_063,>SCN1_LN_064,>SCN1_LN_065,>SCN1_LN_066,>SCN1_LN_067,>SCN1_LN_068,>SCN1_LN_069
!BYTE >SCN1_LN_070,>SCN1_LN_071,>SCN1_LN_072,>SCN1_LN_073,>SCN1_LN_074,>SCN1_LN_075,>SCN1_LN_076,>SCN1_LN_077,>SCN1_LN_078,>SCN1_LN_079
!BYTE >SCN1_LN_080,>SCN1_LN_081,>SCN1_LN_082,>SCN1_LN_083,>SCN1_LN_084,>SCN1_LN_085,>SCN1_LN_086,>SCN1_LN_087,>SCN1_LN_088,>SCN1_LN_089
!BYTE >SCN1_LN_090,>SCN1_LN_091,>SCN1_LN_092,>SCN1_LN_093,>SCN1_LN_094,>SCN1_LN_095,>SCN1_LN_096,>SCN1_LN_097,>SCN1_LN_098,>SCN1_LN_099
!BYTE >SCN1_LN_100,>SCN1_LN_101,>SCN1_LN_102,>SCN1_LN_103,>SCN1_LN_104,>SCN1_LN_105,>SCN1_LN_106,>SCN1_LN_107,>SCN1_LN_108,>SCN1_LN_109
!BYTE >SCN1_LN_110,>SCN1_LN_111,>SCN1_LN_112,>SCN1_LN_113,>SCN1_LN_114,>SCN1_LN_115,>SCN1_LN_116,>SCN1_LN_117,>SCN1_LN_118,>SCN1_LN_119
!BYTE >SCN1_LN_120,>SCN1_LN_121,>SCN1_LN_122,>SCN1_LN_123,>SCN1_LN_124,>SCN1_LN_125,>SCN1_LN_126,>SCN1_LN_127

SCR_OR_TAB:
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03
!BYTE $C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03,$C0,$30,$0C,$03

CLEAR_TAB:
 !BYTE 00*8,01*8,02*8,03*8,04*8,05*8,06*8,07*8,08*8,09*8,10*8,11*8,12*8,13*8,14*8,15*8,16*8,17*8,18*8,19*8,20*8,21*8,22*8,23*8,24*8,25*8,26*8,27*8,28*8,29*8,30*8,31*8
    
!ALIGN 255,0
sqrlo:                                                           
!BYTE 000,000,001,002,004,006,009,012,016,020,025,030,036,042,049,056
!BYTE 064,072,081,090,100,110,121,132,144,156,169,182,196,210,225,240
!BYTE 000,016,033,050,068,086,105,124,144,164,185,206,228,250,017,040
!BYTE 064,088,113,138,164,190,217,244,016,044,073,102,132,162,193,224
!BYTE 000,032,065,098,132,166,201,236,016,052,089,126,164,202,241,024
!BYTE 064,104,145,186,228,014,057,100,144,188,233,022,068,114,161,208
!BYTE 000,048,097,146,196,246,041,092,144,196,249,046,100,154,209,008
!BYTE 064,120,177,234,036,094,153,212,016,076,137,198,004,066,129,192
!BYTE 000,064,129,194,004,070,137,204,016,084,153,222,036,106,177,248
!BYTE 064,136,209,026,100,174,249,068,144,220,041,118,196,018,097,176
!BYTE 000,080,161,242,068,150,233,060,144,228,057,142,228,058,145,232
!BYTE 064,152,241,074,164,254,089,180,016,108,201,038,132,226,065,160
!BYTE 000,096,193,034,132,230,073,172,016,116,217,062,164,010,113,216
!BYTE 064,168,017,122,228,078,185,036,144,252,105,214,068,178,033,144
!BYTE 000,112,225,082,196,054,169,028,144,004,121,238,100,218,081,200
!BYTE 064,184,049,170,036,158,025,148,016,140,009,134,004,130,001,128
!BYTE 000,128,001,130,004,134,009,140,016,148,025,158,036,170,049,184
!BYTE 064,200,081,218,100,238,121,004,144,028,169,054,196,082,225,112
!BYTE 000,144,033,178,068,214,105,252,144,036,185,078,228,122,017,168
!BYTE 064,216,113,010,164,062,217,116,016,172,073,230,132,034,193,096
!BYTE 000,160,065,226,132,038,201,108,016,180,089,254,164,074,241,152 
!BYTE 064,232,145,058,228,142,057,228,144,060,233,150,068,242,161,080 
!BYTE 000,176,097,018,196,118,041,220,144,068,249,174,100,026,209,136 
!BYTE 064,248,177,106,036,222,153,084,016,204,137,070,004,194,129,064 
!BYTE 000,192,129,066,004,198,137,076,016,212,153,094,036,234,177,120 
!BYTE 064,008,209,154,100,046,249,196,144,092,041,246,196,146,097,048 
!BYTE 000,208,161,114,068,022,233,188,144,100,057,014,228,186,145,104 
!BYTE 064,024,241,202,164,126,089,052,016,236,201,166,132,098,065,032 
!BYTE 000,224,193,162,132,102,073,044,016,244,217,190,164,138,113,088 
!BYTE 064,040,017,250,228,206,185,164,144,124,105,086,068,050,033,016 
!BYTE 000,240,225,210,196,182,169,156,144,132,121,110,100,090,081,072 
!BYTE 064,056,049,042,036,030,025,020,016,012,009,006,004,002,001,000 

!ALIGN 255,0
sqrhi:                                                          
!BYTE 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
!BYTE 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
!BYTE 001,001,001,001,001,001,001,001,001,001,001,001,001,001,002,002
!BYTE 002,002,002,002,002,002,002,002,003,003,003,003,003,003,003,003
!BYTE 004,004,004,004,004,004,004,004,005,005,005,005,005,005,005,006
!BYTE 006,006,006,006,006,007,007,007,007,007,007,008,008,008,008,008
!BYTE 009,009,009,009,009,009,010,010,010,010,010,011,011,011,011,012
!BYTE 012,012,012,012,013,013,013,013,014,014,014,014,015,015,015,015
!BYTE 016,016,016,016,017,017,017,017,018,018,018,018,019,019,019,019
!BYTE 020,020,020,021,021,021,021,022,022,022,023,023,023,024,024,024
!BYTE 025,025,025,025,026,026,026,027,027,027,028,028,028,029,029,029
!BYTE 030,030,030,031,031,031,032,032,033,033,033,034,034,034,035,035
!BYTE 036,036,036,037,037,037,038,038,039,039,039,040,040,041,041,041
!BYTE 042,042,043,043,043,044,044,045,045,045,046,046,047,047,048,048
!BYTE 049,049,049,050,050,051,051,052,052,053,053,053,054,054,055,055
!BYTE 056,056,057,057,058,058,059,059,060,060,061,061,062,062,063,063
!BYTE 064,064,065,065,066,066,067,067,068,068,069,069,070,070,071,071
!BYTE 072,072,073,073,074,074,075,076,076,077,077,078,078,079,079,080
!BYTE 081,081,082,082,083,083,084,084,085,086,086,087,087,088,089,089
!BYTE 090,090,091,092,092,093,093,094,095,095,096,096,097,098,098,099
!BYTE 100,100,101,101,102,103,103,104,105,105,106,106,107,108,108,109
!BYTE 110,110,111,112,112,113,114,114,115,116,116,117,118,118,119,120
!BYTE 121,121,122,123,123,124,125,125,126,127,127,128,129,130,130,131
!BYTE 132,132,133,134,135,135,136,137,138,138,139,140,141,141,142,143
!BYTE 144,144,145,146,147,147,148,149,150,150,151,152,153,153,154,155
!BYTE 156,157,157,158,159,160,160,161,162,163,164,164,165,166,167,168
!BYTE 169,169,170,171,172,173,173,174,175,176,177,178,178,179,180,181
!BYTE 182,183,183,184,185,186,187,188,189,189,190,191,192,193,194,195
!BYTE 196,196,197,198,199,200,201,202,203,203,204,205,206,207,208,209
!BYTE 210,211,212,212,213,214,215,216,217,218,219,220,221,222,223,224
!BYTE 225,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239
!BYTE 240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255

!ALIGN 255,0
negsqrlo:                                                          
!BYTE 128,001,130,004,134,009,140,016,148,025,158,036,170,049,184,064
!BYTE 200,081,218,100,238,121,004,144,028,169,054,196,082,225,112,000
!BYTE 144,033,178,068,214,105,252,144,036,185,078,228,122,017,168,064
!BYTE 216,113,010,164,062,217,116,016,172,073,230,132,034,193,096,000
!BYTE 160,065,226,132,038,201,108,016,180,089,254,164,074,241,152,064
!BYTE 232,145,058,228,142,057,228,144,060,233,150,068,242,161,080,000
!BYTE 176,097,018,196,118,041,220,144,068,249,174,100,026,209,136,064
!BYTE 248,177,106,036,222,153,084,016,204,137,070,004,194,129,064,000
!BYTE 192,129,066,004,198,137,076,016,212,153,094,036,234,177,120,064
!BYTE 008,209,154,100,046,249,196,144,092,041,246,196,146,097,048,000
!BYTE 208,161,114,068,022,233,188,144,100,057,014,228,186,145,104,064
!BYTE 024,241,202,164,126,089,052,016,236,201,166,132,098,065,032,000
!BYTE 224,193,162,132,102,073,044,016,244,217,190,164,138,113,088,064
!BYTE 040,017,250,228,206,185,164,144,124,105,086,068,050,033,016,000
!BYTE 240,225,210,196,182,169,156,144,132,121,110,100,090,081,072,064
!BYTE 056,049,042,036,030,025,020,016,012,009,006,004,002,001,000,000
!BYTE 000,001,002,004,006,009,012,016,020,025,030,036,042,049,056,064
!BYTE 072,081,090,100,110,121,132,144,156,169,182,196,210,225,240,000
!BYTE 016,033,050,068,086,105,124,144,164,185,206,228,250,017,040,064
!BYTE 088,113,138,164,190,217,244,016,044,073,102,132,162,193,224,000
!BYTE 032,065,098,132,166,201,236,016,052,089,126,164,202,241,024,064
!BYTE 104,145,186,228,014,057,100,144,188,233,022,068,114,161,208,000
!BYTE 048,097,146,196,246,041,092,144,196,249,046,100,154,209,008,064
!BYTE 120,177,234,036,094,153,212,016,076,137,198,004,066,129,192,000
!BYTE 064,129,194,004,070,137,204,016,084,153,222,036,106,177,248,064
!BYTE 136,209,026,100,174,249,068,144,220,041,118,196,018,097,176,000
!BYTE 080,161,242,068,150,233,060,144,228,057,142,228,058,145,232,064
!BYTE 152,241,074,164,254,089,180,016,108,201,038,132,226,065,160,000
!BYTE 096,193,034,132,230,073,172,016,116,217,062,164,010,113,216,064
!BYTE 168,017,122,228,078,185,036,144,252,105,214,068,178,033,144,000
!BYTE 112,225,082,196,054,169,028,144,004,121,238,100,218,081,200,064
!BYTE 184,049,170,036,158,025,148,016,140,009,134,004,130,001,128,000

!ALIGN 255,0
negsqrhi:
!BYTE 063,063,062,062,061,061,060,060,059,059,058,058,057,057,056,056
!BYTE 055,055,054,054,053,053,053,052,052,051,051,050,050,049,049,049
!BYTE 048,048,047,047,046,046,045,045,045,044,044,043,043,043,042,042
!BYTE 041,041,041,040,040,039,039,039,038,038,037,037,037,036,036,036
!BYTE 035,035,034,034,034,033,033,033,032,032,031,031,031,030,030,030
!BYTE 029,029,029,028,028,028,027,027,027,026,026,026,025,025,025,025
!BYTE 024,024,024,023,023,023,022,022,022,021,021,021,021,020,020,020
!BYTE 019,019,019,019,018,018,018,018,017,017,017,017,016,016,016,016
!BYTE 015,015,015,015,014,014,014,014,013,013,013,013,012,012,012,012
!BYTE 012,011,011,011,011,010,010,010,010,010,009,009,009,009,009,009
!BYTE 008,008,008,008,008,007,007,007,007,007,007,006,006,006,006,006
!BYTE 006,005,005,005,005,005,005,005,004,004,004,004,004,004,004,004
!BYTE 003,003,003,003,003,003,003,003,002,002,002,002,002,002,002,002
!BYTE 002,002,001,001,001,001,001,001,001,001,001,001,001,001,001,001
!BYTE 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
!BYTE 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
!BYTE 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000
!BYTE 000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,001
!BYTE 001,001,001,001,001,001,001,001,001,001,001,001,001,002,002,002
!BYTE 002,002,002,002,002,002,002,003,003,003,003,003,003,003,003,004
!BYTE 004,004,004,004,004,004,004,005,005,005,005,005,005,005,006,006
!BYTE 006,006,006,006,007,007,007,007,007,007,008,008,008,008,008,009
!BYTE 009,009,009,009,009,010,010,010,010,010,011,011,011,011,012,012
!BYTE 012,012,012,013,013,013,013,014,014,014,014,015,015,015,015,016
!BYTE 016,016,016,017,017,017,017,018,018,018,018,019,019,019,019,020
!BYTE 020,020,021,021,021,021,022,022,022,023,023,023,024,024,024,025
!BYTE 025,025,025,026,026,026,027,027,027,028,028,028,029,029,029,030
!BYTE 030,030,031,031,031,032,032,033,033,033,034,034,034,035,035,036
!BYTE 036,036,037,037,037,038,038,039,039,039,040,040,041,041,041,042
!BYTE 042,043,043,043,044,044,045,045,045,046,046,047,047,048,048,049
!BYTE 049,049,050,050,051,051,052,052,053,053,053,054,054,055,055,056
!BYTE 056,057,057,058,058,059,059,060,060,061,061,062,062,063,063,064

!ALIGN 255,0
SINTAB:
 !BYTE    0,   0,   1,   2,   3,   3,   4,   5,   6,   7,   7,   8,   9,  10,  10,  11
 !BYTE   12,  13,  14,  14,  15,  16,  17,  17,  18,  19,  20,  20,  21,  22,  23,  24
 !BYTE   24,  25,  26,  27,  27,  28,  29,  30,  30,  31,  32,  33,  33,  34,  35,  36
 !BYTE   36,  37,  38,  39,  39,  40,  41,  42,  42,  43,  44,  44,  45,  46,  47,  47
 !BYTE   48,  49,  50,  50,  51,  52,  52,  53,  54,  55,  55,  56,  57,  57,  58,  59
 !BYTE   59,  60,  61,  61,  62,  63,  63,  64,  65,  65,  66,  67,  67,  68,  69,  69
 !BYTE   70,  71,  71,  72,  73,  73,  74,  75,  75,  76,  76,  77,  78,  78,  79,  79
 !BYTE   80,  81,  81,  82,  82,  83,  84,  84,  85,  85,  86,  87,  87,  88,  88,  89
 !BYTE   89,  90,  90,  91,  92,  92,  93,  93,  94,  94,  95,  95,  96,  96,  97,  97
 !BYTE   98,  98,  99,  99, 100, 100, 101, 101, 102, 102, 102, 103, 103, 104, 104, 105
 !BYTE  105, 106, 106, 106, 107, 107, 108, 108, 108, 109, 109, 110, 110, 110, 111, 111
 !BYTE  112, 112, 112, 113, 113, 113, 114, 114, 114, 115, 115, 115, 116, 116, 116, 117
 !BYTE  117, 117, 117, 118, 118, 118, 119, 119, 119, 119, 120, 120, 120, 120, 121, 121
 !BYTE  121, 121, 121, 122, 122, 122, 122, 123, 123, 123, 123, 123, 123, 124, 124, 124
 !BYTE  124, 124, 124, 125, 125, 125, 125, 125, 125, 125, 125, 125, 126, 126, 126, 126
 !BYTE  126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126
 !BYTE  126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126
 !BYTE  126, 126, 126, 126, 126, 125, 125, 125, 125, 125, 125, 125, 125, 124, 124, 124
 !BYTE  124, 124, 124, 124, 123, 123, 123, 123, 123, 122, 122, 122, 122, 122, 121, 121
 !BYTE  121, 121, 121, 120, 120, 120, 120, 119, 119, 119, 119, 118, 118, 118, 117, 117
 !BYTE  117, 116, 116, 116, 116, 115, 115, 115, 114, 114, 114, 113, 113, 113, 112, 112
 !BYTE  111, 111, 111, 110, 110, 110, 109, 109, 108, 108, 108, 107, 107, 106, 106, 105
 !BYTE  105, 105, 104, 104, 103, 103, 102, 102, 101, 101, 101, 100, 100,  99,  99,  98
 !BYTE   98,  97,  97,  96,  96,  95,  95,  94,  94,  93,  92,  92,  91,  91,  90,  90
 !BYTE   89,  89,  88,  88,  87,  86,  86,  85,  85,  84,  84,  83,  82,  82,  81,  81
 !BYTE   80,  79,  79,  78,  78,  77,  76,  76,  75,  74,  74,  73,  73,  72,  71,  71
 !BYTE   70,  69,  69,  68,  67,  67,  66,  65,  65,  64,  63,  63,  62,  61,  61,  60
 !BYTE   59,  59,  58,  57,  56,  56,  55,  54,  54,  53,  52,  52,  51,  50,  49,  49
 !BYTE   48,  47,  47,  46,  45,  44,  44,  43,  42,  41,  41,  40,  39,  38,  38,  37
 !BYTE   36,  35,  35,  34,  33,  32,  32,  31,  30,  29,  29,  28,  27,  26,  26,  25
 !BYTE   24,  23,  23,  22,  21,  20,  20,  19,  18,  17,  16,  16,  15,  14,  13,  13
 !BYTE   12,  11,  10,   9,   9,   8,   7,   6,   6,   5,   4,   3,   2,   2,   1,   0
 !BYTE    0,   0,  -1,  -2,  -3,  -4,  -4,  -5,  -6,  -7,  -7,  -8,  -9, -10, -11, -11
 !BYTE   -12, -13, -14, -14, -15, -16, -17, -18, -18, -19, -20, -21, -21, -22, -23, -24
 !BYTE   -24, -25, -26, -27, -27, -28, -29, -30, -31, -31, -32, -33, -34, -34, -35, -36
 !BYTE   -37, -37, -38, -39, -40, -40, -41, -42, -42, -43, -44, -45, -45, -46, -47, -48
 !BYTE   -48, -49, -50, -50, -51, -52, -53, -53, -54, -55, -55, -56, -57, -57, -58, -59
 !BYTE   -60, -60, -61, -62, -62, -63, -64, -64, -65, -66, -66, -67, -68, -68, -69, -70
 !BYTE   -70, -71, -72, -72, -73, -73, -74, -75, -75, -76, -77, -77, -78, -78, -79, -80
 !BYTE   -80, -81, -81, -82, -83, -83, -84, -84, -85, -86, -86, -87, -87, -88, -88, -89
 !BYTE   -89, -90, -91, -91, -92, -92, -93, -93, -94, -94, -95, -95, -96, -96, -97, -97
 !BYTE   -98, -98, -99, -99,-100,-100,-101,-101,-102,-102,-103,-103,-103,-104,-104,-105
 !BYTE  -105,-106,-106,-106,-107,-107,-108,-108,-109,-109,-109,-110,-110,-110,-111,-111
 !BYTE  -112,-112,-112,-113,-113,-113,-114,-114,-114,-115,-115,-115,-116,-116,-116,-117
 !BYTE  -117,-117,-118,-118,-118,-118,-119,-119,-119,-119,-120,-120,-120,-120,-121,-121
 !BYTE  -121,-121,-122,-122,-122,-122,-122,-123,-123,-123,-123,-123,-123,-124,-124,-124
 !BYTE  -124,-124,-124,-125,-125,-125,-125,-125,-125,-125,-125,-125,-126,-126,-126,-126
 !BYTE  -126,-126,-126,-126,-126,-126,-126,-126,-126,-126,-126,-126,-126,-126,-126,-126
 !BYTE  -126,-126,-126,-126,-126,-126,-126,-126,-126,-126,-126,-126,-126,-126,-126,-126
 !BYTE  -126,-126,-126,-126,-126,-125,-125,-125,-125,-125,-125,-125,-125,-124,-124,-124
 !BYTE  -124,-124,-124,-124,-123,-123,-123,-123,-123,-122,-122,-122,-122,-122,-121,-121
 !BYTE  -121,-121,-120,-120,-120,-120,-120,-119,-119,-119,-118,-118,-118,-118,-117,-117
 !BYTE  -117,-116,-116,-116,-115,-115,-115,-115,-114,-114,-114,-113,-113,-112,-112,-112
 !BYTE  -111,-111,-111,-110,-110,-109,-109,-109,-108,-108,-107,-107,-107,-106,-106,-105
 !BYTE  -105,-105,-104,-104,-103,-103,-102,-102,-101,-101,-100,-100, -99, -99, -98, -98
 !BYTE   -97, -97, -96, -96, -95, -95, -94, -94, -93, -93, -92, -92, -91, -91, -90, -90
 !BYTE   -89, -89, -88, -87, -87, -86, -86, -85, -85, -84, -83, -83, -82, -82, -81, -80
 !BYTE   -80, -79, -79, -78, -77, -77, -76, -76, -75, -74, -74, -73, -72, -72, -71, -70
 !BYTE   -70, -69, -69, -68, -67, -67, -66, -65, -65, -64, -63, -63, -62, -61, -60, -60
 !BYTE   -59, -58, -58, -57, -56, -56, -55, -54, -54, -53, -52, -51, -51, -50, -49, -49
 !BYTE   -48, -47, -46, -46, -45, -44, -43, -43, -42, -41, -41, -40, -39, -38, -38, -37
 !BYTE   -36, -35, -35, -34, -33, -32, -32, -31, -30, -29, -29, -28, -27, -26, -25, -25
 !BYTE   -24, -23, -22, -22, -21, -20, -19, -19, -18, -17, -16, -16, -15, -14, -13, -12
 !BYTE   -12, -11, -10,  -9,  -9,  -8,  -7,  -6,  -5,  -5,  -4,  -3,  -2,  -2,  -1,   0

SCN0_LN_000 = SCRN0 +(00*320)
SCN0_LN_001 = SCN0_LN_000+1
SCN0_LN_002 = SCN0_LN_000+2
SCN0_LN_003 = SCN0_LN_000+3
SCN0_LN_004 = SCN0_LN_000+4
SCN0_LN_005 = SCN0_LN_000+5
SCN0_LN_006 = SCN0_LN_000+6
SCN0_LN_007 = SCN0_LN_000+7

SCN0_LN_008 = SCRN0+(01*320)
SCN0_LN_009 = SCN0_LN_008+1
SCN0_LN_010 = SCN0_LN_008+2
SCN0_LN_011 = SCN0_LN_008+3
SCN0_LN_012 = SCN0_LN_008+4
SCN0_LN_013 = SCN0_LN_008+5
SCN0_LN_014 = SCN0_LN_008+6
SCN0_LN_015 = SCN0_LN_008+7

SCN0_LN_016 = SCRN0+(02*320)
SCN0_LN_017 = SCN0_LN_016+1
SCN0_LN_018 = SCN0_LN_016+2
SCN0_LN_019 = SCN0_LN_016+3
SCN0_LN_020 = SCN0_LN_016+4
SCN0_LN_021 = SCN0_LN_016+5
SCN0_LN_022 = SCN0_LN_016+6
SCN0_LN_023 = SCN0_LN_016+7

SCN0_LN_024 = SCRN0+(03*320)
SCN0_LN_025 = SCN0_LN_024+1
SCN0_LN_026 = SCN0_LN_024+2
SCN0_LN_027 = SCN0_LN_024+3
SCN0_LN_028 = SCN0_LN_024+4
SCN0_LN_029 = SCN0_LN_024+5
SCN0_LN_030 = SCN0_LN_024+6
SCN0_LN_031 = SCN0_LN_024+7

SCN0_LN_032 = SCRN0+(04*320)
SCN0_LN_033 = SCN0_LN_032+1
SCN0_LN_034 = SCN0_LN_032+2
SCN0_LN_035 = SCN0_LN_032+3
SCN0_LN_036 = SCN0_LN_032+4
SCN0_LN_037 = SCN0_LN_032+5
SCN0_LN_038 = SCN0_LN_032+6
SCN0_LN_039 = SCN0_LN_032+7

SCN0_LN_040 = SCRN0+(05*320)
SCN0_LN_041 = SCN0_LN_040+1
SCN0_LN_042 = SCN0_LN_040+2
SCN0_LN_043 = SCN0_LN_040+3
SCN0_LN_044 = SCN0_LN_040+4
SCN0_LN_045 = SCN0_LN_040+5
SCN0_LN_046 = SCN0_LN_040+6
SCN0_LN_047 = SCN0_LN_040+7

SCN0_LN_048 = SCRN0+(06*320)
SCN0_LN_049 = SCN0_LN_048+1
SCN0_LN_050 = SCN0_LN_048+2
SCN0_LN_051 = SCN0_LN_048+3
SCN0_LN_052 = SCN0_LN_048+4
SCN0_LN_053 = SCN0_LN_048+5
SCN0_LN_054 = SCN0_LN_048+6
SCN0_LN_055 = SCN0_LN_048+7

SCN0_LN_056 = SCRN0+(07*320)
SCN0_LN_057 = SCN0_LN_056+1
SCN0_LN_058 = SCN0_LN_056+2
SCN0_LN_059 = SCN0_LN_056+3
SCN0_LN_060 = SCN0_LN_056+4
SCN0_LN_061 = SCN0_LN_056+5
SCN0_LN_062 = SCN0_LN_056+6
SCN0_LN_063 = SCN0_LN_056+7

SCN0_LN_064 = SCRN0+(08*320)
SCN0_LN_065 = SCN0_LN_064+1
SCN0_LN_066 = SCN0_LN_064+2
SCN0_LN_067 = SCN0_LN_064+3
SCN0_LN_068 = SCN0_LN_064+4
SCN0_LN_069 = SCN0_LN_064+5
SCN0_LN_070 = SCN0_LN_064+6
SCN0_LN_071 = SCN0_LN_064+7

SCN0_LN_072 = SCRN0+(09*320)
SCN0_LN_073 = SCN0_LN_072+1
SCN0_LN_074 = SCN0_LN_072+2
SCN0_LN_075 = SCN0_LN_072+3
SCN0_LN_076 = SCN0_LN_072+4
SCN0_LN_077 = SCN0_LN_072+5
SCN0_LN_078 = SCN0_LN_072+6
SCN0_LN_079 = SCN0_LN_072+7

SCN0_LN_080 = SCRN0+(10*320)
SCN0_LN_081 = SCN0_LN_080+1
SCN0_LN_082 = SCN0_LN_080+2
SCN0_LN_083 = SCN0_LN_080+3
SCN0_LN_084 = SCN0_LN_080+4
SCN0_LN_085 = SCN0_LN_080+5
SCN0_LN_086 = SCN0_LN_080+6
SCN0_LN_087 = SCN0_LN_080+7

SCN0_LN_088 = SCRN0+(11*320)
SCN0_LN_089 = SCN0_LN_088+1
SCN0_LN_090 = SCN0_LN_088+2
SCN0_LN_091 = SCN0_LN_088+3
SCN0_LN_092 = SCN0_LN_088+4
SCN0_LN_093 = SCN0_LN_088+5
SCN0_LN_094 = SCN0_LN_088+6
SCN0_LN_095 = SCN0_LN_088+7

SCN0_LN_096 = SCRN0+(12*320)
SCN0_LN_097 = SCN0_LN_096+1
SCN0_LN_098 = SCN0_LN_096+2
SCN0_LN_099 = SCN0_LN_096+3
SCN0_LN_100 = SCN0_LN_096+4
SCN0_LN_101 = SCN0_LN_096+5
SCN0_LN_102 = SCN0_LN_096+6
SCN0_LN_103 = SCN0_LN_096+7

SCN0_LN_104 = SCRN0+(13*320)
SCN0_LN_105 = SCN0_LN_104+1
SCN0_LN_106 = SCN0_LN_104+2
SCN0_LN_107 = SCN0_LN_104+3
SCN0_LN_108 = SCN0_LN_104+4
SCN0_LN_109 = SCN0_LN_104+5
SCN0_LN_110 = SCN0_LN_104+6
SCN0_LN_111 = SCN0_LN_104+7

SCN0_LN_112 = SCRN0+(14*320)
SCN0_LN_113 = SCN0_LN_112+1
SCN0_LN_114 = SCN0_LN_112+2
SCN0_LN_115 = SCN0_LN_112+3
SCN0_LN_116 = SCN0_LN_112+4
SCN0_LN_117 = SCN0_LN_112+5
SCN0_LN_118 = SCN0_LN_112+6
SCN0_LN_119 = SCN0_LN_112+7

SCN0_LN_120 = SCRN0+(15*320)
SCN0_LN_121 = SCN0_LN_120+1
SCN0_LN_122 = SCN0_LN_120+2
SCN0_LN_123 = SCN0_LN_120+3
SCN0_LN_124 = SCN0_LN_120+4
SCN0_LN_125 = SCN0_LN_120+5
SCN0_LN_126 = SCN0_LN_120+6
SCN0_LN_127 = SCN0_LN_120+7

;SCN0_LN_128 = SCRN0+(16*320)
;SCN0_LN_129 = SCN0_LN_128+1
;SCN0_LN_130 = SCN0_LN_128+2
;SCN0_LN_131 = SCN0_LN_128+3
;SCN0_LN_132 = SCN0_LN_128+4
;SCN0_LN_133 = SCN0_LN_128+5
;SCN0_LN_134 = SCN0_LN_128+6
;SCN0_LN_135 = SCN0_LN_128+7

;SCN0_LN_136 = SCRN0+(17*320)
;SCN0_LN_137 = SCN0_LN_136+1
;SCN0_LN_138 = SCN0_LN_136+2
;SCN0_LN_139 = SCN0_LN_136+3
;SCN0_LN_140 = SCN0_LN_136+4
;SCN0_LN_141 = SCN0_LN_136+5
;SCN0_LN_142 = SCN0_LN_136+6
;SCN0_LN_143 = SCN0_LN_136+7

;SCN0_LN_144 = SCRN0+(18*320)
;SCN0_LN_145 = SCN0_LN_144+1
;SCN0_LN_146 = SCN0_LN_144+2
;SCN0_LN_147 = SCN0_LN_144+3
;SCN0_LN_148 = SCN0_LN_144+4
;SCN0_LN_149 = SCN0_LN_144+5
;SCN0_LN_150 = SCN0_LN_144+6
;SCN0_LN_151 = SCN0_LN_144+7

;SCN0_LN_152 = SCRN0+(19*320)
;SCN0_LN_153 = SCN0_LN_152+1
;SCN0_LN_154 = SCN0_LN_152+2
;SCN0_LN_155 = SCN0_LN_152+3
;SCN0_LN_156 = SCN0_LN_152+4
;SCN0_LN_157 = SCN0_LN_152+5
;SCN0_LN_158 = SCN0_LN_152+6
;SCN0_LN_159 = SCN0_LN_152+7

;SCN0_LN_160 = SCRN0+(20*320)
;SCN0_LN_161 = SCN0_LN_160+1
;SCN0_LN_162 = SCN0_LN_160+2
;SCN0_LN_163 = SCN0_LN_160+3
;SCN0_LN_164 = SCN0_LN_160+4
;SCN0_LN_165 = SCN0_LN_160+5
;SCN0_LN_166 = SCN0_LN_160+6
;SCN0_LN_167 = SCN0_LN_160+7

;SCN0_LN_168 = SCRN0+(21*320)
;SCN0_LN_169 = SCN0_LN_168+1
;SCN0_LN_170 = SCN0_LN_168+2
;SCN0_LN_171 = SCN0_LN_168+3
;SCN0_LN_172 = SCN0_LN_168+4
;SCN0_LN_173 = SCN0_LN_168+5
;SCN0_LN_174 = SCN0_LN_168+6
;SCN0_LN_175 = SCN0_LN_168+7

;SCN0_LN_176 = SCRN0+(22*320)
;SCN0_LN_177 = SCN0_LN_176+1
;SCN0_LN_178 = SCN0_LN_176+2
;SCN0_LN_179 = SCN0_LN_176+3
;SCN0_LN_180 = SCN0_LN_176+4
;SCN0_LN_181 = SCN0_LN_176+5
;SCN0_LN_182 = SCN0_LN_176+6
;SCN0_LN_183 = SCN0_LN_176+7

;SCN0_LN_184 = SCRN0+(23*320)
;SCN0_LN_185 = SCN0_LN_184+1
;SCN0_LN_186 = SCN0_LN_184+2
;SCN0_LN_187 = SCN0_LN_184+3
;SCN0_LN_188 = SCN0_LN_184+4
;SCN0_LN_189 = SCN0_LN_184+5
;SCN0_LN_190 = SCN0_LN_184+6
;SCN0_LN_191 = SCN0_LN_184+7

;SCN0_LN_192 = SCRN0+(24*320)
;SCN0_LN_193 = SCN0_LN_192+1
;SCN0_LN_194 = SCN0_LN_192+2
;SCN0_LN_195 = SCN0_LN_192+3
;SCN0_LN_196 = SCN0_LN_192+4
;SCN0_LN_197 = SCN0_LN_192+5
;SCN0_LN_198 = SCN0_LN_192+6
;SCN0_LN_199 = SCN0_LN_192+7

SCN1_LN_000 = SCRN1+(00*320)
SCN1_LN_001 = SCN1_LN_000+1
SCN1_LN_002 = SCN1_LN_000+2
SCN1_LN_003 = SCN1_LN_000+3
SCN1_LN_004 = SCN1_LN_000+4
SCN1_LN_005 = SCN1_LN_000+5
SCN1_LN_006 = SCN1_LN_000+6
SCN1_LN_007 = SCN1_LN_000+7

SCN1_LN_008 = SCRN1+(01*320)
SCN1_LN_009 = SCN1_LN_008+1
SCN1_LN_010 = SCN1_LN_008+2
SCN1_LN_011 = SCN1_LN_008+3
SCN1_LN_012 = SCN1_LN_008+4
SCN1_LN_013 = SCN1_LN_008+5
SCN1_LN_014 = SCN1_LN_008+6
SCN1_LN_015 = SCN1_LN_008+7

SCN1_LN_016 = SCRN1+(02*320)
SCN1_LN_017 = SCN1_LN_016+1
SCN1_LN_018 = SCN1_LN_016+2
SCN1_LN_019 = SCN1_LN_016+3
SCN1_LN_020 = SCN1_LN_016+4
SCN1_LN_021 = SCN1_LN_016+5
SCN1_LN_022 = SCN1_LN_016+6
SCN1_LN_023 = SCN1_LN_016+7

SCN1_LN_024 = SCRN1+(03*320)
SCN1_LN_025 = SCN1_LN_024+1
SCN1_LN_026 = SCN1_LN_024+2
SCN1_LN_027 = SCN1_LN_024+3
SCN1_LN_028 = SCN1_LN_024+4
SCN1_LN_029 = SCN1_LN_024+5
SCN1_LN_030 = SCN1_LN_024+6
SCN1_LN_031 = SCN1_LN_024+7

SCN1_LN_032 = SCRN1+(04*320)
SCN1_LN_033 = SCN1_LN_032+1
SCN1_LN_034 = SCN1_LN_032+2
SCN1_LN_035 = SCN1_LN_032+3
SCN1_LN_036 = SCN1_LN_032+4
SCN1_LN_037 = SCN1_LN_032+5
SCN1_LN_038 = SCN1_LN_032+6
SCN1_LN_039 = SCN1_LN_032+7

SCN1_LN_040 = SCRN1+(05*320)
SCN1_LN_041 = SCN1_LN_040+1
SCN1_LN_042 = SCN1_LN_040+2
SCN1_LN_043 = SCN1_LN_040+3
SCN1_LN_044 = SCN1_LN_040+4
SCN1_LN_045 = SCN1_LN_040+5
SCN1_LN_046 = SCN1_LN_040+6
SCN1_LN_047 = SCN1_LN_040+7

SCN1_LN_048 = SCRN1+(06*320)
SCN1_LN_049 = SCN1_LN_048+1
SCN1_LN_050 = SCN1_LN_048+2
SCN1_LN_051 = SCN1_LN_048+3
SCN1_LN_052 = SCN1_LN_048+4
SCN1_LN_053 = SCN1_LN_048+5
SCN1_LN_054 = SCN1_LN_048+6
SCN1_LN_055 = SCN1_LN_048+7

SCN1_LN_056 = SCRN1+(07*320)
SCN1_LN_057 = SCN1_LN_056+1
SCN1_LN_058 = SCN1_LN_056+2
SCN1_LN_059 = SCN1_LN_056+3
SCN1_LN_060 = SCN1_LN_056+4
SCN1_LN_061 = SCN1_LN_056+5
SCN1_LN_062 = SCN1_LN_056+6
SCN1_LN_063 = SCN1_LN_056+7

SCN1_LN_064 = SCRN1+(08*320)
SCN1_LN_065 = SCN1_LN_064+1
SCN1_LN_066 = SCN1_LN_064+2
SCN1_LN_067 = SCN1_LN_064+3
SCN1_LN_068 = SCN1_LN_064+4
SCN1_LN_069 = SCN1_LN_064+5
SCN1_LN_070 = SCN1_LN_064+6
SCN1_LN_071 = SCN1_LN_064+7

SCN1_LN_072 = SCRN1+(09*320)
SCN1_LN_073 = SCN1_LN_072+1
SCN1_LN_074 = SCN1_LN_072+2
SCN1_LN_075 = SCN1_LN_072+3
SCN1_LN_076 = SCN1_LN_072+4
SCN1_LN_077 = SCN1_LN_072+5
SCN1_LN_078 = SCN1_LN_072+6
SCN1_LN_079 = SCN1_LN_072+7

SCN1_LN_080 = SCRN1+(10*320)
SCN1_LN_081 = SCN1_LN_080+1
SCN1_LN_082 = SCN1_LN_080+2
SCN1_LN_083 = SCN1_LN_080+3
SCN1_LN_084 = SCN1_LN_080+4
SCN1_LN_085 = SCN1_LN_080+5
SCN1_LN_086 = SCN1_LN_080+6
SCN1_LN_087 = SCN1_LN_080+7

SCN1_LN_088 = SCRN1+(11*320)
SCN1_LN_089 = SCN1_LN_088+1
SCN1_LN_090 = SCN1_LN_088+2
SCN1_LN_091 = SCN1_LN_088+3
SCN1_LN_092 = SCN1_LN_088+4
SCN1_LN_093 = SCN1_LN_088+5
SCN1_LN_094 = SCN1_LN_088+6
SCN1_LN_095 = SCN1_LN_088+7

SCN1_LN_096 = SCRN1+(12*320)
SCN1_LN_097 = SCN1_LN_096+1
SCN1_LN_098 = SCN1_LN_096+2
SCN1_LN_099 = SCN1_LN_096+3
SCN1_LN_100 = SCN1_LN_096+4
SCN1_LN_101 = SCN1_LN_096+5
SCN1_LN_102 = SCN1_LN_096+6
SCN1_LN_103 = SCN1_LN_096+7

SCN1_LN_104 = SCRN1+(13*320)
SCN1_LN_105 = SCN1_LN_104+1
SCN1_LN_106 = SCN1_LN_104+2
SCN1_LN_107 = SCN1_LN_104+3
SCN1_LN_108 = SCN1_LN_104+4
SCN1_LN_109 = SCN1_LN_104+5
SCN1_LN_110 = SCN1_LN_104+6
SCN1_LN_111 = SCN1_LN_104+7

SCN1_LN_112 = SCRN1+(14*320)
SCN1_LN_113 = SCN1_LN_112+1
SCN1_LN_114 = SCN1_LN_112+2
SCN1_LN_115 = SCN1_LN_112+3
SCN1_LN_116 = SCN1_LN_112+4
SCN1_LN_117 = SCN1_LN_112+5
SCN1_LN_118 = SCN1_LN_112+6
SCN1_LN_119 = SCN1_LN_112+7

SCN1_LN_120 = SCRN1+(15*320)
SCN1_LN_121 = SCN1_LN_120+1
SCN1_LN_122 = SCN1_LN_120+2
SCN1_LN_123 = SCN1_LN_120+3
SCN1_LN_124 = SCN1_LN_120+4
SCN1_LN_125 = SCN1_LN_120+5
SCN1_LN_126 = SCN1_LN_120+6
SCN1_LN_127 = SCN1_LN_120+7

;SCN1_LN_128 = SCRN1+(16*320)
;SCN1_LN_129 = SCN1_LN_128+1
;SCN1_LN_130 = SCN1_LN_128+2
;SCN1_LN_131 = SCN1_LN_128+3
;SCN1_LN_132 = SCN1_LN_128+4
;SCN1_LN_133 = SCN1_LN_128+5
;SCN1_LN_134 = SCN1_LN_128+6
;SCN1_LN_135 = SCN1_LN_128+7

;SCN1_LN_136 = SCRN1+(17*320)
;SCN1_LN_137 = SCN1_LN_136+1
;SCN1_LN_138 = SCN1_LN_136+2
;SCN1_LN_139 = SCN1_LN_136+3
;SCN1_LN_140 = SCN1_LN_136+4
;SCN1_LN_141 = SCN1_LN_136+5
;SCN1_LN_142 = SCN1_LN_136+6
;SCN1_LN_143 = SCN1_LN_136+7

;SCN1_LN_144 = SCRN1+(18*320)
;SCN1_LN_145 = SCN1_LN_144+1
;SCN1_LN_146 = SCN1_LN_144+2
;SCN1_LN_147 = SCN1_LN_144+3
;SCN1_LN_148 = SCN1_LN_144+4
;SCN1_LN_149 = SCN1_LN_144+5
;SCN1_LN_150 = SCN1_LN_144+6
;SCN1_LN_151 = SCN1_LN_144+7

;SCN1_LN_152 = SCRN1+(19*320)
;SCN1_LN_153 = SCN1_LN_152+1
;SCN1_LN_154 = SCN1_LN_152+2
;SCN1_LN_155 = SCN1_LN_152+3
;SCN1_LN_156 = SCN1_LN_152+4
;SCN1_LN_157 = SCN1_LN_152+5
;SCN1_LN_158 = SCN1_LN_152+6
;SCN1_LN_159 = SCN1_LN_152+7

;SCN1_LN_160 = SCRN1+(20*320)
;SCN1_LN_161 = SCN1_LN_160+1
;SCN1_LN_162 = SCN1_LN_160+2
;SCN1_LN_163 = SCN1_LN_160+3
;SCN1_LN_164 = SCN1_LN_160+4
;SCN1_LN_165 = SCN1_LN_160+5
;SCN1_LN_166 = SCN1_LN_160+6
;SCN1_LN_167 = SCN1_LN_160+7

;SCN1_LN_168 = SCRN1+(21*320)
;SCN1_LN_169 = SCN1_LN_168+1
;SCN1_LN_170 = SCN1_LN_168+2
;SCN1_LN_171 = SCN1_LN_168+3
;SCN1_LN_172 = SCN1_LN_168+4
;SCN1_LN_173 = SCN1_LN_168+5
;SCN1_LN_174 = SCN1_LN_168+6
;SCN1_LN_175 = SCN1_LN_168+7

;SCN1_LN_176 = SCRN1+(22*320)
;SCN1_LN_177 = SCN1_LN_176+1
;SCN1_LN_178 = SCN1_LN_176+2
;SCN1_LN_179 = SCN1_LN_176+3
;SCN1_LN_180 = SCN1_LN_176+4
;SCN1_LN_181 = SCN1_LN_176+5
;SCN1_LN_182 = SCN1_LN_176+6
;SCN1_LN_183 = SCN1_LN_176+7

;SCN1_LN_184 = SCRN1+(23*320)
;SCN1_LN_185 = SCN1_LN_184+1
;SCN1_LN_186 = SCN1_LN_184+2
;SCN1_LN_187 = SCN1_LN_184+3
;SCN1_LN_188 = SCN1_LN_184+4
;SCN1_LN_189 = SCN1_LN_184+5
;SCN1_LN_190 = SCN1_LN_184+6
;SCN1_LN_191 = SCN1_LN_184+7

;SCN1_LN_192 = SCRN1+(24*320)
;SCN1_LN_193 = SCN1_LN_192+1
;SCN1_LN_194 = SCN1_LN_192+2
;SCN1_LN_195 = SCN1_LN_192+3
;SCN1_LN_196 = SCN1_LN_192+4
;SCN1_LN_197 = SCN1_LN_192+5
;SCN1_LN_198 = SCN1_LN_192+6
;SCN1_LN_199 = SCN1_LN_192+7
